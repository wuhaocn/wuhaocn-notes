{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1622429690000},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1622429690000},{"_id":"themes/pure/README.cn.md","hash":"9c713dd259c8ba65c78ab9e9a0f20cf43613d9b6","modified":1631632280139},{"_id":"themes/pure/README.md","hash":"c3d65aa0acd0ecc6bf84e381931dd2ab0a216c8e","modified":1631632280192},{"_id":"themes/pure/_config.yml","hash":"14c8792f02756682bc81144d2ce6ace3f0765cbf","modified":1634533455630},{"_id":"themes/pure/_config.yml.example","hash":"5289c73c172ce91c4940798bbb3b3d88470a444f","modified":1627203176374},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1622429690000},{"_id":"themes/pure/languages/default.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1622429690000},{"_id":"themes/pure/languages/en.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1622429690000},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1622429690000},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1622429690000},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1622429690000},{"_id":"themes/pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1622429690000},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1622429690000},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1622429690000},{"_id":"themes/pure/layout/categories.ejs","hash":"22a2bc1712dd9ba1a3027e875d636132d334fb00","modified":1622429690000},{"_id":"themes/pure/layout/category.ejs","hash":"3ca5651bbce7b0c280c906468f2eb18c2e55ebcb","modified":1622429690000},{"_id":"themes/pure/layout/layout.ejs","hash":"a29ab2e881954a252bfc0dc1a7eb5aa52768dd2a","modified":1622429690000},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1622429690000},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1622429690000},{"_id":"themes/pure/layout/post.ejs","hash":"3434b74fd1141b5a723d923000f8428d4c579828","modified":1630938587118},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1622429690000},{"_id":"themes/pure/layout/tag.ejs","hash":"df60564c162f7ad3422f8959dfea19351857a7cd","modified":1622429690000},{"_id":"themes/pure/layout/tags.ejs","hash":"29f19a6ed10f8b1f069259a7aeaaacddcfaa2ed4","modified":1622429690000},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1622429690000},{"_id":"themes/pure/source/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1622429690000},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/bug_report.md","hash":"83d211c67c12e8c1f6e9f796cfd0cecbf5160e15","modified":1622429690000},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/custom.md","hash":"84208538d48505ee8e49812cb336eb9882e08dc7","modified":1622429690000},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"fbec5bc463d09755e93416564e03db1d303fb45f","modified":1631632205144},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1622429690000},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1622429690000},{"_id":"themes/pure/_source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1622429690000},{"_id":"themes/pure/_source/about/index.md","hash":"9c95cabb533409d06daefc4295021ad199761efc","modified":1622429690000},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1622429690000},{"_id":"themes/pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1622429690000},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1622429690000},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1622429690000},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1622429690000},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"c02342a354fb10f63f9e3ebd67bb8fb1496c2ce7","modified":1627203176362},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1622429690000},{"_id":"themes/pure/layout/_common/script.ejs","hash":"0031114d2a58f8601c2869f78ceedc75a10be90d","modified":1622429690000},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1622429690000},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1622429690000},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1622429690000},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1622429690000},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1622429690000},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1622429690000},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1622429690000},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1622429690000},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1622429690000},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1622429690000},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1622429690000},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"0f9b71de0087d1f777d92c5a0f3873971aec5a5b","modified":1622429690000},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"9f755b0da1ea928dece32c2050d8a04b3a9fb13b","modified":1622429690000},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"41a319642da5af07d6cfb8525796aa610b721879","modified":1622429690000},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"46da1ee327b8af107335146bd8fc131eee6c9c4f","modified":1622429690000},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1622429690000},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1622429690000},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1622429690000},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1622429690000},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"ee21c4e7ccac26ff2ab6d1d178447fd11fea4d7e","modified":1622429690000},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1622429690000},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1622429690000},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"fb9b5f16029f2ccef4b83cf4facfdcdd748b65b4","modified":1622429690000},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"14f2e7d4c1055ff6a5f5867dc0e9a9f6f4c28fe1","modified":1622429690000},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1622429690000},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1622429690000},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1622429690000},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1622429690000},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1622429690000},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1622429690000},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1622429690000},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1622429690000},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1622429690000},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1622429690000},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1622429690000},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1622429690000},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1622429690000},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1622429690000},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1622429690000},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1622429690000},{"_id":"themes/pure/source/images/avatar.png","hash":"a728ae7e9cdfe0ae85c25c4c024d4eb9a3729afb","modified":1627205308000},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1622429690000},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1622429690000},{"_id":"themes/pure/source/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1622429690000},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1622429690000},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1622429690000},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1622429690000},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1622429690000},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"0a99c99992fb1e97bf5a57e05179f5680d69dcc8","modified":1622429690000},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1622429690000},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1622429690000},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"95eabc0fe4033ec61b240a16eeaf7dc62a9e3da1","modified":1622429690000},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1622429690000},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1622429690000},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1622429690000},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1622429690000},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1622429690000},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1622429690000},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1622429690000},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1622429690000},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1622429690000},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1622429690000},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"fb01f1631c3ae7fe6211dc03233506cb344229be","modified":1622429690000},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1622429690000},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1622429690000},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1622429690000},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1622429690000},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1622429690000},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"a728ae7e9cdfe0ae85c25c4c024d4eb9a3729afb","modified":1627205308000},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1622429690000},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"a728ae7e9cdfe0ae85c25c4c024d4eb9a3729afb","modified":1627205308000},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1622429690000},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1622429690000},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1622429690000},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1622429690000},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1622429690000},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1622429690000},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1622429690000},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1622429690000},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1622429690000},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1622429690000},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1622429690000},{"_id":"themes/pure/source/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1622429690000},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1622429690000},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1622429690000},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1622429690000},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/web/sql/tmp.sql","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630938587094},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/im/sql/tmp.back","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630938587093},{"_id":"source/about/index.md","hash":"9c95cabb533409d06daefc4295021ad199761efc","modified":1622429690000},{"_id":"source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1622429690000},{"_id":"source/categories/index.md","hash":"83ef3fe8852fc9a5b4952a78e9976a9256a309d4","modified":1627206150753},{"_id":"source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1622429690000},{"_id":"source/repository/index.md","hash":"1c4523069ab726119bca33648054870f3ee92717","modified":1627205637438},{"_id":"source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1622429690000},{"_id":"source/_posts/tool/hexo-config.md","hash":"10a78e03d2c21f71e33b90adb9bf7362ead8949c","modified":1631632204906},{"_id":"source/_posts/tool/hexo-install.md","hash":"fbdefa30beb3e8754ea0d95ced56138220f7b2e1","modified":1627060503485},{"_id":"source/_posts/network/5G移动网络.md","hash":"d3c270745013be6163658b21cc36667cec0806dc","modified":1630938587111},{"_id":"source/_posts/algorithm/ai/ai.md","hash":"3d0b8eedd41dcd2a5057da121b509eeffb3ef7d8","modified":1631632065070},{"_id":"source/_posts/algorithm/sort/1.冒泡排序.md","hash":"5ce09fbd8558d8bd50b5c33e3562bd85994be0b5","modified":1631632065036},{"_id":"source/_posts/algorithm/分布式算法/分布式raft算法.md","hash":"a1cb5f8cb2d6186c4015d803c0b5892150e52a1c","modified":1631631261746},{"_id":"source/_posts/algorithm/sort/0.选择排序.md","hash":"45e2efbaed41ed044fa378f38efc08d76d75ce32","modified":1631632065073},{"_id":"source/_posts/algorithm/sort/3-快速排序.md","hash":"29cc05f77aa99ed40a6e16e9f1f2d0b1f278eff8","modified":1631632065052},{"_id":"source/_posts/algorithm/sort/4-归并排序.md","hash":"b2f3ccd3c8a4aa3e9c598e70a48085126155f853","modified":1631632065063},{"_id":"source/_posts/algorithm/sort/5-希尔排序.md","hash":"e2f2df516ae206eb57836c80d8557e66beb7893d","modified":1631632065066},{"_id":"source/_posts/algorithm/sort/2.插入排序.md","hash":"0309d1daf476e7c42462982a4ed18a59fe02894c","modified":1631632065049},{"_id":"source/_posts/algorithm/sort/6-堆排序.md","hash":"d4a182fcce984d28e0f7265fcfdfadd9e1809b8c","modified":1631632065056},{"_id":"source/_posts/algorithm/sort/7.计数排序.md","hash":"9cf00531a406b1a3bd0f036a5c4ac0740d2f78f3","modified":1631632065045},{"_id":"source/_posts/algorithm/sort/8-桶排序.md","hash":"f65486917bb35e533f748e161c983162d724f55c","modified":1631632065059},{"_id":"source/_posts/algorithm/sort/9-基数排序.md","hash":"2ac4c6bd59bbfaad1adbc54963de7f750bc52715","modified":1631632065041},{"_id":"source/_posts/devops/docker/ftp服务搭建.md","hash":"b4df1c8518ce645d30b70f1b4256d3c2dd032459","modified":1630938587094},{"_id":"source/_posts/devops/docker/jenkins搭建.md","hash":"114fc1e371e8b13fd00b148e3a4a2e39824fb7bc","modified":1630938587095},{"_id":"source/_posts/devops/docker/prometheus-grafana.md","hash":"89aff03ca5f725257b6d0db2bc338abf071c7356","modified":1631630693221},{"_id":"source/_posts/devops/docker/nexus服务搭建.md","hash":"65231e9f0b3f3570f4e23d74f839f41706addd17","modified":1630938587095},{"_id":"source/_posts/devops/docker/一体化环境搭建.md","hash":"9ac0e9e512285e11c1d46c91efa6e45b1f5d4690","modified":1630938587095},{"_id":"source/_posts/devops/docker/数据环境.md","hash":"1dd07a586bf140504842946572bfa519316395d4","modified":1630938587096},{"_id":"source/_posts/devops/docker/基础环境.md","hash":"f382761bfab3fac619212e7921dd46bbc25311b0","modified":1630938587095},{"_id":"source/_posts/language/jvm/JVM内存与线程.md","hash":"3fcc6a2129ee523c643eea0caaadb1e54c69b691","modified":1627729847929},{"_id":"source/_posts/language/jvm/JVM优秀文章.md","hash":"419955a523d4341a5cefb7c09beddc0e51c34bf4","modified":1627729847898},{"_id":"source/_posts/language/jvm/JVM垃圾回收.md","hash":"fe56014f4244f88206bcd8f436511a39c0a7281c","modified":1627729847902},{"_id":"source/_posts/language/jvm/JVM内存模型.md","hash":"d665eb22b44cc90356a2eae938c1106671af6e1e","modified":1627729847895},{"_id":"source/_posts/language/jvm/JVM常见参数设置.md","hash":"847ff20585ee2fe0e9126b093ac04985e02081a0","modified":1627729847883},{"_id":"source/_posts/language/jvm/JVM性能调优的6大步骤-关键调优参数详解.md","hash":"5ac7fb908b6860f76674b46b07e305957954bb52","modified":1627729847909},{"_id":"source/_posts/language/jvm/JVM类加载机制.md","hash":"c18df39482e8144f80d0110fc801150fbd922bf9","modified":1627729847917},{"_id":"source/_posts/language/jvm/JVM性能监控及故障分析工具.md","hash":"9d4f5300e264369b150240b0da5cc753b17f7d77","modified":1627729847932},{"_id":"source/_posts/language/jvm/JVM软引用和弱引用.md","hash":"cee0747b339bbdda7bbc53d1a6a0a3f224a278b9","modified":1627729847935},{"_id":"source/_posts/language/shell/linux防火墙.md","hash":"eed9e8fb4e9d70cd3c2bc715ed2b27001ed505bb","modified":1630938587098},{"_id":"source/_posts/language/shell/修改机器服务端IP.md","hash":"e46998cb76718e9ab2119769d70b27d5dc9f692c","modified":1630938587099},{"_id":"source/_posts/language/shell/工具脚本.md","hash":"eb5fec1c4e05eea054e08e9809cd815fe18d559d","modified":1630938587099},{"_id":"source/_posts/language/shell/常用shell命令.md","hash":"ba853a2b3511f87e3f0cc41b56f2cf7bcc8fbad8","modified":1630938587099},{"_id":"source/_posts/language/shell/日志相关.md","hash":"c7e64e14b19fb5bdf3728c180ae989c3c973696e","modified":1630938587099},{"_id":"source/_posts/language/shell/权限设置shell命令.md","hash":"6fea02fd27179042122b70528f10f511313449c1","modified":1630938587099},{"_id":"source/_posts/language/shell/系统属性相关.md","hash":"ddacf20d82d2a48dc663e0549bc5f15f45c486a2","modified":1630938587099},{"_id":"source/_posts/language/shell/远程执行.md","hash":"327d0c647427001329a5a0845d5fc42a2d9d409c","modified":1630938587100},{"_id":"source/_posts/network/dpdk/DPDK-架构解析.md","hash":"98f33d6c3d383a136f5fbe3eb68a95ed744ff37d","modified":1627729847890},{"_id":"source/_posts/network/dpdk/一文看懂DPDK.md","hash":"15673f29fc8a79d60716f291cc046443ad02bbe0","modified":1627729847938},{"_id":"source/_posts/network/protocol/SCTP概要.md","hash":"2d97cf0fcd0fbf7b924413841e440b2bf84526a5","modified":1627729847927},{"_id":"source/_posts/network/sms/CMPP短信.md","hash":"a5b55187f93703a497ca2a5ba85fb49f73e94355","modified":1630938587111},{"_id":"source/_posts/language/java/design/深入理解单例模式-静态内部类单例原理.md","hash":"2a0d8382b5b57a4443ddd6b55803dda232b64d90","modified":1631631374668},{"_id":"source/_posts/language/java/bytecode/Java动态调试技术原理及实践.md","hash":"b1f69499fc713430567d1248237c7de3ba54dff7","modified":1631631261741},{"_id":"source/_posts/language/java/bytecode/bytebuddy-aop.md","hash":"b3d1b48f26226d6e329fed05937e20a263516424","modified":1630938587097},{"_id":"source/_posts/language/java/bytecode/aspectj使用介绍.md","hash":"d18087913d0de8488b6cd7ce409b458628f8942f","modified":1630938587096},{"_id":"source/_posts/language/java/bytecode/bytebuddy-code.md","hash":"9fb6e2eb8b96f94889fec48342b3a50c86b9e98e","modified":1630938587097},{"_id":"source/_posts/language/java/bytecode/bytebuddy-替换类实现.md","hash":"1d5249292712245e4062e2f730e8159e2b80f89f","modified":1630938587097},{"_id":"source/_posts/devops/docker/docker-package/docker-build-java.md","hash":"91aa47d6544eea4b100035c6cf55b316413a7f5e","modified":1630938587071},{"_id":"source/_posts/language/java/bytecode/java字节码增强.md","hash":"7a9455a3de080d89157bc8d55536ae4920eceb38","modified":1630938587098},{"_id":"source/_posts/language/java/juc/atomic/AtomicBoolean.md","hash":"16e1d04a29865c0d9a988ee5d5922decaa2f6dcf","modified":1631631374658},{"_id":"source/_posts/language/java/juc/atomic/LogAdder.md","hash":"107cdbd7fd71fc495f05a70d8b88054244cfba4a","modified":1631631698567},{"_id":"source/_posts/language/java/juc/atomic/AtomicInteger.md","hash":"42edf9f356d62dec579cf593971040e0384f3407","modified":1631631374663},{"_id":"source/_posts/language/java/juc/atomic/readme.md","hash":"d88e0ebe00e7b2443d8d6e9d1802d24606c8951c","modified":1631631698561},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/armjava/build-commit.sh","hash":"1d187c3d52387addd4879c6c25f349124686feff","modified":1630938587073},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/armjava/readme.md","hash":"bd03ac321d0af0c70f669242c1c27b4823ac8d73","modified":1630938587073},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/armjava/Dockerfile","hash":"9f286c5f56783504cc0f59c24c308a0c111b502b","modified":1630938587072},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/fastdfs/readme.md","hash":"6e89b479956e25e77831e3272f5e58955661488f","modified":1630938587077},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/armjava/test.sh","hash":"9e6a335862855bc15269978fe94fb72b174b46ac","modified":1630938587073},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/java/readme.md","hash":"bd03ac321d0af0c70f669242c1c27b4823ac8d73","modified":1630938587079},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/armjava/build-clean.sh","hash":"aac18ca47816c8b2573f7e54cb0765b97547f66b","modified":1630938587072},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/java/build-clean.sh","hash":"426c8c3f830a87a49e7f081e01951460bda48a47","modified":1630938587078},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/java/Dockerfile","hash":"f2c496d77752f40b8de5318752013a1f273ef54b","modified":1630938587078},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/javastorage/build.sh","hash":"4a9384bbbb9ef26c049ed344f035bbd1eb397039","modified":1630938587080},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/javastorage/Dockerfile","hash":"05f53fe9a9ac385e4e6ecfcc261efe655c1f522a","modified":1630938587079},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/java/commit.sh","hash":"51602ee344a30d4dcdf00d96d74908c07fc75bc8","modified":1630938587078},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/java/test.sh","hash":"4636f9948f89988d7f9ae008df6596b368bb55a8","modified":1630938587079},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/javastorage/run.sh","hash":"def518e232236958071faf1d59bc9326f0e0c231","modified":1630938587080},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/kafka/Dockerfile","hash":"ff3fe088ae3ef2904253de4b2a8c9fd8f44683a5","modified":1630938587080},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/kafka/build-clean.sh","hash":"a0a47c6f7b680a9a7e8eec446474075ee25b45df","modified":1630938587080},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/nginx/readme.md","hash":"afb8dc5c1e3686d115b6b6538826d2727f0925c5","modified":1630938587085},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/logstash/Dockerfile","hash":"fb61aac4fb002ceb507422b04996d1d8b508be32","modified":1630938587081},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/logstash/build-clean.sh","hash":"b4b5761f35984ad9acdf099933f309a32c7e823d","modified":1630938587082},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/redis/Dockerfile","hash":"d15ce9c838c212869b8a9e55a935ae94bd75db78","modified":1630938587086},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/redis/build.sh","hash":"b01299ed2c0d91e1f11c07e82e6cf1b689abf6e5","modified":1630938587086},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/redis/entrypoint.sh","hash":"77f1390c07c8ed347598f964b8600e8c1b01ae8d","modified":1630938587087},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/fastdfs/fastdfs_storage/Dockerfile","hash":"6af5ca639956f374c3fd8b6623703bda5a0e1d38","modified":1630938587074},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/fastdfs/fastdfs_storage/run_storage.sh","hash":"86b777c79f59989a5d02ea3c71e3da218bdbe19d","modified":1630938587075},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/fastdfs/fastdfs_storage/build.sh","hash":"0ebedb7f37c5de121330d09d3bc9c1b580f6b95b","modified":1630938587074},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/fastdfs/fastdfs_tracker/Dockerfile","hash":"43db02efa581ccde19a5ab59113a1f3ad8daf603","modified":1630938587075},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/fastdfs/fastdfs_tracker/build.sh","hash":"a3a932a4d75b0e1f129ef6523baf96e9cdad92ff","modified":1630938587076},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/fastdfs/fastdfs_tracker/run_tracker.sh","hash":"d6c98d416971d469257d0752e50cadfb7d7f7c67","modified":1630938587077},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/nginx/centos/Dockerfile","hash":"b4e179e89d4ab1719fdfc0cc1bdd2743aa337f56","modified":1630938587082},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/nginx/centos/build-clean.sh","hash":"9116206ac2268fb06c5b67aa0c9e6364ea8a13a8","modified":1630938587083},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/redis/conf/redis.conf","hash":"b22826bae1be9e4a4ed69885ef0f27ba4c828eca","modified":1630938587086},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/nginx/centos/test.sh","hash":"176d8bbab9f037f800548cc52039ca94962d38fc","modified":1630938587085},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/redis/conf/redis_test.conf","hash":"6c8f7df0eb744e3eeb17e4894c32c0797313a40e","modified":1630938587087},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/redis/conf/sentinel.conf","hash":"960db75bd6a0a8d295e78fda2d6247c8c5120d12","modified":1630938587087},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/base/Dockerfile","hash":"532969397cb54b79f829928083aaf3ea42fae285","modified":1630938587091},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/base/build-run.sh","hash":"bd113a3ac79b2f8a337828ac4dde8e40b6040a89","modified":1630938587091},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/im/readme.md","hash":"297bea7376e8b0e3298c3d9ea4ee9237c561d23f","modified":1630938587092},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/base/build.sh","hash":"58ee112b23a4cd69b1d3a01cf9e9ac77b9b4b0ba","modified":1630938587092},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/base/run.sh","hash":"cfaf2843304f539278d36ccb7a7c33daafcddf31","modified":1630938587092},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/im/Dockerfile","hash":"d1420026d2c096c8850f0194585fed175e88dca6","modified":1630938587092},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/im/build.sh","hash":"5c2b32a9573d152e04d7720ae6a17ce3061b6a25","modified":1630938587092},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/im/run.sh","hash":"fdff2f8f6e5df80171604213c4bb83560c194e33","modified":1630938587092},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/im/commit.sh","hash":"41c2453ac07958cd18b33fe679ff9174c1677e4e","modified":1630938587092},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/web/Dockerfile","hash":"98e782ca77547b1ab6b05ce5b6732bcbc91946a7","modified":1630938587093},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/web/run.sh","hash":"8883fad82f43a1928c49544b18493dc0f40da6f0","modified":1630938587094},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/web/readme.md","hash":"134c4334ee054c61e5ece01e367a7226ff418818","modified":1630938587094},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/web/build.sh","hash":"d3e245ca9820a09834cd7c64bda6a78d9a10dc15","modified":1630938587093},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/logstash/config/pipeline/kafka2es.conf","hash":"020ff2499573336a91ca1722da533c434dc00085","modified":1630938587082},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/fastdfs/fastdfs_tracker/conf/tracker.conf","hash":"c38644efffa91b7e79c268c0840c44240c4158e2","modified":1630938587076},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/nginx/centos/conf/nginx-fusion-pro.conf","hash":"766fb561682ac2c4c7f489da46d1414b0d28dffd","modified":1630938587083},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/fastdfs/fastdfs_storage/conf/storage.conf","hash":"019282f90f8fe767ddd8e54ba7da2747d5a7645c","modified":1630938587075},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/nginx/centos/conf/nginx-teatalk.conf","hash":"ec37ce4a835eef9cbd29ef69b3ad99ec5885ebe0","modified":1630938587084},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/nginx/centos/conf/nginx-fusion.conf","hash":"19c1aeaaa496990115590c3f89172bcd55b5d3ee","modified":1630938587083},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/nginx/centos/conf/nginx.conf","hash":"d22b36db82b038a4f2604020c35bfc6d9f4038a6","modified":1630938587084},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/nginx/centos/conf/nginx-urcs.conf","hash":"a8d2162b8aa5ccc56d8aedb8a52c795109d781b4","modified":1630938587084},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/nginx/centos/ssk/urcs.feinno.com.crt","hash":"2c88dd2be00cbb541dc272d8f2b4701c60fdce60","modified":1630938587085},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/im/sh/run-im.back","hash":"e476600e5db507ce0567e1868b6a598070a6d04e","modified":1630938587093},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/nginx/centos/ssk/urcs.feinno.com.key","hash":"8889261d963aa8b6bf04932433d71bd1c37181b0","modified":1630938587085},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/ubuntu/web/sh/run-java.sh","hash":"e8cc482a253420390fec785a39a2499c90c51832","modified":1630938587094},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1622429690000},{"_id":"source/_posts/devops/docker/docker-package/dockerfiles/redis/redis-3.2.8.tar.gz","hash":"6780d1abb66f33a97aad0edbe020403d0a15b67f","modified":1630938587091},{"_id":"source/_posts/devops/docker/docker常用命令.md","hash":"7028366d10211e73e8f14e8b3712a41b2186ff15","modified":1634530307492},{"_id":"source/_posts/tool/mac/brew常用设置.md","hash":"7479b49842e000d3d56028fb486dba59b03877e4","modified":1634279400475},{"_id":"source/_posts/language/shell/Linux定时任务用法与实例.md","hash":"460e0b2e15a4654fc14ec9dc983a999b1ea8ab42","modified":1634528126285},{"_id":"source/_posts/language/shell/Linux日期获取.md","hash":"737692310ff525acc346f56b0c1e69e008e85b5a","modified":1634528126271}],"Category":[{"name":"5G","_id":"cktk7qyhr0008u6uk94su7hep"},{"name":"algorithm","_id":"cktk7qyhw000fu6ukf9llhpss"},{"name":"devops","_id":"cktk7qyi9001au6uk30817eay"},{"name":"java","_id":"cktk7qyim001zu6uk5xerdc6o"},{"name":"linux","_id":"cktk7qyiv002tu6uk1fvvex5a"},{"name":"编程语言 - shell","_id":"cktk7qyiz0037u6ukfspv79ds"},{"name":"短信","_id":"cktk7qyj4003ru6ukc8ld1tla"}],"Data":[],"Page":[{"title":"关于","description":"个人简介","layout":"about","comments":0,"sidebar":"custom","_content":"个人详细介绍","source":"about/index.md","raw":"---\ntitle: 关于\ndescription: 个人简介\nlayout: about\ncomments: false\nsidebar: custom\n---\n个人详细介绍","date":"2021-07-25T09:33:21.663Z","updated":"2021-05-31T02:54:50.000Z","path":"about/index.html","_id":"cktk7qyhf0000u6uk4gt15404","content":"<p>个人详细介绍</p>\n","site":{"data":{}},"excerpt":"","more":"<p>个人详细介绍</p>\n"},{"title":"书单","layout":"books","comments":0,"sidebar":"none","_content":"","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: false\nsidebar: none\n---","date":"2021-07-25T09:33:21.672Z","updated":"2021-05-31T02:54:50.000Z","path":"books/index.html","_id":"cktk7qyhl0002u6uk5xbjap6i","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","layout":"categories","comments":0,"_content":"\n\n# 1.编程语言\n## 1.1.java\n## 1.1.c\n## 1.1.go\n\n# 2.技术中间件\n\n# 3.devops\n\n# 4.算法\n## 4.1.常见算法\n## 4.2.分布式算法\n\n# 5.计算机基础\n\n## 5.1.网络\n\n","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\ncomments: false\n---\n\n\n# 1.编程语言\n## 1.1.java\n## 1.1.c\n## 1.1.go\n\n# 2.技术中间件\n\n# 3.devops\n\n# 4.算法\n## 4.1.常见算法\n## 4.2.分布式算法\n\n# 5.计算机基础\n\n## 5.1.网络\n\n","date":"2021-07-25T09:42:30.753Z","updated":"2021-07-25T09:42:30.753Z","path":"categories/index.html","_id":"cktk7qyhn0004u6ukfhr84q11","content":"<h1 id=\"1-编程语言\"><a href=\"#1-编程语言\" class=\"headerlink\" title=\"1.编程语言\"></a>1.编程语言</h1><h2 id=\"1-1-java\"><a href=\"#1-1-java\" class=\"headerlink\" title=\"1.1.java\"></a>1.1.java</h2><h2 id=\"1-1-c\"><a href=\"#1-1-c\" class=\"headerlink\" title=\"1.1.c\"></a>1.1.c</h2><h2 id=\"1-1-go\"><a href=\"#1-1-go\" class=\"headerlink\" title=\"1.1.go\"></a>1.1.go</h2><h1 id=\"2-技术中间件\"><a href=\"#2-技术中间件\" class=\"headerlink\" title=\"2.技术中间件\"></a>2.技术中间件</h1><h1 id=\"3-devops\"><a href=\"#3-devops\" class=\"headerlink\" title=\"3.devops\"></a>3.devops</h1><h1 id=\"4-算法\"><a href=\"#4-算法\" class=\"headerlink\" title=\"4.算法\"></a>4.算法</h1><h2 id=\"4-1-常见算法\"><a href=\"#4-1-常见算法\" class=\"headerlink\" title=\"4.1.常见算法\"></a>4.1.常见算法</h2><h2 id=\"4-2-分布式算法\"><a href=\"#4-2-分布式算法\" class=\"headerlink\" title=\"4.2.分布式算法\"></a>4.2.分布式算法</h2><h1 id=\"5-计算机基础\"><a href=\"#5-计算机基础\" class=\"headerlink\" title=\"5.计算机基础\"></a>5.计算机基础</h1><h2 id=\"5-1-网络\"><a href=\"#5-1-网络\" class=\"headerlink\" title=\"5.1.网络\"></a>5.1.网络</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-编程语言\"><a href=\"#1-编程语言\" class=\"headerlink\" title=\"1.编程语言\"></a>1.编程语言</h1><h2 id=\"1-1-java\"><a href=\"#1-1-java\" class=\"headerlink\" title=\"1.1.java\"></a>1.1.java</h2><h2 id=\"1-1-c\"><a href=\"#1-1-c\" class=\"headerlink\" title=\"1.1.c\"></a>1.1.c</h2><h2 id=\"1-1-go\"><a href=\"#1-1-go\" class=\"headerlink\" title=\"1.1.go\"></a>1.1.go</h2><h1 id=\"2-技术中间件\"><a href=\"#2-技术中间件\" class=\"headerlink\" title=\"2.技术中间件\"></a>2.技术中间件</h1><h1 id=\"3-devops\"><a href=\"#3-devops\" class=\"headerlink\" title=\"3.devops\"></a>3.devops</h1><h1 id=\"4-算法\"><a href=\"#4-算法\" class=\"headerlink\" title=\"4.算法\"></a>4.算法</h1><h2 id=\"4-1-常见算法\"><a href=\"#4-1-常见算法\" class=\"headerlink\" title=\"4.1.常见算法\"></a>4.1.常见算法</h2><h2 id=\"4-2-分布式算法\"><a href=\"#4-2-分布式算法\" class=\"headerlink\" title=\"4.2.分布式算法\"></a>4.2.分布式算法</h2><h1 id=\"5-计算机基础\"><a href=\"#5-计算机基础\" class=\"headerlink\" title=\"5.计算机基础\"></a>5.计算机基础</h1><h2 id=\"5-1-网络\"><a href=\"#5-1-网络\" class=\"headerlink\" title=\"5.1.网络\"></a>5.1.网络</h2>"},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---","date":"2021-07-25T09:33:21.690Z","updated":"2021-05-31T02:54:50.000Z","path":"links/index.html","_id":"cktk7qyhp0006u6uk7zcwe43z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: false\n---\n","date":"2021-07-25T09:33:21.712Z","updated":"2021-05-31T02:54:50.000Z","path":"tags/index.html","_id":"cktk7qyht000au6uk876beec4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"git仓库","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: git仓库\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2021-07-25T09:33:57.438Z","updated":"2021-07-25T09:33:57.438Z","path":"repository/index.html","_id":"cktk7qyhu000cu6uk4k4g28bu","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hexo-配置","_content":"hexo配置详解，包含分类，归档，标题等\n\n```\n# Site\ntitle:  #主页标题\nsubtitle:  #副标题\ndescription: #网站描述description主要用于SEO\nkeywords:  #博客关键字\nauthor: #作者，左下角显示\nlanguage: zh_Hans # 选择中文简体\ntimezone: 'Asia/Shanghai'  #时区:国内选择上海\n# Url\nurl: http://yoursite.com  #填自己的github pages网址 \nroot: /                   #网站根目录\npermalink: :year/:month/:day/:title/        #文章的 永久链接 格式\npermalink_defaults:                         #永久链接中各部分的默认值\npretty_urls:                                #改写 permalink 的值来美化 URL\ntrailing_index: false # 比如，一个页面的永久链接是 https://wuhaocn.github.io/foo/bar/index.html 是否在                         永久链接中保留尾部的 index.html，设置为 false 时去除\ntrailing_html: true #是否在永久链接中保留尾部.html, 设置为 false 时去除\n\n# Directory\nsource_dir: source        #资源文件夹，这个文件夹用来存放内容。\npublic_dir: public        #公共文件夹，这个文件夹用于存放生成的站点文件。\ntag_dir: tags             #标签文件夹\narchive_dir: archives     #归档文件夹\ncategory_dir: categories  #分类文件夹\ncode_dir: downloads/code  #Include code 文件夹，source_dir 下的子目录\ni18n_dir: :lang           #国际化（i18n）文件夹\nskip_render:              #跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可                           使用 glob 表达式来匹配路径。\n\n# Writing\nnew_post_name: :year-:month-:day-:title.md #生成yyyy-MM-dd-博文名称的名称有助于我们管理自己的博                                               文。 \ndefault_layout: post    #预设布局\ntitlecase: false  #把标题转换为 title case\nexternal_link:    #在新标签中打开链接\n  enable: true #在新标签中打开链接\n  field: site #对整个网站（site）生效或仅对文章（post）生效\n  exclude: ''  #需要排除的域名。主域名和子域名如 www 需分别配置\nfilename_case: 0  #把文件名称转换为 (1) 小写或 (2) 大写\nrender_drafts: false #显示草稿\npost_asset_folder: false  #启动 Asset 文件夹 new 文件的同时，xxxx.md文件还有一个同名的文件夹\nrelative_link: false  #把链接改为与根目录的相对位址\nfuture: true  #显示未来的文章\nhighlight:\n  enable: true  #开启代码块高亮\n  line_number: true  #显示行数\n  auto_detect: false  #如果未指定语言，则启用自动检测\n  tab_replace: ''  #用 n 个空格替换 tabs；如果值为空，则不会替换 tabs\n  wrap: true    # 将代码块包装到<table>\n  hljs: false   # CSS类使用hljs-*前缀\n\n# Home page setting\n# path: Root path for your blogs index page. (default = '')\n# per_page: Posts displayed per page. (0 = disable pagination)\n# order_by: Posts order. (Order by date descending by default)\nindex_generator:\n  path: ''\n  per_page: 10\n  order_by: -date\n\n# Category & Tag\ndefault_category: uncategorized  #默认分类\ncategory_map:   #分类别名\ntag_map:   #标签别名\n\n# Metadata elements\nmeta_generator: true   # Meta generator 标签。 值为 false 时 Hexo 不会在头部插入该标签\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date Hexo 使用 Moment.js 来解析和显示时间\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD  #日期格式\ntime_format: HH:mm:ss   #时间格式\nuse_date_for_updated: false  #启用以后，如果Front Matter中没有指定 updated， post.updated 将会使用date的值而不是文件的创建时间。在Git工作流中这个选项会很有用\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10  #每页显示的文章量 (0 = 关闭分页功能)\npagination_dir: page  #分页目录\n\n# Include / Exclude file(s)\n## include:/exclude: options only apply to the 'source/' folder\ninclude:  #Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 . 开头的文件和文件夹，Hexo 的 _posts 和            _data 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。\nexclude:  #Hexo 会忽略这些文件和目录\nignore:   #Ignore files/folders\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: icarus #当前主题名称。值为false时禁用主题\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:   #部署部分的设置\n  type: git\n  repo: https://github.com/CodePandaes/CodePandaes.github.io.git #github中仓库地址\n  branch: master\n```","source":"_posts/tool/hexo-config.md","raw":"---\ntitle: hexo-配置\n---\nhexo配置详解，包含分类，归档，标题等\n\n```\n# Site\ntitle:  #主页标题\nsubtitle:  #副标题\ndescription: #网站描述description主要用于SEO\nkeywords:  #博客关键字\nauthor: #作者，左下角显示\nlanguage: zh_Hans # 选择中文简体\ntimezone: 'Asia/Shanghai'  #时区:国内选择上海\n# Url\nurl: http://yoursite.com  #填自己的github pages网址 \nroot: /                   #网站根目录\npermalink: :year/:month/:day/:title/        #文章的 永久链接 格式\npermalink_defaults:                         #永久链接中各部分的默认值\npretty_urls:                                #改写 permalink 的值来美化 URL\ntrailing_index: false # 比如，一个页面的永久链接是 https://wuhaocn.github.io/foo/bar/index.html 是否在                         永久链接中保留尾部的 index.html，设置为 false 时去除\ntrailing_html: true #是否在永久链接中保留尾部.html, 设置为 false 时去除\n\n# Directory\nsource_dir: source        #资源文件夹，这个文件夹用来存放内容。\npublic_dir: public        #公共文件夹，这个文件夹用于存放生成的站点文件。\ntag_dir: tags             #标签文件夹\narchive_dir: archives     #归档文件夹\ncategory_dir: categories  #分类文件夹\ncode_dir: downloads/code  #Include code 文件夹，source_dir 下的子目录\ni18n_dir: :lang           #国际化（i18n）文件夹\nskip_render:              #跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可                           使用 glob 表达式来匹配路径。\n\n# Writing\nnew_post_name: :year-:month-:day-:title.md #生成yyyy-MM-dd-博文名称的名称有助于我们管理自己的博                                               文。 \ndefault_layout: post    #预设布局\ntitlecase: false  #把标题转换为 title case\nexternal_link:    #在新标签中打开链接\n  enable: true #在新标签中打开链接\n  field: site #对整个网站（site）生效或仅对文章（post）生效\n  exclude: ''  #需要排除的域名。主域名和子域名如 www 需分别配置\nfilename_case: 0  #把文件名称转换为 (1) 小写或 (2) 大写\nrender_drafts: false #显示草稿\npost_asset_folder: false  #启动 Asset 文件夹 new 文件的同时，xxxx.md文件还有一个同名的文件夹\nrelative_link: false  #把链接改为与根目录的相对位址\nfuture: true  #显示未来的文章\nhighlight:\n  enable: true  #开启代码块高亮\n  line_number: true  #显示行数\n  auto_detect: false  #如果未指定语言，则启用自动检测\n  tab_replace: ''  #用 n 个空格替换 tabs；如果值为空，则不会替换 tabs\n  wrap: true    # 将代码块包装到<table>\n  hljs: false   # CSS类使用hljs-*前缀\n\n# Home page setting\n# path: Root path for your blogs index page. (default = '')\n# per_page: Posts displayed per page. (0 = disable pagination)\n# order_by: Posts order. (Order by date descending by default)\nindex_generator:\n  path: ''\n  per_page: 10\n  order_by: -date\n\n# Category & Tag\ndefault_category: uncategorized  #默认分类\ncategory_map:   #分类别名\ntag_map:   #标签别名\n\n# Metadata elements\nmeta_generator: true   # Meta generator 标签。 值为 false 时 Hexo 不会在头部插入该标签\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date Hexo 使用 Moment.js 来解析和显示时间\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD  #日期格式\ntime_format: HH:mm:ss   #时间格式\nuse_date_for_updated: false  #启用以后，如果Front Matter中没有指定 updated， post.updated 将会使用date的值而不是文件的创建时间。在Git工作流中这个选项会很有用\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10  #每页显示的文章量 (0 = 关闭分页功能)\npagination_dir: page  #分页目录\n\n# Include / Exclude file(s)\n## include:/exclude: options only apply to the 'source/' folder\ninclude:  #Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 . 开头的文件和文件夹，Hexo 的 _posts 和            _data 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。\nexclude:  #Hexo 会忽略这些文件和目录\nignore:   #Ignore files/folders\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: icarus #当前主题名称。值为false时禁用主题\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:   #部署部分的设置\n  type: git\n  repo: https://github.com/CodePandaes/CodePandaes.github.io.git #github中仓库地址\n  branch: master\n```","slug":"tool/hexo-config","published":1,"date":"2021-09-14T15:10:04.906Z","updated":"2021-09-14T15:10:04.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyhi0001u6uk8hsi1mcz","content":"<p>hexo配置详解，包含分类，归档，标题等</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title:  #主页标题</span><br><span class=\"line\">subtitle:  #副标题</span><br><span class=\"line\">description: #网站描述description主要用于SEO</span><br><span class=\"line\">keywords:  #博客关键字</span><br><span class=\"line\">author: #作者，左下角显示</span><br><span class=\"line\">language: zh_Hans # 选择中文简体</span><br><span class=\"line\">timezone: &#x27;Asia/Shanghai&#x27;  #时区:国内选择上海</span><br><span class=\"line\"># Url</span><br><span class=\"line\">url: http://yoursite.com  #填自己的github pages网址 </span><br><span class=\"line\">root: /                   #网站根目录</span><br><span class=\"line\">permalink: :year/:month/:day/:title/        #文章的 永久链接 格式</span><br><span class=\"line\">permalink_defaults:                         #永久链接中各部分的默认值</span><br><span class=\"line\">pretty_urls:                                #改写 permalink 的值来美化 URL</span><br><span class=\"line\">trailing_index: false # 比如，一个页面的永久链接是 https://wuhaocn.github.io/foo/bar/index.html 是否在                         永久链接中保留尾部的 index.html，设置为 false 时去除</span><br><span class=\"line\">trailing_html: true #是否在永久链接中保留尾部.html, 设置为 false 时去除</span><br><span class=\"line\"></span><br><span class=\"line\"># Directory</span><br><span class=\"line\">source_dir: source        #资源文件夹，这个文件夹用来存放内容。</span><br><span class=\"line\">public_dir: public        #公共文件夹，这个文件夹用于存放生成的站点文件。</span><br><span class=\"line\">tag_dir: tags             #标签文件夹</span><br><span class=\"line\">archive_dir: archives     #归档文件夹</span><br><span class=\"line\">category_dir: categories  #分类文件夹</span><br><span class=\"line\">code_dir: downloads/code  #Include code 文件夹，source_dir 下的子目录</span><br><span class=\"line\">i18n_dir: :lang           #国际化（i18n）文件夹</span><br><span class=\"line\">skip_render:              #跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可                           使用 glob 表达式来匹配路径。</span><br><span class=\"line\"></span><br><span class=\"line\"># Writing</span><br><span class=\"line\">new_post_name: :year-:month-:day-:title.md #生成yyyy-MM-dd-博文名称的名称有助于我们管理自己的博                                               文。 </span><br><span class=\"line\">default_layout: post    #预设布局</span><br><span class=\"line\">titlecase: false  #把标题转换为 title case</span><br><span class=\"line\">external_link:    #在新标签中打开链接</span><br><span class=\"line\">  enable: true #在新标签中打开链接</span><br><span class=\"line\">  field: site #对整个网站（site）生效或仅对文章（post）生效</span><br><span class=\"line\">  exclude: &#x27;&#x27;  #需要排除的域名。主域名和子域名如 www 需分别配置</span><br><span class=\"line\">filename_case: 0  #把文件名称转换为 (1) 小写或 (2) 大写</span><br><span class=\"line\">render_drafts: false #显示草稿</span><br><span class=\"line\">post_asset_folder: false  #启动 Asset 文件夹 new 文件的同时，xxxx.md文件还有一个同名的文件夹</span><br><span class=\"line\">relative_link: false  #把链接改为与根目录的相对位址</span><br><span class=\"line\">future: true  #显示未来的文章</span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: true  #开启代码块高亮</span><br><span class=\"line\">  line_number: true  #显示行数</span><br><span class=\"line\">  auto_detect: false  #如果未指定语言，则启用自动检测</span><br><span class=\"line\">  tab_replace: &#x27;&#x27;  #用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span><br><span class=\"line\">  wrap: true    # 将代码块包装到&lt;table&gt;</span><br><span class=\"line\">  hljs: false   # CSS类使用hljs-*前缀</span><br><span class=\"line\"></span><br><span class=\"line\"># Home page setting</span><br><span class=\"line\"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class=\"line\"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class=\"line\"># order_by: Posts order. (Order by date descending by default)</span><br><span class=\"line\">index_generator:</span><br><span class=\"line\">  path: &#x27;&#x27;</span><br><span class=\"line\">  per_page: 10</span><br><span class=\"line\">  order_by: -date</span><br><span class=\"line\"></span><br><span class=\"line\"># Category &amp; Tag</span><br><span class=\"line\">default_category: uncategorized  #默认分类</span><br><span class=\"line\">category_map:   #分类别名</span><br><span class=\"line\">tag_map:   #标签别名</span><br><span class=\"line\"></span><br><span class=\"line\"># Metadata elements</span><br><span class=\"line\">meta_generator: true   # Meta generator 标签。 值为 false 时 Hexo 不会在头部插入该标签</span><br><span class=\"line\"></span><br><span class=\"line\"># Date / Time format</span><br><span class=\"line\">## Hexo uses Moment.js to parse and display date Hexo 使用 Moment.js 来解析和显示时间</span><br><span class=\"line\">## You can customize the date format as defined in</span><br><span class=\"line\">## http://momentjs.com/docs/#/displaying/format/</span><br><span class=\"line\">date_format: YYYY-MM-DD  #日期格式</span><br><span class=\"line\">time_format: HH:mm:ss   #时间格式</span><br><span class=\"line\">use_date_for_updated: false  #启用以后，如果Front Matter中没有指定 updated， post.updated 将会使用date的值而不是文件的创建时间。在Git工作流中这个选项会很有用</span><br><span class=\"line\"></span><br><span class=\"line\"># Pagination</span><br><span class=\"line\">## Set per_page to 0 to disable pagination</span><br><span class=\"line\">per_page: 10  #每页显示的文章量 (0 = 关闭分页功能)</span><br><span class=\"line\">pagination_dir: page  #分页目录</span><br><span class=\"line\"></span><br><span class=\"line\"># Include / Exclude file(s)</span><br><span class=\"line\">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span><br><span class=\"line\">include:  #Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 . 开头的文件和文件夹，Hexo 的 _posts 和            _data 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。</span><br><span class=\"line\">exclude:  #Hexo 会忽略这些文件和目录</span><br><span class=\"line\">ignore:   #Ignore files/folders</span><br><span class=\"line\"></span><br><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\">theme: icarus #当前主题名称。值为false时禁用主题</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:   #部署部分的设置</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/CodePandaes/CodePandaes.github.io.git #github中仓库地址</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>hexo配置详解，包含分类，归档，标题等</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title:  #主页标题</span><br><span class=\"line\">subtitle:  #副标题</span><br><span class=\"line\">description: #网站描述description主要用于SEO</span><br><span class=\"line\">keywords:  #博客关键字</span><br><span class=\"line\">author: #作者，左下角显示</span><br><span class=\"line\">language: zh_Hans # 选择中文简体</span><br><span class=\"line\">timezone: &#x27;Asia/Shanghai&#x27;  #时区:国内选择上海</span><br><span class=\"line\"># Url</span><br><span class=\"line\">url: http://yoursite.com  #填自己的github pages网址 </span><br><span class=\"line\">root: /                   #网站根目录</span><br><span class=\"line\">permalink: :year/:month/:day/:title/        #文章的 永久链接 格式</span><br><span class=\"line\">permalink_defaults:                         #永久链接中各部分的默认值</span><br><span class=\"line\">pretty_urls:                                #改写 permalink 的值来美化 URL</span><br><span class=\"line\">trailing_index: false # 比如，一个页面的永久链接是 https://wuhaocn.github.io/foo/bar/index.html 是否在                         永久链接中保留尾部的 index.html，设置为 false 时去除</span><br><span class=\"line\">trailing_html: true #是否在永久链接中保留尾部.html, 设置为 false 时去除</span><br><span class=\"line\"></span><br><span class=\"line\"># Directory</span><br><span class=\"line\">source_dir: source        #资源文件夹，这个文件夹用来存放内容。</span><br><span class=\"line\">public_dir: public        #公共文件夹，这个文件夹用于存放生成的站点文件。</span><br><span class=\"line\">tag_dir: tags             #标签文件夹</span><br><span class=\"line\">archive_dir: archives     #归档文件夹</span><br><span class=\"line\">category_dir: categories  #分类文件夹</span><br><span class=\"line\">code_dir: downloads/code  #Include code 文件夹，source_dir 下的子目录</span><br><span class=\"line\">i18n_dir: :lang           #国际化（i18n）文件夹</span><br><span class=\"line\">skip_render:              #跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可                           使用 glob 表达式来匹配路径。</span><br><span class=\"line\"></span><br><span class=\"line\"># Writing</span><br><span class=\"line\">new_post_name: :year-:month-:day-:title.md #生成yyyy-MM-dd-博文名称的名称有助于我们管理自己的博                                               文。 </span><br><span class=\"line\">default_layout: post    #预设布局</span><br><span class=\"line\">titlecase: false  #把标题转换为 title case</span><br><span class=\"line\">external_link:    #在新标签中打开链接</span><br><span class=\"line\">  enable: true #在新标签中打开链接</span><br><span class=\"line\">  field: site #对整个网站（site）生效或仅对文章（post）生效</span><br><span class=\"line\">  exclude: &#x27;&#x27;  #需要排除的域名。主域名和子域名如 www 需分别配置</span><br><span class=\"line\">filename_case: 0  #把文件名称转换为 (1) 小写或 (2) 大写</span><br><span class=\"line\">render_drafts: false #显示草稿</span><br><span class=\"line\">post_asset_folder: false  #启动 Asset 文件夹 new 文件的同时，xxxx.md文件还有一个同名的文件夹</span><br><span class=\"line\">relative_link: false  #把链接改为与根目录的相对位址</span><br><span class=\"line\">future: true  #显示未来的文章</span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: true  #开启代码块高亮</span><br><span class=\"line\">  line_number: true  #显示行数</span><br><span class=\"line\">  auto_detect: false  #如果未指定语言，则启用自动检测</span><br><span class=\"line\">  tab_replace: &#x27;&#x27;  #用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span><br><span class=\"line\">  wrap: true    # 将代码块包装到&lt;table&gt;</span><br><span class=\"line\">  hljs: false   # CSS类使用hljs-*前缀</span><br><span class=\"line\"></span><br><span class=\"line\"># Home page setting</span><br><span class=\"line\"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class=\"line\"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class=\"line\"># order_by: Posts order. (Order by date descending by default)</span><br><span class=\"line\">index_generator:</span><br><span class=\"line\">  path: &#x27;&#x27;</span><br><span class=\"line\">  per_page: 10</span><br><span class=\"line\">  order_by: -date</span><br><span class=\"line\"></span><br><span class=\"line\"># Category &amp; Tag</span><br><span class=\"line\">default_category: uncategorized  #默认分类</span><br><span class=\"line\">category_map:   #分类别名</span><br><span class=\"line\">tag_map:   #标签别名</span><br><span class=\"line\"></span><br><span class=\"line\"># Metadata elements</span><br><span class=\"line\">meta_generator: true   # Meta generator 标签。 值为 false 时 Hexo 不会在头部插入该标签</span><br><span class=\"line\"></span><br><span class=\"line\"># Date / Time format</span><br><span class=\"line\">## Hexo uses Moment.js to parse and display date Hexo 使用 Moment.js 来解析和显示时间</span><br><span class=\"line\">## You can customize the date format as defined in</span><br><span class=\"line\">## http://momentjs.com/docs/#/displaying/format/</span><br><span class=\"line\">date_format: YYYY-MM-DD  #日期格式</span><br><span class=\"line\">time_format: HH:mm:ss   #时间格式</span><br><span class=\"line\">use_date_for_updated: false  #启用以后，如果Front Matter中没有指定 updated， post.updated 将会使用date的值而不是文件的创建时间。在Git工作流中这个选项会很有用</span><br><span class=\"line\"></span><br><span class=\"line\"># Pagination</span><br><span class=\"line\">## Set per_page to 0 to disable pagination</span><br><span class=\"line\">per_page: 10  #每页显示的文章量 (0 = 关闭分页功能)</span><br><span class=\"line\">pagination_dir: page  #分页目录</span><br><span class=\"line\"></span><br><span class=\"line\"># Include / Exclude file(s)</span><br><span class=\"line\">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span><br><span class=\"line\">include:  #Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 . 开头的文件和文件夹，Hexo 的 _posts 和            _data 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。</span><br><span class=\"line\">exclude:  #Hexo 会忽略这些文件和目录</span><br><span class=\"line\">ignore:   #Ignore files/folders</span><br><span class=\"line\"></span><br><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\">theme: icarus #当前主题名称。值为false时禁用主题</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:   #部署部分的设置</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/CodePandaes/CodePandaes.github.io.git #github中仓库地址</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>"},{"title":"hexo-安装","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. \nIf you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/tool/hexo-install.md","raw":"---\ntitle: hexo-安装\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. \nIf you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"tool/hexo-install","published":1,"date":"2021-07-23T17:15:03.485Z","updated":"2021-07-23T17:15:03.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyhm0003u6uk22co35r1","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info.<br>If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info.<br>If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"5G网络","_content":"\n# 5G网络概述\n\n## 1.网络架构\n   5G网络的主要涵盖基站(gNB)、承载网、5G核心网(5GC)、IMS核心网(IMS)、5G消息(RCS)、边缘计算(MEC)等网络功能模块,借助上述网路功能模块，提供无线射频信号的收发、网路流量的转发、短信、音视频电话、富媒体消息、MAAP消息业务(类似微信公众号+小程序)等。下图为5G网络架构图。\n![下载.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627354681299-fa0eab41-6e38-49d7-8e5a-46acacb57d8d.png#clientId=u0c2dc641-5b75-4&from=paste&height=724&id=u4bbac9fc&margin=%5Bobject%20Object%5D&name=%E4%B8%8B%E8%BD%BD.png&originHeight=942&originWidth=730&originalType=binary&ratio=1&size=137523&status=done&style=none&taskId=ud767b281-b748-4825-bd3d-1f64cf57f47&width=561)\n下文分别针对设备接入层、接入网、5G核心网、IMS网络、5G消息等模块进行介绍。\n\n- 设备接入（5G手机）：\n\n设备网络通信模块主要是基于芯片，市面上分为高通、海思、天玑等几大类。主流手机小米10、华为P40、华为Mate、荣耀30等之后型号基本都支持。\n\n- 接入网（gNB）：\n\n gNB主要分为宏基站与微基站（室内站），国内宏基站以华为、中兴、大唐为主，以华为基站为例包含AAU 、BBU，AAU负责无线信号收发，BBU与核心网联通，微基站以京信、共进、佰才邦，以共进为例，主要是以一体化基站为主。其中宏基站用于增加网路覆盖，微基站用于增强信号质量。\n\n- 5G核心网(5GC)：\n\n     核心网络建设主要用于提供 5G 终端设备（如手机，车载终端，摄像头等设备）的身份鉴权、流量分发、边缘计算、网络切片等业务能力，核心网网元较多，这针对重点网元进行介绍，AMF用于提供用户接入控制，对外主要网络协议为NAS、NGAP，UDM用于提供用户信息存储，即用户开卡信息，网络认证秘钥等， SMF用于提供网络流量控制，UPF用于提供网络流量转发。\n\n- IMS核心网(IMS)：\n\n主要提供短信、音视频通话、电话会议等能力，主要通信协议为SIP、RTP，音频编解码为AMR，视频编解码4G为H264,5G为H265。其中SBC/P-CSCF提供终端接入功能, CSCF提供信令路由功能，IP Centex提供会议接入等功能。\n\n- 5G消息(RCS)：\n\n      5G消息主要提供富媒体通信能力，借助手机原生能力能力实现富媒体通信，主要提供单聊、群聊、MAAP等业务，对手机侧通信协议主要包含SIP、MSRP等协议，对企业接入主要提供HTTP协议。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627314165117-add1c2c7-04e6-4ccb-be5d-e7d68f14d600.png#clientId=ua70594ae-1f25-4&from=paste&height=385&id=cwOqf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=385&originWidth=420&originalType=binary&ratio=1&size=152601&status=done&style=none&taskId=uaebd138d-d72f-4dd4-952c-f86ea6c17dd&width=420)\n   通过上述业务分析，相比原有通信能力，5G网络整体趋势为网络精细化、网络开放化、通信多样化、网络智能化演进。\n     下文对主要业务流程进行接入. 5G核心网文档可参考(TS 23.501, TS 23.502)\n## 2.5G主要网络协议栈\n### 2.1 4/5G协议栈对比\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1626931898798-9421984d-e966-42a1-9e79-7e3ec35b492d.png#clientId=u154c83d4-6762-4&from=paste&height=866&id=eEVVz&margin=%5Bobject%20Object%5D&name=image.png&originHeight=866&originWidth=1311&originalType=binary&ratio=1&size=915401&status=done&style=none&taskId=uff0338a0-360d-4d57-ac82-bfe3b0f8c1f&width=1311)\n相比4G核心网来说主要是架构及内部协议层面：\n\n- 5G核心网架构发生比较大的变化，引入NRF设备用于网络设备的注册与发现\n- 网元间协议由原来的diamter换为http2\n- 用户面与控制面解耦，为UPF下沉提供支持\n- 控制面协议有s1-ap改为ngap\n- 用户面协议增加扩展头\n### 2.2 5G数据面传输协议\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627264248595-2f3b2b36-3484-4192-8db4-4e7f92f22244.png#clientId=uc9b4fbe8-9b07-4&from=paste&height=442&id=JzhxG&margin=%5Bobject%20Object%5D&name=image.png&originHeight=884&originWidth=1616&originalType=binary&ratio=1&size=356332&status=done&style=none&taskId=u8a1ff3c9-934e-401d-b210-104bcf61da3&width=808)\n   5G网络中UPF设备主要用于用户面数据的转发，主要功能是流量控制以及GTP包的拆解包。\n   [https://github.com/5GOpenUPF/openupf](https://github.com/5GOpenUPF/openupf)\n## 3.5G网络重要特性\n\n\n### 3.1 网络切片\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627314856942-e617a4e3-30d1-4266-80aa-4d934b76c028.png#clientId=ua70594ae-1f25-4&from=paste&height=463&id=u5f84f5cc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=463&originWidth=823&originalType=binary&ratio=1&size=139413&status=done&style=none&taskId=ud0943c7d-036a-458b-abb2-57a8b2a6be8&width=823)\n5G网络基于三大业务场景的网络切片，使切片场景更加多样化。\n\n- eMBB，提供大带宽流量通道，主要是借助无线侧提升带宽上限。\n- uRLLC，提供低时延网络，主要借助边缘网络进行边缘计算降低端到端网络距离。\n- mMTC，提供大规模机器通信，及4G中NB-IOT规范在制定中预计R16版本制定。现在采用4G核心网eLTE增强实现。\n\n切片实现基于核心网信令侧提供切片标识传输，用户面实现切片能力提供。切片承载标识以NSSAI，SST，SD等作为切片标识。\n详细可参考：[https://www.yuque.com/wuhao-bo7rr/rb9zmq/epd319](https://www.yuque.com/wuhao-bo7rr/rb9zmq/epd319)\n### 3.2 边缘计算 \n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627314921136-6ca8027e-9ccb-4106-907a-7a849ed2feea.png#clientId=ua70594ae-1f25-4&from=paste&height=466&id=u9cccc87f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=466&originWidth=807&originalType=binary&ratio=1&size=108543&status=done&style=none&taskId=u5071bf83-230e-480a-8be6-78d87f3a5d7&width=807)\n\n- 概述\n\n     边缘计算在靠近数据源或用户的地方提供计算、存储等基础设施，并为边缘应用提供云服务和 IT 环境服务。相比于集中部署的云计算服务，边缘计算解决了时延过长、汇聚流量过大等问题，为实时性和带宽密集型业务提供更好的支持。随着 5G 和工业互联网的快速发展，新兴业务对边缘计算的需求十分迫切。在众多垂直行业新兴业务中，对边缘计算的需求主要体现在时延、带宽和安全三个方面。\n\n- 实现\n   - UPF 地址下发可采用 NRF(5G 网络注册设备)获取或 OAM(系统配置)配置\n   - 通过 5G 核心网配置及 SMF 下发 UPF 地址实现 UPF 地址的下沉\n- 示例\n\n       以移动边缘计算平台为例主要涵盖\n\n   - 边缘设备管理\n\n支持纳管不同算力、不同平台的边缘节点，实现对边缘节点和终端设备进行管理，如：状态监控、资源调度、日志查询等\n\n   - 边缘协议适配\n\n边缘计算通过驱动方式灵活支持多种工业协议设备接入，原生支持MQTT、OPC-UA、Modbus协议设备接入\n\n   - 边缘应用管理\n\n边缘应用市场提供预置边缘容器应用，也可进行自定义应用开发，并支持下发至边缘节点运行，云端可对应用进行全生命周期管理\n\n   - 边缘数据路由\n\n支持将边缘节点数据通过灵活的方式路由到OneNET云端。并可以通过云端再分发到其他PaaS服务或客户自有应用\n\n   - 边缘规则计算\n\n支持在边缘节点进行规则引擎计算，按照既定规则进行匹配，若匹配成功后则按照相关预定动作执行\n\n   - 边缘数据存储\n\n支持在边缘节点进行多并发的海量时序列数据库存储，并在断网的情况自动实现离线存储\n\n   - 边缘数据分析\n\n基于flink计算引擎，实现在云端通过可视化的方式配置计算任务，再下发到边缘节点执行\n\n   - 边缘智能推理\n\n通过预置应用方式，将针对特定行业和场景的AI模型下发至边缘节点进行推理\n\n- 参考\n   - 移动边缘计算平台：[https://open.iot.10086.cn/productservice/edge/](https://open.iot.10086.cn/productservice/edge/)\n   - 5G开源边缘计算平台[https://gitee.com/edgegallery](https://gitee.com/edgegallery)\n## 4.关键技术点解析\n\n\n### 4.1 无线侧增强\n各网络速率对比\n\n| **网络制式** | **2G** | **3G** | **4G** | **5G** |\n| --- | --- | --- | --- | --- |\n| 下行速率 | 150K | 2.8Mbps | 100Mbps | 1.54Gbps |\n| 上行速率 | 40K | 384Kbps | 50Mbps | 308Mbps |\n\n\u0000\n\n- 5G网速计算公式\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627436031283-5e53d4dd-39d5-4740-82f8-cdf52a84acd9.png#clientId=u79b8274a-e51d-4&from=paste&id=ue0563563&margin=%5Bobject%20Object%5D&name=image.png&originHeight=218&originWidth=1080&originalType=url&ratio=1&size=81090&status=done&style=none&taskId=u3b85cb7d-8ed8-4535-b791-18ba1cf2a1f)\n△ 5G载波的峰值计算公式\n\n- **MIMO层数**：下行4层，上行2层。\n- **调制阶数**：下行8阶（256QAM），上行6阶（64QAM）。\n- **编码码率**：948/1024≈0.926。\n- **PRB个数**：273，公式里面的12代表每个PRB包含12个子载波。\n- **资源开销占比**意为无线资源中用作控制，不能用来发送数据的比例，协议给出了典型的数据：下行14%，上行8%。\n- **符号数**意为每秒可实际传送数据的符号个数，因不同的TDD帧结构而异，具体可参考前面第二部分的表格。现取2.5毫秒双周期帧结构的值：下行18400，上行9200。\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627436031455-2bed1bb5-ee54-4d95-9ebf-3013930858fb.png#clientId=u79b8274a-e51d-4&from=paste&id=ufe3b5631&margin=%5Bobject%20Object%5D&name=image.png&originHeight=302&originWidth=640&originalType=url&ratio=1&size=124474&status=done&style=none&taskId=uc5a75f46-1a74-4f37-8c4b-4ead672b9ec)\n△ 5G载波的峰值计算因素图示\n把上述数据代入前面的公式，可得：\n\n- **下行峰值速率为：1.54Gbps**\n- **上行峰值速率为：308Mbps**\n\n现在电信和联通正在共享3.5GHz频段上的100MHz的带宽，单个手机能达到的理论速率就是上述的两个值。如果这两家后续开通200MHz的话，因为带宽翻倍，速率也将翻倍，下行速率可以高达3.08Gbps！\n详细可参考：[https://zhuanlan.zhihu.com/p/108553808](https://zhuanlan.zhihu.com/p/108553808)\n​\n\n\n- 4G理论网速\n\n**     LTE-Advanced（长期演进技术升级版）：**\n     LTE的升级演进，由3GPP所主导制定，完全向后兼容LTE，通常通过在LTE上通过软件升级即可，升级过程类似于从W-CDMA升级到HSPA。峰值速率：下行1Gbps，上行500Mbps。是第一批被国际电信联盟承认的4G标准，也是事实上的唯一主流4G标准。另有TD-LTE的升级演进TD-LTE-Advanced（TD-LTE-A）。\n**     LTE FDD（频分双工长期演进技术）：**\n     最早提出的LTE制式，目前该技术最成熟，全球应用最广泛，终端种类最多[5]。峰值速率：下行150Mbps，上行40Mbps。\n**     LTE TDD（时分双工长期演进技术）：**\n     又称TD-LTE，是LTE的另一个分支。峰值速率：下行100Mbps，上行50Mbps。由上海贝尔、诺基亚西门子通信、大唐电信、华为技术、中兴通信、中国移动、高通、ST-Ericsson等业者共同开发。\n**     WirelessMAN-Advanced（无线城域网升级版）：**\n     又称WiMAX-Advanced、WiMAX 2，即IEEE 802.16m是WiMAX的升级演进，由IEEE所主导制定，接收下行与上行最高速率可达到100Mbps，在静止定点接收可高达1Gbps。也是国际电信联盟承认的4G标准，不过随着Intel于2010年退出，WiMAX技术也已经被运营商放弃，并开始将设备升级为TD-LTE。\n\n| 运营商 | 上行(MHz) | 下行(MHz) | 上行速率(bps) | 下行速率(bps) |\n| --- | --- | --- | --- | --- |\n| 中国电信 | 2370～2390 | _2635～2655_ | 50M | 100M |\n| 中国移动 | 2300～2320 | 2555～2575 | 50M | 100M |\n| 中国联通 | _1880～1900、2320～2370_ | _2575～2635_ | 50M | 100M |\n\n详细可参考：[https://zh.wikipedia.org/wiki/4G](https://zh.wikipedia.org/wiki/4G)\n\n- 3G理论网速\n\n    3G理论网速为1-6Mbps，折合下载速度120K/s-600K/s；是指支持高速数据传输的蜂窝移动通讯技\t术。3G服务能够同时传送声音及数据信息，速率一般在几百kbps以上；\n\n| 运营商 | 上行(MHz) | 下行(MHz) | 上行速率(bps) | 下行速率(bps) | 调制方式 |\n| --- | --- | --- | --- | --- | --- |\n| CDMA2000\n(中国电信) | 825～835 | _870～880_ | 1.8M | 3.1M | FDD |\n| TD-SCDMA\n(中国移动) | 1880～1920 | 2010～2025 | 384K | 2.8M | TDD |\n| WCDMA\n(中国联通) | _1920-1980_ | _2110～2170_ | 5.76M | 7.2M | FDD |\n\n详细可参考：[https://zh.wikipedia.org/wiki/3G](https://zh.wikipedia.org/wiki/3G)\n\n- 2G理论网速\n\n     2G理论网速是150Kbps，折合下载速度15-20K/s；2G是第二代手机通信技术规格，以数字语音传输技术为核心。一般定义为无法直接传送如电子邮件、软件等信息；只具有通话和一些如时间日期等传送的手机通信技术规格；\n\n| 运营商 | 制式 | 上行速率(bps) | 下载速率(bps) | 理论峰值(bps) | 带宽 |\n| --- | --- | --- | --- | --- | --- |\n| 移动 | GPRS | _21.4K_ | 85.6K | 171.2K | 150K |\n|  | EDGE | 45K | 90K | 384K | 200K |\n| 联通 | _GPRS_ | _21.4K_ | 85.6K | 171.2K | 150K |\n|  | EDGE | 45K | 90K | 384K | 200K |\n\n    详细可参考：[https://jingyan.baidu.com/article/9158e0009e4708e2541228b4.html](https://jingyan.baidu.com/article/9158e0009e4708e2541228b4.html)\n    其他参考：[https://blog.csdn.net/mao834099514/article/details/79456881](https://blog.csdn.net/mao834099514/article/details/79456881)\n### 4.2 控制面SCTP协议\n\n- UDP\n\n用户数据报协议（_UDP_，User Datagram Protocol）\n```\nUser Datagram Protocol, Src Port: 5060, Dst Port: 5060\n    Source Port: 5060\n    Destination Port: 5060\n    Length: 356\n    Checksum: 0xf8a5 [unverified]\n    [Checksum Status: Unverified]\n    [Stream index: 0]\n    [Timestamps]\n        [Time since first frame: 0.007303000 seconds]\n        [Time since previous frame: 0.007303000 seconds]\n    UDP payload (348 bytes)\n\n```\n\n- TCP\n\n传输控制协议（_TCP_，Transmission Control Protocol）\n```\nTransmission Control Protocol, Src Port: 54872, Dst Port: 6070, Seq: 1, Ack: 1, Len: 3294\n    Source Port: 54872\n    Destination Port: 6070\n    [Stream index: 84]\n    [TCP Segment Len: 3294]\n    Sequence Number: 1    (relative sequence number)\n    Sequence Number (raw): 1324026701\n    [Next Sequence Number: 3295    (relative sequence number)]\n    Acknowledgment Number: 1    (relative ack number)\n    Acknowledgment number (raw): 3153941596\n    1000 .... = Header Length: 32 bytes (8)\n    Flags: 0x018 (PSH, ACK)\n        000. .... .... = Reserved: Not set\n        ...0 .... .... = Nonce: Not set\n        .... 0... .... = Congestion Window Reduced (CWR): Not set\n        .... .0.. .... = ECN-Echo: Not set\n        .... ..0. .... = Urgent: Not set\n        .... ...1 .... = Acknowledgment: Set\n        .... .... 1... = Push: Set\n        .... .... .0.. = Reset: Not set\n        .... .... ..0. = Syn: Not set\n        .... .... ...0 = Fin: Not set\n        [TCP Flags: ·······AP···]\n    Window: 32748\n    [Calculated window size: 32748]\n    [Window size scaling factor: -1 (unknown)]\n    Checksum: 0x3972 [unverified]\n    [Checksum Status: Unverified]\n    Urgent Pointer: 0\n    Options: (12 bytes), No-Operation (NOP), No-Operation (NOP), Timestamps\n        TCP Option - No-Operation (NOP)\n            Kind: No-Operation (1)\n        TCP Option - No-Operation (NOP)\n            Kind: No-Operation (1)\n        TCP Option - Timestamps: TSval 919902009, TSecr 919895231\n            Kind: Time Stamp Option (8)\n            Length: 10\n            Timestamp value: 919902009\n            Timestamp echo reply: 919895231\n    [SEQ/ACK analysis]\n        [Bytes in flight: 3294]\n        [Bytes sent since last PSH flag: 3294]\n    [Timestamps]\n        [Time since first frame in this TCP stream: 0.000000000 seconds]\n        [Time since previous frame in this TCP stream: 0.000000000 seconds]\n    TCP payload (3294 bytes)\n\n```\n详细参考：[https://segmentfault.com/a/1190000022410446](https://segmentfault.com/a/1190000022410446)\n​\n\n\n- SCTP\n\n流控制传输协议SCTP(Stream Control Transmission Protocol)\n```\nStream Control Transmission Protocol, Src Port: 38412 (38412), Dst Port: 38412 (38412)\n    Source port: 38412\n    Destination port: 38412\n    Verification tag: 0x0491fd24\n    [Association index: 65535]\n    Checksum: 0xc759d633 [unverified]\n    [Checksum Status: Unverified]\n    DATA chunk(ordered, complete segment, TSN: 39, SID: 1, SSN: 33, PPID: 60, payload length: 67 bytes)\n        Chunk type: DATA (0)\n        Chunk flags: 0x03\n            .... 0... = I-Bit: Possibly delay SACK\n            .... .0.. = U-Bit: Ordered delivery\n            .... ..1. = B-Bit: First segment\n            .... ...1 = E-Bit: Last segment\n        Chunk length: 83\n        Transmission sequence number: 39\n        Stream identifier: 0x0001\n        Stream sequence number: 33\n        Payload protocol identifier: NGAP (60)\n        Chunk padding: 00\n\n```\n详细参考：\n[https://zhuanlan.zhihu.com/p/67819220](https://zhuanlan.zhihu.com/p/67819220)\n\n| 协议 | 安全可靠 | 小包传输 | 大包传输 | 生态健全 | 成熟度 |\n| --- | --- | --- | --- | --- | --- |\n| UDP | * | *** | *** | *** | *** |\n| TCP | ** | ** | * | *** | *** |\n| SCTP | *** | * | ** | * | ** |\n\n### 4.3 网络转发\n常见的网路转发技术分为用户态转发技术、内核态转发技术、UIO旁路转发技术，之外还有交换芯片之类的这里不做过多介绍，下面主要介绍用户态、内核态、UIO旁路转发。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627486246857-f858f9dc-8420-4b98-ac89-c121eb17d689.png#clientId=u591ad28a-e8ae-4&from=paste&height=490&id=u00a5d948&margin=%5Bobject%20Object%5D&name=image.png&originHeight=532&originWidth=781&originalType=binary&ratio=1&size=157286&status=done&style=none&taskId=u0140e34b-eeb4-411b-be4f-ae0fb9980d5&width=719.5)\n在转发速率，难度及趋势上做了相关对比\n\n| 类型 | 用户态 | 内核态 | DPDK |\n| --- | --- | --- | --- |\n| 速度 | * | ** | *** |\n| 开发难度 | * | ***(不小心把内核态搞崩) | ** |\n| 周边工具 | *** | *** | *(借助VPP可以达到***) |\n| 社区趋势 | * | * | *** |\n\n综上所述DPDK基本是网络转发技术主流。\n[https://www.yuque.com/wuhao-bo7rr/rb9zmq/ak1moi](https://www.yuque.com/wuhao-bo7rr/rb9zmq/ak1moi)\n## 5.主要业务流程\n     商用手机终端入网，基站握手、核心网注册、IMS注册为必须项，只完成核心网注册，未完成IMS注册手机会自动掉线。\n### 5.1 基站建联\n​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627391179070-5ef19fd6-cdfe-4031-916b-eb11aeb0b808.png#clientId=ue276c832-69f5-4&from=paste&height=717&id=HCRzI&margin=%5Bobject%20Object%5D&name=image.png&originHeight=829&originWidth=554&originalType=binary&ratio=1&size=123452&status=done&style=none&taskId=u63efdef9-43bd-4448-bd6f-f594e8d09ea&width=479)\n手机与基站建联主要流程可以归结为：\n\n   - 小区搜索与选择\n\nUE开机选网，小区搜索并完成下行同步。\n\n   - 系统消息广播\n\nUE读取广播信息，选择合适小区进行驻留。\n\n   - 随机接入\n\nUE与gNB建立上行同步。\n\n   - RRC连接建立\n\nUE与gNB建立RRC连接。\n\n   - 注册过程\n\nUE注册到5G网络，网络侧开始维护该UE的上下文。\n​\n\n### 5.2 核心网注册\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627391130276-8e26e31c-b637-4803-befc-bd2fe46fce80.png#clientId=ue276c832-69f5-4&from=paste&height=826&id=iKwsM&margin=%5Bobject%20Object%5D&name=image.png&originHeight=826&originWidth=841&originalType=binary&ratio=1&size=228847&status=done&style=none&taskId=u7a19b13a-9c93-4ad6-a382-02ccff8827c&width=841)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627297426188-9d936938-2425-472e-a3d4-bc9f7db313fc.png#clientId=u3fb41919-abb0-4&from=paste&height=220&id=BnpTo&margin=%5Bobject%20Object%5D&name=image.png&originHeight=220&originWidth=1605&originalType=binary&ratio=1&size=184759&status=done&style=none&taskId=u6367eeed-a982-4404-92c4-aa9d3f1fd39&width=1605)\n \n整体可归纳为：\n\n- 注册请求\n\n终端携带SIM信息进行注册，核心网通过用户信息在UDM查询数据，以此判断是否需要identity request\n\n- 鉴权处理\n\n      核心网查询到用户信息后，发起Authentication request，终端收到请求后进行校验，回复Authentication response\n      此时双方共同进行双向鉴权。\n\n- 加密协商\n\n      终端与网络双方为选择加密算法，可选类型为4种，其中第一种为不加密，其余三种为加密算法，加密算法包含完整性保护算法和报文加密算法，分别是为了保护报文的安全性与正确性\n\n- 注册完成\n\n      网络侧返回注册完成，网络侧会携带网络能力告知终端。比如4G回落，IP短信能力。\n\n- 无线能力上报\n\n      终端上报无线能力，终端上报无线能力至服务端，此信令为非必须应答信令\n\n- 会话创建\n\n      终端创建流量传输通道，核心网在网络侧分配网络资源，此处一般会创建两个会话通道一个是IMS用来发短信打电话，一个是internet用来上网。由于IMS网络与Internet网络隔离这就是为什么在人多的地方有的时候网速慢打电话确没有影响。\n\n- IMS注册\n\n      终端完成会话通道创建后，会发起sip注册，商用终端必须完成sip注册后才可进行上网，这个原因大概是上网功能与ims功能为运营商基础能力，都需要完成后才算入网完成，手机层面表现为，出现HD为IMS网络注册完成。\n详细可参考：[https://www.yuque.com/wuhao-bo7rr/rb9zmq/gv4tpd](https://www.yuque.com/wuhao-bo7rr/rb9zmq/gv4tpd)\n### 5.3 IMS注册\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627393550010-ab490608-c0aa-415c-8aa2-35749258d676.png#clientId=ue276c832-69f5-4&from=paste&height=614&id=iOBZl&margin=%5Bobject%20Object%5D&name=image.png&originHeight=691&originWidth=704&originalType=binary&ratio=1&size=72864&status=done&style=none&taskId=ucd354c72-30eb-4676-b873-8e303c3f0cd&width=626)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627487171816-e2da3602-ee5c-4e68-b644-12bb3e575d29.png#clientId=u591ad28a-e8ae-4&from=paste&height=103&id=u801e3236&margin=%5Bobject%20Object%5D&name=image.png&originHeight=206&originWidth=2832&originalType=binary&ratio=1&size=179904&status=done&style=none&taskId=u4579b25f-b3f9-4e2b-b287-cee9c146a5e&width=1416)\n### 5.4 短信发送\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627393585310-6f9ba81e-d9fb-4245-80cf-c83aa7588bc3.png#clientId=ue276c832-69f5-4&from=paste&height=698&id=R2dku&margin=%5Bobject%20Object%5D&name=image.png&originHeight=698&originWidth=1145&originalType=binary&ratio=1&size=97410&status=done&style=none&taskId=ua3fd77d1-9e57-466e-a4f7-f3d3286a9ab&width=1145)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627487350302-314d17cd-fd39-4330-ba7e-eced2c55f0db.png#clientId=u591ad28a-e8ae-4&from=paste&height=79&id=u9eea8836&margin=%5Bobject%20Object%5D&name=image.png&originHeight=158&originWidth=2706&originalType=binary&ratio=1&size=91621&status=done&style=none&taskId=ua89d6db6-03e6-400f-9f25-a6f88a2d590&width=1353)\n### 5.5 语音呼叫 \n\n\n![下载 (3).png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627470940752-974ccafb-9a9f-4493-b685-fc011492c598.png#clientId=u483e4c72-e2ee-4&from=drop&id=uae785ddf&margin=%5Bobject%20Object%5D&name=%E4%B8%8B%E8%BD%BD%20%283%29.png&originHeight=1215&originWidth=1277&originalType=binary&ratio=1&size=133973&status=done&style=none&taskId=ua18dae18-1f40-42d0-8acd-04779ad4c05)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627471023385-85c0acc3-4b59-45fc-bca4-abf99963f673.png#clientId=u483e4c72-e2ee-4&from=paste&height=250&id=u01d42343&margin=%5Bobject%20Object%5D&name=image.png&originHeight=250&originWidth=1286&originalType=binary&ratio=1&size=234005&status=done&style=none&taskId=ue1c25eb8-003d-44f7-ac45-24f1c730440&width=1286)\n​\n\n","source":"_posts/network/5G移动网络.md","raw":"---\ntitle: 5G网络\n\ncategories:\n- 5G\n\ntag:\n- 5G\n- MEC\n- 网络切片\n---\n\n# 5G网络概述\n\n## 1.网络架构\n   5G网络的主要涵盖基站(gNB)、承载网、5G核心网(5GC)、IMS核心网(IMS)、5G消息(RCS)、边缘计算(MEC)等网络功能模块,借助上述网路功能模块，提供无线射频信号的收发、网路流量的转发、短信、音视频电话、富媒体消息、MAAP消息业务(类似微信公众号+小程序)等。下图为5G网络架构图。\n![下载.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627354681299-fa0eab41-6e38-49d7-8e5a-46acacb57d8d.png#clientId=u0c2dc641-5b75-4&from=paste&height=724&id=u4bbac9fc&margin=%5Bobject%20Object%5D&name=%E4%B8%8B%E8%BD%BD.png&originHeight=942&originWidth=730&originalType=binary&ratio=1&size=137523&status=done&style=none&taskId=ud767b281-b748-4825-bd3d-1f64cf57f47&width=561)\n下文分别针对设备接入层、接入网、5G核心网、IMS网络、5G消息等模块进行介绍。\n\n- 设备接入（5G手机）：\n\n设备网络通信模块主要是基于芯片，市面上分为高通、海思、天玑等几大类。主流手机小米10、华为P40、华为Mate、荣耀30等之后型号基本都支持。\n\n- 接入网（gNB）：\n\n gNB主要分为宏基站与微基站（室内站），国内宏基站以华为、中兴、大唐为主，以华为基站为例包含AAU 、BBU，AAU负责无线信号收发，BBU与核心网联通，微基站以京信、共进、佰才邦，以共进为例，主要是以一体化基站为主。其中宏基站用于增加网路覆盖，微基站用于增强信号质量。\n\n- 5G核心网(5GC)：\n\n     核心网络建设主要用于提供 5G 终端设备（如手机，车载终端，摄像头等设备）的身份鉴权、流量分发、边缘计算、网络切片等业务能力，核心网网元较多，这针对重点网元进行介绍，AMF用于提供用户接入控制，对外主要网络协议为NAS、NGAP，UDM用于提供用户信息存储，即用户开卡信息，网络认证秘钥等， SMF用于提供网络流量控制，UPF用于提供网络流量转发。\n\n- IMS核心网(IMS)：\n\n主要提供短信、音视频通话、电话会议等能力，主要通信协议为SIP、RTP，音频编解码为AMR，视频编解码4G为H264,5G为H265。其中SBC/P-CSCF提供终端接入功能, CSCF提供信令路由功能，IP Centex提供会议接入等功能。\n\n- 5G消息(RCS)：\n\n      5G消息主要提供富媒体通信能力，借助手机原生能力能力实现富媒体通信，主要提供单聊、群聊、MAAP等业务，对手机侧通信协议主要包含SIP、MSRP等协议，对企业接入主要提供HTTP协议。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627314165117-add1c2c7-04e6-4ccb-be5d-e7d68f14d600.png#clientId=ua70594ae-1f25-4&from=paste&height=385&id=cwOqf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=385&originWidth=420&originalType=binary&ratio=1&size=152601&status=done&style=none&taskId=uaebd138d-d72f-4dd4-952c-f86ea6c17dd&width=420)\n   通过上述业务分析，相比原有通信能力，5G网络整体趋势为网络精细化、网络开放化、通信多样化、网络智能化演进。\n     下文对主要业务流程进行接入. 5G核心网文档可参考(TS 23.501, TS 23.502)\n## 2.5G主要网络协议栈\n### 2.1 4/5G协议栈对比\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1626931898798-9421984d-e966-42a1-9e79-7e3ec35b492d.png#clientId=u154c83d4-6762-4&from=paste&height=866&id=eEVVz&margin=%5Bobject%20Object%5D&name=image.png&originHeight=866&originWidth=1311&originalType=binary&ratio=1&size=915401&status=done&style=none&taskId=uff0338a0-360d-4d57-ac82-bfe3b0f8c1f&width=1311)\n相比4G核心网来说主要是架构及内部协议层面：\n\n- 5G核心网架构发生比较大的变化，引入NRF设备用于网络设备的注册与发现\n- 网元间协议由原来的diamter换为http2\n- 用户面与控制面解耦，为UPF下沉提供支持\n- 控制面协议有s1-ap改为ngap\n- 用户面协议增加扩展头\n### 2.2 5G数据面传输协议\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627264248595-2f3b2b36-3484-4192-8db4-4e7f92f22244.png#clientId=uc9b4fbe8-9b07-4&from=paste&height=442&id=JzhxG&margin=%5Bobject%20Object%5D&name=image.png&originHeight=884&originWidth=1616&originalType=binary&ratio=1&size=356332&status=done&style=none&taskId=u8a1ff3c9-934e-401d-b210-104bcf61da3&width=808)\n   5G网络中UPF设备主要用于用户面数据的转发，主要功能是流量控制以及GTP包的拆解包。\n   [https://github.com/5GOpenUPF/openupf](https://github.com/5GOpenUPF/openupf)\n## 3.5G网络重要特性\n\n\n### 3.1 网络切片\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627314856942-e617a4e3-30d1-4266-80aa-4d934b76c028.png#clientId=ua70594ae-1f25-4&from=paste&height=463&id=u5f84f5cc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=463&originWidth=823&originalType=binary&ratio=1&size=139413&status=done&style=none&taskId=ud0943c7d-036a-458b-abb2-57a8b2a6be8&width=823)\n5G网络基于三大业务场景的网络切片，使切片场景更加多样化。\n\n- eMBB，提供大带宽流量通道，主要是借助无线侧提升带宽上限。\n- uRLLC，提供低时延网络，主要借助边缘网络进行边缘计算降低端到端网络距离。\n- mMTC，提供大规模机器通信，及4G中NB-IOT规范在制定中预计R16版本制定。现在采用4G核心网eLTE增强实现。\n\n切片实现基于核心网信令侧提供切片标识传输，用户面实现切片能力提供。切片承载标识以NSSAI，SST，SD等作为切片标识。\n详细可参考：[https://www.yuque.com/wuhao-bo7rr/rb9zmq/epd319](https://www.yuque.com/wuhao-bo7rr/rb9zmq/epd319)\n### 3.2 边缘计算 \n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627314921136-6ca8027e-9ccb-4106-907a-7a849ed2feea.png#clientId=ua70594ae-1f25-4&from=paste&height=466&id=u9cccc87f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=466&originWidth=807&originalType=binary&ratio=1&size=108543&status=done&style=none&taskId=u5071bf83-230e-480a-8be6-78d87f3a5d7&width=807)\n\n- 概述\n\n     边缘计算在靠近数据源或用户的地方提供计算、存储等基础设施，并为边缘应用提供云服务和 IT 环境服务。相比于集中部署的云计算服务，边缘计算解决了时延过长、汇聚流量过大等问题，为实时性和带宽密集型业务提供更好的支持。随着 5G 和工业互联网的快速发展，新兴业务对边缘计算的需求十分迫切。在众多垂直行业新兴业务中，对边缘计算的需求主要体现在时延、带宽和安全三个方面。\n\n- 实现\n   - UPF 地址下发可采用 NRF(5G 网络注册设备)获取或 OAM(系统配置)配置\n   - 通过 5G 核心网配置及 SMF 下发 UPF 地址实现 UPF 地址的下沉\n- 示例\n\n       以移动边缘计算平台为例主要涵盖\n\n   - 边缘设备管理\n\n支持纳管不同算力、不同平台的边缘节点，实现对边缘节点和终端设备进行管理，如：状态监控、资源调度、日志查询等\n\n   - 边缘协议适配\n\n边缘计算通过驱动方式灵活支持多种工业协议设备接入，原生支持MQTT、OPC-UA、Modbus协议设备接入\n\n   - 边缘应用管理\n\n边缘应用市场提供预置边缘容器应用，也可进行自定义应用开发，并支持下发至边缘节点运行，云端可对应用进行全生命周期管理\n\n   - 边缘数据路由\n\n支持将边缘节点数据通过灵活的方式路由到OneNET云端。并可以通过云端再分发到其他PaaS服务或客户自有应用\n\n   - 边缘规则计算\n\n支持在边缘节点进行规则引擎计算，按照既定规则进行匹配，若匹配成功后则按照相关预定动作执行\n\n   - 边缘数据存储\n\n支持在边缘节点进行多并发的海量时序列数据库存储，并在断网的情况自动实现离线存储\n\n   - 边缘数据分析\n\n基于flink计算引擎，实现在云端通过可视化的方式配置计算任务，再下发到边缘节点执行\n\n   - 边缘智能推理\n\n通过预置应用方式，将针对特定行业和场景的AI模型下发至边缘节点进行推理\n\n- 参考\n   - 移动边缘计算平台：[https://open.iot.10086.cn/productservice/edge/](https://open.iot.10086.cn/productservice/edge/)\n   - 5G开源边缘计算平台[https://gitee.com/edgegallery](https://gitee.com/edgegallery)\n## 4.关键技术点解析\n\n\n### 4.1 无线侧增强\n各网络速率对比\n\n| **网络制式** | **2G** | **3G** | **4G** | **5G** |\n| --- | --- | --- | --- | --- |\n| 下行速率 | 150K | 2.8Mbps | 100Mbps | 1.54Gbps |\n| 上行速率 | 40K | 384Kbps | 50Mbps | 308Mbps |\n\n\u0000\n\n- 5G网速计算公式\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627436031283-5e53d4dd-39d5-4740-82f8-cdf52a84acd9.png#clientId=u79b8274a-e51d-4&from=paste&id=ue0563563&margin=%5Bobject%20Object%5D&name=image.png&originHeight=218&originWidth=1080&originalType=url&ratio=1&size=81090&status=done&style=none&taskId=u3b85cb7d-8ed8-4535-b791-18ba1cf2a1f)\n△ 5G载波的峰值计算公式\n\n- **MIMO层数**：下行4层，上行2层。\n- **调制阶数**：下行8阶（256QAM），上行6阶（64QAM）。\n- **编码码率**：948/1024≈0.926。\n- **PRB个数**：273，公式里面的12代表每个PRB包含12个子载波。\n- **资源开销占比**意为无线资源中用作控制，不能用来发送数据的比例，协议给出了典型的数据：下行14%，上行8%。\n- **符号数**意为每秒可实际传送数据的符号个数，因不同的TDD帧结构而异，具体可参考前面第二部分的表格。现取2.5毫秒双周期帧结构的值：下行18400，上行9200。\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627436031455-2bed1bb5-ee54-4d95-9ebf-3013930858fb.png#clientId=u79b8274a-e51d-4&from=paste&id=ufe3b5631&margin=%5Bobject%20Object%5D&name=image.png&originHeight=302&originWidth=640&originalType=url&ratio=1&size=124474&status=done&style=none&taskId=uc5a75f46-1a74-4f37-8c4b-4ead672b9ec)\n△ 5G载波的峰值计算因素图示\n把上述数据代入前面的公式，可得：\n\n- **下行峰值速率为：1.54Gbps**\n- **上行峰值速率为：308Mbps**\n\n现在电信和联通正在共享3.5GHz频段上的100MHz的带宽，单个手机能达到的理论速率就是上述的两个值。如果这两家后续开通200MHz的话，因为带宽翻倍，速率也将翻倍，下行速率可以高达3.08Gbps！\n详细可参考：[https://zhuanlan.zhihu.com/p/108553808](https://zhuanlan.zhihu.com/p/108553808)\n​\n\n\n- 4G理论网速\n\n**     LTE-Advanced（长期演进技术升级版）：**\n     LTE的升级演进，由3GPP所主导制定，完全向后兼容LTE，通常通过在LTE上通过软件升级即可，升级过程类似于从W-CDMA升级到HSPA。峰值速率：下行1Gbps，上行500Mbps。是第一批被国际电信联盟承认的4G标准，也是事实上的唯一主流4G标准。另有TD-LTE的升级演进TD-LTE-Advanced（TD-LTE-A）。\n**     LTE FDD（频分双工长期演进技术）：**\n     最早提出的LTE制式，目前该技术最成熟，全球应用最广泛，终端种类最多[5]。峰值速率：下行150Mbps，上行40Mbps。\n**     LTE TDD（时分双工长期演进技术）：**\n     又称TD-LTE，是LTE的另一个分支。峰值速率：下行100Mbps，上行50Mbps。由上海贝尔、诺基亚西门子通信、大唐电信、华为技术、中兴通信、中国移动、高通、ST-Ericsson等业者共同开发。\n**     WirelessMAN-Advanced（无线城域网升级版）：**\n     又称WiMAX-Advanced、WiMAX 2，即IEEE 802.16m是WiMAX的升级演进，由IEEE所主导制定，接收下行与上行最高速率可达到100Mbps，在静止定点接收可高达1Gbps。也是国际电信联盟承认的4G标准，不过随着Intel于2010年退出，WiMAX技术也已经被运营商放弃，并开始将设备升级为TD-LTE。\n\n| 运营商 | 上行(MHz) | 下行(MHz) | 上行速率(bps) | 下行速率(bps) |\n| --- | --- | --- | --- | --- |\n| 中国电信 | 2370～2390 | _2635～2655_ | 50M | 100M |\n| 中国移动 | 2300～2320 | 2555～2575 | 50M | 100M |\n| 中国联通 | _1880～1900、2320～2370_ | _2575～2635_ | 50M | 100M |\n\n详细可参考：[https://zh.wikipedia.org/wiki/4G](https://zh.wikipedia.org/wiki/4G)\n\n- 3G理论网速\n\n    3G理论网速为1-6Mbps，折合下载速度120K/s-600K/s；是指支持高速数据传输的蜂窝移动通讯技\t术。3G服务能够同时传送声音及数据信息，速率一般在几百kbps以上；\n\n| 运营商 | 上行(MHz) | 下行(MHz) | 上行速率(bps) | 下行速率(bps) | 调制方式 |\n| --- | --- | --- | --- | --- | --- |\n| CDMA2000\n(中国电信) | 825～835 | _870～880_ | 1.8M | 3.1M | FDD |\n| TD-SCDMA\n(中国移动) | 1880～1920 | 2010～2025 | 384K | 2.8M | TDD |\n| WCDMA\n(中国联通) | _1920-1980_ | _2110～2170_ | 5.76M | 7.2M | FDD |\n\n详细可参考：[https://zh.wikipedia.org/wiki/3G](https://zh.wikipedia.org/wiki/3G)\n\n- 2G理论网速\n\n     2G理论网速是150Kbps，折合下载速度15-20K/s；2G是第二代手机通信技术规格，以数字语音传输技术为核心。一般定义为无法直接传送如电子邮件、软件等信息；只具有通话和一些如时间日期等传送的手机通信技术规格；\n\n| 运营商 | 制式 | 上行速率(bps) | 下载速率(bps) | 理论峰值(bps) | 带宽 |\n| --- | --- | --- | --- | --- | --- |\n| 移动 | GPRS | _21.4K_ | 85.6K | 171.2K | 150K |\n|  | EDGE | 45K | 90K | 384K | 200K |\n| 联通 | _GPRS_ | _21.4K_ | 85.6K | 171.2K | 150K |\n|  | EDGE | 45K | 90K | 384K | 200K |\n\n    详细可参考：[https://jingyan.baidu.com/article/9158e0009e4708e2541228b4.html](https://jingyan.baidu.com/article/9158e0009e4708e2541228b4.html)\n    其他参考：[https://blog.csdn.net/mao834099514/article/details/79456881](https://blog.csdn.net/mao834099514/article/details/79456881)\n### 4.2 控制面SCTP协议\n\n- UDP\n\n用户数据报协议（_UDP_，User Datagram Protocol）\n```\nUser Datagram Protocol, Src Port: 5060, Dst Port: 5060\n    Source Port: 5060\n    Destination Port: 5060\n    Length: 356\n    Checksum: 0xf8a5 [unverified]\n    [Checksum Status: Unverified]\n    [Stream index: 0]\n    [Timestamps]\n        [Time since first frame: 0.007303000 seconds]\n        [Time since previous frame: 0.007303000 seconds]\n    UDP payload (348 bytes)\n\n```\n\n- TCP\n\n传输控制协议（_TCP_，Transmission Control Protocol）\n```\nTransmission Control Protocol, Src Port: 54872, Dst Port: 6070, Seq: 1, Ack: 1, Len: 3294\n    Source Port: 54872\n    Destination Port: 6070\n    [Stream index: 84]\n    [TCP Segment Len: 3294]\n    Sequence Number: 1    (relative sequence number)\n    Sequence Number (raw): 1324026701\n    [Next Sequence Number: 3295    (relative sequence number)]\n    Acknowledgment Number: 1    (relative ack number)\n    Acknowledgment number (raw): 3153941596\n    1000 .... = Header Length: 32 bytes (8)\n    Flags: 0x018 (PSH, ACK)\n        000. .... .... = Reserved: Not set\n        ...0 .... .... = Nonce: Not set\n        .... 0... .... = Congestion Window Reduced (CWR): Not set\n        .... .0.. .... = ECN-Echo: Not set\n        .... ..0. .... = Urgent: Not set\n        .... ...1 .... = Acknowledgment: Set\n        .... .... 1... = Push: Set\n        .... .... .0.. = Reset: Not set\n        .... .... ..0. = Syn: Not set\n        .... .... ...0 = Fin: Not set\n        [TCP Flags: ·······AP···]\n    Window: 32748\n    [Calculated window size: 32748]\n    [Window size scaling factor: -1 (unknown)]\n    Checksum: 0x3972 [unverified]\n    [Checksum Status: Unverified]\n    Urgent Pointer: 0\n    Options: (12 bytes), No-Operation (NOP), No-Operation (NOP), Timestamps\n        TCP Option - No-Operation (NOP)\n            Kind: No-Operation (1)\n        TCP Option - No-Operation (NOP)\n            Kind: No-Operation (1)\n        TCP Option - Timestamps: TSval 919902009, TSecr 919895231\n            Kind: Time Stamp Option (8)\n            Length: 10\n            Timestamp value: 919902009\n            Timestamp echo reply: 919895231\n    [SEQ/ACK analysis]\n        [Bytes in flight: 3294]\n        [Bytes sent since last PSH flag: 3294]\n    [Timestamps]\n        [Time since first frame in this TCP stream: 0.000000000 seconds]\n        [Time since previous frame in this TCP stream: 0.000000000 seconds]\n    TCP payload (3294 bytes)\n\n```\n详细参考：[https://segmentfault.com/a/1190000022410446](https://segmentfault.com/a/1190000022410446)\n​\n\n\n- SCTP\n\n流控制传输协议SCTP(Stream Control Transmission Protocol)\n```\nStream Control Transmission Protocol, Src Port: 38412 (38412), Dst Port: 38412 (38412)\n    Source port: 38412\n    Destination port: 38412\n    Verification tag: 0x0491fd24\n    [Association index: 65535]\n    Checksum: 0xc759d633 [unverified]\n    [Checksum Status: Unverified]\n    DATA chunk(ordered, complete segment, TSN: 39, SID: 1, SSN: 33, PPID: 60, payload length: 67 bytes)\n        Chunk type: DATA (0)\n        Chunk flags: 0x03\n            .... 0... = I-Bit: Possibly delay SACK\n            .... .0.. = U-Bit: Ordered delivery\n            .... ..1. = B-Bit: First segment\n            .... ...1 = E-Bit: Last segment\n        Chunk length: 83\n        Transmission sequence number: 39\n        Stream identifier: 0x0001\n        Stream sequence number: 33\n        Payload protocol identifier: NGAP (60)\n        Chunk padding: 00\n\n```\n详细参考：\n[https://zhuanlan.zhihu.com/p/67819220](https://zhuanlan.zhihu.com/p/67819220)\n\n| 协议 | 安全可靠 | 小包传输 | 大包传输 | 生态健全 | 成熟度 |\n| --- | --- | --- | --- | --- | --- |\n| UDP | * | *** | *** | *** | *** |\n| TCP | ** | ** | * | *** | *** |\n| SCTP | *** | * | ** | * | ** |\n\n### 4.3 网络转发\n常见的网路转发技术分为用户态转发技术、内核态转发技术、UIO旁路转发技术，之外还有交换芯片之类的这里不做过多介绍，下面主要介绍用户态、内核态、UIO旁路转发。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627486246857-f858f9dc-8420-4b98-ac89-c121eb17d689.png#clientId=u591ad28a-e8ae-4&from=paste&height=490&id=u00a5d948&margin=%5Bobject%20Object%5D&name=image.png&originHeight=532&originWidth=781&originalType=binary&ratio=1&size=157286&status=done&style=none&taskId=u0140e34b-eeb4-411b-be4f-ae0fb9980d5&width=719.5)\n在转发速率，难度及趋势上做了相关对比\n\n| 类型 | 用户态 | 内核态 | DPDK |\n| --- | --- | --- | --- |\n| 速度 | * | ** | *** |\n| 开发难度 | * | ***(不小心把内核态搞崩) | ** |\n| 周边工具 | *** | *** | *(借助VPP可以达到***) |\n| 社区趋势 | * | * | *** |\n\n综上所述DPDK基本是网络转发技术主流。\n[https://www.yuque.com/wuhao-bo7rr/rb9zmq/ak1moi](https://www.yuque.com/wuhao-bo7rr/rb9zmq/ak1moi)\n## 5.主要业务流程\n     商用手机终端入网，基站握手、核心网注册、IMS注册为必须项，只完成核心网注册，未完成IMS注册手机会自动掉线。\n### 5.1 基站建联\n​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627391179070-5ef19fd6-cdfe-4031-916b-eb11aeb0b808.png#clientId=ue276c832-69f5-4&from=paste&height=717&id=HCRzI&margin=%5Bobject%20Object%5D&name=image.png&originHeight=829&originWidth=554&originalType=binary&ratio=1&size=123452&status=done&style=none&taskId=u63efdef9-43bd-4448-bd6f-f594e8d09ea&width=479)\n手机与基站建联主要流程可以归结为：\n\n   - 小区搜索与选择\n\nUE开机选网，小区搜索并完成下行同步。\n\n   - 系统消息广播\n\nUE读取广播信息，选择合适小区进行驻留。\n\n   - 随机接入\n\nUE与gNB建立上行同步。\n\n   - RRC连接建立\n\nUE与gNB建立RRC连接。\n\n   - 注册过程\n\nUE注册到5G网络，网络侧开始维护该UE的上下文。\n​\n\n### 5.2 核心网注册\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627391130276-8e26e31c-b637-4803-befc-bd2fe46fce80.png#clientId=ue276c832-69f5-4&from=paste&height=826&id=iKwsM&margin=%5Bobject%20Object%5D&name=image.png&originHeight=826&originWidth=841&originalType=binary&ratio=1&size=228847&status=done&style=none&taskId=u7a19b13a-9c93-4ad6-a382-02ccff8827c&width=841)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627297426188-9d936938-2425-472e-a3d4-bc9f7db313fc.png#clientId=u3fb41919-abb0-4&from=paste&height=220&id=BnpTo&margin=%5Bobject%20Object%5D&name=image.png&originHeight=220&originWidth=1605&originalType=binary&ratio=1&size=184759&status=done&style=none&taskId=u6367eeed-a982-4404-92c4-aa9d3f1fd39&width=1605)\n \n整体可归纳为：\n\n- 注册请求\n\n终端携带SIM信息进行注册，核心网通过用户信息在UDM查询数据，以此判断是否需要identity request\n\n- 鉴权处理\n\n      核心网查询到用户信息后，发起Authentication request，终端收到请求后进行校验，回复Authentication response\n      此时双方共同进行双向鉴权。\n\n- 加密协商\n\n      终端与网络双方为选择加密算法，可选类型为4种，其中第一种为不加密，其余三种为加密算法，加密算法包含完整性保护算法和报文加密算法，分别是为了保护报文的安全性与正确性\n\n- 注册完成\n\n      网络侧返回注册完成，网络侧会携带网络能力告知终端。比如4G回落，IP短信能力。\n\n- 无线能力上报\n\n      终端上报无线能力，终端上报无线能力至服务端，此信令为非必须应答信令\n\n- 会话创建\n\n      终端创建流量传输通道，核心网在网络侧分配网络资源，此处一般会创建两个会话通道一个是IMS用来发短信打电话，一个是internet用来上网。由于IMS网络与Internet网络隔离这就是为什么在人多的地方有的时候网速慢打电话确没有影响。\n\n- IMS注册\n\n      终端完成会话通道创建后，会发起sip注册，商用终端必须完成sip注册后才可进行上网，这个原因大概是上网功能与ims功能为运营商基础能力，都需要完成后才算入网完成，手机层面表现为，出现HD为IMS网络注册完成。\n详细可参考：[https://www.yuque.com/wuhao-bo7rr/rb9zmq/gv4tpd](https://www.yuque.com/wuhao-bo7rr/rb9zmq/gv4tpd)\n### 5.3 IMS注册\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627393550010-ab490608-c0aa-415c-8aa2-35749258d676.png#clientId=ue276c832-69f5-4&from=paste&height=614&id=iOBZl&margin=%5Bobject%20Object%5D&name=image.png&originHeight=691&originWidth=704&originalType=binary&ratio=1&size=72864&status=done&style=none&taskId=ucd354c72-30eb-4676-b873-8e303c3f0cd&width=626)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627487171816-e2da3602-ee5c-4e68-b644-12bb3e575d29.png#clientId=u591ad28a-e8ae-4&from=paste&height=103&id=u801e3236&margin=%5Bobject%20Object%5D&name=image.png&originHeight=206&originWidth=2832&originalType=binary&ratio=1&size=179904&status=done&style=none&taskId=u4579b25f-b3f9-4e2b-b287-cee9c146a5e&width=1416)\n### 5.4 短信发送\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627393585310-6f9ba81e-d9fb-4245-80cf-c83aa7588bc3.png#clientId=ue276c832-69f5-4&from=paste&height=698&id=R2dku&margin=%5Bobject%20Object%5D&name=image.png&originHeight=698&originWidth=1145&originalType=binary&ratio=1&size=97410&status=done&style=none&taskId=ua3fd77d1-9e57-466e-a4f7-f3d3286a9ab&width=1145)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627487350302-314d17cd-fd39-4330-ba7e-eced2c55f0db.png#clientId=u591ad28a-e8ae-4&from=paste&height=79&id=u9eea8836&margin=%5Bobject%20Object%5D&name=image.png&originHeight=158&originWidth=2706&originalType=binary&ratio=1&size=91621&status=done&style=none&taskId=ua89d6db6-03e6-400f-9f25-a6f88a2d590&width=1353)\n### 5.5 语音呼叫 \n\n\n![下载 (3).png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627470940752-974ccafb-9a9f-4493-b685-fc011492c598.png#clientId=u483e4c72-e2ee-4&from=drop&id=uae785ddf&margin=%5Bobject%20Object%5D&name=%E4%B8%8B%E8%BD%BD%20%283%29.png&originHeight=1215&originWidth=1277&originalType=binary&ratio=1&size=133973&status=done&style=none&taskId=ua18dae18-1f40-42d0-8acd-04779ad4c05)\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627471023385-85c0acc3-4b59-45fc-bca4-abf99963f673.png#clientId=u483e4c72-e2ee-4&from=paste&height=250&id=u01d42343&margin=%5Bobject%20Object%5D&name=image.png&originHeight=250&originWidth=1286&originalType=binary&ratio=1&size=234005&status=done&style=none&taskId=ue1c25eb8-003d-44f7-ac45-24f1c730440&width=1286)\n​\n\n","slug":"network/5G移动网络","published":1,"date":"2021-09-06T14:29:47.111Z","updated":"2021-09-06T14:29:47.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyho0005u6uk7pj8eq7o","content":"<h1 id=\"5G网络概述\"><a href=\"#5G网络概述\" class=\"headerlink\" title=\"5G网络概述\"></a>5G网络概述</h1><h2 id=\"1-网络架构\"><a href=\"#1-网络架构\" class=\"headerlink\" title=\"1.网络架构\"></a>1.网络架构</h2><p>   5G网络的主要涵盖基站(gNB)、承载网、5G核心网(5GC)、IMS核心网(IMS)、5G消息(RCS)、边缘计算(MEC)等网络功能模块,借助上述网路功能模块，提供无线射频信号的收发、网路流量的转发、短信、音视频电话、富媒体消息、MAAP消息业务(类似微信公众号+小程序)等。下图为5G网络架构图。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627354681299-fa0eab41-6e38-49d7-8e5a-46acacb57d8d.png#clientId=u0c2dc641-5b75-4&from=paste&height=724&id=u4bbac9fc&margin=%5Bobject%20Object%5D&name=%E4%B8%8B%E8%BD%BD.png&originHeight=942&originWidth=730&originalType=binary&ratio=1&size=137523&status=done&style=none&taskId=ud767b281-b748-4825-bd3d-1f64cf57f47&width=561\" alt=\"下载.png\"><br>下文分别针对设备接入层、接入网、5G核心网、IMS网络、5G消息等模块进行介绍。</p>\n<ul>\n<li>设备接入（5G手机）：</li>\n</ul>\n<p>设备网络通信模块主要是基于芯片，市面上分为高通、海思、天玑等几大类。主流手机小米10、华为P40、华为Mate、荣耀30等之后型号基本都支持。</p>\n<ul>\n<li>接入网（gNB）：</li>\n</ul>\n<p> gNB主要分为宏基站与微基站（室内站），国内宏基站以华为、中兴、大唐为主，以华为基站为例包含AAU 、BBU，AAU负责无线信号收发，BBU与核心网联通，微基站以京信、共进、佰才邦，以共进为例，主要是以一体化基站为主。其中宏基站用于增加网路覆盖，微基站用于增强信号质量。</p>\n<ul>\n<li><p>5G核心网(5GC)：</p>\n<p>   核心网络建设主要用于提供 5G 终端设备（如手机，车载终端，摄像头等设备）的身份鉴权、流量分发、边缘计算、网络切片等业务能力，核心网网元较多，这针对重点网元进行介绍，AMF用于提供用户接入控制，对外主要网络协议为NAS、NGAP，UDM用于提供用户信息存储，即用户开卡信息，网络认证秘钥等， SMF用于提供网络流量控制，UPF用于提供网络流量转发。</p>\n</li>\n<li><p>IMS核心网(IMS)：</p>\n</li>\n</ul>\n<p>主要提供短信、音视频通话、电话会议等能力，主要通信协议为SIP、RTP，音频编解码为AMR，视频编解码4G为H264,5G为H265。其中SBC/P-CSCF提供终端接入功能, CSCF提供信令路由功能，IP Centex提供会议接入等功能。</p>\n<ul>\n<li><p>5G消息(RCS)：</p>\n<pre><code>5G消息主要提供富媒体通信能力，借助手机原生能力能力实现富媒体通信，主要提供单聊、群聊、MAAP等业务，对手机侧通信协议主要包含SIP、MSRP等协议，对企业接入主要提供HTTP协议。\n</code></pre>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627314165117-add1c2c7-04e6-4ccb-be5d-e7d68f14d600.png#clientId=ua70594ae-1f25-4&from=paste&height=385&id=cwOqf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=385&originWidth=420&originalType=binary&ratio=1&size=152601&status=done&style=none&taskId=uaebd138d-d72f-4dd4-952c-f86ea6c17dd&width=420\" alt=\"image.png\"><br> 通过上述业务分析，相比原有通信能力，5G网络整体趋势为网络精细化、网络开放化、通信多样化、网络智能化演进。<br>   下文对主要业务流程进行接入. 5G核心网文档可参考(TS 23.501, TS 23.502)</p>\n<h2 id=\"2-5G主要网络协议栈\"><a href=\"#2-5G主要网络协议栈\" class=\"headerlink\" title=\"2.5G主要网络协议栈\"></a>2.5G主要网络协议栈</h2><h3 id=\"2-1-4-5G协议栈对比\"><a href=\"#2-1-4-5G协议栈对比\" class=\"headerlink\" title=\"2.1 4/5G协议栈对比\"></a>2.1 4/5G协议栈对比</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1626931898798-9421984d-e966-42a1-9e79-7e3ec35b492d.png#clientId=u154c83d4-6762-4&from=paste&height=866&id=eEVVz&margin=%5Bobject%20Object%5D&name=image.png&originHeight=866&originWidth=1311&originalType=binary&ratio=1&size=915401&status=done&style=none&taskId=uff0338a0-360d-4d57-ac82-bfe3b0f8c1f&width=1311\" alt=\"image.png\"><br>相比4G核心网来说主要是架构及内部协议层面：</p>\n</li>\n<li><p>5G核心网架构发生比较大的变化，引入NRF设备用于网络设备的注册与发现</p>\n</li>\n<li><p>网元间协议由原来的diamter换为http2</p>\n</li>\n<li><p>用户面与控制面解耦，为UPF下沉提供支持</p>\n</li>\n<li><p>控制面协议有s1-ap改为ngap</p>\n</li>\n<li><p>用户面协议增加扩展头</p>\n<h3 id=\"2-2-5G数据面传输协议\"><a href=\"#2-2-5G数据面传输协议\" class=\"headerlink\" title=\"2.2 5G数据面传输协议\"></a>2.2 5G数据面传输协议</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627264248595-2f3b2b36-3484-4192-8db4-4e7f92f22244.png#clientId=uc9b4fbe8-9b07-4&from=paste&height=442&id=JzhxG&margin=%5Bobject%20Object%5D&name=image.png&originHeight=884&originWidth=1616&originalType=binary&ratio=1&size=356332&status=done&style=none&taskId=u8a1ff3c9-934e-401d-b210-104bcf61da3&width=808\" alt=\"image.png\"><br> 5G网络中UPF设备主要用于用户面数据的转发，主要功能是流量控制以及GTP包的拆解包。<br> <a href=\"https://github.com/5GOpenUPF/openupf\">https://github.com/5GOpenUPF/openupf</a></p>\n<h2 id=\"3-5G网络重要特性\"><a href=\"#3-5G网络重要特性\" class=\"headerlink\" title=\"3.5G网络重要特性\"></a>3.5G网络重要特性</h2></li>\n</ul>\n<h3 id=\"3-1-网络切片\"><a href=\"#3-1-网络切片\" class=\"headerlink\" title=\"3.1 网络切片\"></a>3.1 网络切片</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627314856942-e617a4e3-30d1-4266-80aa-4d934b76c028.png#clientId=ua70594ae-1f25-4&from=paste&height=463&id=u5f84f5cc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=463&originWidth=823&originalType=binary&ratio=1&size=139413&status=done&style=none&taskId=ud0943c7d-036a-458b-abb2-57a8b2a6be8&width=823\" alt=\"image.png\"><br>5G网络基于三大业务场景的网络切片，使切片场景更加多样化。</p>\n<ul>\n<li>eMBB，提供大带宽流量通道，主要是借助无线侧提升带宽上限。</li>\n<li>uRLLC，提供低时延网络，主要借助边缘网络进行边缘计算降低端到端网络距离。</li>\n<li>mMTC，提供大规模机器通信，及4G中NB-IOT规范在制定中预计R16版本制定。现在采用4G核心网eLTE增强实现。</li>\n</ul>\n<p>切片实现基于核心网信令侧提供切片标识传输，用户面实现切片能力提供。切片承载标识以NSSAI，SST，SD等作为切片标识。<br>详细可参考：<a href=\"https://www.yuque.com/wuhao-bo7rr/rb9zmq/epd319\">https://www.yuque.com/wuhao-bo7rr/rb9zmq/epd319</a></p>\n<h3 id=\"3-2-边缘计算\"><a href=\"#3-2-边缘计算\" class=\"headerlink\" title=\"3.2 边缘计算\"></a>3.2 边缘计算</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627314921136-6ca8027e-9ccb-4106-907a-7a849ed2feea.png#clientId=ua70594ae-1f25-4&from=paste&height=466&id=u9cccc87f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=466&originWidth=807&originalType=binary&ratio=1&size=108543&status=done&style=none&taskId=u5071bf83-230e-480a-8be6-78d87f3a5d7&width=807\" alt=\"image.png\"></p>\n<ul>\n<li><p>概述</p>\n<p>   边缘计算在靠近数据源或用户的地方提供计算、存储等基础设施，并为边缘应用提供云服务和 IT 环境服务。相比于集中部署的云计算服务，边缘计算解决了时延过长、汇聚流量过大等问题，为实时性和带宽密集型业务提供更好的支持。随着 5G 和工业互联网的快速发展，新兴业务对边缘计算的需求十分迫切。在众多垂直行业新兴业务中，对边缘计算的需求主要体现在时延、带宽和安全三个方面。</p>\n</li>\n<li><p>实现</p>\n<ul>\n<li>UPF 地址下发可采用 NRF(5G 网络注册设备)获取或 OAM(系统配置)配置</li>\n<li>通过 5G 核心网配置及 SMF 下发 UPF 地址实现 UPF 地址的下沉</li>\n</ul>\n</li>\n<li><p>示例</p>\n<pre><code> 以移动边缘计算平台为例主要涵盖\n</code></pre>\n<ul>\n<li>边缘设备管理</li>\n</ul>\n</li>\n</ul>\n<p>支持纳管不同算力、不同平台的边缘节点，实现对边缘节点和终端设备进行管理，如：状态监控、资源调度、日志查询等</p>\n<ul>\n<li>边缘协议适配</li>\n</ul>\n<p>边缘计算通过驱动方式灵活支持多种工业协议设备接入，原生支持MQTT、OPC-UA、Modbus协议设备接入</p>\n<ul>\n<li>边缘应用管理</li>\n</ul>\n<p>边缘应用市场提供预置边缘容器应用，也可进行自定义应用开发，并支持下发至边缘节点运行，云端可对应用进行全生命周期管理</p>\n<ul>\n<li>边缘数据路由</li>\n</ul>\n<p>支持将边缘节点数据通过灵活的方式路由到OneNET云端。并可以通过云端再分发到其他PaaS服务或客户自有应用</p>\n<ul>\n<li>边缘规则计算</li>\n</ul>\n<p>支持在边缘节点进行规则引擎计算，按照既定规则进行匹配，若匹配成功后则按照相关预定动作执行</p>\n<ul>\n<li>边缘数据存储</li>\n</ul>\n<p>支持在边缘节点进行多并发的海量时序列数据库存储，并在断网的情况自动实现离线存储</p>\n<ul>\n<li>边缘数据分析</li>\n</ul>\n<p>基于flink计算引擎，实现在云端通过可视化的方式配置计算任务，再下发到边缘节点执行</p>\n<ul>\n<li>边缘智能推理</li>\n</ul>\n<p>通过预置应用方式，将针对特定行业和场景的AI模型下发至边缘节点进行推理</p>\n<ul>\n<li>参考<ul>\n<li>移动边缘计算平台：<a href=\"https://open.iot.10086.cn/productservice/edge/\">https://open.iot.10086.cn/productservice/edge/</a></li>\n<li>5G开源边缘计算平台<a href=\"https://gitee.com/edgegallery\">https://gitee.com/edgegallery</a><h2 id=\"4-关键技术点解析\"><a href=\"#4-关键技术点解析\" class=\"headerlink\" title=\"4.关键技术点解析\"></a>4.关键技术点解析</h2></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-1-无线侧增强\"><a href=\"#4-1-无线侧增强\" class=\"headerlink\" title=\"4.1 无线侧增强\"></a>4.1 无线侧增强</h3><p>各网络速率对比</p>\n<table>\n<thead>\n<tr>\n<th><strong>网络制式</strong></th>\n<th><strong>2G</strong></th>\n<th><strong>3G</strong></th>\n<th><strong>4G</strong></th>\n<th><strong>5G</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>下行速率</td>\n<td>150K</td>\n<td>2.8Mbps</td>\n<td>100Mbps</td>\n<td>1.54Gbps</td>\n</tr>\n<tr>\n<td>上行速率</td>\n<td>40K</td>\n<td>384Kbps</td>\n<td>50Mbps</td>\n<td>308Mbps</td>\n</tr>\n</tbody></table>\n<p>\u0000</p>\n<ul>\n<li>5G网速计算公式</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627436031283-5e53d4dd-39d5-4740-82f8-cdf52a84acd9.png#clientId=u79b8274a-e51d-4&from=paste&id=ue0563563&margin=%5Bobject%20Object%5D&name=image.png&originHeight=218&originWidth=1080&originalType=url&ratio=1&size=81090&status=done&style=none&taskId=u3b85cb7d-8ed8-4535-b791-18ba1cf2a1f\" alt=\"image.png\"><br>△ 5G载波的峰值计算公式</p>\n<ul>\n<li><strong>MIMO层数</strong>：下行4层，上行2层。</li>\n<li><strong>调制阶数</strong>：下行8阶（256QAM），上行6阶（64QAM）。</li>\n<li><strong>编码码率</strong>：948/1024≈0.926。</li>\n<li><strong>PRB个数</strong>：273，公式里面的12代表每个PRB包含12个子载波。</li>\n<li><strong>资源开销占比</strong>意为无线资源中用作控制，不能用来发送数据的比例，协议给出了典型的数据：下行14%，上行8%。</li>\n<li><strong>符号数</strong>意为每秒可实际传送数据的符号个数，因不同的TDD帧结构而异，具体可参考前面第二部分的表格。现取2.5毫秒双周期帧结构的值：下行18400，上行9200。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627436031455-2bed1bb5-ee54-4d95-9ebf-3013930858fb.png#clientId=u79b8274a-e51d-4&from=paste&id=ufe3b5631&margin=%5Bobject%20Object%5D&name=image.png&originHeight=302&originWidth=640&originalType=url&ratio=1&size=124474&status=done&style=none&taskId=uc5a75f46-1a74-4f37-8c4b-4ead672b9ec\" alt=\"image.png\"><br>△ 5G载波的峰值计算因素图示<br>把上述数据代入前面的公式，可得：</p>\n<ul>\n<li><strong>下行峰值速率为：1.54Gbps</strong></li>\n<li><strong>上行峰值速率为：308Mbps</strong></li>\n</ul>\n<p>现在电信和联通正在共享3.5GHz频段上的100MHz的带宽，单个手机能达到的理论速率就是上述的两个值。如果这两家后续开通200MHz的话，因为带宽翻倍，速率也将翻倍，下行速率可以高达3.08Gbps！<br>详细可参考：<a href=\"https://zhuanlan.zhihu.com/p/108553808\">https://zhuanlan.zhihu.com/p/108553808</a><br>​</p>\n<ul>\n<li>4G理论网速</li>\n</ul>\n<p>**     LTE-Advanced（长期演进技术升级版）：**<br>     LTE的升级演进，由3GPP所主导制定，完全向后兼容LTE，通常通过在LTE上通过软件升级即可，升级过程类似于从W-CDMA升级到HSPA。峰值速率：下行1Gbps，上行500Mbps。是第一批被国际电信联盟承认的4G标准，也是事实上的唯一主流4G标准。另有TD-LTE的升级演进TD-LTE-Advanced（TD-LTE-A）。<br>**     LTE FDD（频分双工长期演进技术）：**<br>     最早提出的LTE制式，目前该技术最成熟，全球应用最广泛，终端种类最多[5]。峰值速率：下行150Mbps，上行40Mbps。<br>**     LTE TDD（时分双工长期演进技术）：**<br>     又称TD-LTE，是LTE的另一个分支。峰值速率：下行100Mbps，上行50Mbps。由上海贝尔、诺基亚西门子通信、大唐电信、华为技术、中兴通信、中国移动、高通、ST-Ericsson等业者共同开发。<br>**     WirelessMAN-Advanced（无线城域网升级版）：**<br>     又称WiMAX-Advanced、WiMAX 2，即IEEE 802.16m是WiMAX的升级演进，由IEEE所主导制定，接收下行与上行最高速率可达到100Mbps，在静止定点接收可高达1Gbps。也是国际电信联盟承认的4G标准，不过随着Intel于2010年退出，WiMAX技术也已经被运营商放弃，并开始将设备升级为TD-LTE。</p>\n<table>\n<thead>\n<tr>\n<th>运营商</th>\n<th>上行(MHz)</th>\n<th>下行(MHz)</th>\n<th>上行速率(bps)</th>\n<th>下行速率(bps)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>中国电信</td>\n<td>2370～2390</td>\n<td><em>2635～2655</em></td>\n<td>50M</td>\n<td>100M</td>\n</tr>\n<tr>\n<td>中国移动</td>\n<td>2300～2320</td>\n<td>2555～2575</td>\n<td>50M</td>\n<td>100M</td>\n</tr>\n<tr>\n<td>中国联通</td>\n<td><em>1880～1900、2320～2370</em></td>\n<td><em>2575～2635</em></td>\n<td>50M</td>\n<td>100M</td>\n</tr>\n</tbody></table>\n<p>详细可参考：<a href=\"https://zh.wikipedia.org/wiki/4G\">https://zh.wikipedia.org/wiki/4G</a></p>\n<ul>\n<li><p>3G理论网速</p>\n<p>  3G理论网速为1-6Mbps，折合下载速度120K/s-600K/s；是指支持高速数据传输的蜂窝移动通讯技    术。3G服务能够同时传送声音及数据信息，速率一般在几百kbps以上；</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>运营商</th>\n<th>上行(MHz)</th>\n<th>下行(MHz)</th>\n<th>上行速率(bps)</th>\n<th>下行速率(bps)</th>\n<th>调制方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CDMA2000</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>(中国电信)</td>\n<td>825～835</td>\n<td><em>870～880</em></td>\n<td>1.8M</td>\n<td>3.1M</td>\n<td>FDD</td>\n</tr>\n<tr>\n<td>TD-SCDMA</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>(中国移动)</td>\n<td>1880～1920</td>\n<td>2010～2025</td>\n<td>384K</td>\n<td>2.8M</td>\n<td>TDD</td>\n</tr>\n<tr>\n<td>WCDMA</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>(中国联通)</td>\n<td><em>1920-1980</em></td>\n<td><em>2110～2170</em></td>\n<td>5.76M</td>\n<td>7.2M</td>\n<td>FDD</td>\n</tr>\n</tbody></table>\n<p>详细可参考：<a href=\"https://zh.wikipedia.org/wiki/3G\">https://zh.wikipedia.org/wiki/3G</a></p>\n<ul>\n<li><p>2G理论网速</p>\n<p>   2G理论网速是150Kbps，折合下载速度15-20K/s；2G是第二代手机通信技术规格，以数字语音传输技术为核心。一般定义为无法直接传送如电子邮件、软件等信息；只具有通话和一些如时间日期等传送的手机通信技术规格；</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>运营商</th>\n<th>制式</th>\n<th>上行速率(bps)</th>\n<th>下载速率(bps)</th>\n<th>理论峰值(bps)</th>\n<th>带宽</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>移动</td>\n<td>GPRS</td>\n<td><em>21.4K</em></td>\n<td>85.6K</td>\n<td>171.2K</td>\n<td>150K</td>\n</tr>\n<tr>\n<td></td>\n<td>EDGE</td>\n<td>45K</td>\n<td>90K</td>\n<td>384K</td>\n<td>200K</td>\n</tr>\n<tr>\n<td>联通</td>\n<td><em>GPRS</em></td>\n<td><em>21.4K</em></td>\n<td>85.6K</td>\n<td>171.2K</td>\n<td>150K</td>\n</tr>\n<tr>\n<td></td>\n<td>EDGE</td>\n<td>45K</td>\n<td>90K</td>\n<td>384K</td>\n<td>200K</td>\n</tr>\n</tbody></table>\n<pre><code>详细可参考：[https://jingyan.baidu.com/article/9158e0009e4708e2541228b4.html](https://jingyan.baidu.com/article/9158e0009e4708e2541228b4.html)\n其他参考：[https://blog.csdn.net/mao834099514/article/details/79456881](https://blog.csdn.net/mao834099514/article/details/79456881)\n</code></pre>\n<h3 id=\"4-2-控制面SCTP协议\"><a href=\"#4-2-控制面SCTP协议\" class=\"headerlink\" title=\"4.2 控制面SCTP协议\"></a>4.2 控制面SCTP协议</h3><ul>\n<li>UDP</li>\n</ul>\n<p>用户数据报协议（_UDP_，User Datagram Protocol）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User Datagram Protocol, Src Port: 5060, Dst Port: 5060</span><br><span class=\"line\">    Source Port: 5060</span><br><span class=\"line\">    Destination Port: 5060</span><br><span class=\"line\">    Length: 356</span><br><span class=\"line\">    Checksum: 0xf8a5 [unverified]</span><br><span class=\"line\">    [Checksum Status: Unverified]</span><br><span class=\"line\">    [Stream index: 0]</span><br><span class=\"line\">    [Timestamps]</span><br><span class=\"line\">        [Time since first frame: 0.007303000 seconds]</span><br><span class=\"line\">        [Time since previous frame: 0.007303000 seconds]</span><br><span class=\"line\">    UDP payload (348 bytes)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TCP</li>\n</ul>\n<p>传输控制协议（_TCP_，Transmission Control Protocol）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transmission Control Protocol, Src Port: 54872, Dst Port: 6070, Seq: 1, Ack: 1, Len: 3294</span><br><span class=\"line\">    Source Port: 54872</span><br><span class=\"line\">    Destination Port: 6070</span><br><span class=\"line\">    [Stream index: 84]</span><br><span class=\"line\">    [TCP Segment Len: 3294]</span><br><span class=\"line\">    Sequence Number: 1    (relative sequence number)</span><br><span class=\"line\">    Sequence Number (raw): 1324026701</span><br><span class=\"line\">    [Next Sequence Number: 3295    (relative sequence number)]</span><br><span class=\"line\">    Acknowledgment Number: 1    (relative ack number)</span><br><span class=\"line\">    Acknowledgment number (raw): 3153941596</span><br><span class=\"line\">    1000 .... = Header Length: 32 bytes (8)</span><br><span class=\"line\">    Flags: 0x018 (PSH, ACK)</span><br><span class=\"line\">        000. .... .... = Reserved: Not set</span><br><span class=\"line\">        ...0 .... .... = Nonce: Not set</span><br><span class=\"line\">        .... 0... .... = Congestion Window Reduced (CWR): Not set</span><br><span class=\"line\">        .... .0.. .... = ECN-Echo: Not set</span><br><span class=\"line\">        .... ..0. .... = Urgent: Not set</span><br><span class=\"line\">        .... ...1 .... = Acknowledgment: Set</span><br><span class=\"line\">        .... .... 1... = Push: Set</span><br><span class=\"line\">        .... .... .0.. = Reset: Not set</span><br><span class=\"line\">        .... .... ..0. = Syn: Not set</span><br><span class=\"line\">        .... .... ...0 = Fin: Not set</span><br><span class=\"line\">        [TCP Flags: ·······AP···]</span><br><span class=\"line\">    Window: 32748</span><br><span class=\"line\">    [Calculated window size: 32748]</span><br><span class=\"line\">    [Window size scaling factor: -1 (unknown)]</span><br><span class=\"line\">    Checksum: 0x3972 [unverified]</span><br><span class=\"line\">    [Checksum Status: Unverified]</span><br><span class=\"line\">    Urgent Pointer: 0</span><br><span class=\"line\">    Options: (12 bytes), No-Operation (NOP), No-Operation (NOP), Timestamps</span><br><span class=\"line\">        TCP Option - No-Operation (NOP)</span><br><span class=\"line\">            Kind: No-Operation (1)</span><br><span class=\"line\">        TCP Option - No-Operation (NOP)</span><br><span class=\"line\">            Kind: No-Operation (1)</span><br><span class=\"line\">        TCP Option - Timestamps: TSval 919902009, TSecr 919895231</span><br><span class=\"line\">            Kind: Time Stamp Option (8)</span><br><span class=\"line\">            Length: 10</span><br><span class=\"line\">            Timestamp value: 919902009</span><br><span class=\"line\">            Timestamp echo reply: 919895231</span><br><span class=\"line\">    [SEQ/ACK analysis]</span><br><span class=\"line\">        [Bytes in flight: 3294]</span><br><span class=\"line\">        [Bytes sent since last PSH flag: 3294]</span><br><span class=\"line\">    [Timestamps]</span><br><span class=\"line\">        [Time since first frame in this TCP stream: 0.000000000 seconds]</span><br><span class=\"line\">        [Time since previous frame in this TCP stream: 0.000000000 seconds]</span><br><span class=\"line\">    TCP payload (3294 bytes)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>详细参考：<a href=\"https://segmentfault.com/a/1190000022410446\">https://segmentfault.com/a/1190000022410446</a><br>​</p>\n<ul>\n<li>SCTP</li>\n</ul>\n<p>流控制传输协议SCTP(Stream Control Transmission Protocol)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream Control Transmission Protocol, Src Port: 38412 (38412), Dst Port: 38412 (38412)</span><br><span class=\"line\">    Source port: 38412</span><br><span class=\"line\">    Destination port: 38412</span><br><span class=\"line\">    Verification tag: 0x0491fd24</span><br><span class=\"line\">    [Association index: 65535]</span><br><span class=\"line\">    Checksum: 0xc759d633 [unverified]</span><br><span class=\"line\">    [Checksum Status: Unverified]</span><br><span class=\"line\">    DATA chunk(ordered, complete segment, TSN: 39, SID: 1, SSN: 33, PPID: 60, payload length: 67 bytes)</span><br><span class=\"line\">        Chunk type: DATA (0)</span><br><span class=\"line\">        Chunk flags: 0x03</span><br><span class=\"line\">            .... 0... = I-Bit: Possibly delay SACK</span><br><span class=\"line\">            .... .0.. = U-Bit: Ordered delivery</span><br><span class=\"line\">            .... ..1. = B-Bit: First segment</span><br><span class=\"line\">            .... ...1 = E-Bit: Last segment</span><br><span class=\"line\">        Chunk length: 83</span><br><span class=\"line\">        Transmission sequence number: 39</span><br><span class=\"line\">        Stream identifier: 0x0001</span><br><span class=\"line\">        Stream sequence number: 33</span><br><span class=\"line\">        Payload protocol identifier: NGAP (60)</span><br><span class=\"line\">        Chunk padding: 00</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>详细参考：<br><a href=\"https://zhuanlan.zhihu.com/p/67819220\">https://zhuanlan.zhihu.com/p/67819220</a></p>\n<table>\n<thead>\n<tr>\n<th>协议</th>\n<th>安全可靠</th>\n<th>小包传输</th>\n<th>大包传输</th>\n<th>生态健全</th>\n<th>成熟度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>UDP</td>\n<td>*</td>\n<td>***</td>\n<td>***</td>\n<td>***</td>\n<td>***</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>**</td>\n<td>**</td>\n<td>*</td>\n<td>***</td>\n<td>***</td>\n</tr>\n<tr>\n<td>SCTP</td>\n<td>***</td>\n<td>*</td>\n<td>**</td>\n<td>*</td>\n<td>**</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-3-网络转发\"><a href=\"#4-3-网络转发\" class=\"headerlink\" title=\"4.3 网络转发\"></a>4.3 网络转发</h3><p>常见的网路转发技术分为用户态转发技术、内核态转发技术、UIO旁路转发技术，之外还有交换芯片之类的这里不做过多介绍，下面主要介绍用户态、内核态、UIO旁路转发。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627486246857-f858f9dc-8420-4b98-ac89-c121eb17d689.png#clientId=u591ad28a-e8ae-4&from=paste&height=490&id=u00a5d948&margin=%5Bobject%20Object%5D&name=image.png&originHeight=532&originWidth=781&originalType=binary&ratio=1&size=157286&status=done&style=none&taskId=u0140e34b-eeb4-411b-be4f-ae0fb9980d5&width=719.5\" alt=\"image.png\"><br>在转发速率，难度及趋势上做了相关对比</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>用户态</th>\n<th>内核态</th>\n<th>DPDK</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>速度</td>\n<td>*</td>\n<td>**</td>\n<td>***</td>\n</tr>\n<tr>\n<td>开发难度</td>\n<td>*</td>\n<td>***(不小心把内核态搞崩)</td>\n<td>**</td>\n</tr>\n<tr>\n<td>周边工具</td>\n<td>***</td>\n<td>***</td>\n<td><em>(借助VPP可以达到</em>**)</td>\n</tr>\n<tr>\n<td>社区趋势</td>\n<td>*</td>\n<td>*</td>\n<td>***</td>\n</tr>\n</tbody></table>\n<p>综上所述DPDK基本是网络转发技术主流。<br><a href=\"https://www.yuque.com/wuhao-bo7rr/rb9zmq/ak1moi\">https://www.yuque.com/wuhao-bo7rr/rb9zmq/ak1moi</a></p>\n<h2 id=\"5-主要业务流程\"><a href=\"#5-主要业务流程\" class=\"headerlink\" title=\"5.主要业务流程\"></a>5.主要业务流程</h2><pre><code> 商用手机终端入网，基站握手、核心网注册、IMS注册为必须项，只完成核心网注册，未完成IMS注册手机会自动掉线。\n</code></pre>\n<h3 id=\"5-1-基站建联\"><a href=\"#5-1-基站建联\" class=\"headerlink\" title=\"5.1 基站建联\"></a>5.1 基站建联</h3><p>​</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627391179070-5ef19fd6-cdfe-4031-916b-eb11aeb0b808.png#clientId=ue276c832-69f5-4&from=paste&height=717&id=HCRzI&margin=%5Bobject%20Object%5D&name=image.png&originHeight=829&originWidth=554&originalType=binary&ratio=1&size=123452&status=done&style=none&taskId=u63efdef9-43bd-4448-bd6f-f594e8d09ea&width=479\" alt=\"image.png\"><br>手机与基站建联主要流程可以归结为：</p>\n<ul>\n<li>小区搜索与选择</li>\n</ul>\n<p>UE开机选网，小区搜索并完成下行同步。</p>\n<ul>\n<li>系统消息广播</li>\n</ul>\n<p>UE读取广播信息，选择合适小区进行驻留。</p>\n<ul>\n<li>随机接入</li>\n</ul>\n<p>UE与gNB建立上行同步。</p>\n<ul>\n<li>RRC连接建立</li>\n</ul>\n<p>UE与gNB建立RRC连接。</p>\n<ul>\n<li>注册过程</li>\n</ul>\n<p>UE注册到5G网络，网络侧开始维护该UE的上下文。<br>​</p>\n<h3 id=\"5-2-核心网注册\"><a href=\"#5-2-核心网注册\" class=\"headerlink\" title=\"5.2 核心网注册\"></a>5.2 核心网注册</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627391130276-8e26e31c-b637-4803-befc-bd2fe46fce80.png#clientId=ue276c832-69f5-4&from=paste&height=826&id=iKwsM&margin=%5Bobject%20Object%5D&name=image.png&originHeight=826&originWidth=841&originalType=binary&ratio=1&size=228847&status=done&style=none&taskId=u7a19b13a-9c93-4ad6-a382-02ccff8827c&width=841\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627297426188-9d936938-2425-472e-a3d4-bc9f7db313fc.png#clientId=u3fb41919-abb0-4&from=paste&height=220&id=BnpTo&margin=%5Bobject%20Object%5D&name=image.png&originHeight=220&originWidth=1605&originalType=binary&ratio=1&size=184759&status=done&style=none&taskId=u6367eeed-a982-4404-92c4-aa9d3f1fd39&width=1605\" alt=\"image.png\"></p>\n<p>整体可归纳为：</p>\n<ul>\n<li>注册请求</li>\n</ul>\n<p>终端携带SIM信息进行注册，核心网通过用户信息在UDM查询数据，以此判断是否需要identity request</p>\n<ul>\n<li><p>鉴权处理</p>\n<pre><code>核心网查询到用户信息后，发起Authentication request，终端收到请求后进行校验，回复Authentication response\n此时双方共同进行双向鉴权。\n</code></pre>\n</li>\n<li><p>加密协商</p>\n<pre><code>终端与网络双方为选择加密算法，可选类型为4种，其中第一种为不加密，其余三种为加密算法，加密算法包含完整性保护算法和报文加密算法，分别是为了保护报文的安全性与正确性\n</code></pre>\n</li>\n<li><p>注册完成</p>\n<pre><code>网络侧返回注册完成，网络侧会携带网络能力告知终端。比如4G回落，IP短信能力。\n</code></pre>\n</li>\n<li><p>无线能力上报</p>\n<pre><code>终端上报无线能力，终端上报无线能力至服务端，此信令为非必须应答信令\n</code></pre>\n</li>\n<li><p>会话创建</p>\n<pre><code>终端创建流量传输通道，核心网在网络侧分配网络资源，此处一般会创建两个会话通道一个是IMS用来发短信打电话，一个是internet用来上网。由于IMS网络与Internet网络隔离这就是为什么在人多的地方有的时候网速慢打电话确没有影响。\n</code></pre>\n</li>\n<li><p>IMS注册</p>\n<pre><code>终端完成会话通道创建后，会发起sip注册，商用终端必须完成sip注册后才可进行上网，这个原因大概是上网功能与ims功能为运营商基础能力，都需要完成后才算入网完成，手机层面表现为，出现HD为IMS网络注册完成。\n</code></pre>\n<p>详细可参考：<a href=\"https://www.yuque.com/wuhao-bo7rr/rb9zmq/gv4tpd\">https://www.yuque.com/wuhao-bo7rr/rb9zmq/gv4tpd</a></p>\n<h3 id=\"5-3-IMS注册\"><a href=\"#5-3-IMS注册\" class=\"headerlink\" title=\"5.3 IMS注册\"></a>5.3 IMS注册</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627393550010-ab490608-c0aa-415c-8aa2-35749258d676.png#clientId=ue276c832-69f5-4&from=paste&height=614&id=iOBZl&margin=%5Bobject%20Object%5D&name=image.png&originHeight=691&originWidth=704&originalType=binary&ratio=1&size=72864&status=done&style=none&taskId=ucd354c72-30eb-4676-b873-8e303c3f0cd&width=626\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627487171816-e2da3602-ee5c-4e68-b644-12bb3e575d29.png#clientId=u591ad28a-e8ae-4&from=paste&height=103&id=u801e3236&margin=%5Bobject%20Object%5D&name=image.png&originHeight=206&originWidth=2832&originalType=binary&ratio=1&size=179904&status=done&style=none&taskId=u4579b25f-b3f9-4e2b-b287-cee9c146a5e&width=1416\" alt=\"image.png\"></p>\n<h3 id=\"5-4-短信发送\"><a href=\"#5-4-短信发送\" class=\"headerlink\" title=\"5.4 短信发送\"></a>5.4 短信发送</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627393585310-6f9ba81e-d9fb-4245-80cf-c83aa7588bc3.png#clientId=ue276c832-69f5-4&from=paste&height=698&id=R2dku&margin=%5Bobject%20Object%5D&name=image.png&originHeight=698&originWidth=1145&originalType=binary&ratio=1&size=97410&status=done&style=none&taskId=ua3fd77d1-9e57-466e-a4f7-f3d3286a9ab&width=1145\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627487350302-314d17cd-fd39-4330-ba7e-eced2c55f0db.png#clientId=u591ad28a-e8ae-4&from=paste&height=79&id=u9eea8836&margin=%5Bobject%20Object%5D&name=image.png&originHeight=158&originWidth=2706&originalType=binary&ratio=1&size=91621&status=done&style=none&taskId=ua89d6db6-03e6-400f-9f25-a6f88a2d590&width=1353\" alt=\"image.png\"></p>\n<h3 id=\"5-5-语音呼叫\"><a href=\"#5-5-语音呼叫\" class=\"headerlink\" title=\"5.5 语音呼叫\"></a>5.5 语音呼叫</h3></li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627470940752-974ccafb-9a9f-4493-b685-fc011492c598.png#clientId=u483e4c72-e2ee-4&from=drop&id=uae785ddf&margin=%5Bobject%20Object%5D&name=%E4%B8%8B%E8%BD%BD%20%283%29.png&originHeight=1215&originWidth=1277&originalType=binary&ratio=1&size=133973&status=done&style=none&taskId=ua18dae18-1f40-42d0-8acd-04779ad4c05\" alt=\"下载 (3).png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627471023385-85c0acc3-4b59-45fc-bca4-abf99963f673.png#clientId=u483e4c72-e2ee-4&from=paste&height=250&id=u01d42343&margin=%5Bobject%20Object%5D&name=image.png&originHeight=250&originWidth=1286&originalType=binary&ratio=1&size=234005&status=done&style=none&taskId=ue1c25eb8-003d-44f7-ac45-24f1c730440&width=1286\" alt=\"image.png\"><br>​</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"5G网络概述\"><a href=\"#5G网络概述\" class=\"headerlink\" title=\"5G网络概述\"></a>5G网络概述</h1><h2 id=\"1-网络架构\"><a href=\"#1-网络架构\" class=\"headerlink\" title=\"1.网络架构\"></a>1.网络架构</h2><p>   5G网络的主要涵盖基站(gNB)、承载网、5G核心网(5GC)、IMS核心网(IMS)、5G消息(RCS)、边缘计算(MEC)等网络功能模块,借助上述网路功能模块，提供无线射频信号的收发、网路流量的转发、短信、音视频电话、富媒体消息、MAAP消息业务(类似微信公众号+小程序)等。下图为5G网络架构图。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627354681299-fa0eab41-6e38-49d7-8e5a-46acacb57d8d.png#clientId=u0c2dc641-5b75-4&from=paste&height=724&id=u4bbac9fc&margin=%5Bobject%20Object%5D&name=%E4%B8%8B%E8%BD%BD.png&originHeight=942&originWidth=730&originalType=binary&ratio=1&size=137523&status=done&style=none&taskId=ud767b281-b748-4825-bd3d-1f64cf57f47&width=561\" alt=\"下载.png\"><br>下文分别针对设备接入层、接入网、5G核心网、IMS网络、5G消息等模块进行介绍。</p>\n<ul>\n<li>设备接入（5G手机）：</li>\n</ul>\n<p>设备网络通信模块主要是基于芯片，市面上分为高通、海思、天玑等几大类。主流手机小米10、华为P40、华为Mate、荣耀30等之后型号基本都支持。</p>\n<ul>\n<li>接入网（gNB）：</li>\n</ul>\n<p> gNB主要分为宏基站与微基站（室内站），国内宏基站以华为、中兴、大唐为主，以华为基站为例包含AAU 、BBU，AAU负责无线信号收发，BBU与核心网联通，微基站以京信、共进、佰才邦，以共进为例，主要是以一体化基站为主。其中宏基站用于增加网路覆盖，微基站用于增强信号质量。</p>\n<ul>\n<li><p>5G核心网(5GC)：</p>\n<p>   核心网络建设主要用于提供 5G 终端设备（如手机，车载终端，摄像头等设备）的身份鉴权、流量分发、边缘计算、网络切片等业务能力，核心网网元较多，这针对重点网元进行介绍，AMF用于提供用户接入控制，对外主要网络协议为NAS、NGAP，UDM用于提供用户信息存储，即用户开卡信息，网络认证秘钥等， SMF用于提供网络流量控制，UPF用于提供网络流量转发。</p>\n</li>\n<li><p>IMS核心网(IMS)：</p>\n</li>\n</ul>\n<p>主要提供短信、音视频通话、电话会议等能力，主要通信协议为SIP、RTP，音频编解码为AMR，视频编解码4G为H264,5G为H265。其中SBC/P-CSCF提供终端接入功能, CSCF提供信令路由功能，IP Centex提供会议接入等功能。</p>\n<ul>\n<li><p>5G消息(RCS)：</p>\n<pre><code>5G消息主要提供富媒体通信能力，借助手机原生能力能力实现富媒体通信，主要提供单聊、群聊、MAAP等业务，对手机侧通信协议主要包含SIP、MSRP等协议，对企业接入主要提供HTTP协议。\n</code></pre>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627314165117-add1c2c7-04e6-4ccb-be5d-e7d68f14d600.png#clientId=ua70594ae-1f25-4&from=paste&height=385&id=cwOqf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=385&originWidth=420&originalType=binary&ratio=1&size=152601&status=done&style=none&taskId=uaebd138d-d72f-4dd4-952c-f86ea6c17dd&width=420\" alt=\"image.png\"><br> 通过上述业务分析，相比原有通信能力，5G网络整体趋势为网络精细化、网络开放化、通信多样化、网络智能化演进。<br>   下文对主要业务流程进行接入. 5G核心网文档可参考(TS 23.501, TS 23.502)</p>\n<h2 id=\"2-5G主要网络协议栈\"><a href=\"#2-5G主要网络协议栈\" class=\"headerlink\" title=\"2.5G主要网络协议栈\"></a>2.5G主要网络协议栈</h2><h3 id=\"2-1-4-5G协议栈对比\"><a href=\"#2-1-4-5G协议栈对比\" class=\"headerlink\" title=\"2.1 4/5G协议栈对比\"></a>2.1 4/5G协议栈对比</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1626931898798-9421984d-e966-42a1-9e79-7e3ec35b492d.png#clientId=u154c83d4-6762-4&from=paste&height=866&id=eEVVz&margin=%5Bobject%20Object%5D&name=image.png&originHeight=866&originWidth=1311&originalType=binary&ratio=1&size=915401&status=done&style=none&taskId=uff0338a0-360d-4d57-ac82-bfe3b0f8c1f&width=1311\" alt=\"image.png\"><br>相比4G核心网来说主要是架构及内部协议层面：</p>\n</li>\n<li><p>5G核心网架构发生比较大的变化，引入NRF设备用于网络设备的注册与发现</p>\n</li>\n<li><p>网元间协议由原来的diamter换为http2</p>\n</li>\n<li><p>用户面与控制面解耦，为UPF下沉提供支持</p>\n</li>\n<li><p>控制面协议有s1-ap改为ngap</p>\n</li>\n<li><p>用户面协议增加扩展头</p>\n<h3 id=\"2-2-5G数据面传输协议\"><a href=\"#2-2-5G数据面传输协议\" class=\"headerlink\" title=\"2.2 5G数据面传输协议\"></a>2.2 5G数据面传输协议</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627264248595-2f3b2b36-3484-4192-8db4-4e7f92f22244.png#clientId=uc9b4fbe8-9b07-4&from=paste&height=442&id=JzhxG&margin=%5Bobject%20Object%5D&name=image.png&originHeight=884&originWidth=1616&originalType=binary&ratio=1&size=356332&status=done&style=none&taskId=u8a1ff3c9-934e-401d-b210-104bcf61da3&width=808\" alt=\"image.png\"><br> 5G网络中UPF设备主要用于用户面数据的转发，主要功能是流量控制以及GTP包的拆解包。<br> <a href=\"https://github.com/5GOpenUPF/openupf\">https://github.com/5GOpenUPF/openupf</a></p>\n<h2 id=\"3-5G网络重要特性\"><a href=\"#3-5G网络重要特性\" class=\"headerlink\" title=\"3.5G网络重要特性\"></a>3.5G网络重要特性</h2></li>\n</ul>\n<h3 id=\"3-1-网络切片\"><a href=\"#3-1-网络切片\" class=\"headerlink\" title=\"3.1 网络切片\"></a>3.1 网络切片</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627314856942-e617a4e3-30d1-4266-80aa-4d934b76c028.png#clientId=ua70594ae-1f25-4&from=paste&height=463&id=u5f84f5cc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=463&originWidth=823&originalType=binary&ratio=1&size=139413&status=done&style=none&taskId=ud0943c7d-036a-458b-abb2-57a8b2a6be8&width=823\" alt=\"image.png\"><br>5G网络基于三大业务场景的网络切片，使切片场景更加多样化。</p>\n<ul>\n<li>eMBB，提供大带宽流量通道，主要是借助无线侧提升带宽上限。</li>\n<li>uRLLC，提供低时延网络，主要借助边缘网络进行边缘计算降低端到端网络距离。</li>\n<li>mMTC，提供大规模机器通信，及4G中NB-IOT规范在制定中预计R16版本制定。现在采用4G核心网eLTE增强实现。</li>\n</ul>\n<p>切片实现基于核心网信令侧提供切片标识传输，用户面实现切片能力提供。切片承载标识以NSSAI，SST，SD等作为切片标识。<br>详细可参考：<a href=\"https://www.yuque.com/wuhao-bo7rr/rb9zmq/epd319\">https://www.yuque.com/wuhao-bo7rr/rb9zmq/epd319</a></p>\n<h3 id=\"3-2-边缘计算\"><a href=\"#3-2-边缘计算\" class=\"headerlink\" title=\"3.2 边缘计算\"></a>3.2 边缘计算</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627314921136-6ca8027e-9ccb-4106-907a-7a849ed2feea.png#clientId=ua70594ae-1f25-4&from=paste&height=466&id=u9cccc87f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=466&originWidth=807&originalType=binary&ratio=1&size=108543&status=done&style=none&taskId=u5071bf83-230e-480a-8be6-78d87f3a5d7&width=807\" alt=\"image.png\"></p>\n<ul>\n<li><p>概述</p>\n<p>   边缘计算在靠近数据源或用户的地方提供计算、存储等基础设施，并为边缘应用提供云服务和 IT 环境服务。相比于集中部署的云计算服务，边缘计算解决了时延过长、汇聚流量过大等问题，为实时性和带宽密集型业务提供更好的支持。随着 5G 和工业互联网的快速发展，新兴业务对边缘计算的需求十分迫切。在众多垂直行业新兴业务中，对边缘计算的需求主要体现在时延、带宽和安全三个方面。</p>\n</li>\n<li><p>实现</p>\n<ul>\n<li>UPF 地址下发可采用 NRF(5G 网络注册设备)获取或 OAM(系统配置)配置</li>\n<li>通过 5G 核心网配置及 SMF 下发 UPF 地址实现 UPF 地址的下沉</li>\n</ul>\n</li>\n<li><p>示例</p>\n<pre><code> 以移动边缘计算平台为例主要涵盖\n</code></pre>\n<ul>\n<li>边缘设备管理</li>\n</ul>\n</li>\n</ul>\n<p>支持纳管不同算力、不同平台的边缘节点，实现对边缘节点和终端设备进行管理，如：状态监控、资源调度、日志查询等</p>\n<ul>\n<li>边缘协议适配</li>\n</ul>\n<p>边缘计算通过驱动方式灵活支持多种工业协议设备接入，原生支持MQTT、OPC-UA、Modbus协议设备接入</p>\n<ul>\n<li>边缘应用管理</li>\n</ul>\n<p>边缘应用市场提供预置边缘容器应用，也可进行自定义应用开发，并支持下发至边缘节点运行，云端可对应用进行全生命周期管理</p>\n<ul>\n<li>边缘数据路由</li>\n</ul>\n<p>支持将边缘节点数据通过灵活的方式路由到OneNET云端。并可以通过云端再分发到其他PaaS服务或客户自有应用</p>\n<ul>\n<li>边缘规则计算</li>\n</ul>\n<p>支持在边缘节点进行规则引擎计算，按照既定规则进行匹配，若匹配成功后则按照相关预定动作执行</p>\n<ul>\n<li>边缘数据存储</li>\n</ul>\n<p>支持在边缘节点进行多并发的海量时序列数据库存储，并在断网的情况自动实现离线存储</p>\n<ul>\n<li>边缘数据分析</li>\n</ul>\n<p>基于flink计算引擎，实现在云端通过可视化的方式配置计算任务，再下发到边缘节点执行</p>\n<ul>\n<li>边缘智能推理</li>\n</ul>\n<p>通过预置应用方式，将针对特定行业和场景的AI模型下发至边缘节点进行推理</p>\n<ul>\n<li>参考<ul>\n<li>移动边缘计算平台：<a href=\"https://open.iot.10086.cn/productservice/edge/\">https://open.iot.10086.cn/productservice/edge/</a></li>\n<li>5G开源边缘计算平台<a href=\"https://gitee.com/edgegallery\">https://gitee.com/edgegallery</a><h2 id=\"4-关键技术点解析\"><a href=\"#4-关键技术点解析\" class=\"headerlink\" title=\"4.关键技术点解析\"></a>4.关键技术点解析</h2></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-1-无线侧增强\"><a href=\"#4-1-无线侧增强\" class=\"headerlink\" title=\"4.1 无线侧增强\"></a>4.1 无线侧增强</h3><p>各网络速率对比</p>\n<table>\n<thead>\n<tr>\n<th><strong>网络制式</strong></th>\n<th><strong>2G</strong></th>\n<th><strong>3G</strong></th>\n<th><strong>4G</strong></th>\n<th><strong>5G</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>下行速率</td>\n<td>150K</td>\n<td>2.8Mbps</td>\n<td>100Mbps</td>\n<td>1.54Gbps</td>\n</tr>\n<tr>\n<td>上行速率</td>\n<td>40K</td>\n<td>384Kbps</td>\n<td>50Mbps</td>\n<td>308Mbps</td>\n</tr>\n</tbody></table>\n<p>\u0000</p>\n<ul>\n<li>5G网速计算公式</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627436031283-5e53d4dd-39d5-4740-82f8-cdf52a84acd9.png#clientId=u79b8274a-e51d-4&from=paste&id=ue0563563&margin=%5Bobject%20Object%5D&name=image.png&originHeight=218&originWidth=1080&originalType=url&ratio=1&size=81090&status=done&style=none&taskId=u3b85cb7d-8ed8-4535-b791-18ba1cf2a1f\" alt=\"image.png\"><br>△ 5G载波的峰值计算公式</p>\n<ul>\n<li><strong>MIMO层数</strong>：下行4层，上行2层。</li>\n<li><strong>调制阶数</strong>：下行8阶（256QAM），上行6阶（64QAM）。</li>\n<li><strong>编码码率</strong>：948/1024≈0.926。</li>\n<li><strong>PRB个数</strong>：273，公式里面的12代表每个PRB包含12个子载波。</li>\n<li><strong>资源开销占比</strong>意为无线资源中用作控制，不能用来发送数据的比例，协议给出了典型的数据：下行14%，上行8%。</li>\n<li><strong>符号数</strong>意为每秒可实际传送数据的符号个数，因不同的TDD帧结构而异，具体可参考前面第二部分的表格。现取2.5毫秒双周期帧结构的值：下行18400，上行9200。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627436031455-2bed1bb5-ee54-4d95-9ebf-3013930858fb.png#clientId=u79b8274a-e51d-4&from=paste&id=ufe3b5631&margin=%5Bobject%20Object%5D&name=image.png&originHeight=302&originWidth=640&originalType=url&ratio=1&size=124474&status=done&style=none&taskId=uc5a75f46-1a74-4f37-8c4b-4ead672b9ec\" alt=\"image.png\"><br>△ 5G载波的峰值计算因素图示<br>把上述数据代入前面的公式，可得：</p>\n<ul>\n<li><strong>下行峰值速率为：1.54Gbps</strong></li>\n<li><strong>上行峰值速率为：308Mbps</strong></li>\n</ul>\n<p>现在电信和联通正在共享3.5GHz频段上的100MHz的带宽，单个手机能达到的理论速率就是上述的两个值。如果这两家后续开通200MHz的话，因为带宽翻倍，速率也将翻倍，下行速率可以高达3.08Gbps！<br>详细可参考：<a href=\"https://zhuanlan.zhihu.com/p/108553808\">https://zhuanlan.zhihu.com/p/108553808</a><br>​</p>\n<ul>\n<li>4G理论网速</li>\n</ul>\n<p>**     LTE-Advanced（长期演进技术升级版）：**<br>     LTE的升级演进，由3GPP所主导制定，完全向后兼容LTE，通常通过在LTE上通过软件升级即可，升级过程类似于从W-CDMA升级到HSPA。峰值速率：下行1Gbps，上行500Mbps。是第一批被国际电信联盟承认的4G标准，也是事实上的唯一主流4G标准。另有TD-LTE的升级演进TD-LTE-Advanced（TD-LTE-A）。<br>**     LTE FDD（频分双工长期演进技术）：**<br>     最早提出的LTE制式，目前该技术最成熟，全球应用最广泛，终端种类最多[5]。峰值速率：下行150Mbps，上行40Mbps。<br>**     LTE TDD（时分双工长期演进技术）：**<br>     又称TD-LTE，是LTE的另一个分支。峰值速率：下行100Mbps，上行50Mbps。由上海贝尔、诺基亚西门子通信、大唐电信、华为技术、中兴通信、中国移动、高通、ST-Ericsson等业者共同开发。<br>**     WirelessMAN-Advanced（无线城域网升级版）：**<br>     又称WiMAX-Advanced、WiMAX 2，即IEEE 802.16m是WiMAX的升级演进，由IEEE所主导制定，接收下行与上行最高速率可达到100Mbps，在静止定点接收可高达1Gbps。也是国际电信联盟承认的4G标准，不过随着Intel于2010年退出，WiMAX技术也已经被运营商放弃，并开始将设备升级为TD-LTE。</p>\n<table>\n<thead>\n<tr>\n<th>运营商</th>\n<th>上行(MHz)</th>\n<th>下行(MHz)</th>\n<th>上行速率(bps)</th>\n<th>下行速率(bps)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>中国电信</td>\n<td>2370～2390</td>\n<td><em>2635～2655</em></td>\n<td>50M</td>\n<td>100M</td>\n</tr>\n<tr>\n<td>中国移动</td>\n<td>2300～2320</td>\n<td>2555～2575</td>\n<td>50M</td>\n<td>100M</td>\n</tr>\n<tr>\n<td>中国联通</td>\n<td><em>1880～1900、2320～2370</em></td>\n<td><em>2575～2635</em></td>\n<td>50M</td>\n<td>100M</td>\n</tr>\n</tbody></table>\n<p>详细可参考：<a href=\"https://zh.wikipedia.org/wiki/4G\">https://zh.wikipedia.org/wiki/4G</a></p>\n<ul>\n<li><p>3G理论网速</p>\n<p>  3G理论网速为1-6Mbps，折合下载速度120K/s-600K/s；是指支持高速数据传输的蜂窝移动通讯技    术。3G服务能够同时传送声音及数据信息，速率一般在几百kbps以上；</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>运营商</th>\n<th>上行(MHz)</th>\n<th>下行(MHz)</th>\n<th>上行速率(bps)</th>\n<th>下行速率(bps)</th>\n<th>调制方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CDMA2000</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>(中国电信)</td>\n<td>825～835</td>\n<td><em>870～880</em></td>\n<td>1.8M</td>\n<td>3.1M</td>\n<td>FDD</td>\n</tr>\n<tr>\n<td>TD-SCDMA</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>(中国移动)</td>\n<td>1880～1920</td>\n<td>2010～2025</td>\n<td>384K</td>\n<td>2.8M</td>\n<td>TDD</td>\n</tr>\n<tr>\n<td>WCDMA</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>(中国联通)</td>\n<td><em>1920-1980</em></td>\n<td><em>2110～2170</em></td>\n<td>5.76M</td>\n<td>7.2M</td>\n<td>FDD</td>\n</tr>\n</tbody></table>\n<p>详细可参考：<a href=\"https://zh.wikipedia.org/wiki/3G\">https://zh.wikipedia.org/wiki/3G</a></p>\n<ul>\n<li><p>2G理论网速</p>\n<p>   2G理论网速是150Kbps，折合下载速度15-20K/s；2G是第二代手机通信技术规格，以数字语音传输技术为核心。一般定义为无法直接传送如电子邮件、软件等信息；只具有通话和一些如时间日期等传送的手机通信技术规格；</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>运营商</th>\n<th>制式</th>\n<th>上行速率(bps)</th>\n<th>下载速率(bps)</th>\n<th>理论峰值(bps)</th>\n<th>带宽</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>移动</td>\n<td>GPRS</td>\n<td><em>21.4K</em></td>\n<td>85.6K</td>\n<td>171.2K</td>\n<td>150K</td>\n</tr>\n<tr>\n<td></td>\n<td>EDGE</td>\n<td>45K</td>\n<td>90K</td>\n<td>384K</td>\n<td>200K</td>\n</tr>\n<tr>\n<td>联通</td>\n<td><em>GPRS</em></td>\n<td><em>21.4K</em></td>\n<td>85.6K</td>\n<td>171.2K</td>\n<td>150K</td>\n</tr>\n<tr>\n<td></td>\n<td>EDGE</td>\n<td>45K</td>\n<td>90K</td>\n<td>384K</td>\n<td>200K</td>\n</tr>\n</tbody></table>\n<pre><code>详细可参考：[https://jingyan.baidu.com/article/9158e0009e4708e2541228b4.html](https://jingyan.baidu.com/article/9158e0009e4708e2541228b4.html)\n其他参考：[https://blog.csdn.net/mao834099514/article/details/79456881](https://blog.csdn.net/mao834099514/article/details/79456881)\n</code></pre>\n<h3 id=\"4-2-控制面SCTP协议\"><a href=\"#4-2-控制面SCTP协议\" class=\"headerlink\" title=\"4.2 控制面SCTP协议\"></a>4.2 控制面SCTP协议</h3><ul>\n<li>UDP</li>\n</ul>\n<p>用户数据报协议（_UDP_，User Datagram Protocol）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User Datagram Protocol, Src Port: 5060, Dst Port: 5060</span><br><span class=\"line\">    Source Port: 5060</span><br><span class=\"line\">    Destination Port: 5060</span><br><span class=\"line\">    Length: 356</span><br><span class=\"line\">    Checksum: 0xf8a5 [unverified]</span><br><span class=\"line\">    [Checksum Status: Unverified]</span><br><span class=\"line\">    [Stream index: 0]</span><br><span class=\"line\">    [Timestamps]</span><br><span class=\"line\">        [Time since first frame: 0.007303000 seconds]</span><br><span class=\"line\">        [Time since previous frame: 0.007303000 seconds]</span><br><span class=\"line\">    UDP payload (348 bytes)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TCP</li>\n</ul>\n<p>传输控制协议（_TCP_，Transmission Control Protocol）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transmission Control Protocol, Src Port: 54872, Dst Port: 6070, Seq: 1, Ack: 1, Len: 3294</span><br><span class=\"line\">    Source Port: 54872</span><br><span class=\"line\">    Destination Port: 6070</span><br><span class=\"line\">    [Stream index: 84]</span><br><span class=\"line\">    [TCP Segment Len: 3294]</span><br><span class=\"line\">    Sequence Number: 1    (relative sequence number)</span><br><span class=\"line\">    Sequence Number (raw): 1324026701</span><br><span class=\"line\">    [Next Sequence Number: 3295    (relative sequence number)]</span><br><span class=\"line\">    Acknowledgment Number: 1    (relative ack number)</span><br><span class=\"line\">    Acknowledgment number (raw): 3153941596</span><br><span class=\"line\">    1000 .... = Header Length: 32 bytes (8)</span><br><span class=\"line\">    Flags: 0x018 (PSH, ACK)</span><br><span class=\"line\">        000. .... .... = Reserved: Not set</span><br><span class=\"line\">        ...0 .... .... = Nonce: Not set</span><br><span class=\"line\">        .... 0... .... = Congestion Window Reduced (CWR): Not set</span><br><span class=\"line\">        .... .0.. .... = ECN-Echo: Not set</span><br><span class=\"line\">        .... ..0. .... = Urgent: Not set</span><br><span class=\"line\">        .... ...1 .... = Acknowledgment: Set</span><br><span class=\"line\">        .... .... 1... = Push: Set</span><br><span class=\"line\">        .... .... .0.. = Reset: Not set</span><br><span class=\"line\">        .... .... ..0. = Syn: Not set</span><br><span class=\"line\">        .... .... ...0 = Fin: Not set</span><br><span class=\"line\">        [TCP Flags: ·······AP···]</span><br><span class=\"line\">    Window: 32748</span><br><span class=\"line\">    [Calculated window size: 32748]</span><br><span class=\"line\">    [Window size scaling factor: -1 (unknown)]</span><br><span class=\"line\">    Checksum: 0x3972 [unverified]</span><br><span class=\"line\">    [Checksum Status: Unverified]</span><br><span class=\"line\">    Urgent Pointer: 0</span><br><span class=\"line\">    Options: (12 bytes), No-Operation (NOP), No-Operation (NOP), Timestamps</span><br><span class=\"line\">        TCP Option - No-Operation (NOP)</span><br><span class=\"line\">            Kind: No-Operation (1)</span><br><span class=\"line\">        TCP Option - No-Operation (NOP)</span><br><span class=\"line\">            Kind: No-Operation (1)</span><br><span class=\"line\">        TCP Option - Timestamps: TSval 919902009, TSecr 919895231</span><br><span class=\"line\">            Kind: Time Stamp Option (8)</span><br><span class=\"line\">            Length: 10</span><br><span class=\"line\">            Timestamp value: 919902009</span><br><span class=\"line\">            Timestamp echo reply: 919895231</span><br><span class=\"line\">    [SEQ/ACK analysis]</span><br><span class=\"line\">        [Bytes in flight: 3294]</span><br><span class=\"line\">        [Bytes sent since last PSH flag: 3294]</span><br><span class=\"line\">    [Timestamps]</span><br><span class=\"line\">        [Time since first frame in this TCP stream: 0.000000000 seconds]</span><br><span class=\"line\">        [Time since previous frame in this TCP stream: 0.000000000 seconds]</span><br><span class=\"line\">    TCP payload (3294 bytes)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>详细参考：<a href=\"https://segmentfault.com/a/1190000022410446\">https://segmentfault.com/a/1190000022410446</a><br>​</p>\n<ul>\n<li>SCTP</li>\n</ul>\n<p>流控制传输协议SCTP(Stream Control Transmission Protocol)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream Control Transmission Protocol, Src Port: 38412 (38412), Dst Port: 38412 (38412)</span><br><span class=\"line\">    Source port: 38412</span><br><span class=\"line\">    Destination port: 38412</span><br><span class=\"line\">    Verification tag: 0x0491fd24</span><br><span class=\"line\">    [Association index: 65535]</span><br><span class=\"line\">    Checksum: 0xc759d633 [unverified]</span><br><span class=\"line\">    [Checksum Status: Unverified]</span><br><span class=\"line\">    DATA chunk(ordered, complete segment, TSN: 39, SID: 1, SSN: 33, PPID: 60, payload length: 67 bytes)</span><br><span class=\"line\">        Chunk type: DATA (0)</span><br><span class=\"line\">        Chunk flags: 0x03</span><br><span class=\"line\">            .... 0... = I-Bit: Possibly delay SACK</span><br><span class=\"line\">            .... .0.. = U-Bit: Ordered delivery</span><br><span class=\"line\">            .... ..1. = B-Bit: First segment</span><br><span class=\"line\">            .... ...1 = E-Bit: Last segment</span><br><span class=\"line\">        Chunk length: 83</span><br><span class=\"line\">        Transmission sequence number: 39</span><br><span class=\"line\">        Stream identifier: 0x0001</span><br><span class=\"line\">        Stream sequence number: 33</span><br><span class=\"line\">        Payload protocol identifier: NGAP (60)</span><br><span class=\"line\">        Chunk padding: 00</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>详细参考：<br><a href=\"https://zhuanlan.zhihu.com/p/67819220\">https://zhuanlan.zhihu.com/p/67819220</a></p>\n<table>\n<thead>\n<tr>\n<th>协议</th>\n<th>安全可靠</th>\n<th>小包传输</th>\n<th>大包传输</th>\n<th>生态健全</th>\n<th>成熟度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>UDP</td>\n<td>*</td>\n<td>***</td>\n<td>***</td>\n<td>***</td>\n<td>***</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>**</td>\n<td>**</td>\n<td>*</td>\n<td>***</td>\n<td>***</td>\n</tr>\n<tr>\n<td>SCTP</td>\n<td>***</td>\n<td>*</td>\n<td>**</td>\n<td>*</td>\n<td>**</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-3-网络转发\"><a href=\"#4-3-网络转发\" class=\"headerlink\" title=\"4.3 网络转发\"></a>4.3 网络转发</h3><p>常见的网路转发技术分为用户态转发技术、内核态转发技术、UIO旁路转发技术，之外还有交换芯片之类的这里不做过多介绍，下面主要介绍用户态、内核态、UIO旁路转发。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627486246857-f858f9dc-8420-4b98-ac89-c121eb17d689.png#clientId=u591ad28a-e8ae-4&from=paste&height=490&id=u00a5d948&margin=%5Bobject%20Object%5D&name=image.png&originHeight=532&originWidth=781&originalType=binary&ratio=1&size=157286&status=done&style=none&taskId=u0140e34b-eeb4-411b-be4f-ae0fb9980d5&width=719.5\" alt=\"image.png\"><br>在转发速率，难度及趋势上做了相关对比</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>用户态</th>\n<th>内核态</th>\n<th>DPDK</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>速度</td>\n<td>*</td>\n<td>**</td>\n<td>***</td>\n</tr>\n<tr>\n<td>开发难度</td>\n<td>*</td>\n<td>***(不小心把内核态搞崩)</td>\n<td>**</td>\n</tr>\n<tr>\n<td>周边工具</td>\n<td>***</td>\n<td>***</td>\n<td><em>(借助VPP可以达到</em>**)</td>\n</tr>\n<tr>\n<td>社区趋势</td>\n<td>*</td>\n<td>*</td>\n<td>***</td>\n</tr>\n</tbody></table>\n<p>综上所述DPDK基本是网络转发技术主流。<br><a href=\"https://www.yuque.com/wuhao-bo7rr/rb9zmq/ak1moi\">https://www.yuque.com/wuhao-bo7rr/rb9zmq/ak1moi</a></p>\n<h2 id=\"5-主要业务流程\"><a href=\"#5-主要业务流程\" class=\"headerlink\" title=\"5.主要业务流程\"></a>5.主要业务流程</h2><pre><code> 商用手机终端入网，基站握手、核心网注册、IMS注册为必须项，只完成核心网注册，未完成IMS注册手机会自动掉线。\n</code></pre>\n<h3 id=\"5-1-基站建联\"><a href=\"#5-1-基站建联\" class=\"headerlink\" title=\"5.1 基站建联\"></a>5.1 基站建联</h3><p>​</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627391179070-5ef19fd6-cdfe-4031-916b-eb11aeb0b808.png#clientId=ue276c832-69f5-4&from=paste&height=717&id=HCRzI&margin=%5Bobject%20Object%5D&name=image.png&originHeight=829&originWidth=554&originalType=binary&ratio=1&size=123452&status=done&style=none&taskId=u63efdef9-43bd-4448-bd6f-f594e8d09ea&width=479\" alt=\"image.png\"><br>手机与基站建联主要流程可以归结为：</p>\n<ul>\n<li>小区搜索与选择</li>\n</ul>\n<p>UE开机选网，小区搜索并完成下行同步。</p>\n<ul>\n<li>系统消息广播</li>\n</ul>\n<p>UE读取广播信息，选择合适小区进行驻留。</p>\n<ul>\n<li>随机接入</li>\n</ul>\n<p>UE与gNB建立上行同步。</p>\n<ul>\n<li>RRC连接建立</li>\n</ul>\n<p>UE与gNB建立RRC连接。</p>\n<ul>\n<li>注册过程</li>\n</ul>\n<p>UE注册到5G网络，网络侧开始维护该UE的上下文。<br>​</p>\n<h3 id=\"5-2-核心网注册\"><a href=\"#5-2-核心网注册\" class=\"headerlink\" title=\"5.2 核心网注册\"></a>5.2 核心网注册</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627391130276-8e26e31c-b637-4803-befc-bd2fe46fce80.png#clientId=ue276c832-69f5-4&from=paste&height=826&id=iKwsM&margin=%5Bobject%20Object%5D&name=image.png&originHeight=826&originWidth=841&originalType=binary&ratio=1&size=228847&status=done&style=none&taskId=u7a19b13a-9c93-4ad6-a382-02ccff8827c&width=841\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627297426188-9d936938-2425-472e-a3d4-bc9f7db313fc.png#clientId=u3fb41919-abb0-4&from=paste&height=220&id=BnpTo&margin=%5Bobject%20Object%5D&name=image.png&originHeight=220&originWidth=1605&originalType=binary&ratio=1&size=184759&status=done&style=none&taskId=u6367eeed-a982-4404-92c4-aa9d3f1fd39&width=1605\" alt=\"image.png\"></p>\n<p>整体可归纳为：</p>\n<ul>\n<li>注册请求</li>\n</ul>\n<p>终端携带SIM信息进行注册，核心网通过用户信息在UDM查询数据，以此判断是否需要identity request</p>\n<ul>\n<li><p>鉴权处理</p>\n<pre><code>核心网查询到用户信息后，发起Authentication request，终端收到请求后进行校验，回复Authentication response\n此时双方共同进行双向鉴权。\n</code></pre>\n</li>\n<li><p>加密协商</p>\n<pre><code>终端与网络双方为选择加密算法，可选类型为4种，其中第一种为不加密，其余三种为加密算法，加密算法包含完整性保护算法和报文加密算法，分别是为了保护报文的安全性与正确性\n</code></pre>\n</li>\n<li><p>注册完成</p>\n<pre><code>网络侧返回注册完成，网络侧会携带网络能力告知终端。比如4G回落，IP短信能力。\n</code></pre>\n</li>\n<li><p>无线能力上报</p>\n<pre><code>终端上报无线能力，终端上报无线能力至服务端，此信令为非必须应答信令\n</code></pre>\n</li>\n<li><p>会话创建</p>\n<pre><code>终端创建流量传输通道，核心网在网络侧分配网络资源，此处一般会创建两个会话通道一个是IMS用来发短信打电话，一个是internet用来上网。由于IMS网络与Internet网络隔离这就是为什么在人多的地方有的时候网速慢打电话确没有影响。\n</code></pre>\n</li>\n<li><p>IMS注册</p>\n<pre><code>终端完成会话通道创建后，会发起sip注册，商用终端必须完成sip注册后才可进行上网，这个原因大概是上网功能与ims功能为运营商基础能力，都需要完成后才算入网完成，手机层面表现为，出现HD为IMS网络注册完成。\n</code></pre>\n<p>详细可参考：<a href=\"https://www.yuque.com/wuhao-bo7rr/rb9zmq/gv4tpd\">https://www.yuque.com/wuhao-bo7rr/rb9zmq/gv4tpd</a></p>\n<h3 id=\"5-3-IMS注册\"><a href=\"#5-3-IMS注册\" class=\"headerlink\" title=\"5.3 IMS注册\"></a>5.3 IMS注册</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627393550010-ab490608-c0aa-415c-8aa2-35749258d676.png#clientId=ue276c832-69f5-4&from=paste&height=614&id=iOBZl&margin=%5Bobject%20Object%5D&name=image.png&originHeight=691&originWidth=704&originalType=binary&ratio=1&size=72864&status=done&style=none&taskId=ucd354c72-30eb-4676-b873-8e303c3f0cd&width=626\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627487171816-e2da3602-ee5c-4e68-b644-12bb3e575d29.png#clientId=u591ad28a-e8ae-4&from=paste&height=103&id=u801e3236&margin=%5Bobject%20Object%5D&name=image.png&originHeight=206&originWidth=2832&originalType=binary&ratio=1&size=179904&status=done&style=none&taskId=u4579b25f-b3f9-4e2b-b287-cee9c146a5e&width=1416\" alt=\"image.png\"></p>\n<h3 id=\"5-4-短信发送\"><a href=\"#5-4-短信发送\" class=\"headerlink\" title=\"5.4 短信发送\"></a>5.4 短信发送</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627393585310-6f9ba81e-d9fb-4245-80cf-c83aa7588bc3.png#clientId=ue276c832-69f5-4&from=paste&height=698&id=R2dku&margin=%5Bobject%20Object%5D&name=image.png&originHeight=698&originWidth=1145&originalType=binary&ratio=1&size=97410&status=done&style=none&taskId=ua3fd77d1-9e57-466e-a4f7-f3d3286a9ab&width=1145\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627487350302-314d17cd-fd39-4330-ba7e-eced2c55f0db.png#clientId=u591ad28a-e8ae-4&from=paste&height=79&id=u9eea8836&margin=%5Bobject%20Object%5D&name=image.png&originHeight=158&originWidth=2706&originalType=binary&ratio=1&size=91621&status=done&style=none&taskId=ua89d6db6-03e6-400f-9f25-a6f88a2d590&width=1353\" alt=\"image.png\"></p>\n<h3 id=\"5-5-语音呼叫\"><a href=\"#5-5-语音呼叫\" class=\"headerlink\" title=\"5.5 语音呼叫\"></a>5.5 语音呼叫</h3></li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627470940752-974ccafb-9a9f-4493-b685-fc011492c598.png#clientId=u483e4c72-e2ee-4&from=drop&id=uae785ddf&margin=%5Bobject%20Object%5D&name=%E4%B8%8B%E8%BD%BD%20%283%29.png&originHeight=1215&originWidth=1277&originalType=binary&ratio=1&size=133973&status=done&style=none&taskId=ua18dae18-1f40-42d0-8acd-04779ad4c05\" alt=\"下载 (3).png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627471023385-85c0acc3-4b59-45fc-bca4-abf99963f673.png#clientId=u483e4c72-e2ee-4&from=paste&height=250&id=u01d42343&margin=%5Bobject%20Object%5D&name=image.png&originHeight=250&originWidth=1286&originalType=binary&ratio=1&size=234005&status=done&style=none&taskId=ue1c25eb8-003d-44f7-ac45-24f1c730440&width=1286\" alt=\"image.png\"><br>​</p>\n"},{"title":"人工智能算法","_content":"\n\n### 1.人工智能的三大基石\n\n    算法、数据、计算能力\n\n### 2.算法\n\n#### 2.1.学习算法\n\n按照模型训练方式可以分为四类：\n\n- 监督学习（Supervised Learning）\n- 无监督学习（Unsupervised Learning）\n- 半监督学习（Semi-supervised Learning）\n- 强化学习（Reinforcement Learning）\n- 深度学习(Deep Learning)\n\n#### 2.2.监督学习\n\n常见的监督学习算法包含以下几类：\n\n##### 2.2.1.人工神经网络（Artificial NeuralNetwork：\n\n- 反向传播（Backpropagation）\n- 波尔兹曼机（Boltzmann Machine）\n- 卷积神经网络（Convolutional Neural Network）\n- Hopfield 网络（hopfield Network）\n- 多层感知器（Multilyer Perceptron）\n- 径向基函数网络（Radial Basis Function Network，RBFN）\n- 受限波尔兹曼机（Restricted Boltzmann Machine）\n- 回归神经网络（Recurrent NeuralNetwork，RNN）\n- 自组织映射（Self-organizing Map，SOM）\n- 尖峰神经网络（Spiking Neural Network）\n\n##### 2.2.2.贝叶斯类（Bayesin）\n\n- 朴素贝叶斯（Naive Bayes）\n- 高斯贝叶斯（Gaussian Naive Bayes）\n- 多项朴素贝叶斯（Multinomial Naive Bayes）\n- 平均-依赖性评估（Averaged One-Dependence Estimators，AODE）\n- 贝叶斯信念网络（Bayesian Belief Network，BBN）\n- 贝叶斯网络（Bayesian Network，BN）\n\n##### 2.2.3.决策树（Decision Tree）\n\n- 分类和回归树（Classification and Regression Tree，CART）\n- 迭代 Dichotomiser3（Iterative Dichotomiser 3， ID3）\n- C4.5 算法（C4.5 Algorithm）、C5.0 算法（C5.0 Algorithm）\n- 卡方自动交互检测（Chi-squared Automatic Interaction Detection，CHAID）\n- 决策残端（Decision Stump）\n- ID3 算法（ID3 Algorithm）\n- 随机森林（Random Forest）\n- SLIQ（Supervised Learning in Quest）\n\n##### 2.2.4.线性分类器（Linear Classifier）类：\n\n- Fisher 的线性判别（Fisher’s Linear Discriminant）\n- 线性回归（Linear Regression）\n- 逻辑回归（Logistic Regression）\n- 多项逻辑回归（Multionmial Logistic Regression）\n- 朴素贝叶斯分类器（Naive Bayes Classifier）\n- 感知（Perception）\n- 支持向量机（Support Vector Machine）\n\n#### 2.3.无监督学习：\n\n##### 2.3.1.人工神经网络（Artificial Neural Network）\n\n- 生成对抗网络（Generative Adversarial Networks，GAN）\n- 前馈神经网络（Feedforward Neural Network）\n- 逻辑学习机（Logic Learning Machine）\n- 自组织映射（Self-organizing Map）\n\n##### 2.3.2.关联规则学习（Association Rule Learning）\n\n- 先验算法（Apriori Algorithm）\n- Eclat 算法（Eclat Algorithm）\n- FP-Growth\n\n##### 2.3.3.分层聚类算法（Hierarchical Clustering）\n\n- 单连锁聚类（Single-linkage Clustering）\n- 概念聚类（Conceptual Clustering）\n\n##### 2.3.4.聚类分析（Cluster analysis）\n\n- BIRCH 算法\n- DBSCAN 算法\n- 期望最大化（Expectation-maximization，EM）\n- 模糊聚类（Fuzzy Clustering）\n- K-means 算法\n- K 均值聚类（K-means Clustering）\n- K-medians 聚类\n- 均值漂移算法（Mean-shift）\n- OPTICS 算法\n\n##### 2.3.5.异常检测（Anomaly detection）\n\n- K 最邻近（K-nearest Neighbor，KNN）算法\n- 局部异常因子算法（Local Outlier Factor，LOF）\n\n#### 2.4.半监督学习：\n\n- 生成模型（Generative Models）\n- 低密度分离（Low-density Separation）\n- 基于图形的方法（Graph-based Methods）\n- 联合训练（Co-training）\n\n#### 2.5.强化学习类算法\n\n- Q 学习（Q-learning）\n- 状态-行动-奖励-状态-行动（State-Action-Reward-State-Action，SARSA）\n- DQN（Deep Q Network）\n- 策略梯度算法（Policy Gradients）\n- 基于模型强化学习（Model Based RL）\n- 时序差分学习（Temporal Different Learning）\n\n#### 2.6.深度学习类算法：\n\n- 深度信念网络（Deep Belief Machines）\n- 深度卷积神经网络（Deep Convolutional Neural Networks）\n- 深度递归神经网络（Deep Recurrent Neural Network）\n- 分层时间记忆（Hierarchical Temporal Memory，HTM）\n- 深度波尔兹曼机（Deep Boltzmann Machine，DBM）\n- 栈式自动编码器（Stacked Autoencoder）\n- 生成对抗网络（Generative Adversarial Networks）\n\n### 3.解决任务算法\n\n按照解决任务的不同来分类，粗略可以分为五种：\n\n- 二分类算法（Two-class Classification）\n- 多分类算法（Multi-class Classification）\n- 回归算法（Regression）\n- 聚类算法（Clustering）\n- 异常检测（Anomaly Detection）\n\n#### 3.1.二分类（Two-class Classification）\n\n- （1）二分类支持向量机（Two-class SVM）：适用于数据特征较多、线性模型的场景。\n- （2）二分类平均感知器（Two-class Average Perceptron）：适用于训练时间短、线性模型的场景。\n- （3）二分类逻辑回归（Two-class Logistic Regression）：适用于训练时间短、线性模型的场景。\n- （4）二分类贝叶斯点机（Two-class Bayes Point Machine）：适用于训练时间短、线性模型的场景。（5）二分类决策森林（Two-class Decision Forest）：适用于训练时间短、精准的场景。\n- （6）二分类提升决策树（Two-class Boosted Decision Tree）：适用于训练时间短、精准度高、内存占用量大的场景\n- （7）二分类决策丛林（Two-class Decision Jungle）：适用于训练时间短、精确度高、内存占用量小的场景。\n- （8）二分类局部深度支持向量机（Two-class Locally Deep SVM）：适用于数据特征较多的场景。\n- （9）二分类神经网络（Two-class Neural Network）：适用于精准度高、训练时间较长的场景。\n\n#### 3.2.多分类（Multi-class Classification）\n\n多分类问题通常适用三种解决方案：\n第一种，从数据集和适用方法入手，利用二分类器解决多分类问题；\n第二种，直接使用具备多分类能力的多分类器；\n第三种，将二分类器改进成为多分类器今儿解决多分类问题。\n常用的算法：\n（1）多分类逻辑回归（Multiclass Logistic Regression）：适用训练时间短、线性模型的场景。\n（2）多分类神经网络（Multiclass Neural Network）：适用于精准度高、训练时间较长的场景。\n（3）多分类决策森林（Multiclass Decision Forest）：适用于精准度高，训练时间短的场景。\n（4）多分类决策丛林（Multiclass Decision Jungle）：适用于精准度高，内存占用较小的场景。\n（5）“一对多”多分类（One-vs-all Multiclass）：取决于二分类器效果。\n\n#### 3.3.回归\n\n回归问题通常被用来预测具体的数值而非分类。除了返回的结果不同，其他方法与分类问题类似。\n我们将定量输出，或者连续变量预测称为回归；将定性输出，或者离散变量预测称为分类。\n常见的算法有：\n\n- （1）排序回归（Ordinal Regression）：适用于对数据进行分类排序的场景。\n- （2）泊松回归（Poission Regression）：适用于预测事件次数的场景。\n- （3）快速森林分位数回归（Fast Forest Quantile Regression）：适用于预测分布的场景。\n- （4）线性回归（Linear Regression）：适用于训练时间短、线性模型的场景。\n- （5）贝叶斯线性回归（Bayesian Linear Regression）：适用于线性模型，训练数据量较少的场景。\n- （6）神经网络回归（Neural Network Regression）：适用于精准度高、训练时间较长的场景。\n- （7）决策森林回归（Decision Forest Regression）：适用于精准度高、训练时间短的场景。\n- （8）提升决策树回归（Boosted Decision Tree Regression）：适用于精确度高、训练时间短、内存占用较大的场景。\n\n#### 3.4.聚类\n\n聚类的目标是发现数据的潜在规律和结构。聚类通常被用做描述和衡量不同数据源间的相似性，并把数据源分类到不同的簇中。\n（1）层次聚类（Hierarchical Clustering）：适用于训练时间短、大数据量的场景。\n（2）K-means 算法：适用于精准度高、训练时间短的场景。\n（3）模糊聚类 FCM 算法（Fuzzy C-means，FCM）：适用于精确度高、训练时间短的场景。\n（4）SOM 神经网络（Self-organizing Feature Map，SOM）：适用于运行时间较长的场景。\n\n#### 3.5.异常检测\n\n异常检测是指对数据中存在的不正常或非典型的分体进行检测和标志，有时也称为偏差检测。\n异常检测看起来和监督学习问题非常相似，都是分类问题。都是对样本的标签进行预测和判断，但是实际上两者的区别非常大，因为异常检测中的正样本（异常点）非常小。常用的算法有：\n（1）一分类支持向量机（One-class SVM）：适用于数据特征较多的场景。\n（2）基于 PCA 的异常检测（PCA-based Anomaly Detection）：适用于训练时间短的场景。\n\n### 4.迁移学习类算法\n\n- 归纳式迁移学习（Inductive Transfer Learning）\n- 直推式迁移学习（Transductive Transfer Learning）\n- 无监督式迁移学习（Unsupervised Transfer Learning）\n- 传递式迁移学习（Transitive Transfer Learning）\n\n算法的适用场景，需要考虑的因素有：\n\n- （1）数据量的大小、数据质量和数据本身的特点\n- （2）机器学习要解决的具体业务场景中问题的本质是什么？\n- （3）可以接受的计算时间是什么？\n- （4）算法精度要求有多高？\n\n### 5.应用场景\n\n有了算法，有了被训练的数据（经过预处理过的数据），那么多次训练（考验计算能力的时候到了）后，经过模型评估和算法人员调参后，会获得训练模型。当新的数据输入后，那么我们的训练模型就会给出结果。业务要求的最基础的功能就算实现了。\n\n互联网产品自动化运维是趋势，因为互联网需要快速响应的特性，决定了我们对问题要快速响应、快速修复。人工智能产品也不例外。AI + 自动化运维是如何工作的呢？\n","source":"_posts/algorithm/ai/ai.md","raw":"---\ntitle: 人工智能算法\ncategories:\n- algorithm\ntag:\n- ai\n---\n\n\n### 1.人工智能的三大基石\n\n    算法、数据、计算能力\n\n### 2.算法\n\n#### 2.1.学习算法\n\n按照模型训练方式可以分为四类：\n\n- 监督学习（Supervised Learning）\n- 无监督学习（Unsupervised Learning）\n- 半监督学习（Semi-supervised Learning）\n- 强化学习（Reinforcement Learning）\n- 深度学习(Deep Learning)\n\n#### 2.2.监督学习\n\n常见的监督学习算法包含以下几类：\n\n##### 2.2.1.人工神经网络（Artificial NeuralNetwork：\n\n- 反向传播（Backpropagation）\n- 波尔兹曼机（Boltzmann Machine）\n- 卷积神经网络（Convolutional Neural Network）\n- Hopfield 网络（hopfield Network）\n- 多层感知器（Multilyer Perceptron）\n- 径向基函数网络（Radial Basis Function Network，RBFN）\n- 受限波尔兹曼机（Restricted Boltzmann Machine）\n- 回归神经网络（Recurrent NeuralNetwork，RNN）\n- 自组织映射（Self-organizing Map，SOM）\n- 尖峰神经网络（Spiking Neural Network）\n\n##### 2.2.2.贝叶斯类（Bayesin）\n\n- 朴素贝叶斯（Naive Bayes）\n- 高斯贝叶斯（Gaussian Naive Bayes）\n- 多项朴素贝叶斯（Multinomial Naive Bayes）\n- 平均-依赖性评估（Averaged One-Dependence Estimators，AODE）\n- 贝叶斯信念网络（Bayesian Belief Network，BBN）\n- 贝叶斯网络（Bayesian Network，BN）\n\n##### 2.2.3.决策树（Decision Tree）\n\n- 分类和回归树（Classification and Regression Tree，CART）\n- 迭代 Dichotomiser3（Iterative Dichotomiser 3， ID3）\n- C4.5 算法（C4.5 Algorithm）、C5.0 算法（C5.0 Algorithm）\n- 卡方自动交互检测（Chi-squared Automatic Interaction Detection，CHAID）\n- 决策残端（Decision Stump）\n- ID3 算法（ID3 Algorithm）\n- 随机森林（Random Forest）\n- SLIQ（Supervised Learning in Quest）\n\n##### 2.2.4.线性分类器（Linear Classifier）类：\n\n- Fisher 的线性判别（Fisher’s Linear Discriminant）\n- 线性回归（Linear Regression）\n- 逻辑回归（Logistic Regression）\n- 多项逻辑回归（Multionmial Logistic Regression）\n- 朴素贝叶斯分类器（Naive Bayes Classifier）\n- 感知（Perception）\n- 支持向量机（Support Vector Machine）\n\n#### 2.3.无监督学习：\n\n##### 2.3.1.人工神经网络（Artificial Neural Network）\n\n- 生成对抗网络（Generative Adversarial Networks，GAN）\n- 前馈神经网络（Feedforward Neural Network）\n- 逻辑学习机（Logic Learning Machine）\n- 自组织映射（Self-organizing Map）\n\n##### 2.3.2.关联规则学习（Association Rule Learning）\n\n- 先验算法（Apriori Algorithm）\n- Eclat 算法（Eclat Algorithm）\n- FP-Growth\n\n##### 2.3.3.分层聚类算法（Hierarchical Clustering）\n\n- 单连锁聚类（Single-linkage Clustering）\n- 概念聚类（Conceptual Clustering）\n\n##### 2.3.4.聚类分析（Cluster analysis）\n\n- BIRCH 算法\n- DBSCAN 算法\n- 期望最大化（Expectation-maximization，EM）\n- 模糊聚类（Fuzzy Clustering）\n- K-means 算法\n- K 均值聚类（K-means Clustering）\n- K-medians 聚类\n- 均值漂移算法（Mean-shift）\n- OPTICS 算法\n\n##### 2.3.5.异常检测（Anomaly detection）\n\n- K 最邻近（K-nearest Neighbor，KNN）算法\n- 局部异常因子算法（Local Outlier Factor，LOF）\n\n#### 2.4.半监督学习：\n\n- 生成模型（Generative Models）\n- 低密度分离（Low-density Separation）\n- 基于图形的方法（Graph-based Methods）\n- 联合训练（Co-training）\n\n#### 2.5.强化学习类算法\n\n- Q 学习（Q-learning）\n- 状态-行动-奖励-状态-行动（State-Action-Reward-State-Action，SARSA）\n- DQN（Deep Q Network）\n- 策略梯度算法（Policy Gradients）\n- 基于模型强化学习（Model Based RL）\n- 时序差分学习（Temporal Different Learning）\n\n#### 2.6.深度学习类算法：\n\n- 深度信念网络（Deep Belief Machines）\n- 深度卷积神经网络（Deep Convolutional Neural Networks）\n- 深度递归神经网络（Deep Recurrent Neural Network）\n- 分层时间记忆（Hierarchical Temporal Memory，HTM）\n- 深度波尔兹曼机（Deep Boltzmann Machine，DBM）\n- 栈式自动编码器（Stacked Autoencoder）\n- 生成对抗网络（Generative Adversarial Networks）\n\n### 3.解决任务算法\n\n按照解决任务的不同来分类，粗略可以分为五种：\n\n- 二分类算法（Two-class Classification）\n- 多分类算法（Multi-class Classification）\n- 回归算法（Regression）\n- 聚类算法（Clustering）\n- 异常检测（Anomaly Detection）\n\n#### 3.1.二分类（Two-class Classification）\n\n- （1）二分类支持向量机（Two-class SVM）：适用于数据特征较多、线性模型的场景。\n- （2）二分类平均感知器（Two-class Average Perceptron）：适用于训练时间短、线性模型的场景。\n- （3）二分类逻辑回归（Two-class Logistic Regression）：适用于训练时间短、线性模型的场景。\n- （4）二分类贝叶斯点机（Two-class Bayes Point Machine）：适用于训练时间短、线性模型的场景。（5）二分类决策森林（Two-class Decision Forest）：适用于训练时间短、精准的场景。\n- （6）二分类提升决策树（Two-class Boosted Decision Tree）：适用于训练时间短、精准度高、内存占用量大的场景\n- （7）二分类决策丛林（Two-class Decision Jungle）：适用于训练时间短、精确度高、内存占用量小的场景。\n- （8）二分类局部深度支持向量机（Two-class Locally Deep SVM）：适用于数据特征较多的场景。\n- （9）二分类神经网络（Two-class Neural Network）：适用于精准度高、训练时间较长的场景。\n\n#### 3.2.多分类（Multi-class Classification）\n\n多分类问题通常适用三种解决方案：\n第一种，从数据集和适用方法入手，利用二分类器解决多分类问题；\n第二种，直接使用具备多分类能力的多分类器；\n第三种，将二分类器改进成为多分类器今儿解决多分类问题。\n常用的算法：\n（1）多分类逻辑回归（Multiclass Logistic Regression）：适用训练时间短、线性模型的场景。\n（2）多分类神经网络（Multiclass Neural Network）：适用于精准度高、训练时间较长的场景。\n（3）多分类决策森林（Multiclass Decision Forest）：适用于精准度高，训练时间短的场景。\n（4）多分类决策丛林（Multiclass Decision Jungle）：适用于精准度高，内存占用较小的场景。\n（5）“一对多”多分类（One-vs-all Multiclass）：取决于二分类器效果。\n\n#### 3.3.回归\n\n回归问题通常被用来预测具体的数值而非分类。除了返回的结果不同，其他方法与分类问题类似。\n我们将定量输出，或者连续变量预测称为回归；将定性输出，或者离散变量预测称为分类。\n常见的算法有：\n\n- （1）排序回归（Ordinal Regression）：适用于对数据进行分类排序的场景。\n- （2）泊松回归（Poission Regression）：适用于预测事件次数的场景。\n- （3）快速森林分位数回归（Fast Forest Quantile Regression）：适用于预测分布的场景。\n- （4）线性回归（Linear Regression）：适用于训练时间短、线性模型的场景。\n- （5）贝叶斯线性回归（Bayesian Linear Regression）：适用于线性模型，训练数据量较少的场景。\n- （6）神经网络回归（Neural Network Regression）：适用于精准度高、训练时间较长的场景。\n- （7）决策森林回归（Decision Forest Regression）：适用于精准度高、训练时间短的场景。\n- （8）提升决策树回归（Boosted Decision Tree Regression）：适用于精确度高、训练时间短、内存占用较大的场景。\n\n#### 3.4.聚类\n\n聚类的目标是发现数据的潜在规律和结构。聚类通常被用做描述和衡量不同数据源间的相似性，并把数据源分类到不同的簇中。\n（1）层次聚类（Hierarchical Clustering）：适用于训练时间短、大数据量的场景。\n（2）K-means 算法：适用于精准度高、训练时间短的场景。\n（3）模糊聚类 FCM 算法（Fuzzy C-means，FCM）：适用于精确度高、训练时间短的场景。\n（4）SOM 神经网络（Self-organizing Feature Map，SOM）：适用于运行时间较长的场景。\n\n#### 3.5.异常检测\n\n异常检测是指对数据中存在的不正常或非典型的分体进行检测和标志，有时也称为偏差检测。\n异常检测看起来和监督学习问题非常相似，都是分类问题。都是对样本的标签进行预测和判断，但是实际上两者的区别非常大，因为异常检测中的正样本（异常点）非常小。常用的算法有：\n（1）一分类支持向量机（One-class SVM）：适用于数据特征较多的场景。\n（2）基于 PCA 的异常检测（PCA-based Anomaly Detection）：适用于训练时间短的场景。\n\n### 4.迁移学习类算法\n\n- 归纳式迁移学习（Inductive Transfer Learning）\n- 直推式迁移学习（Transductive Transfer Learning）\n- 无监督式迁移学习（Unsupervised Transfer Learning）\n- 传递式迁移学习（Transitive Transfer Learning）\n\n算法的适用场景，需要考虑的因素有：\n\n- （1）数据量的大小、数据质量和数据本身的特点\n- （2）机器学习要解决的具体业务场景中问题的本质是什么？\n- （3）可以接受的计算时间是什么？\n- （4）算法精度要求有多高？\n\n### 5.应用场景\n\n有了算法，有了被训练的数据（经过预处理过的数据），那么多次训练（考验计算能力的时候到了）后，经过模型评估和算法人员调参后，会获得训练模型。当新的数据输入后，那么我们的训练模型就会给出结果。业务要求的最基础的功能就算实现了。\n\n互联网产品自动化运维是趋势，因为互联网需要快速响应的特性，决定了我们对问题要快速响应、快速修复。人工智能产品也不例外。AI + 自动化运维是如何工作的呢？\n","slug":"algorithm/ai/ai","published":1,"date":"2021-09-14T15:07:45.070Z","updated":"2021-09-14T15:07:45.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyhq0007u6uke5ud1doa","content":"<h3 id=\"1-人工智能的三大基石\"><a href=\"#1-人工智能的三大基石\" class=\"headerlink\" title=\"1.人工智能的三大基石\"></a>1.人工智能的三大基石</h3><pre><code>算法、数据、计算能力\n</code></pre>\n<h3 id=\"2-算法\"><a href=\"#2-算法\" class=\"headerlink\" title=\"2.算法\"></a>2.算法</h3><h4 id=\"2-1-学习算法\"><a href=\"#2-1-学习算法\" class=\"headerlink\" title=\"2.1.学习算法\"></a>2.1.学习算法</h4><p>按照模型训练方式可以分为四类：</p>\n<ul>\n<li>监督学习（Supervised Learning）</li>\n<li>无监督学习（Unsupervised Learning）</li>\n<li>半监督学习（Semi-supervised Learning）</li>\n<li>强化学习（Reinforcement Learning）</li>\n<li>深度学习(Deep Learning)</li>\n</ul>\n<h4 id=\"2-2-监督学习\"><a href=\"#2-2-监督学习\" class=\"headerlink\" title=\"2.2.监督学习\"></a>2.2.监督学习</h4><p>常见的监督学习算法包含以下几类：</p>\n<h5 id=\"2-2-1-人工神经网络（Artificial-NeuralNetwork：\"><a href=\"#2-2-1-人工神经网络（Artificial-NeuralNetwork：\" class=\"headerlink\" title=\"2.2.1.人工神经网络（Artificial NeuralNetwork：\"></a>2.2.1.人工神经网络（Artificial NeuralNetwork：</h5><ul>\n<li>反向传播（Backpropagation）</li>\n<li>波尔兹曼机（Boltzmann Machine）</li>\n<li>卷积神经网络（Convolutional Neural Network）</li>\n<li>Hopfield 网络（hopfield Network）</li>\n<li>多层感知器（Multilyer Perceptron）</li>\n<li>径向基函数网络（Radial Basis Function Network，RBFN）</li>\n<li>受限波尔兹曼机（Restricted Boltzmann Machine）</li>\n<li>回归神经网络（Recurrent NeuralNetwork，RNN）</li>\n<li>自组织映射（Self-organizing Map，SOM）</li>\n<li>尖峰神经网络（Spiking Neural Network）</li>\n</ul>\n<h5 id=\"2-2-2-贝叶斯类（Bayesin）\"><a href=\"#2-2-2-贝叶斯类（Bayesin）\" class=\"headerlink\" title=\"2.2.2.贝叶斯类（Bayesin）\"></a>2.2.2.贝叶斯类（Bayesin）</h5><ul>\n<li>朴素贝叶斯（Naive Bayes）</li>\n<li>高斯贝叶斯（Gaussian Naive Bayes）</li>\n<li>多项朴素贝叶斯（Multinomial Naive Bayes）</li>\n<li>平均-依赖性评估（Averaged One-Dependence Estimators，AODE）</li>\n<li>贝叶斯信念网络（Bayesian Belief Network，BBN）</li>\n<li>贝叶斯网络（Bayesian Network，BN）</li>\n</ul>\n<h5 id=\"2-2-3-决策树（Decision-Tree）\"><a href=\"#2-2-3-决策树（Decision-Tree）\" class=\"headerlink\" title=\"2.2.3.决策树（Decision Tree）\"></a>2.2.3.决策树（Decision Tree）</h5><ul>\n<li>分类和回归树（Classification and Regression Tree，CART）</li>\n<li>迭代 Dichotomiser3（Iterative Dichotomiser 3， ID3）</li>\n<li>C4.5 算法（C4.5 Algorithm）、C5.0 算法（C5.0 Algorithm）</li>\n<li>卡方自动交互检测（Chi-squared Automatic Interaction Detection，CHAID）</li>\n<li>决策残端（Decision Stump）</li>\n<li>ID3 算法（ID3 Algorithm）</li>\n<li>随机森林（Random Forest）</li>\n<li>SLIQ（Supervised Learning in Quest）</li>\n</ul>\n<h5 id=\"2-2-4-线性分类器（Linear-Classifier）类：\"><a href=\"#2-2-4-线性分类器（Linear-Classifier）类：\" class=\"headerlink\" title=\"2.2.4.线性分类器（Linear Classifier）类：\"></a>2.2.4.线性分类器（Linear Classifier）类：</h5><ul>\n<li>Fisher 的线性判别（Fisher’s Linear Discriminant）</li>\n<li>线性回归（Linear Regression）</li>\n<li>逻辑回归（Logistic Regression）</li>\n<li>多项逻辑回归（Multionmial Logistic Regression）</li>\n<li>朴素贝叶斯分类器（Naive Bayes Classifier）</li>\n<li>感知（Perception）</li>\n<li>支持向量机（Support Vector Machine）</li>\n</ul>\n<h4 id=\"2-3-无监督学习：\"><a href=\"#2-3-无监督学习：\" class=\"headerlink\" title=\"2.3.无监督学习：\"></a>2.3.无监督学习：</h4><h5 id=\"2-3-1-人工神经网络（Artificial-Neural-Network）\"><a href=\"#2-3-1-人工神经网络（Artificial-Neural-Network）\" class=\"headerlink\" title=\"2.3.1.人工神经网络（Artificial Neural Network）\"></a>2.3.1.人工神经网络（Artificial Neural Network）</h5><ul>\n<li>生成对抗网络（Generative Adversarial Networks，GAN）</li>\n<li>前馈神经网络（Feedforward Neural Network）</li>\n<li>逻辑学习机（Logic Learning Machine）</li>\n<li>自组织映射（Self-organizing Map）</li>\n</ul>\n<h5 id=\"2-3-2-关联规则学习（Association-Rule-Learning）\"><a href=\"#2-3-2-关联规则学习（Association-Rule-Learning）\" class=\"headerlink\" title=\"2.3.2.关联规则学习（Association Rule Learning）\"></a>2.3.2.关联规则学习（Association Rule Learning）</h5><ul>\n<li>先验算法（Apriori Algorithm）</li>\n<li>Eclat 算法（Eclat Algorithm）</li>\n<li>FP-Growth</li>\n</ul>\n<h5 id=\"2-3-3-分层聚类算法（Hierarchical-Clustering）\"><a href=\"#2-3-3-分层聚类算法（Hierarchical-Clustering）\" class=\"headerlink\" title=\"2.3.3.分层聚类算法（Hierarchical Clustering）\"></a>2.3.3.分层聚类算法（Hierarchical Clustering）</h5><ul>\n<li>单连锁聚类（Single-linkage Clustering）</li>\n<li>概念聚类（Conceptual Clustering）</li>\n</ul>\n<h5 id=\"2-3-4-聚类分析（Cluster-analysis）\"><a href=\"#2-3-4-聚类分析（Cluster-analysis）\" class=\"headerlink\" title=\"2.3.4.聚类分析（Cluster analysis）\"></a>2.3.4.聚类分析（Cluster analysis）</h5><ul>\n<li>BIRCH 算法</li>\n<li>DBSCAN 算法</li>\n<li>期望最大化（Expectation-maximization，EM）</li>\n<li>模糊聚类（Fuzzy Clustering）</li>\n<li>K-means 算法</li>\n<li>K 均值聚类（K-means Clustering）</li>\n<li>K-medians 聚类</li>\n<li>均值漂移算法（Mean-shift）</li>\n<li>OPTICS 算法</li>\n</ul>\n<h5 id=\"2-3-5-异常检测（Anomaly-detection）\"><a href=\"#2-3-5-异常检测（Anomaly-detection）\" class=\"headerlink\" title=\"2.3.5.异常检测（Anomaly detection）\"></a>2.3.5.异常检测（Anomaly detection）</h5><ul>\n<li>K 最邻近（K-nearest Neighbor，KNN）算法</li>\n<li>局部异常因子算法（Local Outlier Factor，LOF）</li>\n</ul>\n<h4 id=\"2-4-半监督学习：\"><a href=\"#2-4-半监督学习：\" class=\"headerlink\" title=\"2.4.半监督学习：\"></a>2.4.半监督学习：</h4><ul>\n<li>生成模型（Generative Models）</li>\n<li>低密度分离（Low-density Separation）</li>\n<li>基于图形的方法（Graph-based Methods）</li>\n<li>联合训练（Co-training）</li>\n</ul>\n<h4 id=\"2-5-强化学习类算法\"><a href=\"#2-5-强化学习类算法\" class=\"headerlink\" title=\"2.5.强化学习类算法\"></a>2.5.强化学习类算法</h4><ul>\n<li>Q 学习（Q-learning）</li>\n<li>状态-行动-奖励-状态-行动（State-Action-Reward-State-Action，SARSA）</li>\n<li>DQN（Deep Q Network）</li>\n<li>策略梯度算法（Policy Gradients）</li>\n<li>基于模型强化学习（Model Based RL）</li>\n<li>时序差分学习（Temporal Different Learning）</li>\n</ul>\n<h4 id=\"2-6-深度学习类算法：\"><a href=\"#2-6-深度学习类算法：\" class=\"headerlink\" title=\"2.6.深度学习类算法：\"></a>2.6.深度学习类算法：</h4><ul>\n<li>深度信念网络（Deep Belief Machines）</li>\n<li>深度卷积神经网络（Deep Convolutional Neural Networks）</li>\n<li>深度递归神经网络（Deep Recurrent Neural Network）</li>\n<li>分层时间记忆（Hierarchical Temporal Memory，HTM）</li>\n<li>深度波尔兹曼机（Deep Boltzmann Machine，DBM）</li>\n<li>栈式自动编码器（Stacked Autoencoder）</li>\n<li>生成对抗网络（Generative Adversarial Networks）</li>\n</ul>\n<h3 id=\"3-解决任务算法\"><a href=\"#3-解决任务算法\" class=\"headerlink\" title=\"3.解决任务算法\"></a>3.解决任务算法</h3><p>按照解决任务的不同来分类，粗略可以分为五种：</p>\n<ul>\n<li>二分类算法（Two-class Classification）</li>\n<li>多分类算法（Multi-class Classification）</li>\n<li>回归算法（Regression）</li>\n<li>聚类算法（Clustering）</li>\n<li>异常检测（Anomaly Detection）</li>\n</ul>\n<h4 id=\"3-1-二分类（Two-class-Classification）\"><a href=\"#3-1-二分类（Two-class-Classification）\" class=\"headerlink\" title=\"3.1.二分类（Two-class Classification）\"></a>3.1.二分类（Two-class Classification）</h4><ul>\n<li>（1）二分类支持向量机（Two-class SVM）：适用于数据特征较多、线性模型的场景。</li>\n<li>（2）二分类平均感知器（Two-class Average Perceptron）：适用于训练时间短、线性模型的场景。</li>\n<li>（3）二分类逻辑回归（Two-class Logistic Regression）：适用于训练时间短、线性模型的场景。</li>\n<li>（4）二分类贝叶斯点机（Two-class Bayes Point Machine）：适用于训练时间短、线性模型的场景。（5）二分类决策森林（Two-class Decision Forest）：适用于训练时间短、精准的场景。</li>\n<li>（6）二分类提升决策树（Two-class Boosted Decision Tree）：适用于训练时间短、精准度高、内存占用量大的场景</li>\n<li>（7）二分类决策丛林（Two-class Decision Jungle）：适用于训练时间短、精确度高、内存占用量小的场景。</li>\n<li>（8）二分类局部深度支持向量机（Two-class Locally Deep SVM）：适用于数据特征较多的场景。</li>\n<li>（9）二分类神经网络（Two-class Neural Network）：适用于精准度高、训练时间较长的场景。</li>\n</ul>\n<h4 id=\"3-2-多分类（Multi-class-Classification）\"><a href=\"#3-2-多分类（Multi-class-Classification）\" class=\"headerlink\" title=\"3.2.多分类（Multi-class Classification）\"></a>3.2.多分类（Multi-class Classification）</h4><p>多分类问题通常适用三种解决方案：<br>第一种，从数据集和适用方法入手，利用二分类器解决多分类问题；<br>第二种，直接使用具备多分类能力的多分类器；<br>第三种，将二分类器改进成为多分类器今儿解决多分类问题。<br>常用的算法：<br>（1）多分类逻辑回归（Multiclass Logistic Regression）：适用训练时间短、线性模型的场景。<br>（2）多分类神经网络（Multiclass Neural Network）：适用于精准度高、训练时间较长的场景。<br>（3）多分类决策森林（Multiclass Decision Forest）：适用于精准度高，训练时间短的场景。<br>（4）多分类决策丛林（Multiclass Decision Jungle）：适用于精准度高，内存占用较小的场景。<br>（5）“一对多”多分类（One-vs-all Multiclass）：取决于二分类器效果。</p>\n<h4 id=\"3-3-回归\"><a href=\"#3-3-回归\" class=\"headerlink\" title=\"3.3.回归\"></a>3.3.回归</h4><p>回归问题通常被用来预测具体的数值而非分类。除了返回的结果不同，其他方法与分类问题类似。<br>我们将定量输出，或者连续变量预测称为回归；将定性输出，或者离散变量预测称为分类。<br>常见的算法有：</p>\n<ul>\n<li>（1）排序回归（Ordinal Regression）：适用于对数据进行分类排序的场景。</li>\n<li>（2）泊松回归（Poission Regression）：适用于预测事件次数的场景。</li>\n<li>（3）快速森林分位数回归（Fast Forest Quantile Regression）：适用于预测分布的场景。</li>\n<li>（4）线性回归（Linear Regression）：适用于训练时间短、线性模型的场景。</li>\n<li>（5）贝叶斯线性回归（Bayesian Linear Regression）：适用于线性模型，训练数据量较少的场景。</li>\n<li>（6）神经网络回归（Neural Network Regression）：适用于精准度高、训练时间较长的场景。</li>\n<li>（7）决策森林回归（Decision Forest Regression）：适用于精准度高、训练时间短的场景。</li>\n<li>（8）提升决策树回归（Boosted Decision Tree Regression）：适用于精确度高、训练时间短、内存占用较大的场景。</li>\n</ul>\n<h4 id=\"3-4-聚类\"><a href=\"#3-4-聚类\" class=\"headerlink\" title=\"3.4.聚类\"></a>3.4.聚类</h4><p>聚类的目标是发现数据的潜在规律和结构。聚类通常被用做描述和衡量不同数据源间的相似性，并把数据源分类到不同的簇中。<br>（1）层次聚类（Hierarchical Clustering）：适用于训练时间短、大数据量的场景。<br>（2）K-means 算法：适用于精准度高、训练时间短的场景。<br>（3）模糊聚类 FCM 算法（Fuzzy C-means，FCM）：适用于精确度高、训练时间短的场景。<br>（4）SOM 神经网络（Self-organizing Feature Map，SOM）：适用于运行时间较长的场景。</p>\n<h4 id=\"3-5-异常检测\"><a href=\"#3-5-异常检测\" class=\"headerlink\" title=\"3.5.异常检测\"></a>3.5.异常检测</h4><p>异常检测是指对数据中存在的不正常或非典型的分体进行检测和标志，有时也称为偏差检测。<br>异常检测看起来和监督学习问题非常相似，都是分类问题。都是对样本的标签进行预测和判断，但是实际上两者的区别非常大，因为异常检测中的正样本（异常点）非常小。常用的算法有：<br>（1）一分类支持向量机（One-class SVM）：适用于数据特征较多的场景。<br>（2）基于 PCA 的异常检测（PCA-based Anomaly Detection）：适用于训练时间短的场景。</p>\n<h3 id=\"4-迁移学习类算法\"><a href=\"#4-迁移学习类算法\" class=\"headerlink\" title=\"4.迁移学习类算法\"></a>4.迁移学习类算法</h3><ul>\n<li>归纳式迁移学习（Inductive Transfer Learning）</li>\n<li>直推式迁移学习（Transductive Transfer Learning）</li>\n<li>无监督式迁移学习（Unsupervised Transfer Learning）</li>\n<li>传递式迁移学习（Transitive Transfer Learning）</li>\n</ul>\n<p>算法的适用场景，需要考虑的因素有：</p>\n<ul>\n<li>（1）数据量的大小、数据质量和数据本身的特点</li>\n<li>（2）机器学习要解决的具体业务场景中问题的本质是什么？</li>\n<li>（3）可以接受的计算时间是什么？</li>\n<li>（4）算法精度要求有多高？</li>\n</ul>\n<h3 id=\"5-应用场景\"><a href=\"#5-应用场景\" class=\"headerlink\" title=\"5.应用场景\"></a>5.应用场景</h3><p>有了算法，有了被训练的数据（经过预处理过的数据），那么多次训练（考验计算能力的时候到了）后，经过模型评估和算法人员调参后，会获得训练模型。当新的数据输入后，那么我们的训练模型就会给出结果。业务要求的最基础的功能就算实现了。</p>\n<p>互联网产品自动化运维是趋势，因为互联网需要快速响应的特性，决定了我们对问题要快速响应、快速修复。人工智能产品也不例外。AI + 自动化运维是如何工作的呢？</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-人工智能的三大基石\"><a href=\"#1-人工智能的三大基石\" class=\"headerlink\" title=\"1.人工智能的三大基石\"></a>1.人工智能的三大基石</h3><pre><code>算法、数据、计算能力\n</code></pre>\n<h3 id=\"2-算法\"><a href=\"#2-算法\" class=\"headerlink\" title=\"2.算法\"></a>2.算法</h3><h4 id=\"2-1-学习算法\"><a href=\"#2-1-学习算法\" class=\"headerlink\" title=\"2.1.学习算法\"></a>2.1.学习算法</h4><p>按照模型训练方式可以分为四类：</p>\n<ul>\n<li>监督学习（Supervised Learning）</li>\n<li>无监督学习（Unsupervised Learning）</li>\n<li>半监督学习（Semi-supervised Learning）</li>\n<li>强化学习（Reinforcement Learning）</li>\n<li>深度学习(Deep Learning)</li>\n</ul>\n<h4 id=\"2-2-监督学习\"><a href=\"#2-2-监督学习\" class=\"headerlink\" title=\"2.2.监督学习\"></a>2.2.监督学习</h4><p>常见的监督学习算法包含以下几类：</p>\n<h5 id=\"2-2-1-人工神经网络（Artificial-NeuralNetwork：\"><a href=\"#2-2-1-人工神经网络（Artificial-NeuralNetwork：\" class=\"headerlink\" title=\"2.2.1.人工神经网络（Artificial NeuralNetwork：\"></a>2.2.1.人工神经网络（Artificial NeuralNetwork：</h5><ul>\n<li>反向传播（Backpropagation）</li>\n<li>波尔兹曼机（Boltzmann Machine）</li>\n<li>卷积神经网络（Convolutional Neural Network）</li>\n<li>Hopfield 网络（hopfield Network）</li>\n<li>多层感知器（Multilyer Perceptron）</li>\n<li>径向基函数网络（Radial Basis Function Network，RBFN）</li>\n<li>受限波尔兹曼机（Restricted Boltzmann Machine）</li>\n<li>回归神经网络（Recurrent NeuralNetwork，RNN）</li>\n<li>自组织映射（Self-organizing Map，SOM）</li>\n<li>尖峰神经网络（Spiking Neural Network）</li>\n</ul>\n<h5 id=\"2-2-2-贝叶斯类（Bayesin）\"><a href=\"#2-2-2-贝叶斯类（Bayesin）\" class=\"headerlink\" title=\"2.2.2.贝叶斯类（Bayesin）\"></a>2.2.2.贝叶斯类（Bayesin）</h5><ul>\n<li>朴素贝叶斯（Naive Bayes）</li>\n<li>高斯贝叶斯（Gaussian Naive Bayes）</li>\n<li>多项朴素贝叶斯（Multinomial Naive Bayes）</li>\n<li>平均-依赖性评估（Averaged One-Dependence Estimators，AODE）</li>\n<li>贝叶斯信念网络（Bayesian Belief Network，BBN）</li>\n<li>贝叶斯网络（Bayesian Network，BN）</li>\n</ul>\n<h5 id=\"2-2-3-决策树（Decision-Tree）\"><a href=\"#2-2-3-决策树（Decision-Tree）\" class=\"headerlink\" title=\"2.2.3.决策树（Decision Tree）\"></a>2.2.3.决策树（Decision Tree）</h5><ul>\n<li>分类和回归树（Classification and Regression Tree，CART）</li>\n<li>迭代 Dichotomiser3（Iterative Dichotomiser 3， ID3）</li>\n<li>C4.5 算法（C4.5 Algorithm）、C5.0 算法（C5.0 Algorithm）</li>\n<li>卡方自动交互检测（Chi-squared Automatic Interaction Detection，CHAID）</li>\n<li>决策残端（Decision Stump）</li>\n<li>ID3 算法（ID3 Algorithm）</li>\n<li>随机森林（Random Forest）</li>\n<li>SLIQ（Supervised Learning in Quest）</li>\n</ul>\n<h5 id=\"2-2-4-线性分类器（Linear-Classifier）类：\"><a href=\"#2-2-4-线性分类器（Linear-Classifier）类：\" class=\"headerlink\" title=\"2.2.4.线性分类器（Linear Classifier）类：\"></a>2.2.4.线性分类器（Linear Classifier）类：</h5><ul>\n<li>Fisher 的线性判别（Fisher’s Linear Discriminant）</li>\n<li>线性回归（Linear Regression）</li>\n<li>逻辑回归（Logistic Regression）</li>\n<li>多项逻辑回归（Multionmial Logistic Regression）</li>\n<li>朴素贝叶斯分类器（Naive Bayes Classifier）</li>\n<li>感知（Perception）</li>\n<li>支持向量机（Support Vector Machine）</li>\n</ul>\n<h4 id=\"2-3-无监督学习：\"><a href=\"#2-3-无监督学习：\" class=\"headerlink\" title=\"2.3.无监督学习：\"></a>2.3.无监督学习：</h4><h5 id=\"2-3-1-人工神经网络（Artificial-Neural-Network）\"><a href=\"#2-3-1-人工神经网络（Artificial-Neural-Network）\" class=\"headerlink\" title=\"2.3.1.人工神经网络（Artificial Neural Network）\"></a>2.3.1.人工神经网络（Artificial Neural Network）</h5><ul>\n<li>生成对抗网络（Generative Adversarial Networks，GAN）</li>\n<li>前馈神经网络（Feedforward Neural Network）</li>\n<li>逻辑学习机（Logic Learning Machine）</li>\n<li>自组织映射（Self-organizing Map）</li>\n</ul>\n<h5 id=\"2-3-2-关联规则学习（Association-Rule-Learning）\"><a href=\"#2-3-2-关联规则学习（Association-Rule-Learning）\" class=\"headerlink\" title=\"2.3.2.关联规则学习（Association Rule Learning）\"></a>2.3.2.关联规则学习（Association Rule Learning）</h5><ul>\n<li>先验算法（Apriori Algorithm）</li>\n<li>Eclat 算法（Eclat Algorithm）</li>\n<li>FP-Growth</li>\n</ul>\n<h5 id=\"2-3-3-分层聚类算法（Hierarchical-Clustering）\"><a href=\"#2-3-3-分层聚类算法（Hierarchical-Clustering）\" class=\"headerlink\" title=\"2.3.3.分层聚类算法（Hierarchical Clustering）\"></a>2.3.3.分层聚类算法（Hierarchical Clustering）</h5><ul>\n<li>单连锁聚类（Single-linkage Clustering）</li>\n<li>概念聚类（Conceptual Clustering）</li>\n</ul>\n<h5 id=\"2-3-4-聚类分析（Cluster-analysis）\"><a href=\"#2-3-4-聚类分析（Cluster-analysis）\" class=\"headerlink\" title=\"2.3.4.聚类分析（Cluster analysis）\"></a>2.3.4.聚类分析（Cluster analysis）</h5><ul>\n<li>BIRCH 算法</li>\n<li>DBSCAN 算法</li>\n<li>期望最大化（Expectation-maximization，EM）</li>\n<li>模糊聚类（Fuzzy Clustering）</li>\n<li>K-means 算法</li>\n<li>K 均值聚类（K-means Clustering）</li>\n<li>K-medians 聚类</li>\n<li>均值漂移算法（Mean-shift）</li>\n<li>OPTICS 算法</li>\n</ul>\n<h5 id=\"2-3-5-异常检测（Anomaly-detection）\"><a href=\"#2-3-5-异常检测（Anomaly-detection）\" class=\"headerlink\" title=\"2.3.5.异常检测（Anomaly detection）\"></a>2.3.5.异常检测（Anomaly detection）</h5><ul>\n<li>K 最邻近（K-nearest Neighbor，KNN）算法</li>\n<li>局部异常因子算法（Local Outlier Factor，LOF）</li>\n</ul>\n<h4 id=\"2-4-半监督学习：\"><a href=\"#2-4-半监督学习：\" class=\"headerlink\" title=\"2.4.半监督学习：\"></a>2.4.半监督学习：</h4><ul>\n<li>生成模型（Generative Models）</li>\n<li>低密度分离（Low-density Separation）</li>\n<li>基于图形的方法（Graph-based Methods）</li>\n<li>联合训练（Co-training）</li>\n</ul>\n<h4 id=\"2-5-强化学习类算法\"><a href=\"#2-5-强化学习类算法\" class=\"headerlink\" title=\"2.5.强化学习类算法\"></a>2.5.强化学习类算法</h4><ul>\n<li>Q 学习（Q-learning）</li>\n<li>状态-行动-奖励-状态-行动（State-Action-Reward-State-Action，SARSA）</li>\n<li>DQN（Deep Q Network）</li>\n<li>策略梯度算法（Policy Gradients）</li>\n<li>基于模型强化学习（Model Based RL）</li>\n<li>时序差分学习（Temporal Different Learning）</li>\n</ul>\n<h4 id=\"2-6-深度学习类算法：\"><a href=\"#2-6-深度学习类算法：\" class=\"headerlink\" title=\"2.6.深度学习类算法：\"></a>2.6.深度学习类算法：</h4><ul>\n<li>深度信念网络（Deep Belief Machines）</li>\n<li>深度卷积神经网络（Deep Convolutional Neural Networks）</li>\n<li>深度递归神经网络（Deep Recurrent Neural Network）</li>\n<li>分层时间记忆（Hierarchical Temporal Memory，HTM）</li>\n<li>深度波尔兹曼机（Deep Boltzmann Machine，DBM）</li>\n<li>栈式自动编码器（Stacked Autoencoder）</li>\n<li>生成对抗网络（Generative Adversarial Networks）</li>\n</ul>\n<h3 id=\"3-解决任务算法\"><a href=\"#3-解决任务算法\" class=\"headerlink\" title=\"3.解决任务算法\"></a>3.解决任务算法</h3><p>按照解决任务的不同来分类，粗略可以分为五种：</p>\n<ul>\n<li>二分类算法（Two-class Classification）</li>\n<li>多分类算法（Multi-class Classification）</li>\n<li>回归算法（Regression）</li>\n<li>聚类算法（Clustering）</li>\n<li>异常检测（Anomaly Detection）</li>\n</ul>\n<h4 id=\"3-1-二分类（Two-class-Classification）\"><a href=\"#3-1-二分类（Two-class-Classification）\" class=\"headerlink\" title=\"3.1.二分类（Two-class Classification）\"></a>3.1.二分类（Two-class Classification）</h4><ul>\n<li>（1）二分类支持向量机（Two-class SVM）：适用于数据特征较多、线性模型的场景。</li>\n<li>（2）二分类平均感知器（Two-class Average Perceptron）：适用于训练时间短、线性模型的场景。</li>\n<li>（3）二分类逻辑回归（Two-class Logistic Regression）：适用于训练时间短、线性模型的场景。</li>\n<li>（4）二分类贝叶斯点机（Two-class Bayes Point Machine）：适用于训练时间短、线性模型的场景。（5）二分类决策森林（Two-class Decision Forest）：适用于训练时间短、精准的场景。</li>\n<li>（6）二分类提升决策树（Two-class Boosted Decision Tree）：适用于训练时间短、精准度高、内存占用量大的场景</li>\n<li>（7）二分类决策丛林（Two-class Decision Jungle）：适用于训练时间短、精确度高、内存占用量小的场景。</li>\n<li>（8）二分类局部深度支持向量机（Two-class Locally Deep SVM）：适用于数据特征较多的场景。</li>\n<li>（9）二分类神经网络（Two-class Neural Network）：适用于精准度高、训练时间较长的场景。</li>\n</ul>\n<h4 id=\"3-2-多分类（Multi-class-Classification）\"><a href=\"#3-2-多分类（Multi-class-Classification）\" class=\"headerlink\" title=\"3.2.多分类（Multi-class Classification）\"></a>3.2.多分类（Multi-class Classification）</h4><p>多分类问题通常适用三种解决方案：<br>第一种，从数据集和适用方法入手，利用二分类器解决多分类问题；<br>第二种，直接使用具备多分类能力的多分类器；<br>第三种，将二分类器改进成为多分类器今儿解决多分类问题。<br>常用的算法：<br>（1）多分类逻辑回归（Multiclass Logistic Regression）：适用训练时间短、线性模型的场景。<br>（2）多分类神经网络（Multiclass Neural Network）：适用于精准度高、训练时间较长的场景。<br>（3）多分类决策森林（Multiclass Decision Forest）：适用于精准度高，训练时间短的场景。<br>（4）多分类决策丛林（Multiclass Decision Jungle）：适用于精准度高，内存占用较小的场景。<br>（5）“一对多”多分类（One-vs-all Multiclass）：取决于二分类器效果。</p>\n<h4 id=\"3-3-回归\"><a href=\"#3-3-回归\" class=\"headerlink\" title=\"3.3.回归\"></a>3.3.回归</h4><p>回归问题通常被用来预测具体的数值而非分类。除了返回的结果不同，其他方法与分类问题类似。<br>我们将定量输出，或者连续变量预测称为回归；将定性输出，或者离散变量预测称为分类。<br>常见的算法有：</p>\n<ul>\n<li>（1）排序回归（Ordinal Regression）：适用于对数据进行分类排序的场景。</li>\n<li>（2）泊松回归（Poission Regression）：适用于预测事件次数的场景。</li>\n<li>（3）快速森林分位数回归（Fast Forest Quantile Regression）：适用于预测分布的场景。</li>\n<li>（4）线性回归（Linear Regression）：适用于训练时间短、线性模型的场景。</li>\n<li>（5）贝叶斯线性回归（Bayesian Linear Regression）：适用于线性模型，训练数据量较少的场景。</li>\n<li>（6）神经网络回归（Neural Network Regression）：适用于精准度高、训练时间较长的场景。</li>\n<li>（7）决策森林回归（Decision Forest Regression）：适用于精准度高、训练时间短的场景。</li>\n<li>（8）提升决策树回归（Boosted Decision Tree Regression）：适用于精确度高、训练时间短、内存占用较大的场景。</li>\n</ul>\n<h4 id=\"3-4-聚类\"><a href=\"#3-4-聚类\" class=\"headerlink\" title=\"3.4.聚类\"></a>3.4.聚类</h4><p>聚类的目标是发现数据的潜在规律和结构。聚类通常被用做描述和衡量不同数据源间的相似性，并把数据源分类到不同的簇中。<br>（1）层次聚类（Hierarchical Clustering）：适用于训练时间短、大数据量的场景。<br>（2）K-means 算法：适用于精准度高、训练时间短的场景。<br>（3）模糊聚类 FCM 算法（Fuzzy C-means，FCM）：适用于精确度高、训练时间短的场景。<br>（4）SOM 神经网络（Self-organizing Feature Map，SOM）：适用于运行时间较长的场景。</p>\n<h4 id=\"3-5-异常检测\"><a href=\"#3-5-异常检测\" class=\"headerlink\" title=\"3.5.异常检测\"></a>3.5.异常检测</h4><p>异常检测是指对数据中存在的不正常或非典型的分体进行检测和标志，有时也称为偏差检测。<br>异常检测看起来和监督学习问题非常相似，都是分类问题。都是对样本的标签进行预测和判断，但是实际上两者的区别非常大，因为异常检测中的正样本（异常点）非常小。常用的算法有：<br>（1）一分类支持向量机（One-class SVM）：适用于数据特征较多的场景。<br>（2）基于 PCA 的异常检测（PCA-based Anomaly Detection）：适用于训练时间短的场景。</p>\n<h3 id=\"4-迁移学习类算法\"><a href=\"#4-迁移学习类算法\" class=\"headerlink\" title=\"4.迁移学习类算法\"></a>4.迁移学习类算法</h3><ul>\n<li>归纳式迁移学习（Inductive Transfer Learning）</li>\n<li>直推式迁移学习（Transductive Transfer Learning）</li>\n<li>无监督式迁移学习（Unsupervised Transfer Learning）</li>\n<li>传递式迁移学习（Transitive Transfer Learning）</li>\n</ul>\n<p>算法的适用场景，需要考虑的因素有：</p>\n<ul>\n<li>（1）数据量的大小、数据质量和数据本身的特点</li>\n<li>（2）机器学习要解决的具体业务场景中问题的本质是什么？</li>\n<li>（3）可以接受的计算时间是什么？</li>\n<li>（4）算法精度要求有多高？</li>\n</ul>\n<h3 id=\"5-应用场景\"><a href=\"#5-应用场景\" class=\"headerlink\" title=\"5.应用场景\"></a>5.应用场景</h3><p>有了算法，有了被训练的数据（经过预处理过的数据），那么多次训练（考验计算能力的时候到了）后，经过模型评估和算法人员调参后，会获得训练模型。当新的数据输入后，那么我们的训练模型就会给出结果。业务要求的最基础的功能就算实现了。</p>\n<p>互联网产品自动化运维是趋势，因为互联网需要快速响应的特性，决定了我们对问题要快速响应、快速修复。人工智能产品也不例外。AI + 自动化运维是如何工作的呢？</p>\n"},{"title":"分布式算法-raft","_content":"\nraft算法介绍\n\n### Raft 算法\n\n#### 一、更加直观的 Raft 算法\n\nRaft 适用于一个管理日志一致性的协议，相比于 Paxos 协议 Raft 更易于理解和去实现它。\n为了提高理解性，Raft 将一致性算法分为了几个部分，包括领导选取（leader selection）、日志复制（log replication）、安全（safety），并且使用了更强的一致性来减少了必须需要考虑的状态。\n\n#### 1.解决什么问题\n\n分布式存储系统通常通过维护多个副本来提高系统的 availability，带来的代价就是分布式存储系统的核心问题之一：维护多个副本的一致性。\n\nRaft 协议基于复制状态机（replicated state machine），即一组 server 从相同的初始状态起，按相同的顺序执行相同的命令，最终会达到一直的状态，一组 server 记录相同的操作日志，并以相同的顺序应用到状态机。\n\n![replicated state machine](https://img.alicdn.com/tfs/TB1fmKeiWmWBuNjy1XaXXXCbXXa-879-306.jpg 'replicated state machine')\n\nRaft 有一个明确的场景，就是管理复制日志的一致性。\n\n如图，每台机器保存一份日志，日志来自于客户端的请求，包含一系列的命令，状态机会按顺序执行这些命令。\n一致性算法管理来自客户端状态命令的复制日志，保证状态机处理的日志中的命令的顺序都是一致的，因此会得到相同的执行结果。\n\n![state machine](https://img.alicdn.com/tfs/TB1PTN7i25TBuNjSspmXXaDRVXa-605-319.jpg 'state machine')\n\n#### 2.Raft 概览\n\n先看一段动画演示，[Understandable Distributed Consensus](http://thesecretlivesofdata.com/raft/) 。\n\n相比 Paxos，Raft 算法理解起来直观的很。\n\nRaft 算法将 Server 划分为 3 种状态，或者也可以称作角色：\n\n- Leader\n\n负责 Client 交互和 log 复制，同一时刻系统中最多存在 1 个。\n\n- Follower\n\n被动响应请求 RPC，从不主动发起请求 RPC。\n\n- Candidate\n\n一种临时的角色，只存在于 leader 的选举阶段，某个节点想要变成 leader，那么就发起投票请求，同时自己变成 candidate。如果选举成功，则变为 candidate，否则退回为 follower\n\n状态或者说角色的流转如下：\n\n![state](https://img.alicdn.com/tfs/TB1UEuni.R1BeNjy0FmXXb0wVXa-1152-480.png 'state')\n\n在 Raft 中，问题分解为：领导选取、日志复制、安全和成员变化。\n\n复制状态机通过复制日志来实现：\n\n- 日志：每台机器保存一份日志，日志来自于客户端的请求，包含一系列的命令\n- 状态机：状态机会按顺序执行这些命令\n- 一致性模型：分布式环境下，保证多机的日志是一致的，这样回放到状态机中的状态是一致的\n\n\n## 二、Raft 算法流程\n\nRaft 中使用心跳机制来出发 leader 选举。当服务器启动的时候，服务器成为 follower。只要 follower 从 leader 或者 candidate 收到有效的 RPCs 就会保持 follower 状态。如果 follower 在一段时间内（该段时间被称为 election timeout）没有收到消息，则它会假设当前没有可用的 leader，然后开启选举新 leader 的流程。\n\n### 1.Term\n\nTerm 的概念类比中国历史上的朝代更替，Raft 算法将时间划分成为任意不同长度的任期（term）。\n\n任期用连续的数字进行表示。每一个任期的开始都是一次选举（election），一个或多个候选人会试图成为领导人。如果一个候选人赢得了选举，它就会在该任期的剩余时间担任领导人。在某些情况下，选票会被瓜分，有可能没有选出领导人，那么，将会开始另一个任期，并且立刻开始下一次选举。Raft 算法保证在给定的一个任期最多只有一个领导人。\n\n### 2.RPC\n\nRaft 算法中服务器节点之间通信使用远程过程调用（RPCs），并且基本的一致性算法只需要两种类型的 RPCs，为了在服务器之间传输快照增加了第三种 RPC。\n\nRPC 有三种：\n\n- RequestVote RPC：候选人在选举期间发起\n- AppendEntries RPC：领导人发起的一种心跳机制，复制日志也在该命令中完成\n- InstallSnapshot RPC: 领导者使用该 RPC 来发送快照给太落后的追随者\n\n### 3.选举流程\n\n（1）follower 增加当前的 term，转变为 candidate。\n（2）candidate 投票给自己，并发送 RequestVote RPC 给集群中的其他服务器。\n（3）收到 RequestVote 的服务器，在同一 term 中只会按照先到先得投票给至多一个 candidate。且只会投票给 log 至少和自身一样新的 candidate。\n\n![](https://images2018.cnblogs.com/blog/524341/201804/524341-20180416200723272-896605592.png)\n\n![](https://images2018.cnblogs.com/blog/524341/201804/524341-20180416200738632-44217418.png)\n\ncandidate 节点保持（2）的状态，直到下面三种情况中的一种发生。\n\n- 该节点赢得选举。即收到大多数的节点的投票。则其转变为 leader 状态。\n- 另一个服务器成为了 leader。即收到了 leader 的合法心跳包（term 值等于或大于当前自身 term 值）。则其转变为 follower 状态。\n- 一段时间后依然没有胜者。该种情况下会开启新一轮的选举。\n\nRaft 中使用随机选举超时时间来解决当票数相同无法确定 leader 的问题。\n\n### 4.日志复制\n\n日志复制（Log Replication）主要作用是用于保证节点的一致性，这阶段所做的操作也是为了保证一致性与高可用性。\n\n当 Leader 选举出来后便开始负责客户端的请求，所有事务（更新操作）请求都必须先经过 Leader 处理，日志复制（Log Replication）就是为了保证执行相同的操作序列所做的工作。\n\n在 Raft 中当接收到客户端的日志（事务请求）后先把该日志追加到本地的 Log 中，然后通过 heartbeat 把该 Entry 同步给其他 Follower，Follower 接收到日志后记录日志然后向 Leader 发送 ACK，当 Leader 收到大多数（n/2+1）Follower 的 ACK 信息后将该日志设置为已提交并追加到本地磁盘中，通知客户端并在下个 heartbeat 中 Leader 将通知所有的 Follower 将该日志存储在自己的本地磁盘中。\n\n## 三、Raft 和 Paxos 的工程应用\n\nRaft 算法的论文相比 Paxos 直观很多，更容易在工程上实现。\n\n可以看到 Raft 算法的实现已经非常多了，[https://raft.github.io//#implementations](https://raft.github.io/#implementations)\n\n### 1.Raft 的应用\n\n这里用 ETCD 来关注 Raft 的应用，ETCD 目标是构建一个高可用的分布式键值（key-value）数据库，基于 Go 语言实现。\nEtcd 主要用途是共享配置和服务发现，实现一致性使用了 Raft 算法。\n更多 Etcd 的应用可以查看文档：[https://coreos.com/etcd/docs/latest/](https://coreos.com/etcd/docs/latest/)\n\n### 2.Zookeeper 中的 Paxos\n\nZookeeper 使用了一种修改后的 Paxos 协议。\n\n在 Zookeeper 中，始终分为两种场景:\n\n- Leader activation\n\n在这个场景里，系统中缺乏 Leader(primary)，通过一个类似 paxos 协议的过程完成 Leader 选举。\n\n- Active messaging\n  在 这个场景里，Leader 接收客户端发送的更新操作，以一种类似两阶段提交的过程在各个 follower (secondary)节点上进行更新操作。\n\n在 Leader activation 场景中完成 leader 选举及数据同步后，系统转入 Active messaging 场景，在 active messaging 中 leader 异常后，系统转入 Leader activation 场景。\n\n无论在那种场景，Zookeeper 依赖于一个全局版本号:zxid。zxid 由(epoch, count)两部分组成， 高位的 epoch 部分是选举编号，每次提议进行新的 leader 选举时 epoch 都会增加，低位的 count 部分 是 leader 为每个更新操作决定的序号。可以认为，一个 leader 对应一个唯一的 epoch，每个 leader 任期内产生的更新操作对应一个唯一的有序的 count，从而从全局的视野，一个 zxid 代表了一个更新操作的全局序号(版本号)。\n\nZookeeper 通过 zxid 将两个场景阶段较好的结合起来，且能保证全局的强一致性。由于同一时刻只有一个 zookeeper 节点能获得超过半数的 follower，所以同一时刻最多只存在唯一的 leader;每个 leader 利用 FIFO 以 zxid 顺序更新各个 follower，只有成功完成前一个更新操作的才会进行下一个更新操作，在同一个 leader 任期内，数据在全局满足 quorum 约束的强一致，即读超过半数的节点 一定可以读到最新已提交的数据;每个成功的更新操作都至少被超过半数的节点确认，使得新选举 的 leader 一定可以包括最新的已成功提交的数据。\n\n### 3.如何解决 split brain 问题\n\n分布式协议一个著名问题就是 split brain 问题。\n\n简单说，就是比如当你的 cluster 里面有两个结点，它们都知道在这个 cluster 里需要选举出一个 master。那么当它们两之间的通信完全没有问题的时候，就会达成共识，选出其中一个作为 master。但是如果它们之间的通信出了问题，那么两个结点都会觉得现在没有 master，所以每个都把自己选举成 master。于是 cluster 里面就会有两个 master。\n\n区块链的分叉其实类似分布式系统的 split brain。\n\n一般来说，Zookeeper 会默认设置：\n\n- zookeeper cluster 的节点数目必须是奇数。\n- zookeeper 集群中必须超过半数节点(Majority)可用，整个集群才能对外可用。\n\nMajority 就是一种 Qunroms 的方式来支持 Leader 选举，可以防止 split brain 出现。奇数个节点可以在相同容错能力的情况下节省资源。\n\n## 四、从 CAP 的角度理解几种不同的算法\n\n### 1.两阶段提交协议\n\n两阶段提交系统具有完全的 C，很糟糕的 A，很糟糕的 P。\n首先，两阶段提交协议保证了副本间是完全一致的，这也是协议的设计目的。再者，协议在一个节点出现异常时，就无法更新数据，其服务可用性较低。最后，一旦协调者与参与者之间网络分化，无法提供服务。\n\n### 2.Paxos 和 Raft 算法\n\nPaxos 协议和 Raft 算法都是强一致性协议。Paxos 只有两种情况下服务不可用:一是超过半数的 Proposer 异常，二是出现活锁。前者可以通过增加 Proposer 的个数来 降低由于 Proposer 异常影响服务的概率，后者本身发生的概率就极低。最后，只要能与超过半数的 Proposer 通信就可以完成协议流程，协议本身具有较好的容忍网络分区的能力。\n\n参考\n[Raft 一致性算法](https://blog.csdn.net/cszhouwei/article/details/38374603)\n[Raft 一致性算法论文译文](http://www.infoq.com/cn/articles/raft-paper)\n","source":"_posts/algorithm/分布式算法/分布式raft算法.md","raw":"---\ntitle: 分布式算法-raft\n---\n\nraft算法介绍\n\n### Raft 算法\n\n#### 一、更加直观的 Raft 算法\n\nRaft 适用于一个管理日志一致性的协议，相比于 Paxos 协议 Raft 更易于理解和去实现它。\n为了提高理解性，Raft 将一致性算法分为了几个部分，包括领导选取（leader selection）、日志复制（log replication）、安全（safety），并且使用了更强的一致性来减少了必须需要考虑的状态。\n\n#### 1.解决什么问题\n\n分布式存储系统通常通过维护多个副本来提高系统的 availability，带来的代价就是分布式存储系统的核心问题之一：维护多个副本的一致性。\n\nRaft 协议基于复制状态机（replicated state machine），即一组 server 从相同的初始状态起，按相同的顺序执行相同的命令，最终会达到一直的状态，一组 server 记录相同的操作日志，并以相同的顺序应用到状态机。\n\n![replicated state machine](https://img.alicdn.com/tfs/TB1fmKeiWmWBuNjy1XaXXXCbXXa-879-306.jpg 'replicated state machine')\n\nRaft 有一个明确的场景，就是管理复制日志的一致性。\n\n如图，每台机器保存一份日志，日志来自于客户端的请求，包含一系列的命令，状态机会按顺序执行这些命令。\n一致性算法管理来自客户端状态命令的复制日志，保证状态机处理的日志中的命令的顺序都是一致的，因此会得到相同的执行结果。\n\n![state machine](https://img.alicdn.com/tfs/TB1PTN7i25TBuNjSspmXXaDRVXa-605-319.jpg 'state machine')\n\n#### 2.Raft 概览\n\n先看一段动画演示，[Understandable Distributed Consensus](http://thesecretlivesofdata.com/raft/) 。\n\n相比 Paxos，Raft 算法理解起来直观的很。\n\nRaft 算法将 Server 划分为 3 种状态，或者也可以称作角色：\n\n- Leader\n\n负责 Client 交互和 log 复制，同一时刻系统中最多存在 1 个。\n\n- Follower\n\n被动响应请求 RPC，从不主动发起请求 RPC。\n\n- Candidate\n\n一种临时的角色，只存在于 leader 的选举阶段，某个节点想要变成 leader，那么就发起投票请求，同时自己变成 candidate。如果选举成功，则变为 candidate，否则退回为 follower\n\n状态或者说角色的流转如下：\n\n![state](https://img.alicdn.com/tfs/TB1UEuni.R1BeNjy0FmXXb0wVXa-1152-480.png 'state')\n\n在 Raft 中，问题分解为：领导选取、日志复制、安全和成员变化。\n\n复制状态机通过复制日志来实现：\n\n- 日志：每台机器保存一份日志，日志来自于客户端的请求，包含一系列的命令\n- 状态机：状态机会按顺序执行这些命令\n- 一致性模型：分布式环境下，保证多机的日志是一致的，这样回放到状态机中的状态是一致的\n\n\n## 二、Raft 算法流程\n\nRaft 中使用心跳机制来出发 leader 选举。当服务器启动的时候，服务器成为 follower。只要 follower 从 leader 或者 candidate 收到有效的 RPCs 就会保持 follower 状态。如果 follower 在一段时间内（该段时间被称为 election timeout）没有收到消息，则它会假设当前没有可用的 leader，然后开启选举新 leader 的流程。\n\n### 1.Term\n\nTerm 的概念类比中国历史上的朝代更替，Raft 算法将时间划分成为任意不同长度的任期（term）。\n\n任期用连续的数字进行表示。每一个任期的开始都是一次选举（election），一个或多个候选人会试图成为领导人。如果一个候选人赢得了选举，它就会在该任期的剩余时间担任领导人。在某些情况下，选票会被瓜分，有可能没有选出领导人，那么，将会开始另一个任期，并且立刻开始下一次选举。Raft 算法保证在给定的一个任期最多只有一个领导人。\n\n### 2.RPC\n\nRaft 算法中服务器节点之间通信使用远程过程调用（RPCs），并且基本的一致性算法只需要两种类型的 RPCs，为了在服务器之间传输快照增加了第三种 RPC。\n\nRPC 有三种：\n\n- RequestVote RPC：候选人在选举期间发起\n- AppendEntries RPC：领导人发起的一种心跳机制，复制日志也在该命令中完成\n- InstallSnapshot RPC: 领导者使用该 RPC 来发送快照给太落后的追随者\n\n### 3.选举流程\n\n（1）follower 增加当前的 term，转变为 candidate。\n（2）candidate 投票给自己，并发送 RequestVote RPC 给集群中的其他服务器。\n（3）收到 RequestVote 的服务器，在同一 term 中只会按照先到先得投票给至多一个 candidate。且只会投票给 log 至少和自身一样新的 candidate。\n\n![](https://images2018.cnblogs.com/blog/524341/201804/524341-20180416200723272-896605592.png)\n\n![](https://images2018.cnblogs.com/blog/524341/201804/524341-20180416200738632-44217418.png)\n\ncandidate 节点保持（2）的状态，直到下面三种情况中的一种发生。\n\n- 该节点赢得选举。即收到大多数的节点的投票。则其转变为 leader 状态。\n- 另一个服务器成为了 leader。即收到了 leader 的合法心跳包（term 值等于或大于当前自身 term 值）。则其转变为 follower 状态。\n- 一段时间后依然没有胜者。该种情况下会开启新一轮的选举。\n\nRaft 中使用随机选举超时时间来解决当票数相同无法确定 leader 的问题。\n\n### 4.日志复制\n\n日志复制（Log Replication）主要作用是用于保证节点的一致性，这阶段所做的操作也是为了保证一致性与高可用性。\n\n当 Leader 选举出来后便开始负责客户端的请求，所有事务（更新操作）请求都必须先经过 Leader 处理，日志复制（Log Replication）就是为了保证执行相同的操作序列所做的工作。\n\n在 Raft 中当接收到客户端的日志（事务请求）后先把该日志追加到本地的 Log 中，然后通过 heartbeat 把该 Entry 同步给其他 Follower，Follower 接收到日志后记录日志然后向 Leader 发送 ACK，当 Leader 收到大多数（n/2+1）Follower 的 ACK 信息后将该日志设置为已提交并追加到本地磁盘中，通知客户端并在下个 heartbeat 中 Leader 将通知所有的 Follower 将该日志存储在自己的本地磁盘中。\n\n## 三、Raft 和 Paxos 的工程应用\n\nRaft 算法的论文相比 Paxos 直观很多，更容易在工程上实现。\n\n可以看到 Raft 算法的实现已经非常多了，[https://raft.github.io//#implementations](https://raft.github.io/#implementations)\n\n### 1.Raft 的应用\n\n这里用 ETCD 来关注 Raft 的应用，ETCD 目标是构建一个高可用的分布式键值（key-value）数据库，基于 Go 语言实现。\nEtcd 主要用途是共享配置和服务发现，实现一致性使用了 Raft 算法。\n更多 Etcd 的应用可以查看文档：[https://coreos.com/etcd/docs/latest/](https://coreos.com/etcd/docs/latest/)\n\n### 2.Zookeeper 中的 Paxos\n\nZookeeper 使用了一种修改后的 Paxos 协议。\n\n在 Zookeeper 中，始终分为两种场景:\n\n- Leader activation\n\n在这个场景里，系统中缺乏 Leader(primary)，通过一个类似 paxos 协议的过程完成 Leader 选举。\n\n- Active messaging\n  在 这个场景里，Leader 接收客户端发送的更新操作，以一种类似两阶段提交的过程在各个 follower (secondary)节点上进行更新操作。\n\n在 Leader activation 场景中完成 leader 选举及数据同步后，系统转入 Active messaging 场景，在 active messaging 中 leader 异常后，系统转入 Leader activation 场景。\n\n无论在那种场景，Zookeeper 依赖于一个全局版本号:zxid。zxid 由(epoch, count)两部分组成， 高位的 epoch 部分是选举编号，每次提议进行新的 leader 选举时 epoch 都会增加，低位的 count 部分 是 leader 为每个更新操作决定的序号。可以认为，一个 leader 对应一个唯一的 epoch，每个 leader 任期内产生的更新操作对应一个唯一的有序的 count，从而从全局的视野，一个 zxid 代表了一个更新操作的全局序号(版本号)。\n\nZookeeper 通过 zxid 将两个场景阶段较好的结合起来，且能保证全局的强一致性。由于同一时刻只有一个 zookeeper 节点能获得超过半数的 follower，所以同一时刻最多只存在唯一的 leader;每个 leader 利用 FIFO 以 zxid 顺序更新各个 follower，只有成功完成前一个更新操作的才会进行下一个更新操作，在同一个 leader 任期内，数据在全局满足 quorum 约束的强一致，即读超过半数的节点 一定可以读到最新已提交的数据;每个成功的更新操作都至少被超过半数的节点确认，使得新选举 的 leader 一定可以包括最新的已成功提交的数据。\n\n### 3.如何解决 split brain 问题\n\n分布式协议一个著名问题就是 split brain 问题。\n\n简单说，就是比如当你的 cluster 里面有两个结点，它们都知道在这个 cluster 里需要选举出一个 master。那么当它们两之间的通信完全没有问题的时候，就会达成共识，选出其中一个作为 master。但是如果它们之间的通信出了问题，那么两个结点都会觉得现在没有 master，所以每个都把自己选举成 master。于是 cluster 里面就会有两个 master。\n\n区块链的分叉其实类似分布式系统的 split brain。\n\n一般来说，Zookeeper 会默认设置：\n\n- zookeeper cluster 的节点数目必须是奇数。\n- zookeeper 集群中必须超过半数节点(Majority)可用，整个集群才能对外可用。\n\nMajority 就是一种 Qunroms 的方式来支持 Leader 选举，可以防止 split brain 出现。奇数个节点可以在相同容错能力的情况下节省资源。\n\n## 四、从 CAP 的角度理解几种不同的算法\n\n### 1.两阶段提交协议\n\n两阶段提交系统具有完全的 C，很糟糕的 A，很糟糕的 P。\n首先，两阶段提交协议保证了副本间是完全一致的，这也是协议的设计目的。再者，协议在一个节点出现异常时，就无法更新数据，其服务可用性较低。最后，一旦协调者与参与者之间网络分化，无法提供服务。\n\n### 2.Paxos 和 Raft 算法\n\nPaxos 协议和 Raft 算法都是强一致性协议。Paxos 只有两种情况下服务不可用:一是超过半数的 Proposer 异常，二是出现活锁。前者可以通过增加 Proposer 的个数来 降低由于 Proposer 异常影响服务的概率，后者本身发生的概率就极低。最后，只要能与超过半数的 Proposer 通信就可以完成协议流程，协议本身具有较好的容忍网络分区的能力。\n\n参考\n[Raft 一致性算法](https://blog.csdn.net/cszhouwei/article/details/38374603)\n[Raft 一致性算法论文译文](http://www.infoq.com/cn/articles/raft-paper)\n","slug":"algorithm/分布式算法/分布式raft算法","published":1,"date":"2021-09-14T14:54:21.746Z","updated":"2021-09-14T14:54:21.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyht000bu6uk35pfcujo","content":"<p>raft算法介绍</p>\n<h3 id=\"Raft-算法\"><a href=\"#Raft-算法\" class=\"headerlink\" title=\"Raft 算法\"></a>Raft 算法</h3><h4 id=\"一、更加直观的-Raft-算法\"><a href=\"#一、更加直观的-Raft-算法\" class=\"headerlink\" title=\"一、更加直观的 Raft 算法\"></a>一、更加直观的 Raft 算法</h4><p>Raft 适用于一个管理日志一致性的协议，相比于 Paxos 协议 Raft 更易于理解和去实现它。<br>为了提高理解性，Raft 将一致性算法分为了几个部分，包括领导选取（leader selection）、日志复制（log replication）、安全（safety），并且使用了更强的一致性来减少了必须需要考虑的状态。</p>\n<h4 id=\"1-解决什么问题\"><a href=\"#1-解决什么问题\" class=\"headerlink\" title=\"1.解决什么问题\"></a>1.解决什么问题</h4><p>分布式存储系统通常通过维护多个副本来提高系统的 availability，带来的代价就是分布式存储系统的核心问题之一：维护多个副本的一致性。</p>\n<p>Raft 协议基于复制状态机（replicated state machine），即一组 server 从相同的初始状态起，按相同的顺序执行相同的命令，最终会达到一直的状态，一组 server 记录相同的操作日志，并以相同的顺序应用到状态机。</p>\n<p><img src=\"https://img.alicdn.com/tfs/TB1fmKeiWmWBuNjy1XaXXXCbXXa-879-306.jpg\" alt=\"replicated state machine\" title=\"replicated state machine\"></p>\n<p>Raft 有一个明确的场景，就是管理复制日志的一致性。</p>\n<p>如图，每台机器保存一份日志，日志来自于客户端的请求，包含一系列的命令，状态机会按顺序执行这些命令。<br>一致性算法管理来自客户端状态命令的复制日志，保证状态机处理的日志中的命令的顺序都是一致的，因此会得到相同的执行结果。</p>\n<p><img src=\"https://img.alicdn.com/tfs/TB1PTN7i25TBuNjSspmXXaDRVXa-605-319.jpg\" alt=\"state machine\" title=\"state machine\"></p>\n<h4 id=\"2-Raft-概览\"><a href=\"#2-Raft-概览\" class=\"headerlink\" title=\"2.Raft 概览\"></a>2.Raft 概览</h4><p>先看一段动画演示，<a href=\"http://thesecretlivesofdata.com/raft/\">Understandable Distributed Consensus</a> 。</p>\n<p>相比 Paxos，Raft 算法理解起来直观的很。</p>\n<p>Raft 算法将 Server 划分为 3 种状态，或者也可以称作角色：</p>\n<ul>\n<li>Leader</li>\n</ul>\n<p>负责 Client 交互和 log 复制，同一时刻系统中最多存在 1 个。</p>\n<ul>\n<li>Follower</li>\n</ul>\n<p>被动响应请求 RPC，从不主动发起请求 RPC。</p>\n<ul>\n<li>Candidate</li>\n</ul>\n<p>一种临时的角色，只存在于 leader 的选举阶段，某个节点想要变成 leader，那么就发起投票请求，同时自己变成 candidate。如果选举成功，则变为 candidate，否则退回为 follower</p>\n<p>状态或者说角色的流转如下：</p>\n<p><img src=\"https://img.alicdn.com/tfs/TB1UEuni.R1BeNjy0FmXXb0wVXa-1152-480.png\" alt=\"state\" title=\"state\"></p>\n<p>在 Raft 中，问题分解为：领导选取、日志复制、安全和成员变化。</p>\n<p>复制状态机通过复制日志来实现：</p>\n<ul>\n<li>日志：每台机器保存一份日志，日志来自于客户端的请求，包含一系列的命令</li>\n<li>状态机：状态机会按顺序执行这些命令</li>\n<li>一致性模型：分布式环境下，保证多机的日志是一致的，这样回放到状态机中的状态是一致的</li>\n</ul>\n<h2 id=\"二、Raft-算法流程\"><a href=\"#二、Raft-算法流程\" class=\"headerlink\" title=\"二、Raft 算法流程\"></a>二、Raft 算法流程</h2><p>Raft 中使用心跳机制来出发 leader 选举。当服务器启动的时候，服务器成为 follower。只要 follower 从 leader 或者 candidate 收到有效的 RPCs 就会保持 follower 状态。如果 follower 在一段时间内（该段时间被称为 election timeout）没有收到消息，则它会假设当前没有可用的 leader，然后开启选举新 leader 的流程。</p>\n<h3 id=\"1-Term\"><a href=\"#1-Term\" class=\"headerlink\" title=\"1.Term\"></a>1.Term</h3><p>Term 的概念类比中国历史上的朝代更替，Raft 算法将时间划分成为任意不同长度的任期（term）。</p>\n<p>任期用连续的数字进行表示。每一个任期的开始都是一次选举（election），一个或多个候选人会试图成为领导人。如果一个候选人赢得了选举，它就会在该任期的剩余时间担任领导人。在某些情况下，选票会被瓜分，有可能没有选出领导人，那么，将会开始另一个任期，并且立刻开始下一次选举。Raft 算法保证在给定的一个任期最多只有一个领导人。</p>\n<h3 id=\"2-RPC\"><a href=\"#2-RPC\" class=\"headerlink\" title=\"2.RPC\"></a>2.RPC</h3><p>Raft 算法中服务器节点之间通信使用远程过程调用（RPCs），并且基本的一致性算法只需要两种类型的 RPCs，为了在服务器之间传输快照增加了第三种 RPC。</p>\n<p>RPC 有三种：</p>\n<ul>\n<li>RequestVote RPC：候选人在选举期间发起</li>\n<li>AppendEntries RPC：领导人发起的一种心跳机制，复制日志也在该命令中完成</li>\n<li>InstallSnapshot RPC: 领导者使用该 RPC 来发送快照给太落后的追随者</li>\n</ul>\n<h3 id=\"3-选举流程\"><a href=\"#3-选举流程\" class=\"headerlink\" title=\"3.选举流程\"></a>3.选举流程</h3><p>（1）follower 增加当前的 term，转变为 candidate。<br>（2）candidate 投票给自己，并发送 RequestVote RPC 给集群中的其他服务器。<br>（3）收到 RequestVote 的服务器，在同一 term 中只会按照先到先得投票给至多一个 candidate。且只会投票给 log 至少和自身一样新的 candidate。</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/524341/201804/524341-20180416200723272-896605592.png\"></p>\n<p><img src=\"https://images2018.cnblogs.com/blog/524341/201804/524341-20180416200738632-44217418.png\"></p>\n<p>candidate 节点保持（2）的状态，直到下面三种情况中的一种发生。</p>\n<ul>\n<li>该节点赢得选举。即收到大多数的节点的投票。则其转变为 leader 状态。</li>\n<li>另一个服务器成为了 leader。即收到了 leader 的合法心跳包（term 值等于或大于当前自身 term 值）。则其转变为 follower 状态。</li>\n<li>一段时间后依然没有胜者。该种情况下会开启新一轮的选举。</li>\n</ul>\n<p>Raft 中使用随机选举超时时间来解决当票数相同无法确定 leader 的问题。</p>\n<h3 id=\"4-日志复制\"><a href=\"#4-日志复制\" class=\"headerlink\" title=\"4.日志复制\"></a>4.日志复制</h3><p>日志复制（Log Replication）主要作用是用于保证节点的一致性，这阶段所做的操作也是为了保证一致性与高可用性。</p>\n<p>当 Leader 选举出来后便开始负责客户端的请求，所有事务（更新操作）请求都必须先经过 Leader 处理，日志复制（Log Replication）就是为了保证执行相同的操作序列所做的工作。</p>\n<p>在 Raft 中当接收到客户端的日志（事务请求）后先把该日志追加到本地的 Log 中，然后通过 heartbeat 把该 Entry 同步给其他 Follower，Follower 接收到日志后记录日志然后向 Leader 发送 ACK，当 Leader 收到大多数（n/2+1）Follower 的 ACK 信息后将该日志设置为已提交并追加到本地磁盘中，通知客户端并在下个 heartbeat 中 Leader 将通知所有的 Follower 将该日志存储在自己的本地磁盘中。</p>\n<h2 id=\"三、Raft-和-Paxos-的工程应用\"><a href=\"#三、Raft-和-Paxos-的工程应用\" class=\"headerlink\" title=\"三、Raft 和 Paxos 的工程应用\"></a>三、Raft 和 Paxos 的工程应用</h2><p>Raft 算法的论文相比 Paxos 直观很多，更容易在工程上实现。</p>\n<p>可以看到 Raft 算法的实现已经非常多了，<a href=\"https://raft.github.io/#implementations\">https://raft.github.io//#implementations</a></p>\n<h3 id=\"1-Raft-的应用\"><a href=\"#1-Raft-的应用\" class=\"headerlink\" title=\"1.Raft 的应用\"></a>1.Raft 的应用</h3><p>这里用 ETCD 来关注 Raft 的应用，ETCD 目标是构建一个高可用的分布式键值（key-value）数据库，基于 Go 语言实现。<br>Etcd 主要用途是共享配置和服务发现，实现一致性使用了 Raft 算法。<br>更多 Etcd 的应用可以查看文档：<a href=\"https://coreos.com/etcd/docs/latest/\">https://coreos.com/etcd/docs/latest/</a></p>\n<h3 id=\"2-Zookeeper-中的-Paxos\"><a href=\"#2-Zookeeper-中的-Paxos\" class=\"headerlink\" title=\"2.Zookeeper 中的 Paxos\"></a>2.Zookeeper 中的 Paxos</h3><p>Zookeeper 使用了一种修改后的 Paxos 协议。</p>\n<p>在 Zookeeper 中，始终分为两种场景:</p>\n<ul>\n<li>Leader activation</li>\n</ul>\n<p>在这个场景里，系统中缺乏 Leader(primary)，通过一个类似 paxos 协议的过程完成 Leader 选举。</p>\n<ul>\n<li>Active messaging<br>在 这个场景里，Leader 接收客户端发送的更新操作，以一种类似两阶段提交的过程在各个 follower (secondary)节点上进行更新操作。</li>\n</ul>\n<p>在 Leader activation 场景中完成 leader 选举及数据同步后，系统转入 Active messaging 场景，在 active messaging 中 leader 异常后，系统转入 Leader activation 场景。</p>\n<p>无论在那种场景，Zookeeper 依赖于一个全局版本号:zxid。zxid 由(epoch, count)两部分组成， 高位的 epoch 部分是选举编号，每次提议进行新的 leader 选举时 epoch 都会增加，低位的 count 部分 是 leader 为每个更新操作决定的序号。可以认为，一个 leader 对应一个唯一的 epoch，每个 leader 任期内产生的更新操作对应一个唯一的有序的 count，从而从全局的视野，一个 zxid 代表了一个更新操作的全局序号(版本号)。</p>\n<p>Zookeeper 通过 zxid 将两个场景阶段较好的结合起来，且能保证全局的强一致性。由于同一时刻只有一个 zookeeper 节点能获得超过半数的 follower，所以同一时刻最多只存在唯一的 leader;每个 leader 利用 FIFO 以 zxid 顺序更新各个 follower，只有成功完成前一个更新操作的才会进行下一个更新操作，在同一个 leader 任期内，数据在全局满足 quorum 约束的强一致，即读超过半数的节点 一定可以读到最新已提交的数据;每个成功的更新操作都至少被超过半数的节点确认，使得新选举 的 leader 一定可以包括最新的已成功提交的数据。</p>\n<h3 id=\"3-如何解决-split-brain-问题\"><a href=\"#3-如何解决-split-brain-问题\" class=\"headerlink\" title=\"3.如何解决 split brain 问题\"></a>3.如何解决 split brain 问题</h3><p>分布式协议一个著名问题就是 split brain 问题。</p>\n<p>简单说，就是比如当你的 cluster 里面有两个结点，它们都知道在这个 cluster 里需要选举出一个 master。那么当它们两之间的通信完全没有问题的时候，就会达成共识，选出其中一个作为 master。但是如果它们之间的通信出了问题，那么两个结点都会觉得现在没有 master，所以每个都把自己选举成 master。于是 cluster 里面就会有两个 master。</p>\n<p>区块链的分叉其实类似分布式系统的 split brain。</p>\n<p>一般来说，Zookeeper 会默认设置：</p>\n<ul>\n<li>zookeeper cluster 的节点数目必须是奇数。</li>\n<li>zookeeper 集群中必须超过半数节点(Majority)可用，整个集群才能对外可用。</li>\n</ul>\n<p>Majority 就是一种 Qunroms 的方式来支持 Leader 选举，可以防止 split brain 出现。奇数个节点可以在相同容错能力的情况下节省资源。</p>\n<h2 id=\"四、从-CAP-的角度理解几种不同的算法\"><a href=\"#四、从-CAP-的角度理解几种不同的算法\" class=\"headerlink\" title=\"四、从 CAP 的角度理解几种不同的算法\"></a>四、从 CAP 的角度理解几种不同的算法</h2><h3 id=\"1-两阶段提交协议\"><a href=\"#1-两阶段提交协议\" class=\"headerlink\" title=\"1.两阶段提交协议\"></a>1.两阶段提交协议</h3><p>两阶段提交系统具有完全的 C，很糟糕的 A，很糟糕的 P。<br>首先，两阶段提交协议保证了副本间是完全一致的，这也是协议的设计目的。再者，协议在一个节点出现异常时，就无法更新数据，其服务可用性较低。最后，一旦协调者与参与者之间网络分化，无法提供服务。</p>\n<h3 id=\"2-Paxos-和-Raft-算法\"><a href=\"#2-Paxos-和-Raft-算法\" class=\"headerlink\" title=\"2.Paxos 和 Raft 算法\"></a>2.Paxos 和 Raft 算法</h3><p>Paxos 协议和 Raft 算法都是强一致性协议。Paxos 只有两种情况下服务不可用:一是超过半数的 Proposer 异常，二是出现活锁。前者可以通过增加 Proposer 的个数来 降低由于 Proposer 异常影响服务的概率，后者本身发生的概率就极低。最后，只要能与超过半数的 Proposer 通信就可以完成协议流程，协议本身具有较好的容忍网络分区的能力。</p>\n<p>参考<br><a href=\"https://blog.csdn.net/cszhouwei/article/details/38374603\">Raft 一致性算法</a><br><a href=\"http://www.infoq.com/cn/articles/raft-paper\">Raft 一致性算法论文译文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>raft算法介绍</p>\n<h3 id=\"Raft-算法\"><a href=\"#Raft-算法\" class=\"headerlink\" title=\"Raft 算法\"></a>Raft 算法</h3><h4 id=\"一、更加直观的-Raft-算法\"><a href=\"#一、更加直观的-Raft-算法\" class=\"headerlink\" title=\"一、更加直观的 Raft 算法\"></a>一、更加直观的 Raft 算法</h4><p>Raft 适用于一个管理日志一致性的协议，相比于 Paxos 协议 Raft 更易于理解和去实现它。<br>为了提高理解性，Raft 将一致性算法分为了几个部分，包括领导选取（leader selection）、日志复制（log replication）、安全（safety），并且使用了更强的一致性来减少了必须需要考虑的状态。</p>\n<h4 id=\"1-解决什么问题\"><a href=\"#1-解决什么问题\" class=\"headerlink\" title=\"1.解决什么问题\"></a>1.解决什么问题</h4><p>分布式存储系统通常通过维护多个副本来提高系统的 availability，带来的代价就是分布式存储系统的核心问题之一：维护多个副本的一致性。</p>\n<p>Raft 协议基于复制状态机（replicated state machine），即一组 server 从相同的初始状态起，按相同的顺序执行相同的命令，最终会达到一直的状态，一组 server 记录相同的操作日志，并以相同的顺序应用到状态机。</p>\n<p><img src=\"https://img.alicdn.com/tfs/TB1fmKeiWmWBuNjy1XaXXXCbXXa-879-306.jpg\" alt=\"replicated state machine\" title=\"replicated state machine\"></p>\n<p>Raft 有一个明确的场景，就是管理复制日志的一致性。</p>\n<p>如图，每台机器保存一份日志，日志来自于客户端的请求，包含一系列的命令，状态机会按顺序执行这些命令。<br>一致性算法管理来自客户端状态命令的复制日志，保证状态机处理的日志中的命令的顺序都是一致的，因此会得到相同的执行结果。</p>\n<p><img src=\"https://img.alicdn.com/tfs/TB1PTN7i25TBuNjSspmXXaDRVXa-605-319.jpg\" alt=\"state machine\" title=\"state machine\"></p>\n<h4 id=\"2-Raft-概览\"><a href=\"#2-Raft-概览\" class=\"headerlink\" title=\"2.Raft 概览\"></a>2.Raft 概览</h4><p>先看一段动画演示，<a href=\"http://thesecretlivesofdata.com/raft/\">Understandable Distributed Consensus</a> 。</p>\n<p>相比 Paxos，Raft 算法理解起来直观的很。</p>\n<p>Raft 算法将 Server 划分为 3 种状态，或者也可以称作角色：</p>\n<ul>\n<li>Leader</li>\n</ul>\n<p>负责 Client 交互和 log 复制，同一时刻系统中最多存在 1 个。</p>\n<ul>\n<li>Follower</li>\n</ul>\n<p>被动响应请求 RPC，从不主动发起请求 RPC。</p>\n<ul>\n<li>Candidate</li>\n</ul>\n<p>一种临时的角色，只存在于 leader 的选举阶段，某个节点想要变成 leader，那么就发起投票请求，同时自己变成 candidate。如果选举成功，则变为 candidate，否则退回为 follower</p>\n<p>状态或者说角色的流转如下：</p>\n<p><img src=\"https://img.alicdn.com/tfs/TB1UEuni.R1BeNjy0FmXXb0wVXa-1152-480.png\" alt=\"state\" title=\"state\"></p>\n<p>在 Raft 中，问题分解为：领导选取、日志复制、安全和成员变化。</p>\n<p>复制状态机通过复制日志来实现：</p>\n<ul>\n<li>日志：每台机器保存一份日志，日志来自于客户端的请求，包含一系列的命令</li>\n<li>状态机：状态机会按顺序执行这些命令</li>\n<li>一致性模型：分布式环境下，保证多机的日志是一致的，这样回放到状态机中的状态是一致的</li>\n</ul>\n<h2 id=\"二、Raft-算法流程\"><a href=\"#二、Raft-算法流程\" class=\"headerlink\" title=\"二、Raft 算法流程\"></a>二、Raft 算法流程</h2><p>Raft 中使用心跳机制来出发 leader 选举。当服务器启动的时候，服务器成为 follower。只要 follower 从 leader 或者 candidate 收到有效的 RPCs 就会保持 follower 状态。如果 follower 在一段时间内（该段时间被称为 election timeout）没有收到消息，则它会假设当前没有可用的 leader，然后开启选举新 leader 的流程。</p>\n<h3 id=\"1-Term\"><a href=\"#1-Term\" class=\"headerlink\" title=\"1.Term\"></a>1.Term</h3><p>Term 的概念类比中国历史上的朝代更替，Raft 算法将时间划分成为任意不同长度的任期（term）。</p>\n<p>任期用连续的数字进行表示。每一个任期的开始都是一次选举（election），一个或多个候选人会试图成为领导人。如果一个候选人赢得了选举，它就会在该任期的剩余时间担任领导人。在某些情况下，选票会被瓜分，有可能没有选出领导人，那么，将会开始另一个任期，并且立刻开始下一次选举。Raft 算法保证在给定的一个任期最多只有一个领导人。</p>\n<h3 id=\"2-RPC\"><a href=\"#2-RPC\" class=\"headerlink\" title=\"2.RPC\"></a>2.RPC</h3><p>Raft 算法中服务器节点之间通信使用远程过程调用（RPCs），并且基本的一致性算法只需要两种类型的 RPCs，为了在服务器之间传输快照增加了第三种 RPC。</p>\n<p>RPC 有三种：</p>\n<ul>\n<li>RequestVote RPC：候选人在选举期间发起</li>\n<li>AppendEntries RPC：领导人发起的一种心跳机制，复制日志也在该命令中完成</li>\n<li>InstallSnapshot RPC: 领导者使用该 RPC 来发送快照给太落后的追随者</li>\n</ul>\n<h3 id=\"3-选举流程\"><a href=\"#3-选举流程\" class=\"headerlink\" title=\"3.选举流程\"></a>3.选举流程</h3><p>（1）follower 增加当前的 term，转变为 candidate。<br>（2）candidate 投票给自己，并发送 RequestVote RPC 给集群中的其他服务器。<br>（3）收到 RequestVote 的服务器，在同一 term 中只会按照先到先得投票给至多一个 candidate。且只会投票给 log 至少和自身一样新的 candidate。</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/524341/201804/524341-20180416200723272-896605592.png\"></p>\n<p><img src=\"https://images2018.cnblogs.com/blog/524341/201804/524341-20180416200738632-44217418.png\"></p>\n<p>candidate 节点保持（2）的状态，直到下面三种情况中的一种发生。</p>\n<ul>\n<li>该节点赢得选举。即收到大多数的节点的投票。则其转变为 leader 状态。</li>\n<li>另一个服务器成为了 leader。即收到了 leader 的合法心跳包（term 值等于或大于当前自身 term 值）。则其转变为 follower 状态。</li>\n<li>一段时间后依然没有胜者。该种情况下会开启新一轮的选举。</li>\n</ul>\n<p>Raft 中使用随机选举超时时间来解决当票数相同无法确定 leader 的问题。</p>\n<h3 id=\"4-日志复制\"><a href=\"#4-日志复制\" class=\"headerlink\" title=\"4.日志复制\"></a>4.日志复制</h3><p>日志复制（Log Replication）主要作用是用于保证节点的一致性，这阶段所做的操作也是为了保证一致性与高可用性。</p>\n<p>当 Leader 选举出来后便开始负责客户端的请求，所有事务（更新操作）请求都必须先经过 Leader 处理，日志复制（Log Replication）就是为了保证执行相同的操作序列所做的工作。</p>\n<p>在 Raft 中当接收到客户端的日志（事务请求）后先把该日志追加到本地的 Log 中，然后通过 heartbeat 把该 Entry 同步给其他 Follower，Follower 接收到日志后记录日志然后向 Leader 发送 ACK，当 Leader 收到大多数（n/2+1）Follower 的 ACK 信息后将该日志设置为已提交并追加到本地磁盘中，通知客户端并在下个 heartbeat 中 Leader 将通知所有的 Follower 将该日志存储在自己的本地磁盘中。</p>\n<h2 id=\"三、Raft-和-Paxos-的工程应用\"><a href=\"#三、Raft-和-Paxos-的工程应用\" class=\"headerlink\" title=\"三、Raft 和 Paxos 的工程应用\"></a>三、Raft 和 Paxos 的工程应用</h2><p>Raft 算法的论文相比 Paxos 直观很多，更容易在工程上实现。</p>\n<p>可以看到 Raft 算法的实现已经非常多了，<a href=\"https://raft.github.io/#implementations\">https://raft.github.io//#implementations</a></p>\n<h3 id=\"1-Raft-的应用\"><a href=\"#1-Raft-的应用\" class=\"headerlink\" title=\"1.Raft 的应用\"></a>1.Raft 的应用</h3><p>这里用 ETCD 来关注 Raft 的应用，ETCD 目标是构建一个高可用的分布式键值（key-value）数据库，基于 Go 语言实现。<br>Etcd 主要用途是共享配置和服务发现，实现一致性使用了 Raft 算法。<br>更多 Etcd 的应用可以查看文档：<a href=\"https://coreos.com/etcd/docs/latest/\">https://coreos.com/etcd/docs/latest/</a></p>\n<h3 id=\"2-Zookeeper-中的-Paxos\"><a href=\"#2-Zookeeper-中的-Paxos\" class=\"headerlink\" title=\"2.Zookeeper 中的 Paxos\"></a>2.Zookeeper 中的 Paxos</h3><p>Zookeeper 使用了一种修改后的 Paxos 协议。</p>\n<p>在 Zookeeper 中，始终分为两种场景:</p>\n<ul>\n<li>Leader activation</li>\n</ul>\n<p>在这个场景里，系统中缺乏 Leader(primary)，通过一个类似 paxos 协议的过程完成 Leader 选举。</p>\n<ul>\n<li>Active messaging<br>在 这个场景里，Leader 接收客户端发送的更新操作，以一种类似两阶段提交的过程在各个 follower (secondary)节点上进行更新操作。</li>\n</ul>\n<p>在 Leader activation 场景中完成 leader 选举及数据同步后，系统转入 Active messaging 场景，在 active messaging 中 leader 异常后，系统转入 Leader activation 场景。</p>\n<p>无论在那种场景，Zookeeper 依赖于一个全局版本号:zxid。zxid 由(epoch, count)两部分组成， 高位的 epoch 部分是选举编号，每次提议进行新的 leader 选举时 epoch 都会增加，低位的 count 部分 是 leader 为每个更新操作决定的序号。可以认为，一个 leader 对应一个唯一的 epoch，每个 leader 任期内产生的更新操作对应一个唯一的有序的 count，从而从全局的视野，一个 zxid 代表了一个更新操作的全局序号(版本号)。</p>\n<p>Zookeeper 通过 zxid 将两个场景阶段较好的结合起来，且能保证全局的强一致性。由于同一时刻只有一个 zookeeper 节点能获得超过半数的 follower，所以同一时刻最多只存在唯一的 leader;每个 leader 利用 FIFO 以 zxid 顺序更新各个 follower，只有成功完成前一个更新操作的才会进行下一个更新操作，在同一个 leader 任期内，数据在全局满足 quorum 约束的强一致，即读超过半数的节点 一定可以读到最新已提交的数据;每个成功的更新操作都至少被超过半数的节点确认，使得新选举 的 leader 一定可以包括最新的已成功提交的数据。</p>\n<h3 id=\"3-如何解决-split-brain-问题\"><a href=\"#3-如何解决-split-brain-问题\" class=\"headerlink\" title=\"3.如何解决 split brain 问题\"></a>3.如何解决 split brain 问题</h3><p>分布式协议一个著名问题就是 split brain 问题。</p>\n<p>简单说，就是比如当你的 cluster 里面有两个结点，它们都知道在这个 cluster 里需要选举出一个 master。那么当它们两之间的通信完全没有问题的时候，就会达成共识，选出其中一个作为 master。但是如果它们之间的通信出了问题，那么两个结点都会觉得现在没有 master，所以每个都把自己选举成 master。于是 cluster 里面就会有两个 master。</p>\n<p>区块链的分叉其实类似分布式系统的 split brain。</p>\n<p>一般来说，Zookeeper 会默认设置：</p>\n<ul>\n<li>zookeeper cluster 的节点数目必须是奇数。</li>\n<li>zookeeper 集群中必须超过半数节点(Majority)可用，整个集群才能对外可用。</li>\n</ul>\n<p>Majority 就是一种 Qunroms 的方式来支持 Leader 选举，可以防止 split brain 出现。奇数个节点可以在相同容错能力的情况下节省资源。</p>\n<h2 id=\"四、从-CAP-的角度理解几种不同的算法\"><a href=\"#四、从-CAP-的角度理解几种不同的算法\" class=\"headerlink\" title=\"四、从 CAP 的角度理解几种不同的算法\"></a>四、从 CAP 的角度理解几种不同的算法</h2><h3 id=\"1-两阶段提交协议\"><a href=\"#1-两阶段提交协议\" class=\"headerlink\" title=\"1.两阶段提交协议\"></a>1.两阶段提交协议</h3><p>两阶段提交系统具有完全的 C，很糟糕的 A，很糟糕的 P。<br>首先，两阶段提交协议保证了副本间是完全一致的，这也是协议的设计目的。再者，协议在一个节点出现异常时，就无法更新数据，其服务可用性较低。最后，一旦协调者与参与者之间网络分化，无法提供服务。</p>\n<h3 id=\"2-Paxos-和-Raft-算法\"><a href=\"#2-Paxos-和-Raft-算法\" class=\"headerlink\" title=\"2.Paxos 和 Raft 算法\"></a>2.Paxos 和 Raft 算法</h3><p>Paxos 协议和 Raft 算法都是强一致性协议。Paxos 只有两种情况下服务不可用:一是超过半数的 Proposer 异常，二是出现活锁。前者可以通过增加 Proposer 的个数来 降低由于 Proposer 异常影响服务的概率，后者本身发生的概率就极低。最后，只要能与超过半数的 Proposer 通信就可以完成协议流程，协议本身具有较好的容忍网络分区的能力。</p>\n<p>参考<br><a href=\"https://blog.csdn.net/cszhouwei/article/details/38374603\">Raft 一致性算法</a><br><a href=\"http://www.infoq.com/cn/articles/raft-paper\">Raft 一致性算法论文译文</a></p>\n"},{"title":"选择排序","_content":"\n### 选择排序\n\n```java\n/**\n *\n 算法步骤:\n 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。\n 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n 重复第二步，直到所有元素均排序完毕。\n */\npublic class SelectionSort implements Sort {\n    public static void main(String[] args) {\n        int[] numbers = {34, 12, 23, 56, 56, 56, 78};\n        SelectionSort selectionSort = new SelectionSort();\n        selectionSort.sort(numbers);\n        selectionSort.print(numbers);\n    }\n    @Override\n    public void sort(int[] numbers) {\n\n        // 总共要经过 N-1 轮比较\n        for (int i = 0; i < numbers.length - 1; i++) {\n            int min = i;\n\n            // 每轮需要比较的次数 N-i\n            for (int j = i + 1; j < numbers.length; j++) {\n                if (numbers[j] < numbers[min]) {\n                    // 记录目前能找到的最小值元素的下标\n                    min = j;\n                }\n            }\n\n            // 将找到的最小值和i位置所在的值进行交换\n            if (i != min) {\n                int tmp = numbers[i];\n                numbers[i] = numbers[min];\n                numbers[min] = tmp;\n            }\n\n        }\n    }\n}\n```\n","source":"_posts/algorithm/sort/0.选择排序.md","raw":"---\ntitle: 选择排序\ncategories:\n- algorithm\ntag:\n- sort\n---\n\n### 选择排序\n\n```java\n/**\n *\n 算法步骤:\n 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。\n 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n 重复第二步，直到所有元素均排序完毕。\n */\npublic class SelectionSort implements Sort {\n    public static void main(String[] args) {\n        int[] numbers = {34, 12, 23, 56, 56, 56, 78};\n        SelectionSort selectionSort = new SelectionSort();\n        selectionSort.sort(numbers);\n        selectionSort.print(numbers);\n    }\n    @Override\n    public void sort(int[] numbers) {\n\n        // 总共要经过 N-1 轮比较\n        for (int i = 0; i < numbers.length - 1; i++) {\n            int min = i;\n\n            // 每轮需要比较的次数 N-i\n            for (int j = i + 1; j < numbers.length; j++) {\n                if (numbers[j] < numbers[min]) {\n                    // 记录目前能找到的最小值元素的下标\n                    min = j;\n                }\n            }\n\n            // 将找到的最小值和i位置所在的值进行交换\n            if (i != min) {\n                int tmp = numbers[i];\n                numbers[i] = numbers[min];\n                numbers[min] = tmp;\n            }\n\n        }\n    }\n}\n```\n","slug":"algorithm/sort/0.选择排序","published":1,"date":"2021-09-14T15:07:45.073Z","updated":"2021-09-14T15:07:45.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyhu000du6ukg8c08xun","content":"<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> 算法步骤:</span></span><br><span class=\"line\"><span class=\"comment\"> 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</span></span><br><span class=\"line\"><span class=\"comment\"> 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</span></span><br><span class=\"line\"><span class=\"comment\"> 重复第二步，直到所有元素均排序完毕。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelectionSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123;<span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        SelectionSort selectionSort = <span class=\"keyword\">new</span> SelectionSort();</span><br><span class=\"line\">        selectionSort.sort(numbers);</span><br><span class=\"line\">        selectionSort.print(numbers);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] numbers)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 总共要经过 N-1 轮比较</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> min = i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 每轮需要比较的次数 N-i</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; numbers.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (numbers[j] &lt; numbers[min]) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 记录目前能找到的最小值元素的下标</span></span><br><span class=\"line\">                    min = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将找到的最小值和i位置所在的值进行交换</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != min) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = numbers[i];</span><br><span class=\"line\">                numbers[i] = numbers[min];</span><br><span class=\"line\">                numbers[min] = tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> 算法步骤:</span></span><br><span class=\"line\"><span class=\"comment\"> 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</span></span><br><span class=\"line\"><span class=\"comment\"> 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</span></span><br><span class=\"line\"><span class=\"comment\"> 重复第二步，直到所有元素均排序完毕。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelectionSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123;<span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        SelectionSort selectionSort = <span class=\"keyword\">new</span> SelectionSort();</span><br><span class=\"line\">        selectionSort.sort(numbers);</span><br><span class=\"line\">        selectionSort.print(numbers);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] numbers)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 总共要经过 N-1 轮比较</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> min = i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 每轮需要比较的次数 N-i</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; numbers.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (numbers[j] &lt; numbers[min]) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 记录目前能找到的最小值元素的下标</span></span><br><span class=\"line\">                    min = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将找到的最小值和i位置所在的值进行交换</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != min) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = numbers[i];</span><br><span class=\"line\">                numbers[i] = numbers[min];</span><br><span class=\"line\">                numbers[min] = tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"插入排序","_content":"\n### 插入排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\n/**\n * 插入排序\n * 通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应的位置并插入。\n * 插入排序非常类似于整扑克牌。在开始摸牌时，左手是空的，牌面朝下放在桌上。接着， 一次从\n * 桌上摸起一张牌，并将它插入到左手一把牌中的正确位置上。 为了找到这张牌的正确位置，要将\n * 它与手中已有的牌从右到左地进行比较。无论什么时候，左手中的牌都是排好序的。\n * 如果输入数组已经是排好序的话，插入排序出现最佳情况，其运行时间是输入规模的一个线性函\n * 数。如果输入数组是逆序排列的，将出现最坏情况。平均情况与最坏情况一样，其时间代价是(n2)。\n */\npublic class InsertSort implements Sort {\n    public static void main(String[] args) {\n        InsertSort bubbleSort = new InsertSort();\n        System.out.println(\"InsertSort\");\n        bubbleSort.test();\n\n    }\n\n    @Override\n    public void sort(int[] arr) {\n        for (int i = 1; i < arr.length; i++) {\n            print(arr);\n            //插入的数\n            int insertVal = arr[i];\n            //被插入的位置(准备和前一个数比较)\n            int index = i - 1;\n            //如果插入的数比被插入的数小\n            while (index >= 0 && insertVal < arr[index]) {\n                //将把 arr[index] 向后移动\n                arr[index + 1] = arr[index];\n                //让 index 向前移动\n                index--;\n            }\n            //把插入的数放入合适位置\n            arr[index + 1] = insertVal;\n            print(arr);\n        }\n    }\n\n}\n```\n","source":"_posts/algorithm/sort/2.插入排序.md","raw":"---\ntitle: 插入排序\ncategories:\n- algorithm\ntag:\n- sort\n---\n\n### 插入排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\n/**\n * 插入排序\n * 通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应的位置并插入。\n * 插入排序非常类似于整扑克牌。在开始摸牌时，左手是空的，牌面朝下放在桌上。接着， 一次从\n * 桌上摸起一张牌，并将它插入到左手一把牌中的正确位置上。 为了找到这张牌的正确位置，要将\n * 它与手中已有的牌从右到左地进行比较。无论什么时候，左手中的牌都是排好序的。\n * 如果输入数组已经是排好序的话，插入排序出现最佳情况，其运行时间是输入规模的一个线性函\n * 数。如果输入数组是逆序排列的，将出现最坏情况。平均情况与最坏情况一样，其时间代价是(n2)。\n */\npublic class InsertSort implements Sort {\n    public static void main(String[] args) {\n        InsertSort bubbleSort = new InsertSort();\n        System.out.println(\"InsertSort\");\n        bubbleSort.test();\n\n    }\n\n    @Override\n    public void sort(int[] arr) {\n        for (int i = 1; i < arr.length; i++) {\n            print(arr);\n            //插入的数\n            int insertVal = arr[i];\n            //被插入的位置(准备和前一个数比较)\n            int index = i - 1;\n            //如果插入的数比被插入的数小\n            while (index >= 0 && insertVal < arr[index]) {\n                //将把 arr[index] 向后移动\n                arr[index + 1] = arr[index];\n                //让 index 向前移动\n                index--;\n            }\n            //把插入的数放入合适位置\n            arr[index + 1] = insertVal;\n            print(arr);\n        }\n    }\n\n}\n```\n","slug":"algorithm/sort/2.插入排序","published":1,"date":"2021-09-14T15:07:45.049Z","updated":"2021-09-14T15:07:45.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyhv000eu6uk25vt1sub","content":"<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 插入排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应的位置并插入。</span></span><br><span class=\"line\"><span class=\"comment\"> * 插入排序非常类似于整扑克牌。在开始摸牌时，左手是空的，牌面朝下放在桌上。接着， 一次从</span></span><br><span class=\"line\"><span class=\"comment\"> * 桌上摸起一张牌，并将它插入到左手一把牌中的正确位置上。 为了找到这张牌的正确位置，要将</span></span><br><span class=\"line\"><span class=\"comment\"> * 它与手中已有的牌从右到左地进行比较。无论什么时候，左手中的牌都是排好序的。</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果输入数组已经是排好序的话，插入排序出现最佳情况，其运行时间是输入规模的一个线性函</span></span><br><span class=\"line\"><span class=\"comment\"> * 数。如果输入数组是逆序排列的，将出现最坏情况。平均情况与最坏情况一样，其时间代价是(n2)。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsertSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        InsertSort bubbleSort = <span class=\"keyword\">new</span> InsertSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;InsertSort&quot;</span>);</span><br><span class=\"line\">        bubbleSort.test();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            print(arr);</span><br><span class=\"line\">            <span class=\"comment\">//插入的数</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> insertVal = arr[i];</span><br><span class=\"line\">            <span class=\"comment\">//被插入的位置(准备和前一个数比较)</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">//如果插入的数比被插入的数小</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (index &gt;= <span class=\"number\">0</span> &amp;&amp; insertVal &lt; arr[index]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//将把 arr[index] 向后移动</span></span><br><span class=\"line\">                arr[index + <span class=\"number\">1</span>] = arr[index];</span><br><span class=\"line\">                <span class=\"comment\">//让 index 向前移动</span></span><br><span class=\"line\">                index--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//把插入的数放入合适位置</span></span><br><span class=\"line\">            arr[index + <span class=\"number\">1</span>] = insertVal;</span><br><span class=\"line\">            print(arr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 插入排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应的位置并插入。</span></span><br><span class=\"line\"><span class=\"comment\"> * 插入排序非常类似于整扑克牌。在开始摸牌时，左手是空的，牌面朝下放在桌上。接着， 一次从</span></span><br><span class=\"line\"><span class=\"comment\"> * 桌上摸起一张牌，并将它插入到左手一把牌中的正确位置上。 为了找到这张牌的正确位置，要将</span></span><br><span class=\"line\"><span class=\"comment\"> * 它与手中已有的牌从右到左地进行比较。无论什么时候，左手中的牌都是排好序的。</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果输入数组已经是排好序的话，插入排序出现最佳情况，其运行时间是输入规模的一个线性函</span></span><br><span class=\"line\"><span class=\"comment\"> * 数。如果输入数组是逆序排列的，将出现最坏情况。平均情况与最坏情况一样，其时间代价是(n2)。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsertSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        InsertSort bubbleSort = <span class=\"keyword\">new</span> InsertSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;InsertSort&quot;</span>);</span><br><span class=\"line\">        bubbleSort.test();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            print(arr);</span><br><span class=\"line\">            <span class=\"comment\">//插入的数</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> insertVal = arr[i];</span><br><span class=\"line\">            <span class=\"comment\">//被插入的位置(准备和前一个数比较)</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">//如果插入的数比被插入的数小</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (index &gt;= <span class=\"number\">0</span> &amp;&amp; insertVal &lt; arr[index]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//将把 arr[index] 向后移动</span></span><br><span class=\"line\">                arr[index + <span class=\"number\">1</span>] = arr[index];</span><br><span class=\"line\">                <span class=\"comment\">//让 index 向前移动</span></span><br><span class=\"line\">                index--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//把插入的数放入合适位置</span></span><br><span class=\"line\">            arr[index + <span class=\"number\">1</span>] = insertVal;</span><br><span class=\"line\">            print(arr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"冒泡排序","_content":"\n### 冒泡排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\npackage com.coral.learning.alg.udemo.algorithms.sort;\n\n/**\n * 冒泡排序\n *\n * 它重复地走访过要排序的元素列，一次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。\n * 走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素已经排序完成。\n * 这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。\n */\npublic class BubbleSort implements Sort {\n    public static void main(String[] args) {\n        int[] numbers = {34, 12, 23, 56, 56, 56, 78};\n        BubbleSort bubbleSort = new BubbleSort();\n        System.out.println(\"BubbleSort\");\n        bubbleSort.sort(numbers);\n\n    }\n\n\n    @Override\n    public void sort(int[] arr) {\n\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = 0; j < arr.length - i - 1; j++) {//-1为了防止溢出\n                print(arr);\n                if (arr[j] > arr[j + 1]) {\n                    swap(arr, j, j + 1);\n                }\n            }\n        }\n    }\n\n}\n```\n","source":"_posts/algorithm/sort/1.冒泡排序.md","raw":"---\ntitle: 冒泡排序\ncategories:\n- algorithm\ntag:\n- sort\n---\n\n### 冒泡排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\npackage com.coral.learning.alg.udemo.algorithms.sort;\n\n/**\n * 冒泡排序\n *\n * 它重复地走访过要排序的元素列，一次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。\n * 走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素已经排序完成。\n * 这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。\n */\npublic class BubbleSort implements Sort {\n    public static void main(String[] args) {\n        int[] numbers = {34, 12, 23, 56, 56, 56, 78};\n        BubbleSort bubbleSort = new BubbleSort();\n        System.out.println(\"BubbleSort\");\n        bubbleSort.sort(numbers);\n\n    }\n\n\n    @Override\n    public void sort(int[] arr) {\n\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = 0; j < arr.length - i - 1; j++) {//-1为了防止溢出\n                print(arr);\n                if (arr[j] > arr[j + 1]) {\n                    swap(arr, j, j + 1);\n                }\n            }\n        }\n    }\n\n}\n```\n","slug":"algorithm/sort/1.冒泡排序","published":1,"date":"2021-09-14T15:07:45.036Z","updated":"2021-09-14T15:07:45.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyhx000hu6uka8zh1hq2","content":"<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.coral.learning.alg.udemo.algorithms.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 冒泡排序</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 它重复地走访过要排序的元素列，一次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。</span></span><br><span class=\"line\"><span class=\"comment\"> * 走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素已经排序完成。</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BubbleSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123;<span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        BubbleSort bubbleSort = <span class=\"keyword\">new</span> BubbleSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BubbleSort&quot;</span>);</span><br><span class=\"line\">        bubbleSort.sort(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length - i - <span class=\"number\">1</span>; j++) &#123;<span class=\"comment\">//-1为了防止溢出</span></span><br><span class=\"line\">                print(arr);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    swap(arr, j, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.coral.learning.alg.udemo.algorithms.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 冒泡排序</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 它重复地走访过要排序的元素列，一次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。</span></span><br><span class=\"line\"><span class=\"comment\"> * 走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素已经排序完成。</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BubbleSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123;<span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        BubbleSort bubbleSort = <span class=\"keyword\">new</span> BubbleSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BubbleSort&quot;</span>);</span><br><span class=\"line\">        bubbleSort.sort(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length - i - <span class=\"number\">1</span>; j++) &#123;<span class=\"comment\">//-1为了防止溢出</span></span><br><span class=\"line\">                print(arr);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    swap(arr, j, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"快速排序","_content":"\n\n### 快速排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\n/**\n * 快速排序：\n *\n * 快速排序（Quicksort）是对冒泡排序的一种改进。\n * 由C. A. R. Hoare在1962年提出。\n * 它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，\n * 然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。\n * <p>\n * 选择一个关键值作为基准值。比基准值小的都在左边序列（一般是无序的），\n * 比基准值大的都在右边（一般是无序的）。\n * 一般选择序列的第一个元素。\n * 一次循环： 从后往前比较，用基准值和最后一个值比较，如果比基准值小的交换位置，如果没有\n * 继续比较下一个，直到找到第一个比基准值小的值才交换。 找到这个值之后，又从前往后开始比\n * 较，如果有比基准值大的，交换位置，如果没有继续比较下一个，直到找到第一个比基准值大的\n * 值才交换。直到从前往后的比较索引>从后往前比较的索引，结束第一次循环，此时，对于基准值\n * 来说，左右两边就是有序的了。\n * 算法分析：\n * 1.当分区选取的基准元素为待排序元素中的最大或最小值时，为最坏的情况，时间复杂度和直接插入排序的一样，移动次数达到最大值\n * Cmax = 1+2+...+(n-1) = n*(n-1)/2 = O(n2) 此时最好时间复杂为O(n2)\n * 2.当分区选取的基准元素为待排序元素中的\"中值\"，为最好的情况，时间复杂度为O(nlog2n)。\n * 3.快速排序的空间复杂度为O(log2n).\n * 4.当待排序元素类似[6,1,3,7,3]且基准元素为6时，经过分区，形成[1,3,3,6,7],两个3的相对位置发生了改变，所是快速排序是一种不稳定排序。\n */\npublic class QuickSort implements Sort{\n    public static void main(String[] args) {\n        int[] numbers1 = new int[]{1, 10, 6, 3, 4, 4, 5};\n        int[] numbers2 = new int[]{1, 10, 6, 3, 4, 4, 5, 10};\n        int[] numbers3 = new int[]{1, 10, 6, 3, 4, 4, 5};\n\n        QuickSort quickSort = new QuickSort();\n        System.out.println(\"quick sortOne\");\n        quickSort.sortOne(numbers1, 0, numbers1.length - 1);\n        System.out.println(\"quick sortTwo\");\n        quickSort.sortTwo(numbers2, 0, numbers2.length - 1);\n        System.out.println(\"quick sortTree\");\n        quickSort.sortThree(numbers3, 0, numbers3.length - 1);\n    }\n\n    @Override\n    public void sort(int[] numbers) {\n        sortOne(numbers, 0, numbers.length - 1);\n    }\n\n    /**\n     * 快速排序\n     *\n     * @param numbers\n     * @param sign\n     * @param length\n     */\n    public void sortOne(int[] numbers, int sign, int length) {\n        int start = sign; //start为最小值\n        int end = length; //end为最大值\n        int key = numbers[sign];\n        while (start < end) {\n            print(numbers);\n            //比较右侧\n            while (key <= numbers[end] && start < end) {\n                end--;\n            }\n            if (key >= numbers[end]) {\n                swap(numbers, start, end);\n            }\n\n            //比较左侧\n            while (key >= numbers[start] && start < end) {\n                start++;\n            }\n            if (key <= numbers[start]) {\n                swap(numbers, start, end);\n            }\n\n            //进行左侧串比较\n            if (start > sign) {\n                sortOne(numbers, sign, start - 1);\n            }\n\n\n            //进行右侧串比较\n            if (end < length) {\n                sortOne(numbers, start + 1, length);\n            }\n\n        }\n    }\n\n\n    /**\n     * 更高效点的代码\n     *\n     * @param targetArr\n     * @return\n     */\n    void sortTwo(int[] targetArr, int start, int end) {\n        int i = start + 1, j = end;\n        int key = targetArr[start];\n\n        if (start >= end) {\n            return;\n        }\n\n\n        /*从i++和j--两个方向搜索不满足条件的值并交换\n        *\n        *条件为：i++方向小于key，j--方向大于key\n        */\n        while (true) {\n            print(targetArr);\n            while (targetArr[j] > key) {\n                j--;\n            }\n            while (targetArr[i] < key && i < j) {\n                i++;\n            }\n            if (i > j) {\n                break;\n            }\n            swap(targetArr, i, j);\n            if (targetArr[i] == key) {\n                j--;\n            } else {\n                i++;\n            }\n        }\n\n        /*关键数据放到‘中间’*/\n        swap(targetArr, start, j);\n\n        if (start < i - 1) {\n            sortTwo(targetArr, start, i - 1);\n        }\n        if (j + 1 < end) {\n            sortTwo(targetArr, j + 1, end);\n        }\n\n    }\n\n    /**\n     * 方式三：减少交换次数，提高效率\n     *\n     * @param targetArr\n     */\n    void sortThree(int[] targetArr, int start, int end) {\n        int i = start, j = end;\n        int key = targetArr[start];\n\n        while (i < j) {\n            print(targetArr);\n            /*按j--方向遍历目标数组，直到比key小的值为止*/\n            while (j > i && targetArr[j] >= key) {\n                j--;\n            }\n            if (i < j) {\n                /*targetArr[i]已经保存在key中，可将后面的数填入*/\n                targetArr[i] = targetArr[j];\n                i++;\n            }\n            /*按i++方向遍历目标数组，直到比key大的值为止*/\n            while (i < j && targetArr[i] <= key)\n                /*此处一定要小于等于零，假设数组之内有一亿个1，0交替出现的话，而key的值又恰巧是1的话，那么这个小于等于的作用就会使下面的if语句少执行一亿次。*/ {\n                i++;\n            }\n            if (i < j) {\n                /*targetArr[j]已保存在targetArr[i]中，可将前面的值填入*/\n                targetArr[j] = targetArr[i];\n                j--;\n            }\n        }\n        /*此时i==j*/\n        targetArr[i] = key;\n\n\n        /*递归调用，把key前面的完成排序*/\n        if (i > start) {\n            sortThree(targetArr, start, i - 1);\n        }\n\n\n        /*递归调用，把key后面的完成排序*/\n        if (j < end) {\n            sortThree(targetArr, j + 1, end);\n        }\n\n\n    }\n\n\n\n}\n```\n","source":"_posts/algorithm/sort/3-快速排序.md","raw":"---\ntitle: 快速排序\ncategories:\n- algorithm\ntag:\n- sort\n---\n\n\n### 快速排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\n/**\n * 快速排序：\n *\n * 快速排序（Quicksort）是对冒泡排序的一种改进。\n * 由C. A. R. Hoare在1962年提出。\n * 它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，\n * 然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。\n * <p>\n * 选择一个关键值作为基准值。比基准值小的都在左边序列（一般是无序的），\n * 比基准值大的都在右边（一般是无序的）。\n * 一般选择序列的第一个元素。\n * 一次循环： 从后往前比较，用基准值和最后一个值比较，如果比基准值小的交换位置，如果没有\n * 继续比较下一个，直到找到第一个比基准值小的值才交换。 找到这个值之后，又从前往后开始比\n * 较，如果有比基准值大的，交换位置，如果没有继续比较下一个，直到找到第一个比基准值大的\n * 值才交换。直到从前往后的比较索引>从后往前比较的索引，结束第一次循环，此时，对于基准值\n * 来说，左右两边就是有序的了。\n * 算法分析：\n * 1.当分区选取的基准元素为待排序元素中的最大或最小值时，为最坏的情况，时间复杂度和直接插入排序的一样，移动次数达到最大值\n * Cmax = 1+2+...+(n-1) = n*(n-1)/2 = O(n2) 此时最好时间复杂为O(n2)\n * 2.当分区选取的基准元素为待排序元素中的\"中值\"，为最好的情况，时间复杂度为O(nlog2n)。\n * 3.快速排序的空间复杂度为O(log2n).\n * 4.当待排序元素类似[6,1,3,7,3]且基准元素为6时，经过分区，形成[1,3,3,6,7],两个3的相对位置发生了改变，所是快速排序是一种不稳定排序。\n */\npublic class QuickSort implements Sort{\n    public static void main(String[] args) {\n        int[] numbers1 = new int[]{1, 10, 6, 3, 4, 4, 5};\n        int[] numbers2 = new int[]{1, 10, 6, 3, 4, 4, 5, 10};\n        int[] numbers3 = new int[]{1, 10, 6, 3, 4, 4, 5};\n\n        QuickSort quickSort = new QuickSort();\n        System.out.println(\"quick sortOne\");\n        quickSort.sortOne(numbers1, 0, numbers1.length - 1);\n        System.out.println(\"quick sortTwo\");\n        quickSort.sortTwo(numbers2, 0, numbers2.length - 1);\n        System.out.println(\"quick sortTree\");\n        quickSort.sortThree(numbers3, 0, numbers3.length - 1);\n    }\n\n    @Override\n    public void sort(int[] numbers) {\n        sortOne(numbers, 0, numbers.length - 1);\n    }\n\n    /**\n     * 快速排序\n     *\n     * @param numbers\n     * @param sign\n     * @param length\n     */\n    public void sortOne(int[] numbers, int sign, int length) {\n        int start = sign; //start为最小值\n        int end = length; //end为最大值\n        int key = numbers[sign];\n        while (start < end) {\n            print(numbers);\n            //比较右侧\n            while (key <= numbers[end] && start < end) {\n                end--;\n            }\n            if (key >= numbers[end]) {\n                swap(numbers, start, end);\n            }\n\n            //比较左侧\n            while (key >= numbers[start] && start < end) {\n                start++;\n            }\n            if (key <= numbers[start]) {\n                swap(numbers, start, end);\n            }\n\n            //进行左侧串比较\n            if (start > sign) {\n                sortOne(numbers, sign, start - 1);\n            }\n\n\n            //进行右侧串比较\n            if (end < length) {\n                sortOne(numbers, start + 1, length);\n            }\n\n        }\n    }\n\n\n    /**\n     * 更高效点的代码\n     *\n     * @param targetArr\n     * @return\n     */\n    void sortTwo(int[] targetArr, int start, int end) {\n        int i = start + 1, j = end;\n        int key = targetArr[start];\n\n        if (start >= end) {\n            return;\n        }\n\n\n        /*从i++和j--两个方向搜索不满足条件的值并交换\n        *\n        *条件为：i++方向小于key，j--方向大于key\n        */\n        while (true) {\n            print(targetArr);\n            while (targetArr[j] > key) {\n                j--;\n            }\n            while (targetArr[i] < key && i < j) {\n                i++;\n            }\n            if (i > j) {\n                break;\n            }\n            swap(targetArr, i, j);\n            if (targetArr[i] == key) {\n                j--;\n            } else {\n                i++;\n            }\n        }\n\n        /*关键数据放到‘中间’*/\n        swap(targetArr, start, j);\n\n        if (start < i - 1) {\n            sortTwo(targetArr, start, i - 1);\n        }\n        if (j + 1 < end) {\n            sortTwo(targetArr, j + 1, end);\n        }\n\n    }\n\n    /**\n     * 方式三：减少交换次数，提高效率\n     *\n     * @param targetArr\n     */\n    void sortThree(int[] targetArr, int start, int end) {\n        int i = start, j = end;\n        int key = targetArr[start];\n\n        while (i < j) {\n            print(targetArr);\n            /*按j--方向遍历目标数组，直到比key小的值为止*/\n            while (j > i && targetArr[j] >= key) {\n                j--;\n            }\n            if (i < j) {\n                /*targetArr[i]已经保存在key中，可将后面的数填入*/\n                targetArr[i] = targetArr[j];\n                i++;\n            }\n            /*按i++方向遍历目标数组，直到比key大的值为止*/\n            while (i < j && targetArr[i] <= key)\n                /*此处一定要小于等于零，假设数组之内有一亿个1，0交替出现的话，而key的值又恰巧是1的话，那么这个小于等于的作用就会使下面的if语句少执行一亿次。*/ {\n                i++;\n            }\n            if (i < j) {\n                /*targetArr[j]已保存在targetArr[i]中，可将前面的值填入*/\n                targetArr[j] = targetArr[i];\n                j--;\n            }\n        }\n        /*此时i==j*/\n        targetArr[i] = key;\n\n\n        /*递归调用，把key前面的完成排序*/\n        if (i > start) {\n            sortThree(targetArr, start, i - 1);\n        }\n\n\n        /*递归调用，把key后面的完成排序*/\n        if (j < end) {\n            sortThree(targetArr, j + 1, end);\n        }\n\n\n    }\n\n\n\n}\n```\n","slug":"algorithm/sort/3-快速排序","published":1,"date":"2021-09-14T15:07:45.052Z","updated":"2021-09-14T15:07:45.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyhy000iu6ukctbz1xs7","content":"<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 快速排序：</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 快速排序（Quicksort）是对冒泡排序的一种改进。</span></span><br><span class=\"line\"><span class=\"comment\"> * 由C. A. R. Hoare在1962年提出。</span></span><br><span class=\"line\"><span class=\"comment\"> * 它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，</span></span><br><span class=\"line\"><span class=\"comment\"> * 然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 选择一个关键值作为基准值。比基准值小的都在左边序列（一般是无序的），</span></span><br><span class=\"line\"><span class=\"comment\"> * 比基准值大的都在右边（一般是无序的）。</span></span><br><span class=\"line\"><span class=\"comment\"> * 一般选择序列的第一个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * 一次循环： 从后往前比较，用基准值和最后一个值比较，如果比基准值小的交换位置，如果没有</span></span><br><span class=\"line\"><span class=\"comment\"> * 继续比较下一个，直到找到第一个比基准值小的值才交换。 找到这个值之后，又从前往后开始比</span></span><br><span class=\"line\"><span class=\"comment\"> * 较，如果有比基准值大的，交换位置，如果没有继续比较下一个，直到找到第一个比基准值大的</span></span><br><span class=\"line\"><span class=\"comment\"> * 值才交换。直到从前往后的比较索引&gt;从后往前比较的索引，结束第一次循环，此时，对于基准值</span></span><br><span class=\"line\"><span class=\"comment\"> * 来说，左右两边就是有序的了。</span></span><br><span class=\"line\"><span class=\"comment\"> * 算法分析：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.当分区选取的基准元素为待排序元素中的最大或最小值时，为最坏的情况，时间复杂度和直接插入排序的一样，移动次数达到最大值</span></span><br><span class=\"line\"><span class=\"comment\"> * Cmax = 1+2+...+(n-1) = n*(n-1)/2 = O(n2) 此时最好时间复杂为O(n2)</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.当分区选取的基准元素为待排序元素中的&quot;中值&quot;，为最好的情况，时间复杂度为O(nlog2n)。</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.快速排序的空间复杂度为O(log2n).</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.当待排序元素类似[6,1,3,7,3]且基准元素为6时，经过分区，形成[1,3,3,6,7],两个3的相对位置发生了改变，所是快速排序是一种不稳定排序。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers2 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers3 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        QuickSort quickSort = <span class=\"keyword\">new</span> QuickSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;quick sortOne&quot;</span>);</span><br><span class=\"line\">        quickSort.sortOne(numbers1, <span class=\"number\">0</span>, numbers1.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;quick sortTwo&quot;</span>);</span><br><span class=\"line\">        quickSort.sortTwo(numbers2, <span class=\"number\">0</span>, numbers2.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;quick sortTree&quot;</span>);</span><br><span class=\"line\">        quickSort.sortThree(numbers3, <span class=\"number\">0</span>, numbers3.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] numbers)</span> </span>&#123;</span><br><span class=\"line\">        sortOne(numbers, <span class=\"number\">0</span>, numbers.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 快速排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> numbers</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sign</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> length</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortOne</span><span class=\"params\">(<span class=\"keyword\">int</span>[] numbers, <span class=\"keyword\">int</span> sign, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = sign; <span class=\"comment\">//start为最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> end = length; <span class=\"comment\">//end为最大值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> key = numbers[sign];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">            print(numbers);</span><br><span class=\"line\">            <span class=\"comment\">//比较右侧</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (key &lt;= numbers[end] &amp;&amp; start &lt; end) &#123;</span><br><span class=\"line\">                end--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key &gt;= numbers[end]) &#123;</span><br><span class=\"line\">                swap(numbers, start, end);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//比较左侧</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (key &gt;= numbers[start] &amp;&amp; start &lt; end) &#123;</span><br><span class=\"line\">                start++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key &lt;= numbers[start]) &#123;</span><br><span class=\"line\">                swap(numbers, start, end);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//进行左侧串比较</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (start &gt; sign) &#123;</span><br><span class=\"line\">                sortOne(numbers, sign, start - <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//进行右侧串比较</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (end &lt; length) &#123;</span><br><span class=\"line\">                sortOne(numbers, start + <span class=\"number\">1</span>, length);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更高效点的代码</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetArr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sortTwo</span><span class=\"params\">(<span class=\"keyword\">int</span>[] targetArr, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = start + <span class=\"number\">1</span>, j = end;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> key = targetArr[start];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start &gt;= end) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*从i++和j--两个方向搜索不满足条件的值并交换</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        *条件为：i++方向小于key，j--方向大于key</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            print(targetArr);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (targetArr[j] &gt; key) &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (targetArr[i] &lt; key &amp;&amp; i &lt; j) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(targetArr, i, j);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetArr[i] == key) &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*关键数据放到‘中间’*/</span></span><br><span class=\"line\">        swap(targetArr, start, j);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start &lt; i - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            sortTwo(targetArr, start, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt; end) &#123;</span><br><span class=\"line\">            sortTwo(targetArr, j + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 方式三：减少交换次数，提高效率</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetArr</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sortThree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] targetArr, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = start, j = end;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> key = targetArr[start];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">            print(targetArr);</span><br><span class=\"line\">            <span class=\"comment\">/*按j--方向遍历目标数组，直到比key小的值为止*/</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; i &amp;&amp; targetArr[j] &gt;= key) &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/*targetArr[i]已经保存在key中，可将后面的数填入*/</span></span><br><span class=\"line\">                targetArr[i] = targetArr[j];</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/*按i++方向遍历目标数组，直到比key大的值为止*/</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; targetArr[i] &lt;= key)</span><br><span class=\"line\">                <span class=\"comment\">/*此处一定要小于等于零，假设数组之内有一亿个1，0交替出现的话，而key的值又恰巧是1的话，那么这个小于等于的作用就会使下面的if语句少执行一亿次。*/</span> &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/*targetArr[j]已保存在targetArr[i]中，可将前面的值填入*/</span></span><br><span class=\"line\">                targetArr[j] = targetArr[i];</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*此时i==j*/</span></span><br><span class=\"line\">        targetArr[i] = key;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*递归调用，把key前面的完成排序*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; start) &#123;</span><br><span class=\"line\">            sortThree(targetArr, start, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*递归调用，把key后面的完成排序*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j &lt; end) &#123;</span><br><span class=\"line\">            sortThree(targetArr, j + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 快速排序：</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 快速排序（Quicksort）是对冒泡排序的一种改进。</span></span><br><span class=\"line\"><span class=\"comment\"> * 由C. A. R. Hoare在1962年提出。</span></span><br><span class=\"line\"><span class=\"comment\"> * 它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，</span></span><br><span class=\"line\"><span class=\"comment\"> * 然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 选择一个关键值作为基准值。比基准值小的都在左边序列（一般是无序的），</span></span><br><span class=\"line\"><span class=\"comment\"> * 比基准值大的都在右边（一般是无序的）。</span></span><br><span class=\"line\"><span class=\"comment\"> * 一般选择序列的第一个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * 一次循环： 从后往前比较，用基准值和最后一个值比较，如果比基准值小的交换位置，如果没有</span></span><br><span class=\"line\"><span class=\"comment\"> * 继续比较下一个，直到找到第一个比基准值小的值才交换。 找到这个值之后，又从前往后开始比</span></span><br><span class=\"line\"><span class=\"comment\"> * 较，如果有比基准值大的，交换位置，如果没有继续比较下一个，直到找到第一个比基准值大的</span></span><br><span class=\"line\"><span class=\"comment\"> * 值才交换。直到从前往后的比较索引&gt;从后往前比较的索引，结束第一次循环，此时，对于基准值</span></span><br><span class=\"line\"><span class=\"comment\"> * 来说，左右两边就是有序的了。</span></span><br><span class=\"line\"><span class=\"comment\"> * 算法分析：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.当分区选取的基准元素为待排序元素中的最大或最小值时，为最坏的情况，时间复杂度和直接插入排序的一样，移动次数达到最大值</span></span><br><span class=\"line\"><span class=\"comment\"> * Cmax = 1+2+...+(n-1) = n*(n-1)/2 = O(n2) 此时最好时间复杂为O(n2)</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.当分区选取的基准元素为待排序元素中的&quot;中值&quot;，为最好的情况，时间复杂度为O(nlog2n)。</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.快速排序的空间复杂度为O(log2n).</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.当待排序元素类似[6,1,3,7,3]且基准元素为6时，经过分区，形成[1,3,3,6,7],两个3的相对位置发生了改变，所是快速排序是一种不稳定排序。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers2 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers3 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        QuickSort quickSort = <span class=\"keyword\">new</span> QuickSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;quick sortOne&quot;</span>);</span><br><span class=\"line\">        quickSort.sortOne(numbers1, <span class=\"number\">0</span>, numbers1.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;quick sortTwo&quot;</span>);</span><br><span class=\"line\">        quickSort.sortTwo(numbers2, <span class=\"number\">0</span>, numbers2.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;quick sortTree&quot;</span>);</span><br><span class=\"line\">        quickSort.sortThree(numbers3, <span class=\"number\">0</span>, numbers3.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] numbers)</span> </span>&#123;</span><br><span class=\"line\">        sortOne(numbers, <span class=\"number\">0</span>, numbers.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 快速排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> numbers</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sign</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> length</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortOne</span><span class=\"params\">(<span class=\"keyword\">int</span>[] numbers, <span class=\"keyword\">int</span> sign, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = sign; <span class=\"comment\">//start为最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> end = length; <span class=\"comment\">//end为最大值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> key = numbers[sign];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">            print(numbers);</span><br><span class=\"line\">            <span class=\"comment\">//比较右侧</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (key &lt;= numbers[end] &amp;&amp; start &lt; end) &#123;</span><br><span class=\"line\">                end--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key &gt;= numbers[end]) &#123;</span><br><span class=\"line\">                swap(numbers, start, end);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//比较左侧</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (key &gt;= numbers[start] &amp;&amp; start &lt; end) &#123;</span><br><span class=\"line\">                start++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key &lt;= numbers[start]) &#123;</span><br><span class=\"line\">                swap(numbers, start, end);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//进行左侧串比较</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (start &gt; sign) &#123;</span><br><span class=\"line\">                sortOne(numbers, sign, start - <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//进行右侧串比较</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (end &lt; length) &#123;</span><br><span class=\"line\">                sortOne(numbers, start + <span class=\"number\">1</span>, length);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更高效点的代码</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetArr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sortTwo</span><span class=\"params\">(<span class=\"keyword\">int</span>[] targetArr, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = start + <span class=\"number\">1</span>, j = end;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> key = targetArr[start];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start &gt;= end) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*从i++和j--两个方向搜索不满足条件的值并交换</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        *条件为：i++方向小于key，j--方向大于key</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            print(targetArr);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (targetArr[j] &gt; key) &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (targetArr[i] &lt; key &amp;&amp; i &lt; j) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(targetArr, i, j);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetArr[i] == key) &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*关键数据放到‘中间’*/</span></span><br><span class=\"line\">        swap(targetArr, start, j);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start &lt; i - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            sortTwo(targetArr, start, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt; end) &#123;</span><br><span class=\"line\">            sortTwo(targetArr, j + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 方式三：减少交换次数，提高效率</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetArr</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sortThree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] targetArr, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = start, j = end;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> key = targetArr[start];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">            print(targetArr);</span><br><span class=\"line\">            <span class=\"comment\">/*按j--方向遍历目标数组，直到比key小的值为止*/</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; i &amp;&amp; targetArr[j] &gt;= key) &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/*targetArr[i]已经保存在key中，可将后面的数填入*/</span></span><br><span class=\"line\">                targetArr[i] = targetArr[j];</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/*按i++方向遍历目标数组，直到比key大的值为止*/</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; targetArr[i] &lt;= key)</span><br><span class=\"line\">                <span class=\"comment\">/*此处一定要小于等于零，假设数组之内有一亿个1，0交替出现的话，而key的值又恰巧是1的话，那么这个小于等于的作用就会使下面的if语句少执行一亿次。*/</span> &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/*targetArr[j]已保存在targetArr[i]中，可将前面的值填入*/</span></span><br><span class=\"line\">                targetArr[j] = targetArr[i];</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*此时i==j*/</span></span><br><span class=\"line\">        targetArr[i] = key;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*递归调用，把key前面的完成排序*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; start) &#123;</span><br><span class=\"line\">            sortThree(targetArr, start, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*递归调用，把key后面的完成排序*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j &lt; end) &#123;</span><br><span class=\"line\">            sortThree(targetArr, j + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"归并（Merge）排序","_content":"\n\n### 归并（Merge）排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\n/**\n * 归并（Merge）排序\n * <p>\n 归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序\n 分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。\n */\npublic class MergeSort implements Sort {\n    public static void main(String[] args) {\n        int[] numbers = {34, 12, 23, 56, 56, 56, 78};\n        MergeSort mergeSort = new MergeSort();\n        System.out.println(\"MergeSort\");\n        mergeSort.sort(numbers);\n        mergeSort.print(numbers);\n\n    }\n\n\n\n    @Override\n    public void sort(int[] arr) {\n        sort(arr, 0, arr.length - 1);\n    }\n\n    public void sort(int[] data, int left, int right) {\n        if (left >= right)\n            return;\n        // 找出中间索引\n        int center = (left + right) / 2;\n        // 对左边数组进行递归\n        sort(data, left, center);\n        // 对右边数组进行递归\n        sort(data, center + 1, right);\n        // 合并\n        merge(data, left, center, right);\n        print(data);\n    }\n\n    /**\n     * 将两个数组进行归并，归并前面 2 个数组已有序，归并后依然有序13/04/2018 Page 239 of 283\n     *\n     * @param data   数组对象\n     * @param left   左数组的第一个元素的索引\n     * @param center 左数组的最后一个元素的索引， center+1 是右数组第一个元素的索引\n     * @param right  右数组最后一个元素的索引\n     */\n    public static void merge(int[] data, int left, int center, int right) {\n        // 临时数组\n        int[] tmpArr = new int[data.length];\n        // 右数组第一个元素索引\n        int mid = center + 1;\n        // third 记录临时数组的索引\n        int third = left;\n        // 缓存左数组第一个元素的索引\n        int tmp = left;\n        while (left <= center && mid <= right) {\n            // 从两个数组中取出最小的放入临时数组\n            if (data[left] <= data[mid]) {\n                tmpArr[third++] = data[left++];\n            } else {\n                tmpArr[third++] = data[mid++];\n            }\n        }\n        // 剩余部分依次放入临时数组（实际上两个 while 只会执行其中一个）\n        while (mid <= right) {\n            tmpArr[third++] = data[mid++];\n        }\n        while (left <= center) {\n            tmpArr[third++] = data[left++];\n        }\n        // 将临时数组中的内容拷贝回原数组中\n        // （原 left-right 范围的内容被复制回原数组）\n        while (tmp <= right) {\n            data[tmp] = tmpArr[tmp++];\n        }\n    }\n\n}\n```\n","source":"_posts/algorithm/sort/4-归并排序.md","raw":"---\ntitle: 归并（Merge）排序\ncategories:\n- algorithm\ntag:\n- sort\n---\n\n\n### 归并（Merge）排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\n/**\n * 归并（Merge）排序\n * <p>\n 归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序\n 分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。\n */\npublic class MergeSort implements Sort {\n    public static void main(String[] args) {\n        int[] numbers = {34, 12, 23, 56, 56, 56, 78};\n        MergeSort mergeSort = new MergeSort();\n        System.out.println(\"MergeSort\");\n        mergeSort.sort(numbers);\n        mergeSort.print(numbers);\n\n    }\n\n\n\n    @Override\n    public void sort(int[] arr) {\n        sort(arr, 0, arr.length - 1);\n    }\n\n    public void sort(int[] data, int left, int right) {\n        if (left >= right)\n            return;\n        // 找出中间索引\n        int center = (left + right) / 2;\n        // 对左边数组进行递归\n        sort(data, left, center);\n        // 对右边数组进行递归\n        sort(data, center + 1, right);\n        // 合并\n        merge(data, left, center, right);\n        print(data);\n    }\n\n    /**\n     * 将两个数组进行归并，归并前面 2 个数组已有序，归并后依然有序13/04/2018 Page 239 of 283\n     *\n     * @param data   数组对象\n     * @param left   左数组的第一个元素的索引\n     * @param center 左数组的最后一个元素的索引， center+1 是右数组第一个元素的索引\n     * @param right  右数组最后一个元素的索引\n     */\n    public static void merge(int[] data, int left, int center, int right) {\n        // 临时数组\n        int[] tmpArr = new int[data.length];\n        // 右数组第一个元素索引\n        int mid = center + 1;\n        // third 记录临时数组的索引\n        int third = left;\n        // 缓存左数组第一个元素的索引\n        int tmp = left;\n        while (left <= center && mid <= right) {\n            // 从两个数组中取出最小的放入临时数组\n            if (data[left] <= data[mid]) {\n                tmpArr[third++] = data[left++];\n            } else {\n                tmpArr[third++] = data[mid++];\n            }\n        }\n        // 剩余部分依次放入临时数组（实际上两个 while 只会执行其中一个）\n        while (mid <= right) {\n            tmpArr[third++] = data[mid++];\n        }\n        while (left <= center) {\n            tmpArr[third++] = data[left++];\n        }\n        // 将临时数组中的内容拷贝回原数组中\n        // （原 left-right 范围的内容被复制回原数组）\n        while (tmp <= right) {\n            data[tmp] = tmpArr[tmp++];\n        }\n    }\n\n}\n```\n","slug":"algorithm/sort/4-归并排序","published":1,"date":"2021-09-14T15:07:45.063Z","updated":"2021-09-14T15:07:45.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyi1000mu6uk5xu328vl","content":"<h3 id=\"归并（Merge）排序\"><a href=\"#归并（Merge）排序\" class=\"headerlink\" title=\"归并（Merge）排序\"></a>归并（Merge）排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 归并（Merge）排序</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> 归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序</span></span><br><span class=\"line\"><span class=\"comment\"> 分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123;<span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        MergeSort mergeSort = <span class=\"keyword\">new</span> MergeSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MergeSort&quot;</span>);</span><br><span class=\"line\">        mergeSort.sort(numbers);</span><br><span class=\"line\">        mergeSort.print(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        sort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= right)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 找出中间索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 对左边数组进行递归</span></span><br><span class=\"line\">        sort(data, left, center);</span><br><span class=\"line\">        <span class=\"comment\">// 对右边数组进行递归</span></span><br><span class=\"line\">        sort(data, center + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">        <span class=\"comment\">// 合并</span></span><br><span class=\"line\">        merge(data, left, center, right);</span><br><span class=\"line\">        print(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将两个数组进行归并，归并前面 2 个数组已有序，归并后依然有序13/04/2018 Page 239 of 283</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data   数组对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left   左数组的第一个元素的索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> center 左数组的最后一个元素的索引， center+1 是右数组第一个元素的索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right  右数组最后一个元素的索引</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> center, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 临时数组</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] tmpArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[data.length];</span><br><span class=\"line\">        <span class=\"comment\">// 右数组第一个元素索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = center + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// third 记录临时数组的索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> third = left;</span><br><span class=\"line\">        <span class=\"comment\">// 缓存左数组第一个元素的索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = left;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= center &amp;&amp; mid &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从两个数组中取出最小的放入临时数组</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data[left] &lt;= data[mid]) &#123;</span><br><span class=\"line\">                tmpArr[third++] = data[left++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                tmpArr[third++] = data[mid++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 剩余部分依次放入临时数组（实际上两个 while 只会执行其中一个）</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (mid &lt;= right) &#123;</span><br><span class=\"line\">            tmpArr[third++] = data[mid++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= center) &#123;</span><br><span class=\"line\">            tmpArr[third++] = data[left++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将临时数组中的内容拷贝回原数组中</span></span><br><span class=\"line\">        <span class=\"comment\">// （原 left-right 范围的内容被复制回原数组）</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tmp &lt;= right) &#123;</span><br><span class=\"line\">            data[tmp] = tmpArr[tmp++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"归并（Merge）排序\"><a href=\"#归并（Merge）排序\" class=\"headerlink\" title=\"归并（Merge）排序\"></a>归并（Merge）排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 归并（Merge）排序</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> 归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序</span></span><br><span class=\"line\"><span class=\"comment\"> 分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123;<span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        MergeSort mergeSort = <span class=\"keyword\">new</span> MergeSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MergeSort&quot;</span>);</span><br><span class=\"line\">        mergeSort.sort(numbers);</span><br><span class=\"line\">        mergeSort.print(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        sort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= right)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 找出中间索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 对左边数组进行递归</span></span><br><span class=\"line\">        sort(data, left, center);</span><br><span class=\"line\">        <span class=\"comment\">// 对右边数组进行递归</span></span><br><span class=\"line\">        sort(data, center + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">        <span class=\"comment\">// 合并</span></span><br><span class=\"line\">        merge(data, left, center, right);</span><br><span class=\"line\">        print(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将两个数组进行归并，归并前面 2 个数组已有序，归并后依然有序13/04/2018 Page 239 of 283</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data   数组对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left   左数组的第一个元素的索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> center 左数组的最后一个元素的索引， center+1 是右数组第一个元素的索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right  右数组最后一个元素的索引</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> center, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 临时数组</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] tmpArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[data.length];</span><br><span class=\"line\">        <span class=\"comment\">// 右数组第一个元素索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = center + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// third 记录临时数组的索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> third = left;</span><br><span class=\"line\">        <span class=\"comment\">// 缓存左数组第一个元素的索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = left;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= center &amp;&amp; mid &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从两个数组中取出最小的放入临时数组</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data[left] &lt;= data[mid]) &#123;</span><br><span class=\"line\">                tmpArr[third++] = data[left++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                tmpArr[third++] = data[mid++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 剩余部分依次放入临时数组（实际上两个 while 只会执行其中一个）</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (mid &lt;= right) &#123;</span><br><span class=\"line\">            tmpArr[third++] = data[mid++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= center) &#123;</span><br><span class=\"line\">            tmpArr[third++] = data[left++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将临时数组中的内容拷贝回原数组中</span></span><br><span class=\"line\">        <span class=\"comment\">// （原 left-right 范围的内容被复制回原数组）</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tmp &lt;= right) &#123;</span><br><span class=\"line\">            data[tmp] = tmpArr[tmp++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"希尔排序","_content":"\n\n### 希尔排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\n/**\n * 希尔排序\n * <p>\n * 基本思想：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列\n * 中的记录“基本有序” 时，再对全体记录进行依次直接插入排序。\n * 1. 操作方法：\n * 选择一个增量序列 t1， t2， …， tk，其中 ti>tj， tk=1；\n * 2. 按增量序列个数 k，对序列进行 k 趟排序；\n * 3. 每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进\n * 行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长\n * 度。\n */\npublic class ShellSort implements Sort {\n    public static void main(String[] args) {\n        int[] numbers = {34, 12, 23, 56, 56, 56, 78};\n        ShellSort shellSort = new ShellSort();\n        System.out.println(\"ShellSort\");\n        shellSort.sort(numbers);\n        shellSort.print(numbers);\n\n    }\n\n\n    @Override\n    public void sort(int[] arr) {\n        int dk = arr.length / 2;\n        while (dk >= 1) {\n            ShellInsertSort(arr, dk);\n            dk = dk / 2;\n        }\n    }\n\n    private void ShellInsertSort(int[] a, int dk) {\n        //类似插入排序，只是插入排序增量是 1，这里增量是 dk,把 1 换成 dk 就可以了\n        for (int i = dk; i < a.length; i++) {\n            if (a[i] < a[i - dk]) {\n                int j;\n                int x = a[i];//x 为待插入元素\n                a[i] = a[i - dk];\n                for (j = i - dk; j >= 0 && x < a[j]; j = j - dk) {\n                    //通过循环，逐个后移一位找到要插入的位置。\n                    a[j + dk] = a[j];\n                }\n                a[j + dk] = x;//插入\n            }\n        }\n    }\n\n}\n```\n","source":"_posts/algorithm/sort/5-希尔排序.md","raw":"---\ntitle: 希尔排序\ncategories:\n- algorithm\ntag:\n- sort\n---\n\n\n### 希尔排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\n/**\n * 希尔排序\n * <p>\n * 基本思想：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列\n * 中的记录“基本有序” 时，再对全体记录进行依次直接插入排序。\n * 1. 操作方法：\n * 选择一个增量序列 t1， t2， …， tk，其中 ti>tj， tk=1；\n * 2. 按增量序列个数 k，对序列进行 k 趟排序；\n * 3. 每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进\n * 行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长\n * 度。\n */\npublic class ShellSort implements Sort {\n    public static void main(String[] args) {\n        int[] numbers = {34, 12, 23, 56, 56, 56, 78};\n        ShellSort shellSort = new ShellSort();\n        System.out.println(\"ShellSort\");\n        shellSort.sort(numbers);\n        shellSort.print(numbers);\n\n    }\n\n\n    @Override\n    public void sort(int[] arr) {\n        int dk = arr.length / 2;\n        while (dk >= 1) {\n            ShellInsertSort(arr, dk);\n            dk = dk / 2;\n        }\n    }\n\n    private void ShellInsertSort(int[] a, int dk) {\n        //类似插入排序，只是插入排序增量是 1，这里增量是 dk,把 1 换成 dk 就可以了\n        for (int i = dk; i < a.length; i++) {\n            if (a[i] < a[i - dk]) {\n                int j;\n                int x = a[i];//x 为待插入元素\n                a[i] = a[i - dk];\n                for (j = i - dk; j >= 0 && x < a[j]; j = j - dk) {\n                    //通过循环，逐个后移一位找到要插入的位置。\n                    a[j + dk] = a[j];\n                }\n                a[j + dk] = x;//插入\n            }\n        }\n    }\n\n}\n```\n","slug":"algorithm/sort/5-希尔排序","published":1,"date":"2021-09-14T15:07:45.066Z","updated":"2021-09-14T15:07:45.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyi2000nu6uk1k25783n","content":"<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 希尔排序</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 基本思想：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列</span></span><br><span class=\"line\"><span class=\"comment\"> * 中的记录“基本有序” 时，再对全体记录进行依次直接插入排序。</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 操作方法：</span></span><br><span class=\"line\"><span class=\"comment\"> * 选择一个增量序列 t1， t2， …， tk，其中 ti&gt;tj， tk=1；</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 按增量序列个数 k，对序列进行 k 趟排序；</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进</span></span><br><span class=\"line\"><span class=\"comment\"> * 行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长</span></span><br><span class=\"line\"><span class=\"comment\"> * 度。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShellSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123;<span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        ShellSort shellSort = <span class=\"keyword\">new</span> ShellSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ShellSort&quot;</span>);</span><br><span class=\"line\">        shellSort.sort(numbers);</span><br><span class=\"line\">        shellSort.print(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dk = arr.length / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (dk &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            ShellInsertSort(arr, dk);</span><br><span class=\"line\">            dk = dk / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ShellInsertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> dk)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//类似插入排序，只是插入排序增量是 1，这里增量是 dk,把 1 换成 dk 就可以了</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = dk; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i] &lt; a[i - dk]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> j;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = a[i];<span class=\"comment\">//x 为待插入元素</span></span><br><span class=\"line\">                a[i] = a[i - dk];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (j = i - dk; j &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; a[j]; j = j - dk) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//通过循环，逐个后移一位找到要插入的位置。</span></span><br><span class=\"line\">                    a[j + dk] = a[j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                a[j + dk] = x;<span class=\"comment\">//插入</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 希尔排序</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 基本思想：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列</span></span><br><span class=\"line\"><span class=\"comment\"> * 中的记录“基本有序” 时，再对全体记录进行依次直接插入排序。</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 操作方法：</span></span><br><span class=\"line\"><span class=\"comment\"> * 选择一个增量序列 t1， t2， …， tk，其中 ti&gt;tj， tk=1；</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 按增量序列个数 k，对序列进行 k 趟排序；</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进</span></span><br><span class=\"line\"><span class=\"comment\"> * 行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长</span></span><br><span class=\"line\"><span class=\"comment\"> * 度。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShellSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123;<span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        ShellSort shellSort = <span class=\"keyword\">new</span> ShellSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ShellSort&quot;</span>);</span><br><span class=\"line\">        shellSort.sort(numbers);</span><br><span class=\"line\">        shellSort.print(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dk = arr.length / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (dk &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            ShellInsertSort(arr, dk);</span><br><span class=\"line\">            dk = dk / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ShellInsertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> dk)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//类似插入排序，只是插入排序增量是 1，这里增量是 dk,把 1 换成 dk 就可以了</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = dk; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i] &lt; a[i - dk]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> j;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = a[i];<span class=\"comment\">//x 为待插入元素</span></span><br><span class=\"line\">                a[i] = a[i - dk];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (j = i - dk; j &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; a[j]; j = j - dk) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//通过循环，逐个后移一位找到要插入的位置。</span></span><br><span class=\"line\">                    a[j + dk] = a[j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                a[j + dk] = x;<span class=\"comment\">//插入</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"堆排序","_content":"\n\n### 堆排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\n/**\n * 堆排序\n * 堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。\n * 可以利用数组的特点快速定位指定索引的元素。堆分为大根堆和小根堆，是完全二叉树。\n * 大根堆的要求是每个节点的值都不大于其父节点的值，即A[PARENT[i]] >= A[i]。\n * 在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶\n * 定义\n * n个关键字序列Kl，K2，…，Kn称为（Heap），当且仅当该序列满足如下性质（简称为堆性质）：\n * (1)ki<=k(2i）且ki<=k(2i+1)(1≤i≤ n/2），当然，这是小根堆，大根堆则换成>=号(2)ki>=k(2i）且ki>=k(2i+1)(1≤i≤ n/2）。//k(i）相当于二叉树的非叶子结点，K(2i）则是左子节点，k(2i+1）是右子节点\n * 若将此序列所存储的向量R[1..n]看做是一棵完全二叉树的存储结构，则堆实质上是满足如下性质的完全二叉树：\n * 树中任一非叶子结点的关键字均不大于（或不小于）其左右孩子（若存在）结点的关键字。\n * 【例】关键字序列（10，15，56，25，30，70）和（70，56，30，25，15，10）分别满足堆性质（1）和（2），故它们均是堆，其对应的完全二叉树分别如小根堆示例和大根堆示例所示。\n * 大根堆和小根堆：根结点（亦称为堆顶）的关键字是堆里所有结点关键字中最小者的堆称为小根堆，又称最小堆。\n * 根结点（亦称为堆顶）的关键字是堆里所有结点关键字中最大者，称为大根堆，又称最大堆。注意：①堆中任一子树亦是堆。②以上讨论的堆实际上是二叉堆（Binary Heap），类似地可定义k叉堆。\n * 堆排序的时间，主要由建立初始堆和反复重建堆这两部分的时间开销构成，它们均是通过调用Heapify实现的。\n * 平均性能\n * O(N*logN)。\n *\n * （2）大根堆排序算法的基本操作：\n ①建堆，建堆是不断调整堆的过程，从len/2处开始调整，一直到第一个节点，此处len是堆中元素的个数。\n    建堆的过程是线性的过程，从len/2到0处一直调用调整堆的过程，相当于o(h1)+o(h2)…+o(hlen/2) 其中h表示节点的深度，len/2表示节点的个数，这是一个求和的过程，结果是线性的O(n)。\n ②调整堆：调整堆在构建堆的过程中会用到，而且在堆排序过程中也会用到。利用的思想是比较节点i和它的孩子节点left(i),right(i)，\n    选出三者最大(或者最小)者，如果最大（小）值不是节点i而是它的一个孩子节点，那边交互节点i和该节点，然后再调用调整堆过程，这是一个递归的过程。\n    调整堆的过程时间复杂度与堆的深度有关系，是lgn的操作，因为是沿着深度方向进行调整的。\n ③堆排序：堆排序是利用上面的两个过程来进行的。首先是根据元素构建堆。\n    然后将堆的根节点取出(一般是与最后一个节点进行交换)，将前面len-1个节点继续进行堆调整的过程，然后再将根节点取出，这样一直到所有节点都取出。堆排序过程的时间复杂度是O(nlgn)。\n    因为建堆的时间复杂度是O(n)（调用一次）；调整堆的时间复杂度是lgn，调用了n-1次，所以堆排序的时间复杂度是O(nlgn) [2]\n * 其他性能\n * 由于建初始堆所需的比较次数较多，所以堆排序不适宜于记录数较少的文件。\n * 堆排序是就地排序，辅助空间为O(1).\n * 它是不稳定的排序方法。（排序的稳定性是指如果在排序的序列中，存在前后相同的两个元素的话，排序前 和排序后他们的相对位置不发生变化）\n *\n * 总结：\n * 1.建立最大堆\n * 2.把最大堆元素移动至最后为有序\n */\npublic class HeapSort implements Sort {\n    public static void main(String[] args) {\n        HeapSort bubbleSort = new HeapSort();\n        System.out.println(\"HeapSort\");\n        bubbleSort.test();\n\n    }\n\n    @Override\n    public void sort(int[] data) {\n        //step1.buildMaxHeapify\n        //没有子节点的才需要创建最大堆，从最后一个的父节点开始\n        int startIndex = getParentIndex(data.length - 1);\n        //从尾端开始创建最大堆，每次都是正确的堆\n        for (int i = startIndex; i >= 0; i--) {\n            maxHeapify(data, data.length, i);\n        }\n        //---此时最大堆创建完成\n        System.out.println(\"printTree MaxTree Ok\");\n        //step2.heapSort\n        //末尾与头交换，交换后调整最大堆\n        for (int i = data.length - 1; i > 0; i--) {\n            System.out.print(\"i=\" + i);\n            printTree(data);\n            swap(data, 0, i);\n            printTree(data);\n            maxHeapify(data, i, 0);\n        }\n        printTree(data);\n    }\n\n\n    /**\n     * 创建最大堆\n     *\n     * @paramdata\n     * @paramheapSize需要创建最大堆的大小，一般在sort的时候用到，因为最多值放在末尾，末尾就不再归入最大堆了\n     * @paramindex当前需要创建最大堆的位置\n     */\n    private  void maxHeapify(int[] data, int heapSize, int index) {\n\n        //当前点与左右子节点比较\n        int left = getChildLeftIndex(index);\n        int right = getChildRightIndex(index);\n        System.out.print(\"index=\" + index + \" left=\" + left+\" right=\" + right);\n        printTree(data);\n        int largest = index;\n        if (left < heapSize && data[index] < data[left]) {\n            largest = left;\n        }\n        if (right < heapSize && data[largest] < data[right]) {\n            largest = right;\n        }\n        //得到最大值后可能需要交换，如果交换了，其子节点可能就不是最大堆了，需要重新调整\n        if (largest != index) {\n            swap(data, largest, index);\n            maxHeapify(data, heapSize, largest);\n        }\n    }\n\n    /**\n     * 父节点位置\n     *\n     * @return\n     * @paramcurrent\n     */\n    private int getParentIndex(int current) {\n        return (current - 1) >> 1;\n    }\n\n    /**\n     * 左子节点position注意括号，加法优先级更高\n     *\n     * @return\n     * @paramcurrent\n     */\n    private int getChildLeftIndex(int current) {\n        return (current << 1) + 1;\n    }\n\n    /**\n     * 右子节点position\n     *\n     * @return\n     * @paramcurrent\n     */\n    private int getChildRightIndex(int current) {\n        return (current << 1) + 2;\n    }\n\n    public void printTree(int[] data) {\n        int pre = -2;\n        for (int i = 0; i < data.length; i++) {\n            if (pre < (int) getLog(i + 1)) {\n                pre = (int) getLog(i + 1);\n                System.out.println();\n            }\n            System.out.print(data[i] + \"|\");\n        }\n        System.out.println();\n        System.out.println();\n    }\n\n    /**\n     * 以2为底的对数\n     *\n     * @return\n     * @paramparam\n     */\n    private static double getLog(double param) {\n        return Math.log(param) / Math.log(2);\n    }\n}\n```\n","source":"_posts/algorithm/sort/6-堆排序.md","raw":"---\ntitle: 堆排序\ncategories:\n- algorithm\ntag:\n- sort\n---\n\n\n### 堆排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\n/**\n * 堆排序\n * 堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。\n * 可以利用数组的特点快速定位指定索引的元素。堆分为大根堆和小根堆，是完全二叉树。\n * 大根堆的要求是每个节点的值都不大于其父节点的值，即A[PARENT[i]] >= A[i]。\n * 在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶\n * 定义\n * n个关键字序列Kl，K2，…，Kn称为（Heap），当且仅当该序列满足如下性质（简称为堆性质）：\n * (1)ki<=k(2i）且ki<=k(2i+1)(1≤i≤ n/2），当然，这是小根堆，大根堆则换成>=号(2)ki>=k(2i）且ki>=k(2i+1)(1≤i≤ n/2）。//k(i）相当于二叉树的非叶子结点，K(2i）则是左子节点，k(2i+1）是右子节点\n * 若将此序列所存储的向量R[1..n]看做是一棵完全二叉树的存储结构，则堆实质上是满足如下性质的完全二叉树：\n * 树中任一非叶子结点的关键字均不大于（或不小于）其左右孩子（若存在）结点的关键字。\n * 【例】关键字序列（10，15，56，25，30，70）和（70，56，30，25，15，10）分别满足堆性质（1）和（2），故它们均是堆，其对应的完全二叉树分别如小根堆示例和大根堆示例所示。\n * 大根堆和小根堆：根结点（亦称为堆顶）的关键字是堆里所有结点关键字中最小者的堆称为小根堆，又称最小堆。\n * 根结点（亦称为堆顶）的关键字是堆里所有结点关键字中最大者，称为大根堆，又称最大堆。注意：①堆中任一子树亦是堆。②以上讨论的堆实际上是二叉堆（Binary Heap），类似地可定义k叉堆。\n * 堆排序的时间，主要由建立初始堆和反复重建堆这两部分的时间开销构成，它们均是通过调用Heapify实现的。\n * 平均性能\n * O(N*logN)。\n *\n * （2）大根堆排序算法的基本操作：\n ①建堆，建堆是不断调整堆的过程，从len/2处开始调整，一直到第一个节点，此处len是堆中元素的个数。\n    建堆的过程是线性的过程，从len/2到0处一直调用调整堆的过程，相当于o(h1)+o(h2)…+o(hlen/2) 其中h表示节点的深度，len/2表示节点的个数，这是一个求和的过程，结果是线性的O(n)。\n ②调整堆：调整堆在构建堆的过程中会用到，而且在堆排序过程中也会用到。利用的思想是比较节点i和它的孩子节点left(i),right(i)，\n    选出三者最大(或者最小)者，如果最大（小）值不是节点i而是它的一个孩子节点，那边交互节点i和该节点，然后再调用调整堆过程，这是一个递归的过程。\n    调整堆的过程时间复杂度与堆的深度有关系，是lgn的操作，因为是沿着深度方向进行调整的。\n ③堆排序：堆排序是利用上面的两个过程来进行的。首先是根据元素构建堆。\n    然后将堆的根节点取出(一般是与最后一个节点进行交换)，将前面len-1个节点继续进行堆调整的过程，然后再将根节点取出，这样一直到所有节点都取出。堆排序过程的时间复杂度是O(nlgn)。\n    因为建堆的时间复杂度是O(n)（调用一次）；调整堆的时间复杂度是lgn，调用了n-1次，所以堆排序的时间复杂度是O(nlgn) [2]\n * 其他性能\n * 由于建初始堆所需的比较次数较多，所以堆排序不适宜于记录数较少的文件。\n * 堆排序是就地排序，辅助空间为O(1).\n * 它是不稳定的排序方法。（排序的稳定性是指如果在排序的序列中，存在前后相同的两个元素的话，排序前 和排序后他们的相对位置不发生变化）\n *\n * 总结：\n * 1.建立最大堆\n * 2.把最大堆元素移动至最后为有序\n */\npublic class HeapSort implements Sort {\n    public static void main(String[] args) {\n        HeapSort bubbleSort = new HeapSort();\n        System.out.println(\"HeapSort\");\n        bubbleSort.test();\n\n    }\n\n    @Override\n    public void sort(int[] data) {\n        //step1.buildMaxHeapify\n        //没有子节点的才需要创建最大堆，从最后一个的父节点开始\n        int startIndex = getParentIndex(data.length - 1);\n        //从尾端开始创建最大堆，每次都是正确的堆\n        for (int i = startIndex; i >= 0; i--) {\n            maxHeapify(data, data.length, i);\n        }\n        //---此时最大堆创建完成\n        System.out.println(\"printTree MaxTree Ok\");\n        //step2.heapSort\n        //末尾与头交换，交换后调整最大堆\n        for (int i = data.length - 1; i > 0; i--) {\n            System.out.print(\"i=\" + i);\n            printTree(data);\n            swap(data, 0, i);\n            printTree(data);\n            maxHeapify(data, i, 0);\n        }\n        printTree(data);\n    }\n\n\n    /**\n     * 创建最大堆\n     *\n     * @paramdata\n     * @paramheapSize需要创建最大堆的大小，一般在sort的时候用到，因为最多值放在末尾，末尾就不再归入最大堆了\n     * @paramindex当前需要创建最大堆的位置\n     */\n    private  void maxHeapify(int[] data, int heapSize, int index) {\n\n        //当前点与左右子节点比较\n        int left = getChildLeftIndex(index);\n        int right = getChildRightIndex(index);\n        System.out.print(\"index=\" + index + \" left=\" + left+\" right=\" + right);\n        printTree(data);\n        int largest = index;\n        if (left < heapSize && data[index] < data[left]) {\n            largest = left;\n        }\n        if (right < heapSize && data[largest] < data[right]) {\n            largest = right;\n        }\n        //得到最大值后可能需要交换，如果交换了，其子节点可能就不是最大堆了，需要重新调整\n        if (largest != index) {\n            swap(data, largest, index);\n            maxHeapify(data, heapSize, largest);\n        }\n    }\n\n    /**\n     * 父节点位置\n     *\n     * @return\n     * @paramcurrent\n     */\n    private int getParentIndex(int current) {\n        return (current - 1) >> 1;\n    }\n\n    /**\n     * 左子节点position注意括号，加法优先级更高\n     *\n     * @return\n     * @paramcurrent\n     */\n    private int getChildLeftIndex(int current) {\n        return (current << 1) + 1;\n    }\n\n    /**\n     * 右子节点position\n     *\n     * @return\n     * @paramcurrent\n     */\n    private int getChildRightIndex(int current) {\n        return (current << 1) + 2;\n    }\n\n    public void printTree(int[] data) {\n        int pre = -2;\n        for (int i = 0; i < data.length; i++) {\n            if (pre < (int) getLog(i + 1)) {\n                pre = (int) getLog(i + 1);\n                System.out.println();\n            }\n            System.out.print(data[i] + \"|\");\n        }\n        System.out.println();\n        System.out.println();\n    }\n\n    /**\n     * 以2为底的对数\n     *\n     * @return\n     * @paramparam\n     */\n    private static double getLog(double param) {\n        return Math.log(param) / Math.log(2);\n    }\n}\n```\n","slug":"algorithm/sort/6-堆排序","published":1,"date":"2021-09-14T15:07:45.056Z","updated":"2021-09-14T15:07:45.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyi3000ru6uk4sja999z","content":"<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 堆排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以利用数组的特点快速定位指定索引的元素。堆分为大根堆和小根堆，是完全二叉树。</span></span><br><span class=\"line\"><span class=\"comment\"> * 大根堆的要求是每个节点的值都不大于其父节点的值，即A[PARENT[i]] &gt;= A[i]。</span></span><br><span class=\"line\"><span class=\"comment\"> * 在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义</span></span><br><span class=\"line\"><span class=\"comment\"> * n个关键字序列Kl，K2，…，Kn称为（Heap），当且仅当该序列满足如下性质（简称为堆性质）：</span></span><br><span class=\"line\"><span class=\"comment\"> * (1)ki&lt;=k(2i）且ki&lt;=k(2i+1)(1≤i≤ n/2），当然，这是小根堆，大根堆则换成&gt;=号(2)ki&gt;=k(2i）且ki&gt;=k(2i+1)(1≤i≤ n/2）。//k(i）相当于二叉树的非叶子结点，K(2i）则是左子节点，k(2i+1）是右子节点</span></span><br><span class=\"line\"><span class=\"comment\"> * 若将此序列所存储的向量R[1..n]看做是一棵完全二叉树的存储结构，则堆实质上是满足如下性质的完全二叉树：</span></span><br><span class=\"line\"><span class=\"comment\"> * 树中任一非叶子结点的关键字均不大于（或不小于）其左右孩子（若存在）结点的关键字。</span></span><br><span class=\"line\"><span class=\"comment\"> * 【例】关键字序列（10，15，56，25，30，70）和（70，56，30，25，15，10）分别满足堆性质（1）和（2），故它们均是堆，其对应的完全二叉树分别如小根堆示例和大根堆示例所示。</span></span><br><span class=\"line\"><span class=\"comment\"> * 大根堆和小根堆：根结点（亦称为堆顶）的关键字是堆里所有结点关键字中最小者的堆称为小根堆，又称最小堆。</span></span><br><span class=\"line\"><span class=\"comment\"> * 根结点（亦称为堆顶）的关键字是堆里所有结点关键字中最大者，称为大根堆，又称最大堆。注意：①堆中任一子树亦是堆。②以上讨论的堆实际上是二叉堆（Binary Heap），类似地可定义k叉堆。</span></span><br><span class=\"line\"><span class=\"comment\"> * 堆排序的时间，主要由建立初始堆和反复重建堆这两部分的时间开销构成，它们均是通过调用Heapify实现的。</span></span><br><span class=\"line\"><span class=\"comment\"> * 平均性能</span></span><br><span class=\"line\"><span class=\"comment\"> * O(N*logN)。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * （2）大根堆排序算法的基本操作：</span></span><br><span class=\"line\"><span class=\"comment\"> ①建堆，建堆是不断调整堆的过程，从len/2处开始调整，一直到第一个节点，此处len是堆中元素的个数。</span></span><br><span class=\"line\"><span class=\"comment\">    建堆的过程是线性的过程，从len/2到0处一直调用调整堆的过程，相当于o(h1)+o(h2)…+o(hlen/2) 其中h表示节点的深度，len/2表示节点的个数，这是一个求和的过程，结果是线性的O(n)。</span></span><br><span class=\"line\"><span class=\"comment\"> ②调整堆：调整堆在构建堆的过程中会用到，而且在堆排序过程中也会用到。利用的思想是比较节点i和它的孩子节点left(i),right(i)，</span></span><br><span class=\"line\"><span class=\"comment\">    选出三者最大(或者最小)者，如果最大（小）值不是节点i而是它的一个孩子节点，那边交互节点i和该节点，然后再调用调整堆过程，这是一个递归的过程。</span></span><br><span class=\"line\"><span class=\"comment\">    调整堆的过程时间复杂度与堆的深度有关系，是lgn的操作，因为是沿着深度方向进行调整的。</span></span><br><span class=\"line\"><span class=\"comment\"> ③堆排序：堆排序是利用上面的两个过程来进行的。首先是根据元素构建堆。</span></span><br><span class=\"line\"><span class=\"comment\">    然后将堆的根节点取出(一般是与最后一个节点进行交换)，将前面len-1个节点继续进行堆调整的过程，然后再将根节点取出，这样一直到所有节点都取出。堆排序过程的时间复杂度是O(nlgn)。</span></span><br><span class=\"line\"><span class=\"comment\">    因为建堆的时间复杂度是O(n)（调用一次）；调整堆的时间复杂度是lgn，调用了n-1次，所以堆排序的时间复杂度是O(nlgn) [2]</span></span><br><span class=\"line\"><span class=\"comment\"> * 其他性能</span></span><br><span class=\"line\"><span class=\"comment\"> * 由于建初始堆所需的比较次数较多，所以堆排序不适宜于记录数较少的文件。</span></span><br><span class=\"line\"><span class=\"comment\"> * 堆排序是就地排序，辅助空间为O(1).</span></span><br><span class=\"line\"><span class=\"comment\"> * 它是不稳定的排序方法。（排序的稳定性是指如果在排序的序列中，存在前后相同的两个元素的话，排序前 和排序后他们的相对位置不发生变化）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 总结：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.建立最大堆</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.把最大堆元素移动至最后为有序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeapSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        HeapSort bubbleSort = <span class=\"keyword\">new</span> HeapSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;HeapSort&quot;</span>);</span><br><span class=\"line\">        bubbleSort.test();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//step1.buildMaxHeapify</span></span><br><span class=\"line\">        <span class=\"comment\">//没有子节点的才需要创建最大堆，从最后一个的父节点开始</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> startIndex = getParentIndex(data.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//从尾端开始创建最大堆，每次都是正确的堆</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = startIndex; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            maxHeapify(data, data.length, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//---此时最大堆创建完成</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;printTree MaxTree Ok&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//step2.heapSort</span></span><br><span class=\"line\">        <span class=\"comment\">//末尾与头交换，交换后调整最大堆</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = data.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;i=&quot;</span> + i);</span><br><span class=\"line\">            printTree(data);</span><br><span class=\"line\">            swap(data, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">            printTree(data);</span><br><span class=\"line\">            maxHeapify(data, i, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printTree(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建最大堆</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@paramdata</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@paramheapSize</span>需要创建最大堆的大小，一般在sort的时候用到，因为最多值放在末尾，末尾就不再归入最大堆了</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@paramindex</span>当前需要创建最大堆的位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span>  <span class=\"keyword\">void</span> <span class=\"title\">maxHeapify</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> heapSize, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//当前点与左右子节点比较</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = getChildLeftIndex(index);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = getChildRightIndex(index);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;index=&quot;</span> + index + <span class=\"string\">&quot; left=&quot;</span> + left+<span class=\"string\">&quot; right=&quot;</span> + right);</span><br><span class=\"line\">        printTree(data);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> largest = index;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; heapSize &amp;&amp; data[index] &lt; data[left]) &#123;</span><br><span class=\"line\">            largest = left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right &lt; heapSize &amp;&amp; data[largest] &lt; data[right]) &#123;</span><br><span class=\"line\">            largest = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//得到最大值后可能需要交换，如果交换了，其子节点可能就不是最大堆了，需要重新调整</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (largest != index) &#123;</span><br><span class=\"line\">            swap(data, largest, index);</span><br><span class=\"line\">            maxHeapify(data, heapSize, largest);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 父节点位置</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@paramcurrent</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getParentIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> current)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (current - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 左子节点position注意括号，加法优先级更高</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@paramcurrent</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildLeftIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> current)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (current &lt;&lt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 右子节点position</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@paramcurrent</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildRightIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> current)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (current &lt;&lt; <span class=\"number\">1</span>) + <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pre = -<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pre &lt; (<span class=\"keyword\">int</span>) getLog(i + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                pre = (<span class=\"keyword\">int</span>) getLog(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">                System.out.println();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.print(data[i] + <span class=\"string\">&quot;|&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 以2为底的对数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@paramparam</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">getLog</span><span class=\"params\">(<span class=\"keyword\">double</span> param)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.log(param) / Math.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 堆排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以利用数组的特点快速定位指定索引的元素。堆分为大根堆和小根堆，是完全二叉树。</span></span><br><span class=\"line\"><span class=\"comment\"> * 大根堆的要求是每个节点的值都不大于其父节点的值，即A[PARENT[i]] &gt;= A[i]。</span></span><br><span class=\"line\"><span class=\"comment\"> * 在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义</span></span><br><span class=\"line\"><span class=\"comment\"> * n个关键字序列Kl，K2，…，Kn称为（Heap），当且仅当该序列满足如下性质（简称为堆性质）：</span></span><br><span class=\"line\"><span class=\"comment\"> * (1)ki&lt;=k(2i）且ki&lt;=k(2i+1)(1≤i≤ n/2），当然，这是小根堆，大根堆则换成&gt;=号(2)ki&gt;=k(2i）且ki&gt;=k(2i+1)(1≤i≤ n/2）。//k(i）相当于二叉树的非叶子结点，K(2i）则是左子节点，k(2i+1）是右子节点</span></span><br><span class=\"line\"><span class=\"comment\"> * 若将此序列所存储的向量R[1..n]看做是一棵完全二叉树的存储结构，则堆实质上是满足如下性质的完全二叉树：</span></span><br><span class=\"line\"><span class=\"comment\"> * 树中任一非叶子结点的关键字均不大于（或不小于）其左右孩子（若存在）结点的关键字。</span></span><br><span class=\"line\"><span class=\"comment\"> * 【例】关键字序列（10，15，56，25，30，70）和（70，56，30，25，15，10）分别满足堆性质（1）和（2），故它们均是堆，其对应的完全二叉树分别如小根堆示例和大根堆示例所示。</span></span><br><span class=\"line\"><span class=\"comment\"> * 大根堆和小根堆：根结点（亦称为堆顶）的关键字是堆里所有结点关键字中最小者的堆称为小根堆，又称最小堆。</span></span><br><span class=\"line\"><span class=\"comment\"> * 根结点（亦称为堆顶）的关键字是堆里所有结点关键字中最大者，称为大根堆，又称最大堆。注意：①堆中任一子树亦是堆。②以上讨论的堆实际上是二叉堆（Binary Heap），类似地可定义k叉堆。</span></span><br><span class=\"line\"><span class=\"comment\"> * 堆排序的时间，主要由建立初始堆和反复重建堆这两部分的时间开销构成，它们均是通过调用Heapify实现的。</span></span><br><span class=\"line\"><span class=\"comment\"> * 平均性能</span></span><br><span class=\"line\"><span class=\"comment\"> * O(N*logN)。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * （2）大根堆排序算法的基本操作：</span></span><br><span class=\"line\"><span class=\"comment\"> ①建堆，建堆是不断调整堆的过程，从len/2处开始调整，一直到第一个节点，此处len是堆中元素的个数。</span></span><br><span class=\"line\"><span class=\"comment\">    建堆的过程是线性的过程，从len/2到0处一直调用调整堆的过程，相当于o(h1)+o(h2)…+o(hlen/2) 其中h表示节点的深度，len/2表示节点的个数，这是一个求和的过程，结果是线性的O(n)。</span></span><br><span class=\"line\"><span class=\"comment\"> ②调整堆：调整堆在构建堆的过程中会用到，而且在堆排序过程中也会用到。利用的思想是比较节点i和它的孩子节点left(i),right(i)，</span></span><br><span class=\"line\"><span class=\"comment\">    选出三者最大(或者最小)者，如果最大（小）值不是节点i而是它的一个孩子节点，那边交互节点i和该节点，然后再调用调整堆过程，这是一个递归的过程。</span></span><br><span class=\"line\"><span class=\"comment\">    调整堆的过程时间复杂度与堆的深度有关系，是lgn的操作，因为是沿着深度方向进行调整的。</span></span><br><span class=\"line\"><span class=\"comment\"> ③堆排序：堆排序是利用上面的两个过程来进行的。首先是根据元素构建堆。</span></span><br><span class=\"line\"><span class=\"comment\">    然后将堆的根节点取出(一般是与最后一个节点进行交换)，将前面len-1个节点继续进行堆调整的过程，然后再将根节点取出，这样一直到所有节点都取出。堆排序过程的时间复杂度是O(nlgn)。</span></span><br><span class=\"line\"><span class=\"comment\">    因为建堆的时间复杂度是O(n)（调用一次）；调整堆的时间复杂度是lgn，调用了n-1次，所以堆排序的时间复杂度是O(nlgn) [2]</span></span><br><span class=\"line\"><span class=\"comment\"> * 其他性能</span></span><br><span class=\"line\"><span class=\"comment\"> * 由于建初始堆所需的比较次数较多，所以堆排序不适宜于记录数较少的文件。</span></span><br><span class=\"line\"><span class=\"comment\"> * 堆排序是就地排序，辅助空间为O(1).</span></span><br><span class=\"line\"><span class=\"comment\"> * 它是不稳定的排序方法。（排序的稳定性是指如果在排序的序列中，存在前后相同的两个元素的话，排序前 和排序后他们的相对位置不发生变化）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 总结：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.建立最大堆</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.把最大堆元素移动至最后为有序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeapSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        HeapSort bubbleSort = <span class=\"keyword\">new</span> HeapSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;HeapSort&quot;</span>);</span><br><span class=\"line\">        bubbleSort.test();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//step1.buildMaxHeapify</span></span><br><span class=\"line\">        <span class=\"comment\">//没有子节点的才需要创建最大堆，从最后一个的父节点开始</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> startIndex = getParentIndex(data.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//从尾端开始创建最大堆，每次都是正确的堆</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = startIndex; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            maxHeapify(data, data.length, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//---此时最大堆创建完成</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;printTree MaxTree Ok&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//step2.heapSort</span></span><br><span class=\"line\">        <span class=\"comment\">//末尾与头交换，交换后调整最大堆</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = data.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;i=&quot;</span> + i);</span><br><span class=\"line\">            printTree(data);</span><br><span class=\"line\">            swap(data, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">            printTree(data);</span><br><span class=\"line\">            maxHeapify(data, i, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printTree(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建最大堆</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@paramdata</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@paramheapSize</span>需要创建最大堆的大小，一般在sort的时候用到，因为最多值放在末尾，末尾就不再归入最大堆了</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@paramindex</span>当前需要创建最大堆的位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span>  <span class=\"keyword\">void</span> <span class=\"title\">maxHeapify</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data, <span class=\"keyword\">int</span> heapSize, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//当前点与左右子节点比较</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = getChildLeftIndex(index);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = getChildRightIndex(index);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;index=&quot;</span> + index + <span class=\"string\">&quot; left=&quot;</span> + left+<span class=\"string\">&quot; right=&quot;</span> + right);</span><br><span class=\"line\">        printTree(data);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> largest = index;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; heapSize &amp;&amp; data[index] &lt; data[left]) &#123;</span><br><span class=\"line\">            largest = left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right &lt; heapSize &amp;&amp; data[largest] &lt; data[right]) &#123;</span><br><span class=\"line\">            largest = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//得到最大值后可能需要交换，如果交换了，其子节点可能就不是最大堆了，需要重新调整</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (largest != index) &#123;</span><br><span class=\"line\">            swap(data, largest, index);</span><br><span class=\"line\">            maxHeapify(data, heapSize, largest);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 父节点位置</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@paramcurrent</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getParentIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> current)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (current - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 左子节点position注意括号，加法优先级更高</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@paramcurrent</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildLeftIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> current)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (current &lt;&lt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 右子节点position</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@paramcurrent</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildRightIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> current)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (current &lt;&lt; <span class=\"number\">1</span>) + <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pre = -<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pre &lt; (<span class=\"keyword\">int</span>) getLog(i + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                pre = (<span class=\"keyword\">int</span>) getLog(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">                System.out.println();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.print(data[i] + <span class=\"string\">&quot;|&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 以2为底的对数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@paramparam</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">getLog</span><span class=\"params\">(<span class=\"keyword\">double</span> param)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.log(param) / Math.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"计数排序","_content":"\n\n### 计数排序\n\n```java\npackage org.coral.algorithm.sort;\n\n/**\n *\n 1.找出待排序的数组中最大和最小的元素；\n 2.统计数组中每个值为i的元素出现的次数,存入数组C的第i项；\n 3.对所有的计数累加(从C中的第一个元素开始,每一项和前一项相加）；\n 4.反向填充目标数组:将每个元素i放在新数组的第C(i)项,每放一个元素就将C(i)减去1.\n\n */\npublic class CountSort implements Sort {\n    public static void main(String[] args) {\n        int[] numbers = {34, 12, 23, 56, 56, 56, 78};\n        CountSort countSort = new CountSort();\n        countSort.print(numbers);\n        countSort.sort(numbers);\n\n    }\n    @Override\n    public void sort(int[] numbers) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n\n        //找出数组中的最大最小值\n        for(int i = 0; i < numbers.length; i++){\n            max = Math.max(max, numbers[i]);\n            min = Math.min(min, numbers[i]);\n        }\n\n        int[] help = new int[max - min + 1];\n\n        //找出每个数字出现的次数\n        for(int i = 0; i < numbers.length; i++){\n            int mapPos = numbers[i] - min;\n            help[mapPos]++;\n        }\n\n        //计算每个数字应该在排序后数组中应该处于的位置\n        for(int i = 1; i < help.length; i++){\n            help[i] = help[i-1] + help[i];\n        }\n\n        //根据help数组进行排序\n        int res[] = new int[numbers.length];\n        for(int i = 0; i < numbers.length; i++){\n            int post = --help[numbers[i] - min];\n            res[post] = numbers[i];\n        }\n\n        print(res);\n    }\n}\n```\n","source":"_posts/algorithm/sort/7.计数排序.md","raw":"---\ntitle: 计数排序\ncategories:\n- algorithm\ntag:\n- sort\n---\n\n\n### 计数排序\n\n```java\npackage org.coral.algorithm.sort;\n\n/**\n *\n 1.找出待排序的数组中最大和最小的元素；\n 2.统计数组中每个值为i的元素出现的次数,存入数组C的第i项；\n 3.对所有的计数累加(从C中的第一个元素开始,每一项和前一项相加）；\n 4.反向填充目标数组:将每个元素i放在新数组的第C(i)项,每放一个元素就将C(i)减去1.\n\n */\npublic class CountSort implements Sort {\n    public static void main(String[] args) {\n        int[] numbers = {34, 12, 23, 56, 56, 56, 78};\n        CountSort countSort = new CountSort();\n        countSort.print(numbers);\n        countSort.sort(numbers);\n\n    }\n    @Override\n    public void sort(int[] numbers) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n\n        //找出数组中的最大最小值\n        for(int i = 0; i < numbers.length; i++){\n            max = Math.max(max, numbers[i]);\n            min = Math.min(min, numbers[i]);\n        }\n\n        int[] help = new int[max - min + 1];\n\n        //找出每个数字出现的次数\n        for(int i = 0; i < numbers.length; i++){\n            int mapPos = numbers[i] - min;\n            help[mapPos]++;\n        }\n\n        //计算每个数字应该在排序后数组中应该处于的位置\n        for(int i = 1; i < help.length; i++){\n            help[i] = help[i-1] + help[i];\n        }\n\n        //根据help数组进行排序\n        int res[] = new int[numbers.length];\n        for(int i = 0; i < numbers.length; i++){\n            int post = --help[numbers[i] - min];\n            res[post] = numbers[i];\n        }\n\n        print(res);\n    }\n}\n```\n","slug":"algorithm/sort/7.计数排序","published":1,"date":"2021-09-14T15:07:45.045Z","updated":"2021-09-14T15:07:45.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyi4000uu6ukhyhl008d","content":"<h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.coral.algorithm.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> 1.找出待排序的数组中最大和最小的元素；</span></span><br><span class=\"line\"><span class=\"comment\"> 2.统计数组中每个值为i的元素出现的次数,存入数组C的第i项；</span></span><br><span class=\"line\"><span class=\"comment\"> 3.对所有的计数累加(从C中的第一个元素开始,每一项和前一项相加）；</span></span><br><span class=\"line\"><span class=\"comment\"> 4.反向填充目标数组:将每个元素i放在新数组的第C(i)项,每放一个元素就将C(i)减去1.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CountSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123;<span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        CountSort countSort = <span class=\"keyword\">new</span> CountSort();</span><br><span class=\"line\">        countSort.print(numbers);</span><br><span class=\"line\">        countSort.sort(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] numbers)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//找出数组中的最大最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class=\"line\">            max = Math.max(max, numbers[i]);</span><br><span class=\"line\">            min = Math.min(min, numbers[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] help = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max - min + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//找出每个数字出现的次数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mapPos = numbers[i] - min;</span><br><span class=\"line\">            help[mapPos]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//计算每个数字应该在排序后数组中应该处于的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; help.length; i++)&#123;</span><br><span class=\"line\">            help[i] = help[i-<span class=\"number\">1</span>] + help[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据help数组进行排序</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> res[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[numbers.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> post = --help[numbers[i] - min];</span><br><span class=\"line\">            res[post] = numbers[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        print(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.coral.algorithm.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> 1.找出待排序的数组中最大和最小的元素；</span></span><br><span class=\"line\"><span class=\"comment\"> 2.统计数组中每个值为i的元素出现的次数,存入数组C的第i项；</span></span><br><span class=\"line\"><span class=\"comment\"> 3.对所有的计数累加(从C中的第一个元素开始,每一项和前一项相加）；</span></span><br><span class=\"line\"><span class=\"comment\"> 4.反向填充目标数组:将每个元素i放在新数组的第C(i)项,每放一个元素就将C(i)减去1.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CountSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123;<span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        CountSort countSort = <span class=\"keyword\">new</span> CountSort();</span><br><span class=\"line\">        countSort.print(numbers);</span><br><span class=\"line\">        countSort.sort(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] numbers)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//找出数组中的最大最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class=\"line\">            max = Math.max(max, numbers[i]);</span><br><span class=\"line\">            min = Math.min(min, numbers[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] help = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max - min + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//找出每个数字出现的次数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mapPos = numbers[i] - min;</span><br><span class=\"line\">            help[mapPos]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//计算每个数字应该在排序后数组中应该处于的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; help.length; i++)&#123;</span><br><span class=\"line\">            help[i] = help[i-<span class=\"number\">1</span>] + help[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据help数组进行排序</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> res[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[numbers.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> post = --help[numbers[i] - min];</span><br><span class=\"line\">            res[post] = numbers[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        print(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"桶排序","_content":"\n\n### 桶排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\n/**\n *  桶排序\n * <p>\n 桶排序的基本思想是： 把数组 arr 划分为 n 个大小相同子区间（桶），每个子区间各自排序，最\n 后合并 。计数排序是桶排序的一种特殊情况，可以把计数排序当成每个桶里只有一个元素的情况。\n 1.找出待排序数组中的最大值 max、最小值 min\n 2.我们使用 动态数组 ArrayList 作为桶，桶里放的元素也用 ArrayList 存储。桶的数量为(max\n min)/arr.length+1\n 3.遍历数组 arr，计算每个元素 arr[i] 放的桶\n 4.每个桶各自排序\n */\npublic class BucketSort implements Sort {\n    public static void main(String[] args) {\n        int[] numbers = {34, 12, 23, 56, 56, 56, 78};\n        BucketSort bucketSort = new BucketSort();\n        System.out.println(\"BucketSort\");\n        bucketSort.sort(numbers);\n        bucketSort.print(numbers);\n\n    }\n\n\n    @Override\n    public void sort(int[] arr) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.length; i++) {\n            max = Math.max(max, arr[i]);\n            min = Math.min(min, arr[i]);\n        }\n        //创建桶\n        int bucketNum = (max - min) / arr.length + 1;\n        ArrayList<ArrayList<Integer>> bucketArr = new ArrayList<>(bucketNum);\n        for (int i = 0; i < bucketNum; i++) {\n            bucketArr.add(new ArrayList<Integer>());\n        }\n        //将每个元素放入桶\n        for (int i = 0; i < arr.length; i++) {\n            int num = (arr[i] - min) / (arr.length);\n            bucketArr.get(num).add(arr[i]);\n        }\n        //对每个桶进行排序\n        for (int i = 0; i < bucketArr.size(); i++) {\n            Collections.sort(bucketArr.get(i));\n        }\n    }\n\n\n}\n```\n","source":"_posts/algorithm/sort/8-桶排序.md","raw":"---\ntitle: 桶排序\ncategories:\n- algorithm\ntag:\n- sort\n---\n\n\n### 桶排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\n/**\n *  桶排序\n * <p>\n 桶排序的基本思想是： 把数组 arr 划分为 n 个大小相同子区间（桶），每个子区间各自排序，最\n 后合并 。计数排序是桶排序的一种特殊情况，可以把计数排序当成每个桶里只有一个元素的情况。\n 1.找出待排序数组中的最大值 max、最小值 min\n 2.我们使用 动态数组 ArrayList 作为桶，桶里放的元素也用 ArrayList 存储。桶的数量为(max\n min)/arr.length+1\n 3.遍历数组 arr，计算每个元素 arr[i] 放的桶\n 4.每个桶各自排序\n */\npublic class BucketSort implements Sort {\n    public static void main(String[] args) {\n        int[] numbers = {34, 12, 23, 56, 56, 56, 78};\n        BucketSort bucketSort = new BucketSort();\n        System.out.println(\"BucketSort\");\n        bucketSort.sort(numbers);\n        bucketSort.print(numbers);\n\n    }\n\n\n    @Override\n    public void sort(int[] arr) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.length; i++) {\n            max = Math.max(max, arr[i]);\n            min = Math.min(min, arr[i]);\n        }\n        //创建桶\n        int bucketNum = (max - min) / arr.length + 1;\n        ArrayList<ArrayList<Integer>> bucketArr = new ArrayList<>(bucketNum);\n        for (int i = 0; i < bucketNum; i++) {\n            bucketArr.add(new ArrayList<Integer>());\n        }\n        //将每个元素放入桶\n        for (int i = 0; i < arr.length; i++) {\n            int num = (arr[i] - min) / (arr.length);\n            bucketArr.get(num).add(arr[i]);\n        }\n        //对每个桶进行排序\n        for (int i = 0; i < bucketArr.size(); i++) {\n            Collections.sort(bucketArr.get(i));\n        }\n    }\n\n\n}\n```\n","slug":"algorithm/sort/8-桶排序","published":1,"date":"2021-09-14T15:07:45.059Z","updated":"2021-09-14T15:07:45.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyi6000yu6uk94jg9nfh","content":"<h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  桶排序</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> 桶排序的基本思想是： 把数组 arr 划分为 n 个大小相同子区间（桶），每个子区间各自排序，最</span></span><br><span class=\"line\"><span class=\"comment\"> 后合并 。计数排序是桶排序的一种特殊情况，可以把计数排序当成每个桶里只有一个元素的情况。</span></span><br><span class=\"line\"><span class=\"comment\"> 1.找出待排序数组中的最大值 max、最小值 min</span></span><br><span class=\"line\"><span class=\"comment\"> 2.我们使用 动态数组 ArrayList 作为桶，桶里放的元素也用 ArrayList 存储。桶的数量为(max</span></span><br><span class=\"line\"><span class=\"comment\"> min)/arr.length+1</span></span><br><span class=\"line\"><span class=\"comment\"> 3.遍历数组 arr，计算每个元素 arr[i] 放的桶</span></span><br><span class=\"line\"><span class=\"comment\"> 4.每个桶各自排序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BucketSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123;<span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        BucketSort bucketSort = <span class=\"keyword\">new</span> BucketSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BucketSort&quot;</span>);</span><br><span class=\"line\">        bucketSort.sort(numbers);</span><br><span class=\"line\">        bucketSort.print(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            max = Math.max(max, arr[i]);</span><br><span class=\"line\">            min = Math.min(min, arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//创建桶</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> bucketNum = (max - min) / arr.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketArr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(bucketNum);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bucketNum; i++) &#123;</span><br><span class=\"line\">            bucketArr.add(<span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将每个元素放入桶</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> num = (arr[i] - min) / (arr.length);</span><br><span class=\"line\">            bucketArr.get(num).add(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//对每个桶进行排序</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bucketArr.size(); i++) &#123;</span><br><span class=\"line\">            Collections.sort(bucketArr.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  桶排序</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> 桶排序的基本思想是： 把数组 arr 划分为 n 个大小相同子区间（桶），每个子区间各自排序，最</span></span><br><span class=\"line\"><span class=\"comment\"> 后合并 。计数排序是桶排序的一种特殊情况，可以把计数排序当成每个桶里只有一个元素的情况。</span></span><br><span class=\"line\"><span class=\"comment\"> 1.找出待排序数组中的最大值 max、最小值 min</span></span><br><span class=\"line\"><span class=\"comment\"> 2.我们使用 动态数组 ArrayList 作为桶，桶里放的元素也用 ArrayList 存储。桶的数量为(max</span></span><br><span class=\"line\"><span class=\"comment\"> min)/arr.length+1</span></span><br><span class=\"line\"><span class=\"comment\"> 3.遍历数组 arr，计算每个元素 arr[i] 放的桶</span></span><br><span class=\"line\"><span class=\"comment\"> 4.每个桶各自排序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BucketSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123;<span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        BucketSort bucketSort = <span class=\"keyword\">new</span> BucketSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BucketSort&quot;</span>);</span><br><span class=\"line\">        bucketSort.sort(numbers);</span><br><span class=\"line\">        bucketSort.print(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            max = Math.max(max, arr[i]);</span><br><span class=\"line\">            min = Math.min(min, arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//创建桶</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> bucketNum = (max - min) / arr.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketArr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(bucketNum);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bucketNum; i++) &#123;</span><br><span class=\"line\">            bucketArr.add(<span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将每个元素放入桶</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> num = (arr[i] - min) / (arr.length);</span><br><span class=\"line\">            bucketArr.get(num).add(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//对每个桶进行排序</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bucketArr.size(); i++) &#123;</span><br><span class=\"line\">            Collections.sort(bucketArr.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"基数排序","_content":"\n\n### 基数排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\n/**\n * 基数排序\n * 将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位\n * 开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序\n * 列。\n */\npublic class RadixSort implements Sort {\n    public static void main(String[] args) {\n        int[] numbers = {34, 12, 23, 56, 56, 56, 78};\n        RadixSort radixSort = new RadixSort();\n        System.out.println(\"RadixSort\");\n        radixSort.sort(numbers);\n        radixSort.print(numbers);\n\n    }\n\n\n    @Override\n    public void sort(int[] array) {\n        //首先确定排序的趟数;\n        int max = array[0];\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] > max) {\n                max = array[i];\n            }\n        }\n        int time = 0;\n        //判断位数;\n        while (max > 0) {\n            max /= 10;\n            time++;\n        }\n        //建立 10 个队列;\n        List<ArrayList> queue = new ArrayList<ArrayList>();\n        for (int i = 0; i < 10; i++) {\n            ArrayList<Integer> queue1 = new ArrayList<Integer>();\n            queue.add(queue1);\n        }\n        //进行 time 次分配和收集;\n        for (int i = 0; i < time; i++) {\n            //分配数组元素;\n            for (int j = 0; j < array.length; j++) {\n                //得到数字的第 time+1 位数;\n                int x = array[j] % (int) Math.pow(10, i + 1) / (int) Math.pow(10, i);\n                ArrayList<Integer> queue2 = queue.get(x);\n                queue2.add(array[j]);\n                queue.set(x, queue2);\n            }\n            int count = 0;//元素计数器;\n            //收集队列元素;\n            for (int k = 0; k < 10; k++) {\n                while (queue.get(k).size() > 0) {\n                    ArrayList<Integer> queue3 = queue.get(k);\n                    array[count] = queue3.get(0);\n                    queue3.remove(0);\n                    count++;\n                }\n            }\n        }\n    }\n\n\n}\n```\n","source":"_posts/algorithm/sort/9-基数排序.md","raw":"---\ntitle: 基数排序\ncategories:\n- algorithm\ntag:\n- sort\n---\n\n\n### 基数排序\n\n[详细参考](https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort)\n\n```java\n/**\n * 基数排序\n * 将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位\n * 开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序\n * 列。\n */\npublic class RadixSort implements Sort {\n    public static void main(String[] args) {\n        int[] numbers = {34, 12, 23, 56, 56, 56, 78};\n        RadixSort radixSort = new RadixSort();\n        System.out.println(\"RadixSort\");\n        radixSort.sort(numbers);\n        radixSort.print(numbers);\n\n    }\n\n\n    @Override\n    public void sort(int[] array) {\n        //首先确定排序的趟数;\n        int max = array[0];\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] > max) {\n                max = array[i];\n            }\n        }\n        int time = 0;\n        //判断位数;\n        while (max > 0) {\n            max /= 10;\n            time++;\n        }\n        //建立 10 个队列;\n        List<ArrayList> queue = new ArrayList<ArrayList>();\n        for (int i = 0; i < 10; i++) {\n            ArrayList<Integer> queue1 = new ArrayList<Integer>();\n            queue.add(queue1);\n        }\n        //进行 time 次分配和收集;\n        for (int i = 0; i < time; i++) {\n            //分配数组元素;\n            for (int j = 0; j < array.length; j++) {\n                //得到数字的第 time+1 位数;\n                int x = array[j] % (int) Math.pow(10, i + 1) / (int) Math.pow(10, i);\n                ArrayList<Integer> queue2 = queue.get(x);\n                queue2.add(array[j]);\n                queue.set(x, queue2);\n            }\n            int count = 0;//元素计数器;\n            //收集队列元素;\n            for (int k = 0; k < 10; k++) {\n                while (queue.get(k).size() > 0) {\n                    ArrayList<Integer> queue3 = queue.get(k);\n                    array[count] = queue3.get(0);\n                    queue3.remove(0);\n                    count++;\n                }\n            }\n        }\n    }\n\n\n}\n```\n","slug":"algorithm/sort/9-基数排序","published":1,"date":"2021-09-14T15:07:45.041Z","updated":"2021-09-14T15:07:45.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyi60011u6uk3in12cgk","content":"<h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 基数排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位</span></span><br><span class=\"line\"><span class=\"comment\"> * 开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序</span></span><br><span class=\"line\"><span class=\"comment\"> * 列。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RadixSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123;<span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        RadixSort radixSort = <span class=\"keyword\">new</span> RadixSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;RadixSort&quot;</span>);</span><br><span class=\"line\">        radixSort.sort(numbers);</span><br><span class=\"line\">        radixSort.print(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//首先确定排序的趟数;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (array[i] &gt; max) &#123;</span><br><span class=\"line\">                max = array[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> time = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//判断位数;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (max &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            max /= <span class=\"number\">10</span>;</span><br><span class=\"line\">            time++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//建立 10 个队列;</span></span><br><span class=\"line\">        List&lt;ArrayList&gt; queue = <span class=\"keyword\">new</span> ArrayList&lt;ArrayList&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            ArrayList&lt;Integer&gt; queue1 = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">            queue.add(queue1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//进行 time 次分配和收集;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; time; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//分配数组元素;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; array.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//得到数字的第 time+1 位数;</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = array[j] % (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">10</span>, i + <span class=\"number\">1</span>) / (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">10</span>, i);</span><br><span class=\"line\">                ArrayList&lt;Integer&gt; queue2 = queue.get(x);</span><br><span class=\"line\">                queue2.add(array[j]);</span><br><span class=\"line\">                queue.set(x, queue2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;<span class=\"comment\">//元素计数器;</span></span><br><span class=\"line\">            <span class=\"comment\">//收集队列元素;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10</span>; k++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (queue.get(k).size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    ArrayList&lt;Integer&gt; queue3 = queue.get(k);</span><br><span class=\"line\">                    array[count] = queue3.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">                    queue3.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><p><a href=\"https://github.com/coral-learning/algorithm-example/tree/master/base/guide/src/main/java/com.coral.learning.alg/udemo/algorithms/sort\">详细参考</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 基数排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位</span></span><br><span class=\"line\"><span class=\"comment\"> * 开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序</span></span><br><span class=\"line\"><span class=\"comment\"> * 列。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RadixSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">Sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123;<span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">78</span>&#125;;</span><br><span class=\"line\">        RadixSort radixSort = <span class=\"keyword\">new</span> RadixSort();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;RadixSort&quot;</span>);</span><br><span class=\"line\">        radixSort.sort(numbers);</span><br><span class=\"line\">        radixSort.print(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//首先确定排序的趟数;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (array[i] &gt; max) &#123;</span><br><span class=\"line\">                max = array[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> time = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//判断位数;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (max &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            max /= <span class=\"number\">10</span>;</span><br><span class=\"line\">            time++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//建立 10 个队列;</span></span><br><span class=\"line\">        List&lt;ArrayList&gt; queue = <span class=\"keyword\">new</span> ArrayList&lt;ArrayList&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            ArrayList&lt;Integer&gt; queue1 = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">            queue.add(queue1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//进行 time 次分配和收集;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; time; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//分配数组元素;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; array.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//得到数字的第 time+1 位数;</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = array[j] % (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">10</span>, i + <span class=\"number\">1</span>) / (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">10</span>, i);</span><br><span class=\"line\">                ArrayList&lt;Integer&gt; queue2 = queue.get(x);</span><br><span class=\"line\">                queue2.add(array[j]);</span><br><span class=\"line\">                queue.set(x, queue2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;<span class=\"comment\">//元素计数器;</span></span><br><span class=\"line\">            <span class=\"comment\">//收集队列元素;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">10</span>; k++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (queue.get(k).size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    ArrayList&lt;Integer&gt; queue3 = queue.get(k);</span><br><span class=\"line\">                    array[count] = queue3.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">                    queue3.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"ftp服务器搭建","_content":"\n### 1.拉取 镜像\n\n```\n\ndocker pull fauria/vsftpd\n```\n\n### 2.启动容器\n\n````\ndocker pull fauria/vsftpd\n\nmkdir /data/ftp\n\ndocker stop vsftpd\n\ndocker rm vsftpd\n\ndocker run -d -v /data/ftp:/home/vsftpd -p 2120:20 -p 2121:21 -p 21100-21110:21100-21110 -e FTP_USER=urcs -e FTP_PASS=urcs@2018 -e PASV_ADDRESS=10.10.208.194 -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 --name vsftpd --restart=always fauria/vsftpd\n\ndocker ps\n\n````\n\n### 3. 进入容器\n\n````\ndocker exec -i -t vsftpd bash 进去docker\n\nvi /etc/vsftpd/virtual_users.txt 编辑配置文件写入用户跟密码\n\nmkdir /home/vsftpd/user 建立新用户文件夹\n\n/usr/bin/db_load -T -t hash -f /etc/vsftpd/virtual_users.txt /etc/vsftpd/virtual_users.db 写入数据库\n\ndocker restart +(虚拟机运行的 imageId) 重启服务\n````","source":"_posts/devops/docker/ftp服务搭建.md","raw":"---\ntitle: ftp服务器搭建\n\ncategories:\n- devops\n\ntag:\n- docker\n- ftp\n---\n\n### 1.拉取 镜像\n\n```\n\ndocker pull fauria/vsftpd\n```\n\n### 2.启动容器\n\n````\ndocker pull fauria/vsftpd\n\nmkdir /data/ftp\n\ndocker stop vsftpd\n\ndocker rm vsftpd\n\ndocker run -d -v /data/ftp:/home/vsftpd -p 2120:20 -p 2121:21 -p 21100-21110:21100-21110 -e FTP_USER=urcs -e FTP_PASS=urcs@2018 -e PASV_ADDRESS=10.10.208.194 -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 --name vsftpd --restart=always fauria/vsftpd\n\ndocker ps\n\n````\n\n### 3. 进入容器\n\n````\ndocker exec -i -t vsftpd bash 进去docker\n\nvi /etc/vsftpd/virtual_users.txt 编辑配置文件写入用户跟密码\n\nmkdir /home/vsftpd/user 建立新用户文件夹\n\n/usr/bin/db_load -T -t hash -f /etc/vsftpd/virtual_users.txt /etc/vsftpd/virtual_users.db 写入数据库\n\ndocker restart +(虚拟机运行的 imageId) 重启服务\n````","slug":"devops/docker/ftp服务搭建","published":1,"date":"2021-09-06T14:29:47.094Z","updated":"2021-09-06T14:29:47.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyi70014u6uk7fzz8glx","content":"<h3 id=\"1-拉取-镜像\"><a href=\"#1-拉取-镜像\" class=\"headerlink\" title=\"1.拉取 镜像\"></a>1.拉取 镜像</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker pull fauria/vsftpd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-启动容器\"><a href=\"#2-启动容器\" class=\"headerlink\" title=\"2.启动容器\"></a>2.启动容器</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull fauria/vsftpd</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir /data/ftp</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop vsftpd</span><br><span class=\"line\"></span><br><span class=\"line\">docker rm vsftpd</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -v /data/ftp:/home/vsftpd -p 2120:20 -p 2121:21 -p 21100-21110:21100-21110 -e FTP_USER=urcs -e FTP_PASS=urcs@2018 -e PASV_ADDRESS=10.10.208.194 -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 --name vsftpd --restart=always fauria/vsftpd</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-进入容器\"><a href=\"#3-进入容器\" class=\"headerlink\" title=\"3. 进入容器\"></a>3. 进入容器</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -i -t vsftpd bash 进去docker</span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/vsftpd/virtual_users.txt 编辑配置文件写入用户跟密码</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir /home/vsftpd/user 建立新用户文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/db_load -T -t hash -f /etc/vsftpd/virtual_users.txt /etc/vsftpd/virtual_users.db 写入数据库</span><br><span class=\"line\"></span><br><span class=\"line\">docker restart +(虚拟机运行的 imageId) 重启服务</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-拉取-镜像\"><a href=\"#1-拉取-镜像\" class=\"headerlink\" title=\"1.拉取 镜像\"></a>1.拉取 镜像</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker pull fauria/vsftpd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-启动容器\"><a href=\"#2-启动容器\" class=\"headerlink\" title=\"2.启动容器\"></a>2.启动容器</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull fauria/vsftpd</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir /data/ftp</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop vsftpd</span><br><span class=\"line\"></span><br><span class=\"line\">docker rm vsftpd</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -v /data/ftp:/home/vsftpd -p 2120:20 -p 2121:21 -p 21100-21110:21100-21110 -e FTP_USER=urcs -e FTP_PASS=urcs@2018 -e PASV_ADDRESS=10.10.208.194 -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 --name vsftpd --restart=always fauria/vsftpd</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-进入容器\"><a href=\"#3-进入容器\" class=\"headerlink\" title=\"3. 进入容器\"></a>3. 进入容器</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -i -t vsftpd bash 进去docker</span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/vsftpd/virtual_users.txt 编辑配置文件写入用户跟密码</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir /home/vsftpd/user 建立新用户文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/db_load -T -t hash -f /etc/vsftpd/virtual_users.txt /etc/vsftpd/virtual_users.db 写入数据库</span><br><span class=\"line\"></span><br><span class=\"line\">docker restart +(虚拟机运行的 imageId) 重启服务</span><br></pre></td></tr></table></figure>"},{"title":"ftp服务器搭建","_content":"## jenkins搭建\n在 macOS 和 Linux 上\n打开一个终端窗口。\n\n下载 jenkinsci/blueocean 镜像并使用以下 docker run 命令将其作为 Docker 中的容器运行 ：\n\n- \n```\nmkdir /data/jenkins_home\n```\n- docker 安装\n\n```\n\ndocker stop jenkins\ndocker rm jenkins\ndocker run \\\n-u root \\\n--name jenkins \\\n-d \\\n-p 8080:8080 \\\n-p 50000:50000 \\\njenkinsci/blueocean\n\ndocker update jenkins --restart=always\n\ndocker stop jenkins\ndocker rm jenkins\ndocker run \\\n-u root \\\n--name jenkins \\\n-d \\\n-p 8080:8080 \\\n-p 50000:50000 \\\njenkinsci/blueocean\n\ndocker update jenkins --restart=always\n```\n\n- 查询密码\n```\n访问 jenkins 地址\n/var/jenkins_home/secrets/initialAdminPassword\n```\n\n","source":"_posts/devops/docker/jenkins搭建.md","raw":"---\ntitle: ftp服务器搭建\n\ncategories:\n- devops\n\ntag:\n- jenkins\n\n---\n## jenkins搭建\n在 macOS 和 Linux 上\n打开一个终端窗口。\n\n下载 jenkinsci/blueocean 镜像并使用以下 docker run 命令将其作为 Docker 中的容器运行 ：\n\n- \n```\nmkdir /data/jenkins_home\n```\n- docker 安装\n\n```\n\ndocker stop jenkins\ndocker rm jenkins\ndocker run \\\n-u root \\\n--name jenkins \\\n-d \\\n-p 8080:8080 \\\n-p 50000:50000 \\\njenkinsci/blueocean\n\ndocker update jenkins --restart=always\n\ndocker stop jenkins\ndocker rm jenkins\ndocker run \\\n-u root \\\n--name jenkins \\\n-d \\\n-p 8080:8080 \\\n-p 50000:50000 \\\njenkinsci/blueocean\n\ndocker update jenkins --restart=always\n```\n\n- 查询密码\n```\n访问 jenkins 地址\n/var/jenkins_home/secrets/initialAdminPassword\n```\n\n","slug":"devops/docker/jenkins搭建","published":1,"date":"2021-09-06T14:29:47.095Z","updated":"2021-09-06T14:29:47.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyi80018u6ukb24m9bfp","content":"<h2 id=\"jenkins搭建\"><a href=\"#jenkins搭建\" class=\"headerlink\" title=\"jenkins搭建\"></a>jenkins搭建</h2><p>在 macOS 和 Linux 上<br>打开一个终端窗口。</p>\n<p>下载 jenkinsci/blueocean 镜像并使用以下 docker run 命令将其作为 Docker 中的容器运行 ：</p>\n<ul>\n<li><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data/jenkins_home</span><br></pre></td></tr></table></figure></li>\n<li>docker 安装</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker stop jenkins</span><br><span class=\"line\">docker rm jenkins</span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">-u root \\</span><br><span class=\"line\">--name jenkins \\</span><br><span class=\"line\">-d \\</span><br><span class=\"line\">-p 8080:8080 \\</span><br><span class=\"line\">-p 50000:50000 \\</span><br><span class=\"line\">jenkinsci/blueocean</span><br><span class=\"line\"></span><br><span class=\"line\">docker update jenkins --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop jenkins</span><br><span class=\"line\">docker rm jenkins</span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">-u root \\</span><br><span class=\"line\">--name jenkins \\</span><br><span class=\"line\">-d \\</span><br><span class=\"line\">-p 8080:8080 \\</span><br><span class=\"line\">-p 50000:50000 \\</span><br><span class=\"line\">jenkinsci/blueocean</span><br><span class=\"line\"></span><br><span class=\"line\">docker update jenkins --restart=always</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查询密码<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问 jenkins 地址</span><br><span class=\"line\">/var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"jenkins搭建\"><a href=\"#jenkins搭建\" class=\"headerlink\" title=\"jenkins搭建\"></a>jenkins搭建</h2><p>在 macOS 和 Linux 上<br>打开一个终端窗口。</p>\n<p>下载 jenkinsci/blueocean 镜像并使用以下 docker run 命令将其作为 Docker 中的容器运行 ：</p>\n<ul>\n<li><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data/jenkins_home</span><br></pre></td></tr></table></figure></li>\n<li>docker 安装</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker stop jenkins</span><br><span class=\"line\">docker rm jenkins</span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">-u root \\</span><br><span class=\"line\">--name jenkins \\</span><br><span class=\"line\">-d \\</span><br><span class=\"line\">-p 8080:8080 \\</span><br><span class=\"line\">-p 50000:50000 \\</span><br><span class=\"line\">jenkinsci/blueocean</span><br><span class=\"line\"></span><br><span class=\"line\">docker update jenkins --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop jenkins</span><br><span class=\"line\">docker rm jenkins</span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">-u root \\</span><br><span class=\"line\">--name jenkins \\</span><br><span class=\"line\">-d \\</span><br><span class=\"line\">-p 8080:8080 \\</span><br><span class=\"line\">-p 50000:50000 \\</span><br><span class=\"line\">jenkinsci/blueocean</span><br><span class=\"line\"></span><br><span class=\"line\">docker update jenkins --restart=always</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查询密码<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问 jenkins 地址</span><br><span class=\"line\">/var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"nexus服务搭建","_content":"\n## nexus\n\n### 安装\n```\nrm -rf /home/wuhao/nexus\nmkdir /home/wuhao/nexus\ndocker stop nexus\ndocker rm nexus\ndocker run -d --name nexus -p 5260:8081 -p 5261:8082 -p 5262:8083 -p 5263:8084  -p 5264:5000 -v /home/wuhao/nexus:/var/nexus-data sonatype/nexus3\ndocker logs -f nexus\n```\n### 配置\n\n```\n\nhttp://10.10.208.193:5260/\n\nbash-4.0$ cd /nexus-data/\n\nbash-4.0$ ls\nadmin.password\tblobs  cache  db  elasticsearch  etc  generated-bundles  instances  javaprefs  kar  keystores  lock  log  orient  port\trestore-from-backup  tmp\n\nbash-4.0$ cat admin.password\n51a030af-f7ab-43d5-875e-3c2775dbae2c\n\n登录进去修改密码~~\n注意修改密码之后，提示是否开启anonymous模式，这个要勾选，否则public需要密码访问\n\n```\n","source":"_posts/devops/docker/nexus服务搭建.md","raw":"---\ntitle: nexus服务搭建\n\ncategories:\n- devops\n\ntag:\n- docker\n- nexus\n---\n\n## nexus\n\n### 安装\n```\nrm -rf /home/wuhao/nexus\nmkdir /home/wuhao/nexus\ndocker stop nexus\ndocker rm nexus\ndocker run -d --name nexus -p 5260:8081 -p 5261:8082 -p 5262:8083 -p 5263:8084  -p 5264:5000 -v /home/wuhao/nexus:/var/nexus-data sonatype/nexus3\ndocker logs -f nexus\n```\n### 配置\n\n```\n\nhttp://10.10.208.193:5260/\n\nbash-4.0$ cd /nexus-data/\n\nbash-4.0$ ls\nadmin.password\tblobs  cache  db  elasticsearch  etc  generated-bundles  instances  javaprefs  kar  keystores  lock  log  orient  port\trestore-from-backup  tmp\n\nbash-4.0$ cat admin.password\n51a030af-f7ab-43d5-875e-3c2775dbae2c\n\n登录进去修改密码~~\n注意修改密码之后，提示是否开启anonymous模式，这个要勾选，否则public需要密码访问\n\n```\n","slug":"devops/docker/nexus服务搭建","published":1,"date":"2021-09-06T14:29:47.095Z","updated":"2021-09-06T14:29:47.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyia001cu6uk5g3tagz3","content":"<h2 id=\"nexus\"><a href=\"#nexus\" class=\"headerlink\" title=\"nexus\"></a>nexus</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /home/wuhao/nexus</span><br><span class=\"line\">mkdir /home/wuhao/nexus</span><br><span class=\"line\">docker stop nexus</span><br><span class=\"line\">docker rm nexus</span><br><span class=\"line\">docker run -d --name nexus -p 5260:8081 -p 5261:8082 -p 5262:8083 -p 5263:8084  -p 5264:5000 -v /home/wuhao/nexus:/var/nexus-data sonatype/nexus3</span><br><span class=\"line\">docker logs -f nexus</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">http://10.10.208.193:5260/</span><br><span class=\"line\"></span><br><span class=\"line\">bash-4.0$ cd /nexus-data/</span><br><span class=\"line\"></span><br><span class=\"line\">bash-4.0$ ls</span><br><span class=\"line\">admin.password\tblobs  cache  db  elasticsearch  etc  generated-bundles  instances  javaprefs  kar  keystores  lock  log  orient  port\trestore-from-backup  tmp</span><br><span class=\"line\"></span><br><span class=\"line\">bash-4.0$ cat admin.password</span><br><span class=\"line\">51a030af-f7ab-43d5-875e-3c2775dbae2c</span><br><span class=\"line\"></span><br><span class=\"line\">登录进去修改密码~~</span><br><span class=\"line\">注意修改密码之后，提示是否开启anonymous模式，这个要勾选，否则public需要密码访问</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"nexus\"><a href=\"#nexus\" class=\"headerlink\" title=\"nexus\"></a>nexus</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /home/wuhao/nexus</span><br><span class=\"line\">mkdir /home/wuhao/nexus</span><br><span class=\"line\">docker stop nexus</span><br><span class=\"line\">docker rm nexus</span><br><span class=\"line\">docker run -d --name nexus -p 5260:8081 -p 5261:8082 -p 5262:8083 -p 5263:8084  -p 5264:5000 -v /home/wuhao/nexus:/var/nexus-data sonatype/nexus3</span><br><span class=\"line\">docker logs -f nexus</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">http://10.10.208.193:5260/</span><br><span class=\"line\"></span><br><span class=\"line\">bash-4.0$ cd /nexus-data/</span><br><span class=\"line\"></span><br><span class=\"line\">bash-4.0$ ls</span><br><span class=\"line\">admin.password\tblobs  cache  db  elasticsearch  etc  generated-bundles  instances  javaprefs  kar  keystores  lock  log  orient  port\trestore-from-backup  tmp</span><br><span class=\"line\"></span><br><span class=\"line\">bash-4.0$ cat admin.password</span><br><span class=\"line\">51a030af-f7ab-43d5-875e-3c2775dbae2c</span><br><span class=\"line\"></span><br><span class=\"line\">登录进去修改密码~~</span><br><span class=\"line\">注意修改密码之后，提示是否开启anonymous模式，这个要勾选，否则public需要密码访问</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"一体化环境搭建","_content":"\n\n## prometheus+grafana\n\n### 安装\n\n- 默认配置\n\n```\ndocker stop prometheus\ndocker rm prometheus\ndocker run -d --name=prometheus  -p 9090:9090  prom/prometheus\ndocker update prometheus --restart=always\n\ndocker stop grafana\ndocker rm grafana\ndocker run -d --name=grafana  -p 3000:3000 grafana/grafana\ndocker update grafana --restart=always\n```\n\n- 修改配置\n\n```\ndocker stop prometheus\ndocker rm prometheus\ndocker run -d --name=prometheus  -p 9090:9090  -v /home/rcloud/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus\ndocker update prometheus --restart=always\n```\n\n```\nglobal:\n  # 默认情况下，每15s拉取一次目标采样点数据。\n  scrape_interval:     15s\n  # 我们可以附加一些指定标签到采样点度量标签列表中, 用于和第三方系统进行通信, 包括：federation, remote storage, Alertmanager\n  external_labels:\n    # 下面就是拉取自身服务采样点数据配置\n    monitor: 'codelab-monitor'\nscrape_configs:\n  # job名称会增加到拉取到的所有采样点上，同时还有一个instance目标服务的host：port标签也会增加到采样点上\n  - job_name: 'prometheus'\n    # 覆盖global的采样点，拉取时间间隔5s\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n```\n\n### 登录配置\n\n- 登录 http://127.0.0.1:3000\n- 修改密码 默认 admin admin\n- 配置 DataSource 127.0.0.1:9090\n- 添加面板\n\napp(metrics)--data--> (?) + prometheus + grafana\n","source":"_posts/devops/docker/prometheus-grafana.md","raw":"---\ntitle: 一体化环境搭建\n\ncategories:\n- devops\n\ntag:\n- docker\n- grafana\n- prometheus\n---\n\n\n## prometheus+grafana\n\n### 安装\n\n- 默认配置\n\n```\ndocker stop prometheus\ndocker rm prometheus\ndocker run -d --name=prometheus  -p 9090:9090  prom/prometheus\ndocker update prometheus --restart=always\n\ndocker stop grafana\ndocker rm grafana\ndocker run -d --name=grafana  -p 3000:3000 grafana/grafana\ndocker update grafana --restart=always\n```\n\n- 修改配置\n\n```\ndocker stop prometheus\ndocker rm prometheus\ndocker run -d --name=prometheus  -p 9090:9090  -v /home/rcloud/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus\ndocker update prometheus --restart=always\n```\n\n```\nglobal:\n  # 默认情况下，每15s拉取一次目标采样点数据。\n  scrape_interval:     15s\n  # 我们可以附加一些指定标签到采样点度量标签列表中, 用于和第三方系统进行通信, 包括：federation, remote storage, Alertmanager\n  external_labels:\n    # 下面就是拉取自身服务采样点数据配置\n    monitor: 'codelab-monitor'\nscrape_configs:\n  # job名称会增加到拉取到的所有采样点上，同时还有一个instance目标服务的host：port标签也会增加到采样点上\n  - job_name: 'prometheus'\n    # 覆盖global的采样点，拉取时间间隔5s\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n```\n\n### 登录配置\n\n- 登录 http://127.0.0.1:3000\n- 修改密码 默认 admin admin\n- 配置 DataSource 127.0.0.1:9090\n- 添加面板\n\napp(metrics)--data--> (?) + prometheus + grafana\n","slug":"devops/docker/prometheus-grafana","published":1,"date":"2021-09-14T14:44:53.221Z","updated":"2021-09-14T14:44:53.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyib001gu6uk2xc06uxn","content":"<h2 id=\"prometheus-grafana\"><a href=\"#prometheus-grafana\" class=\"headerlink\" title=\"prometheus+grafana\"></a>prometheus+grafana</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li>默认配置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop prometheus</span><br><span class=\"line\">docker rm prometheus</span><br><span class=\"line\">docker run -d --name=prometheus  -p 9090:9090  prom/prometheus</span><br><span class=\"line\">docker update prometheus --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop grafana</span><br><span class=\"line\">docker rm grafana</span><br><span class=\"line\">docker run -d --name=grafana  -p 3000:3000 grafana/grafana</span><br><span class=\"line\">docker update grafana --restart=always</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改配置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop prometheus</span><br><span class=\"line\">docker rm prometheus</span><br><span class=\"line\">docker run -d --name=prometheus  -p 9090:9090  -v /home/rcloud/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus</span><br><span class=\"line\">docker update prometheus --restart=always</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global:</span><br><span class=\"line\">  # 默认情况下，每15s拉取一次目标采样点数据。</span><br><span class=\"line\">  scrape_interval:     15s</span><br><span class=\"line\">  # 我们可以附加一些指定标签到采样点度量标签列表中, 用于和第三方系统进行通信, 包括：federation, remote storage, Alertmanager</span><br><span class=\"line\">  external_labels:</span><br><span class=\"line\">    # 下面就是拉取自身服务采样点数据配置</span><br><span class=\"line\">    monitor: &#x27;codelab-monitor&#x27;</span><br><span class=\"line\">scrape_configs:</span><br><span class=\"line\">  # job名称会增加到拉取到的所有采样点上，同时还有一个instance目标服务的host：port标签也会增加到采样点上</span><br><span class=\"line\">  - job_name: &#x27;prometheus&#x27;</span><br><span class=\"line\">    # 覆盖global的采样点，拉取时间间隔5s</span><br><span class=\"line\">    scrape_interval: 5s</span><br><span class=\"line\">    static_configs:</span><br><span class=\"line\">      - targets: [&#x27;localhost:9090&#x27;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"登录配置\"><a href=\"#登录配置\" class=\"headerlink\" title=\"登录配置\"></a>登录配置</h3><ul>\n<li>登录 <a href=\"http://127.0.0.1:3000/\">http://127.0.0.1:3000</a></li>\n<li>修改密码 默认 admin admin</li>\n<li>配置 DataSource 127.0.0.1:9090</li>\n<li>添加面板</li>\n</ul>\n<p>app(metrics)–data–&gt; (?) + prometheus + grafana</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"prometheus-grafana\"><a href=\"#prometheus-grafana\" class=\"headerlink\" title=\"prometheus+grafana\"></a>prometheus+grafana</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li>默认配置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop prometheus</span><br><span class=\"line\">docker rm prometheus</span><br><span class=\"line\">docker run -d --name=prometheus  -p 9090:9090  prom/prometheus</span><br><span class=\"line\">docker update prometheus --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop grafana</span><br><span class=\"line\">docker rm grafana</span><br><span class=\"line\">docker run -d --name=grafana  -p 3000:3000 grafana/grafana</span><br><span class=\"line\">docker update grafana --restart=always</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改配置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop prometheus</span><br><span class=\"line\">docker rm prometheus</span><br><span class=\"line\">docker run -d --name=prometheus  -p 9090:9090  -v /home/rcloud/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus</span><br><span class=\"line\">docker update prometheus --restart=always</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global:</span><br><span class=\"line\">  # 默认情况下，每15s拉取一次目标采样点数据。</span><br><span class=\"line\">  scrape_interval:     15s</span><br><span class=\"line\">  # 我们可以附加一些指定标签到采样点度量标签列表中, 用于和第三方系统进行通信, 包括：federation, remote storage, Alertmanager</span><br><span class=\"line\">  external_labels:</span><br><span class=\"line\">    # 下面就是拉取自身服务采样点数据配置</span><br><span class=\"line\">    monitor: &#x27;codelab-monitor&#x27;</span><br><span class=\"line\">scrape_configs:</span><br><span class=\"line\">  # job名称会增加到拉取到的所有采样点上，同时还有一个instance目标服务的host：port标签也会增加到采样点上</span><br><span class=\"line\">  - job_name: &#x27;prometheus&#x27;</span><br><span class=\"line\">    # 覆盖global的采样点，拉取时间间隔5s</span><br><span class=\"line\">    scrape_interval: 5s</span><br><span class=\"line\">    static_configs:</span><br><span class=\"line\">      - targets: [&#x27;localhost:9090&#x27;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"登录配置\"><a href=\"#登录配置\" class=\"headerlink\" title=\"登录配置\"></a>登录配置</h3><ul>\n<li>登录 <a href=\"http://127.0.0.1:3000/\">http://127.0.0.1:3000</a></li>\n<li>修改密码 默认 admin admin</li>\n<li>配置 DataSource 127.0.0.1:9090</li>\n<li>添加面板</li>\n</ul>\n<p>app(metrics)–data–&gt; (?) + prometheus + grafana</p>\n"},{"title":"一体化环境搭建","_content":"\n\n\n## 基础 jar\n\n```\ndocker stop japp\ndocker rm japp\ndocker run --name japp --privileged=true -p 3337:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.7.19\n```\n\n## 安装扩展 java redis\n\n```\napt-key del 5072E1F5\napt-get update\napt-key adv --keyserver keyserver.ubuntu.com --recv 8C718D3B5072E1F5\napt-get update\nls\ncd /root\nls\ncd jdk1.8.0_251/\nls\ncd ..\nvim /etc/profile\napt-get install vim\nvim /etc/profile\nsource /etc/profile\njava -v\njava -version\napt-get install redis-server\nls\n```\n\n\n## 打包推送\n\n```\ndocker commit e9c1ad83b80a wuhaocn/javaapp:8\n\ndocker tag wuhaocn/javaapp:8 wuhaocn/javaapp:8\n\ndocker push wuhaocn/javaapp:8\n```\n\n\n## 运行\n```\ndocker stop japp\ndocker rm japp\ndocker run --name japp --privileged=true -p 3337:3306 16379:6379 -d wuhaocn/javaapp:8\n```","source":"_posts/devops/docker/一体化环境搭建.md","raw":"---\ntitle: 一体化环境搭建\n\ncategories:\n- devops\n\ntag:\n- docker\n- java\n---\n\n\n\n## 基础 jar\n\n```\ndocker stop japp\ndocker rm japp\ndocker run --name japp --privileged=true -p 3337:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.7.19\n```\n\n## 安装扩展 java redis\n\n```\napt-key del 5072E1F5\napt-get update\napt-key adv --keyserver keyserver.ubuntu.com --recv 8C718D3B5072E1F5\napt-get update\nls\ncd /root\nls\ncd jdk1.8.0_251/\nls\ncd ..\nvim /etc/profile\napt-get install vim\nvim /etc/profile\nsource /etc/profile\njava -v\njava -version\napt-get install redis-server\nls\n```\n\n\n## 打包推送\n\n```\ndocker commit e9c1ad83b80a wuhaocn/javaapp:8\n\ndocker tag wuhaocn/javaapp:8 wuhaocn/javaapp:8\n\ndocker push wuhaocn/javaapp:8\n```\n\n\n## 运行\n```\ndocker stop japp\ndocker rm japp\ndocker run --name japp --privileged=true -p 3337:3306 16379:6379 -d wuhaocn/javaapp:8\n```","slug":"devops/docker/一体化环境搭建","published":1,"date":"2021-09-06T14:29:47.095Z","updated":"2021-09-06T14:29:47.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyih001iu6ukbcza99lg","content":"<h2 id=\"基础-jar\"><a href=\"#基础-jar\" class=\"headerlink\" title=\"基础 jar\"></a>基础 jar</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop japp</span><br><span class=\"line\">docker rm japp</span><br><span class=\"line\">docker run --name japp --privileged=true -p 3337:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.7.19</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装扩展-java-redis\"><a href=\"#安装扩展-java-redis\" class=\"headerlink\" title=\"安装扩展 java redis\"></a>安装扩展 java redis</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-key del 5072E1F5</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-key adv --keyserver keyserver.ubuntu.com --recv 8C718D3B5072E1F5</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">ls</span><br><span class=\"line\">cd /root</span><br><span class=\"line\">ls</span><br><span class=\"line\">cd jdk1.8.0_251/</span><br><span class=\"line\">ls</span><br><span class=\"line\">cd ..</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">apt-get install vim</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\">java -v</span><br><span class=\"line\">java -version</span><br><span class=\"line\">apt-get install redis-server</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"打包推送\"><a href=\"#打包推送\" class=\"headerlink\" title=\"打包推送\"></a>打包推送</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit e9c1ad83b80a wuhaocn/javaapp:8</span><br><span class=\"line\"></span><br><span class=\"line\">docker tag wuhaocn/javaapp:8 wuhaocn/javaapp:8</span><br><span class=\"line\"></span><br><span class=\"line\">docker push wuhaocn/javaapp:8</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop japp</span><br><span class=\"line\">docker rm japp</span><br><span class=\"line\">docker run --name japp --privileged=true -p 3337:3306 16379:6379 -d wuhaocn/javaapp:8</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础-jar\"><a href=\"#基础-jar\" class=\"headerlink\" title=\"基础 jar\"></a>基础 jar</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop japp</span><br><span class=\"line\">docker rm japp</span><br><span class=\"line\">docker run --name japp --privileged=true -p 3337:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.7.19</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装扩展-java-redis\"><a href=\"#安装扩展-java-redis\" class=\"headerlink\" title=\"安装扩展 java redis\"></a>安装扩展 java redis</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-key del 5072E1F5</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-key adv --keyserver keyserver.ubuntu.com --recv 8C718D3B5072E1F5</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">ls</span><br><span class=\"line\">cd /root</span><br><span class=\"line\">ls</span><br><span class=\"line\">cd jdk1.8.0_251/</span><br><span class=\"line\">ls</span><br><span class=\"line\">cd ..</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">apt-get install vim</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\">java -v</span><br><span class=\"line\">java -version</span><br><span class=\"line\">apt-get install redis-server</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"打包推送\"><a href=\"#打包推送\" class=\"headerlink\" title=\"打包推送\"></a>打包推送</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit e9c1ad83b80a wuhaocn/javaapp:8</span><br><span class=\"line\"></span><br><span class=\"line\">docker tag wuhaocn/javaapp:8 wuhaocn/javaapp:8</span><br><span class=\"line\"></span><br><span class=\"line\">docker push wuhaocn/javaapp:8</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop japp</span><br><span class=\"line\">docker rm japp</span><br><span class=\"line\">docker run --name japp --privileged=true -p 3337:3306 16379:6379 -d wuhaocn/javaapp:8</span><br></pre></td></tr></table></figure>"},{"title":"基础环境","_content":"\n\n## docker 环境搭建\n\n### ubuntu\n\n```\ndocker 安装\n\nsudo apt-get update\n\nsudo apt install docker.io\n\nsudo groupadd docker\n\ndocker ps\n\nsudo usermod -aG docker $USER\n\nsudo vim /etc/docker/daemon.json\n\troot@user1-virtual-machine:~# cat /etc/docker/daemon.json\n\n{\n \"storage-driver\":\"overlay\",\n \"insecure-registries\": [\"10.10.208.193:5000\"]\n}\nsudo service docker restart\n```\n\n\n### centos\n\n```\n\n简单安装：\ncurl -sSL https://get.daocloud.io/docker | sh\n\n其他详细：\n1. 安装docker-yum\n   【centos7】\n   sudo yum install docker\n   【centos6】\n   修改yum源：参考/centos-6-yum源\n\n   #\n   yum install device-mapper-libs\n   yum upgrade device-mapper-libs yum update--skip-broke\n   rpm -Uvh http://ftp.riken.jp/Linux/fedora/epel/6Server/x86_64/epel-release-6-8.noarch.rpm\n\n   yum install docker-io\n\n   ubuntu:\n   apt-get update\n   apt-get install apt-transport-https ca-certificates\n   wget -qO- https://get.docker.com/ | sh\n   service docker start\n2. 指定私库\n   修改/etc/docker/daemon.json文件\n   #vi /etc/docker/daemon.json\n   { \"insecure-registries\": [\"10.10.208.193:5000\"] }\n\n   #这个现网使用出错\n   #{\n   # \"storage-driver\":\"overlay\",\n   # \"insecure-registries\": [\"10.10.208.193:5000\"]\n   #}\n\n   cent-os-6\n   /etc/sysconfig/docker\n   other_args='--insecure-registry 10.10.208.193:5000'\n   DOCKER_CERT_PATH=/etc/docker\n   ADD_REGISTRY='--add-registry 10.10.208.193:5000'\n\n   # Resolves: rhbz#1176302 (docker issue #407)\n   DOCKER_NOWARN_KERNEL_VERSION=1\n3. 修改存储位置\n   修改docker.service文件，使用-g参数指定存储位置\n   vi /usr/lib/systemd/system/docker.service\n   ExecStart=/usr/bin/dockerd --graph /data/docker\n\n4.配置生效\n    #reload配置文件\n    systemctl daemon-reload\n    #重启docker\n    systemctl restart docker\n    #查看 Docker Root Dir: /var/lib/docker是否改成设定的目录/new-path/docker\n    docker info\n    Docker Root Dir: /data/docker\n\n    #10.10.208.193\n    #systemctl daemon-reload\n    #\n\n```\n\n## docker registry\n\n### 1.映射\n\n开发环境使用\n\n```\ndocker run -itd --name registry --restart=always  -p 5000:5000 -v /registry:/var/lib/registry registry:2\ndocker stop registry\ndocker rm registry\ndocker run -itd --name registry --restart=always  -p 5000:5000 registry:2\n\ndocker stop registry-web\ndocker rm registry-web\ndocker run -d -p 15000:8080 --name registry-web --link registry -e REGISTRY_URL=http://registry:5000/v2 -e REGISTRY_NAME=localhost:5000 hyper/docker-registry-web\n\ndocker run -p 8080:8080 -e REG1=http://10.3.4.111:5000/v2/ atcol/docker-registry-ui\n```\n\n### 2.无映射\n\n本机测试临时使用\n\n```\ndocker stop registry\ndocker rm registry\ndocker run -d --name registry --restart=always  -p 5000:5000 registry:2\n```\n\n\n## 基础环境备注\n\n```\n1，在运行容器的时候，给容器加特权：\n示例：docker run -i -t --privileged=true -v /home/docs:/src waterchestnut/nodejs:0.12.0\n2，临时关闭selinux：\n示例：su -c \"setenforce 0\"\n之后执行：docker run -i -t -v /home/docs:/src waterchestnut/nodejs:0.12.0\n注意：之后要记得重新开启selinux，命令：su -c \"setenforce 1\"\n3，添加selinux规则，将要挂载的目录添加到白名单：\n示例：chcon -Rt svirt_sandbox_file_t /home/docs\n之后执行：docker run -i -t -v /home/docs:/src waterchestnut/nodejs:0.12.0\n```","source":"_posts/devops/docker/基础环境.md","raw":"---\ntitle: 基础环境\n\ncategories:\n- devops\n\ntag:\n- docker\n---\n\n\n## docker 环境搭建\n\n### ubuntu\n\n```\ndocker 安装\n\nsudo apt-get update\n\nsudo apt install docker.io\n\nsudo groupadd docker\n\ndocker ps\n\nsudo usermod -aG docker $USER\n\nsudo vim /etc/docker/daemon.json\n\troot@user1-virtual-machine:~# cat /etc/docker/daemon.json\n\n{\n \"storage-driver\":\"overlay\",\n \"insecure-registries\": [\"10.10.208.193:5000\"]\n}\nsudo service docker restart\n```\n\n\n### centos\n\n```\n\n简单安装：\ncurl -sSL https://get.daocloud.io/docker | sh\n\n其他详细：\n1. 安装docker-yum\n   【centos7】\n   sudo yum install docker\n   【centos6】\n   修改yum源：参考/centos-6-yum源\n\n   #\n   yum install device-mapper-libs\n   yum upgrade device-mapper-libs yum update--skip-broke\n   rpm -Uvh http://ftp.riken.jp/Linux/fedora/epel/6Server/x86_64/epel-release-6-8.noarch.rpm\n\n   yum install docker-io\n\n   ubuntu:\n   apt-get update\n   apt-get install apt-transport-https ca-certificates\n   wget -qO- https://get.docker.com/ | sh\n   service docker start\n2. 指定私库\n   修改/etc/docker/daemon.json文件\n   #vi /etc/docker/daemon.json\n   { \"insecure-registries\": [\"10.10.208.193:5000\"] }\n\n   #这个现网使用出错\n   #{\n   # \"storage-driver\":\"overlay\",\n   # \"insecure-registries\": [\"10.10.208.193:5000\"]\n   #}\n\n   cent-os-6\n   /etc/sysconfig/docker\n   other_args='--insecure-registry 10.10.208.193:5000'\n   DOCKER_CERT_PATH=/etc/docker\n   ADD_REGISTRY='--add-registry 10.10.208.193:5000'\n\n   # Resolves: rhbz#1176302 (docker issue #407)\n   DOCKER_NOWARN_KERNEL_VERSION=1\n3. 修改存储位置\n   修改docker.service文件，使用-g参数指定存储位置\n   vi /usr/lib/systemd/system/docker.service\n   ExecStart=/usr/bin/dockerd --graph /data/docker\n\n4.配置生效\n    #reload配置文件\n    systemctl daemon-reload\n    #重启docker\n    systemctl restart docker\n    #查看 Docker Root Dir: /var/lib/docker是否改成设定的目录/new-path/docker\n    docker info\n    Docker Root Dir: /data/docker\n\n    #10.10.208.193\n    #systemctl daemon-reload\n    #\n\n```\n\n## docker registry\n\n### 1.映射\n\n开发环境使用\n\n```\ndocker run -itd --name registry --restart=always  -p 5000:5000 -v /registry:/var/lib/registry registry:2\ndocker stop registry\ndocker rm registry\ndocker run -itd --name registry --restart=always  -p 5000:5000 registry:2\n\ndocker stop registry-web\ndocker rm registry-web\ndocker run -d -p 15000:8080 --name registry-web --link registry -e REGISTRY_URL=http://registry:5000/v2 -e REGISTRY_NAME=localhost:5000 hyper/docker-registry-web\n\ndocker run -p 8080:8080 -e REG1=http://10.3.4.111:5000/v2/ atcol/docker-registry-ui\n```\n\n### 2.无映射\n\n本机测试临时使用\n\n```\ndocker stop registry\ndocker rm registry\ndocker run -d --name registry --restart=always  -p 5000:5000 registry:2\n```\n\n\n## 基础环境备注\n\n```\n1，在运行容器的时候，给容器加特权：\n示例：docker run -i -t --privileged=true -v /home/docs:/src waterchestnut/nodejs:0.12.0\n2，临时关闭selinux：\n示例：su -c \"setenforce 0\"\n之后执行：docker run -i -t -v /home/docs:/src waterchestnut/nodejs:0.12.0\n注意：之后要记得重新开启selinux，命令：su -c \"setenforce 1\"\n3，添加selinux规则，将要挂载的目录添加到白名单：\n示例：chcon -Rt svirt_sandbox_file_t /home/docs\n之后执行：docker run -i -t -v /home/docs:/src waterchestnut/nodejs:0.12.0\n```","slug":"devops/docker/基础环境","published":1,"date":"2021-09-06T14:29:47.095Z","updated":"2021-09-06T14:29:47.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyii001nu6uk1nj07hc1","content":"<h2 id=\"docker-环境搭建\"><a href=\"#docker-环境搭建\" class=\"headerlink\" title=\"docker 环境搭建\"></a>docker 环境搭建</h2><h3 id=\"ubuntu\"><a href=\"#ubuntu\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker 安装</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install docker.io</span><br><span class=\"line\"></span><br><span class=\"line\">sudo groupadd docker</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"></span><br><span class=\"line\">sudo usermod -aG docker $USER</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vim /etc/docker/daemon.json</span><br><span class=\"line\">\troot@user1-virtual-machine:~# cat /etc/docker/daemon.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;storage-driver&quot;:&quot;overlay&quot;,</span><br><span class=\"line\"> &quot;insecure-registries&quot;: [&quot;10.10.208.193:5000&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"centos\"><a href=\"#centos\" class=\"headerlink\" title=\"centos\"></a>centos</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">简单安装：</span><br><span class=\"line\">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class=\"line\"></span><br><span class=\"line\">其他详细：</span><br><span class=\"line\">1. 安装docker-yum</span><br><span class=\"line\">   【centos7】</span><br><span class=\"line\">   sudo yum install docker</span><br><span class=\"line\">   【centos6】</span><br><span class=\"line\">   修改yum源：参考/centos-6-yum源</span><br><span class=\"line\"></span><br><span class=\"line\">   #</span><br><span class=\"line\">   yum install device-mapper-libs</span><br><span class=\"line\">   yum upgrade device-mapper-libs yum update--skip-broke</span><br><span class=\"line\">   rpm -Uvh http://ftp.riken.jp/Linux/fedora/epel/6Server/x86_64/epel-release-6-8.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">   yum install docker-io</span><br><span class=\"line\"></span><br><span class=\"line\">   ubuntu:</span><br><span class=\"line\">   apt-get update</span><br><span class=\"line\">   apt-get install apt-transport-https ca-certificates</span><br><span class=\"line\">   wget -qO- https://get.docker.com/ | sh</span><br><span class=\"line\">   service docker start</span><br><span class=\"line\">2. 指定私库</span><br><span class=\"line\">   修改/etc/docker/daemon.json文件</span><br><span class=\"line\">   #vi /etc/docker/daemon.json</span><br><span class=\"line\">   &#123; &quot;insecure-registries&quot;: [&quot;10.10.208.193:5000&quot;] &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   #这个现网使用出错</span><br><span class=\"line\">   #&#123;</span><br><span class=\"line\">   # &quot;storage-driver&quot;:&quot;overlay&quot;,</span><br><span class=\"line\">   # &quot;insecure-registries&quot;: [&quot;10.10.208.193:5000&quot;]</span><br><span class=\"line\">   #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   cent-os-6</span><br><span class=\"line\">   /etc/sysconfig/docker</span><br><span class=\"line\">   other_args=&#x27;--insecure-registry 10.10.208.193:5000&#x27;</span><br><span class=\"line\">   DOCKER_CERT_PATH=/etc/docker</span><br><span class=\"line\">   ADD_REGISTRY=&#x27;--add-registry 10.10.208.193:5000&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">   # Resolves: rhbz#1176302 (docker issue #407)</span><br><span class=\"line\">   DOCKER_NOWARN_KERNEL_VERSION=1</span><br><span class=\"line\">3. 修改存储位置</span><br><span class=\"line\">   修改docker.service文件，使用-g参数指定存储位置</span><br><span class=\"line\">   vi /usr/lib/systemd/system/docker.service</span><br><span class=\"line\">   ExecStart=/usr/bin/dockerd --graph /data/docker</span><br><span class=\"line\"></span><br><span class=\"line\">4.配置生效</span><br><span class=\"line\">    #reload配置文件</span><br><span class=\"line\">    systemctl daemon-reload</span><br><span class=\"line\">    #重启docker</span><br><span class=\"line\">    systemctl restart docker</span><br><span class=\"line\">    #查看 Docker Root Dir: /var/lib/docker是否改成设定的目录/new-path/docker</span><br><span class=\"line\">    docker info</span><br><span class=\"line\">    Docker Root Dir: /data/docker</span><br><span class=\"line\"></span><br><span class=\"line\">    #10.10.208.193</span><br><span class=\"line\">    #systemctl daemon-reload</span><br><span class=\"line\">    #</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker-registry\"><a href=\"#docker-registry\" class=\"headerlink\" title=\"docker registry\"></a>docker registry</h2><h3 id=\"1-映射\"><a href=\"#1-映射\" class=\"headerlink\" title=\"1.映射\"></a>1.映射</h3><p>开发环境使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name registry --restart=always  -p 5000:5000 -v /registry:/var/lib/registry registry:2</span><br><span class=\"line\">docker stop registry</span><br><span class=\"line\">docker rm registry</span><br><span class=\"line\">docker run -itd --name registry --restart=always  -p 5000:5000 registry:2</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop registry-web</span><br><span class=\"line\">docker rm registry-web</span><br><span class=\"line\">docker run -d -p 15000:8080 --name registry-web --link registry -e REGISTRY_URL=http://registry:5000/v2 -e REGISTRY_NAME=localhost:5000 hyper/docker-registry-web</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -p 8080:8080 -e REG1=http://10.3.4.111:5000/v2/ atcol/docker-registry-ui</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-无映射\"><a href=\"#2-无映射\" class=\"headerlink\" title=\"2.无映射\"></a>2.无映射</h3><p>本机测试临时使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop registry</span><br><span class=\"line\">docker rm registry</span><br><span class=\"line\">docker run -d --name registry --restart=always  -p 5000:5000 registry:2</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"基础环境备注\"><a href=\"#基础环境备注\" class=\"headerlink\" title=\"基础环境备注\"></a>基础环境备注</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1，在运行容器的时候，给容器加特权：</span><br><span class=\"line\">示例：docker run -i -t --privileged=true -v /home/docs:/src waterchestnut/nodejs:0.12.0</span><br><span class=\"line\">2，临时关闭selinux：</span><br><span class=\"line\">示例：su -c &quot;setenforce 0&quot;</span><br><span class=\"line\">之后执行：docker run -i -t -v /home/docs:/src waterchestnut/nodejs:0.12.0</span><br><span class=\"line\">注意：之后要记得重新开启selinux，命令：su -c &quot;setenforce 1&quot;</span><br><span class=\"line\">3，添加selinux规则，将要挂载的目录添加到白名单：</span><br><span class=\"line\">示例：chcon -Rt svirt_sandbox_file_t /home/docs</span><br><span class=\"line\">之后执行：docker run -i -t -v /home/docs:/src waterchestnut/nodejs:0.12.0</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"docker-环境搭建\"><a href=\"#docker-环境搭建\" class=\"headerlink\" title=\"docker 环境搭建\"></a>docker 环境搭建</h2><h3 id=\"ubuntu\"><a href=\"#ubuntu\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker 安装</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install docker.io</span><br><span class=\"line\"></span><br><span class=\"line\">sudo groupadd docker</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"></span><br><span class=\"line\">sudo usermod -aG docker $USER</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vim /etc/docker/daemon.json</span><br><span class=\"line\">\troot@user1-virtual-machine:~# cat /etc/docker/daemon.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;storage-driver&quot;:&quot;overlay&quot;,</span><br><span class=\"line\"> &quot;insecure-registries&quot;: [&quot;10.10.208.193:5000&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"centos\"><a href=\"#centos\" class=\"headerlink\" title=\"centos\"></a>centos</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">简单安装：</span><br><span class=\"line\">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class=\"line\"></span><br><span class=\"line\">其他详细：</span><br><span class=\"line\">1. 安装docker-yum</span><br><span class=\"line\">   【centos7】</span><br><span class=\"line\">   sudo yum install docker</span><br><span class=\"line\">   【centos6】</span><br><span class=\"line\">   修改yum源：参考/centos-6-yum源</span><br><span class=\"line\"></span><br><span class=\"line\">   #</span><br><span class=\"line\">   yum install device-mapper-libs</span><br><span class=\"line\">   yum upgrade device-mapper-libs yum update--skip-broke</span><br><span class=\"line\">   rpm -Uvh http://ftp.riken.jp/Linux/fedora/epel/6Server/x86_64/epel-release-6-8.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">   yum install docker-io</span><br><span class=\"line\"></span><br><span class=\"line\">   ubuntu:</span><br><span class=\"line\">   apt-get update</span><br><span class=\"line\">   apt-get install apt-transport-https ca-certificates</span><br><span class=\"line\">   wget -qO- https://get.docker.com/ | sh</span><br><span class=\"line\">   service docker start</span><br><span class=\"line\">2. 指定私库</span><br><span class=\"line\">   修改/etc/docker/daemon.json文件</span><br><span class=\"line\">   #vi /etc/docker/daemon.json</span><br><span class=\"line\">   &#123; &quot;insecure-registries&quot;: [&quot;10.10.208.193:5000&quot;] &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   #这个现网使用出错</span><br><span class=\"line\">   #&#123;</span><br><span class=\"line\">   # &quot;storage-driver&quot;:&quot;overlay&quot;,</span><br><span class=\"line\">   # &quot;insecure-registries&quot;: [&quot;10.10.208.193:5000&quot;]</span><br><span class=\"line\">   #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   cent-os-6</span><br><span class=\"line\">   /etc/sysconfig/docker</span><br><span class=\"line\">   other_args=&#x27;--insecure-registry 10.10.208.193:5000&#x27;</span><br><span class=\"line\">   DOCKER_CERT_PATH=/etc/docker</span><br><span class=\"line\">   ADD_REGISTRY=&#x27;--add-registry 10.10.208.193:5000&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">   # Resolves: rhbz#1176302 (docker issue #407)</span><br><span class=\"line\">   DOCKER_NOWARN_KERNEL_VERSION=1</span><br><span class=\"line\">3. 修改存储位置</span><br><span class=\"line\">   修改docker.service文件，使用-g参数指定存储位置</span><br><span class=\"line\">   vi /usr/lib/systemd/system/docker.service</span><br><span class=\"line\">   ExecStart=/usr/bin/dockerd --graph /data/docker</span><br><span class=\"line\"></span><br><span class=\"line\">4.配置生效</span><br><span class=\"line\">    #reload配置文件</span><br><span class=\"line\">    systemctl daemon-reload</span><br><span class=\"line\">    #重启docker</span><br><span class=\"line\">    systemctl restart docker</span><br><span class=\"line\">    #查看 Docker Root Dir: /var/lib/docker是否改成设定的目录/new-path/docker</span><br><span class=\"line\">    docker info</span><br><span class=\"line\">    Docker Root Dir: /data/docker</span><br><span class=\"line\"></span><br><span class=\"line\">    #10.10.208.193</span><br><span class=\"line\">    #systemctl daemon-reload</span><br><span class=\"line\">    #</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker-registry\"><a href=\"#docker-registry\" class=\"headerlink\" title=\"docker registry\"></a>docker registry</h2><h3 id=\"1-映射\"><a href=\"#1-映射\" class=\"headerlink\" title=\"1.映射\"></a>1.映射</h3><p>开发环境使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name registry --restart=always  -p 5000:5000 -v /registry:/var/lib/registry registry:2</span><br><span class=\"line\">docker stop registry</span><br><span class=\"line\">docker rm registry</span><br><span class=\"line\">docker run -itd --name registry --restart=always  -p 5000:5000 registry:2</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop registry-web</span><br><span class=\"line\">docker rm registry-web</span><br><span class=\"line\">docker run -d -p 15000:8080 --name registry-web --link registry -e REGISTRY_URL=http://registry:5000/v2 -e REGISTRY_NAME=localhost:5000 hyper/docker-registry-web</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -p 8080:8080 -e REG1=http://10.3.4.111:5000/v2/ atcol/docker-registry-ui</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-无映射\"><a href=\"#2-无映射\" class=\"headerlink\" title=\"2.无映射\"></a>2.无映射</h3><p>本机测试临时使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop registry</span><br><span class=\"line\">docker rm registry</span><br><span class=\"line\">docker run -d --name registry --restart=always  -p 5000:5000 registry:2</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"基础环境备注\"><a href=\"#基础环境备注\" class=\"headerlink\" title=\"基础环境备注\"></a>基础环境备注</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1，在运行容器的时候，给容器加特权：</span><br><span class=\"line\">示例：docker run -i -t --privileged=true -v /home/docs:/src waterchestnut/nodejs:0.12.0</span><br><span class=\"line\">2，临时关闭selinux：</span><br><span class=\"line\">示例：su -c &quot;setenforce 0&quot;</span><br><span class=\"line\">之后执行：docker run -i -t -v /home/docs:/src waterchestnut/nodejs:0.12.0</span><br><span class=\"line\">注意：之后要记得重新开启selinux，命令：su -c &quot;setenforce 1&quot;</span><br><span class=\"line\">3，添加selinux规则，将要挂载的目录添加到白名单：</span><br><span class=\"line\">示例：chcon -Rt svirt_sandbox_file_t /home/docs</span><br><span class=\"line\">之后执行：docker run -i -t -v /home/docs:/src waterchestnut/nodejs:0.12.0</span><br></pre></td></tr></table></figure>"},{"title":"数据环境","_content":"\n\n## docker部署数据中间件\n\n* docker部署开发环境数据中间件\n\n### 常见工具命令\n\n```\ndocker rm `docker ps -a -q`\ndocker start $(docker ps -a | awk '{ print $1}' | tail -n +2)\ndocker stop $(docker ps -a  | awk '{ print $1}' | tail -n +2)\n```\n\n\n### mysql\n\n```\n\n# mysql5.6.40\ndocker stop mysql.5.6.40\ndocker rm mysql.5.6.40\ndocker run --privileged=true --name mysql.5.6.40 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.6.40\ndocker update mysql.5.6.40 --restart=always\n\n# mysql3336\ndocker stop mysql3336\ndocker rm mysql3336\ndocker run --privileged=true --name mysql3336 -p 3336:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.6.40\ndocker update mysql3336 --restart=always\n\n# mysql3337\ndocker stop mysql3337\ndocker rm mysql3337\ndocker run --privileged=true --name mysql3337 -p 3337:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.6.40\ndocker update mysql3337 --restart=always\n\n# mysql5.7.19\ndocker stop mysql5.7.19\ndocker rm mysql5.7.19\ndocker run --name mysql5.7.19 --privileged=true -p 3337:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.7.19\n```\n\n### redis\n\n\n```\n# redis 单机\ndocker stop redis-6379\ndocker rm redis-6379\ndocker run -d -p 6379:6379  --name redis-6379  --privileged=true redis:3.2 redis-server --port 6379 --requirepass \"urcs@2021\"\ndocker update redis-6379 --restart=always\n\ndocker stop redis-6380\ndocker rm redis-6380\ndocker run -d -p 6380:6380  --name redis-6380  --privileged=true redis:3.2 redis-server --port 6380\n\ndocker stop redis-6379\ndocker rm redis-6379\ndocker run -d -p 6379:6379  --name redis-6379  --privileged=true redis:3.2 redis-server --port 6379\ndocker update redis-6379 --restart=always\n\ndocker stop redis-6379\ndocker rm redis-6379\ndocker run -d -p 6379:6379  --name redis-6379  --privileged=true redis:6.2 redis-server --port 6379\ndocker update redis-6379 --restart=always\n\n# sentinel\n在当前目录配置文件\nvim sentinel.conf\nsentinel monitor mymaster 10.10.220.120 6379 1\n\n启动sentinel\ndocker stop redis-sentinel-26379\ndocker rm redis-sentinel-26379\ndocker run -d -p 26379:26379 -v /Users/wuhao/data/soft/redis/sentinel.conf:/usr/local/bin/redis-conf/sentinel.conf --name redis-sentinel-26379  redis:3.2 redis-sentinel /usr/local/bin/redis-conf/sentinel.conf --port 26379\n\ndocker logs -f redis-sentinel-26379\n```\n\n### hbase\n\n\n```\n拉取镜像\ndocker pull harisekhon/hbase:1.2\n运行镜像\ndocker stop hbase1.2\ndocker rm hbase1.2\ndocker run -d -h hbase --privileged=true -p 2181:2181 -p 18080:8080 -p 18085:8085 -p 19090:9090 -p 19095:9095 -p 16000:16000 -p 16020:16020 -p 16010:16010 -p 16201:16201 -p 16301:16301 --name hbase1.2 harisekhon/hbase:1.2\ndocker update hbase1.2 --restart=always\ndocker exec -it hbase bash\n\ndocker run -d -h hbase --privileged=true -p 2181:2181 -p 18080:8080 -p 18085:8085 -p 19090:9090 -p 19095:9095 -p 16000:16000 -p 16010:16010 -p 16201:16201 -p 16301:16301 --name hbase1.2 harisekhon/hbase:1.2\n```\n\n### zk\n\n```\ndocker pull zookeeper:3.5\ndocker run --name zookeeper3.5 -p 7998:2181 -d zookeeper:3.5\n\ndocker stop zookeeper\ndocker rm zookeeper\ndocker run --privileged=true -d --name zookeeper --publish 2181:2181  -d zookeeper:3.5\ndocker update zookeeper --restart=always\n```\n\n### kafka\n\n```\ndocker pull wurstmeister/kafka:2.11-1.1.1\n\ndocker stop kafka2.11\ndocker rm kafka2.11\ndocker run \\\n--env KAFKA_BROKER_ID=0 \\\n--env KAFKA_ZOOKEEPER_CONNECT=172.16.106.78:7998 \\\n--env KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.16.106.78:9092 \\\n--env KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \\\n --privileged=true -d --name kafka2.11 -p 9092:9092 \\\nwurstmeister/kafka:2.11-1.1.1\n```\n\n### fastdfs\n\n```\nsudo docker stop trakcer\nsudo docker rm trakcer\nsudo docker run -d --privileged=true -p 22122:22122 --name trakcer --net=host 10.10.208.193:5000/urcs/fastdfs_tracker:4.08 tracker\nsudo docker update trakcer --restart=always\n\nsudo docker stop storage\nsudo docker rm storage\nsudo docker run -d --privileged=true -p 23000:23000 -p 8888:8888 --name storage --net=host --env TRACKER_SERVER=172.16.106.78:22122 10.10.208.193:5000/urcs/fastdfs_storage:4.08 storage\nsudo docker update storage --restart=always\n```\n\n### es\n\n```\ndocker pull docker.elastic.co/elasticsearch/elasticsearch:6.0.0\ndocker stop elasticsearch\ndocker rm elasticsearch\ndocker run -d --name elasticsearch \\\n-p 9200:9200 -p 9300:9300 \\\n-e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch:6.0.0\n```\n\n```\ndocker pull docker.elastic.co/elasticsearch/elasticsearch:6.3.2\ndocker stop elasticsearch\ndocker rm elasticsearch\ndocker run -d --name elasticsearch \\\n-p 9200:9200 -p 9300:9300 \\\n-e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch:6.3.2\ndocker update elasticsearch --restart=always\n```\n\n### kibana\n\n```\ndocker pull elastic/kibana:6.0.0\n\n//做了定制化设置\ndocker stop kibana6.0.0\ndocker rm kibana6.0.0\ndocker run -d --name kibana6.0.0  -e ELASTICSEARCH_URL=http://172.29.203.16:9200 -p 5601:5601  elastic/kibana:6.0.0\n```\n\n\n```\ndocker pull elastic/kibana:6.3.2\n\n\ndocker stop kibana6.3.2\ndocker rm kibana6.3.2\ndocker run -d --name kibana6.3.2  -e ELASTICSEARCH_URL=http://10.40.1.180:9200 -p 5601:5601  elastic/kibana:6.3.2\ndocker update kibana6.3.2 --restart=always\n```\n\n### spark\n\n```\ndocker pull sequenceiq/spark:1.6.0\n docker run -it -p 8088:8088 -p 8042:8042 -h sandbox sequenceiq/spark:1.6.0 bash\n```\n\n### git\n\n```\n获取镜像\ndocker pull beginor/gitlab-ce:11.3.0-ce.0\n\n运行\n通常会将 GitLab 的配置 (etc) 、 日志 (log) 、数据 (data) 放到容器之外， 便于日后升级， 因此请先准备这三个目录。\nsudo mkdir -p /mnt/sda1/gitlab/etc\nsudo mkdir -p /mnt/sda1/gitlab/log\nsudo mkdir -p /mnt/sda1/gitlab/data\n\n准备好这三个目录之后， 就可以开始运行 Docker 镜像了。 我的建议是使用unless-stopped 作为重启策略， 因为这样可以手工停止容器， 方便维护。\n完整的运行命令如下：\ndocker run \\\n    --detach \\\n    --publish 8443:443 \\\n    --publish 8080:80 \\\n    --name gitlab \\\n    --restart unless-stopped \\\n    --volume /mnt/sda1/gitlab/etc:/etc/gitlab \\\n    --volume /mnt/sda1/gitlab/log:/var/log/gitlab \\\n    --volume /mnt/sda1/gitlab/data:/var/opt/gitlab \\\n    beginor/gitlab-ce:11.3.0-ce.0\n```\n\n### ftp\n\n```\ndocker pull fauria/vsftpd\nmkdir /home/ultra/ftp\ndocker stop vsftpd\ndocker rm vsftpd\ndocker run -d -v /home/ultra/ftp:/home/vsftpd -p 2120:20 -p 2121:21 -p 21100-21110:21100-21110 -e FTP_USER=urcs -e FTP_PASS=urcs@2018 -e PASV_ADDRESS=10.10.208.194 -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 --name vsftpd --restart=always fauria/vsftpd\ndocker ps\n```\n\n### speed\n\n```\ndocker stop speedtest\ndocker rm speedtest\ndocker run -d --name  speedtest -p 8888:80 adolfintel/speedtest:latest\n```\n","source":"_posts/devops/docker/数据环境.md","raw":"---\ntitle: 数据环境\n\ncategories:\n- devops \n\ntag:\n- docker\n---\n\n\n## docker部署数据中间件\n\n* docker部署开发环境数据中间件\n\n### 常见工具命令\n\n```\ndocker rm `docker ps -a -q`\ndocker start $(docker ps -a | awk '{ print $1}' | tail -n +2)\ndocker stop $(docker ps -a  | awk '{ print $1}' | tail -n +2)\n```\n\n\n### mysql\n\n```\n\n# mysql5.6.40\ndocker stop mysql.5.6.40\ndocker rm mysql.5.6.40\ndocker run --privileged=true --name mysql.5.6.40 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.6.40\ndocker update mysql.5.6.40 --restart=always\n\n# mysql3336\ndocker stop mysql3336\ndocker rm mysql3336\ndocker run --privileged=true --name mysql3336 -p 3336:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.6.40\ndocker update mysql3336 --restart=always\n\n# mysql3337\ndocker stop mysql3337\ndocker rm mysql3337\ndocker run --privileged=true --name mysql3337 -p 3337:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.6.40\ndocker update mysql3337 --restart=always\n\n# mysql5.7.19\ndocker stop mysql5.7.19\ndocker rm mysql5.7.19\ndocker run --name mysql5.7.19 --privileged=true -p 3337:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.7.19\n```\n\n### redis\n\n\n```\n# redis 单机\ndocker stop redis-6379\ndocker rm redis-6379\ndocker run -d -p 6379:6379  --name redis-6379  --privileged=true redis:3.2 redis-server --port 6379 --requirepass \"urcs@2021\"\ndocker update redis-6379 --restart=always\n\ndocker stop redis-6380\ndocker rm redis-6380\ndocker run -d -p 6380:6380  --name redis-6380  --privileged=true redis:3.2 redis-server --port 6380\n\ndocker stop redis-6379\ndocker rm redis-6379\ndocker run -d -p 6379:6379  --name redis-6379  --privileged=true redis:3.2 redis-server --port 6379\ndocker update redis-6379 --restart=always\n\ndocker stop redis-6379\ndocker rm redis-6379\ndocker run -d -p 6379:6379  --name redis-6379  --privileged=true redis:6.2 redis-server --port 6379\ndocker update redis-6379 --restart=always\n\n# sentinel\n在当前目录配置文件\nvim sentinel.conf\nsentinel monitor mymaster 10.10.220.120 6379 1\n\n启动sentinel\ndocker stop redis-sentinel-26379\ndocker rm redis-sentinel-26379\ndocker run -d -p 26379:26379 -v /Users/wuhao/data/soft/redis/sentinel.conf:/usr/local/bin/redis-conf/sentinel.conf --name redis-sentinel-26379  redis:3.2 redis-sentinel /usr/local/bin/redis-conf/sentinel.conf --port 26379\n\ndocker logs -f redis-sentinel-26379\n```\n\n### hbase\n\n\n```\n拉取镜像\ndocker pull harisekhon/hbase:1.2\n运行镜像\ndocker stop hbase1.2\ndocker rm hbase1.2\ndocker run -d -h hbase --privileged=true -p 2181:2181 -p 18080:8080 -p 18085:8085 -p 19090:9090 -p 19095:9095 -p 16000:16000 -p 16020:16020 -p 16010:16010 -p 16201:16201 -p 16301:16301 --name hbase1.2 harisekhon/hbase:1.2\ndocker update hbase1.2 --restart=always\ndocker exec -it hbase bash\n\ndocker run -d -h hbase --privileged=true -p 2181:2181 -p 18080:8080 -p 18085:8085 -p 19090:9090 -p 19095:9095 -p 16000:16000 -p 16010:16010 -p 16201:16201 -p 16301:16301 --name hbase1.2 harisekhon/hbase:1.2\n```\n\n### zk\n\n```\ndocker pull zookeeper:3.5\ndocker run --name zookeeper3.5 -p 7998:2181 -d zookeeper:3.5\n\ndocker stop zookeeper\ndocker rm zookeeper\ndocker run --privileged=true -d --name zookeeper --publish 2181:2181  -d zookeeper:3.5\ndocker update zookeeper --restart=always\n```\n\n### kafka\n\n```\ndocker pull wurstmeister/kafka:2.11-1.1.1\n\ndocker stop kafka2.11\ndocker rm kafka2.11\ndocker run \\\n--env KAFKA_BROKER_ID=0 \\\n--env KAFKA_ZOOKEEPER_CONNECT=172.16.106.78:7998 \\\n--env KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.16.106.78:9092 \\\n--env KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \\\n --privileged=true -d --name kafka2.11 -p 9092:9092 \\\nwurstmeister/kafka:2.11-1.1.1\n```\n\n### fastdfs\n\n```\nsudo docker stop trakcer\nsudo docker rm trakcer\nsudo docker run -d --privileged=true -p 22122:22122 --name trakcer --net=host 10.10.208.193:5000/urcs/fastdfs_tracker:4.08 tracker\nsudo docker update trakcer --restart=always\n\nsudo docker stop storage\nsudo docker rm storage\nsudo docker run -d --privileged=true -p 23000:23000 -p 8888:8888 --name storage --net=host --env TRACKER_SERVER=172.16.106.78:22122 10.10.208.193:5000/urcs/fastdfs_storage:4.08 storage\nsudo docker update storage --restart=always\n```\n\n### es\n\n```\ndocker pull docker.elastic.co/elasticsearch/elasticsearch:6.0.0\ndocker stop elasticsearch\ndocker rm elasticsearch\ndocker run -d --name elasticsearch \\\n-p 9200:9200 -p 9300:9300 \\\n-e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch:6.0.0\n```\n\n```\ndocker pull docker.elastic.co/elasticsearch/elasticsearch:6.3.2\ndocker stop elasticsearch\ndocker rm elasticsearch\ndocker run -d --name elasticsearch \\\n-p 9200:9200 -p 9300:9300 \\\n-e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch:6.3.2\ndocker update elasticsearch --restart=always\n```\n\n### kibana\n\n```\ndocker pull elastic/kibana:6.0.0\n\n//做了定制化设置\ndocker stop kibana6.0.0\ndocker rm kibana6.0.0\ndocker run -d --name kibana6.0.0  -e ELASTICSEARCH_URL=http://172.29.203.16:9200 -p 5601:5601  elastic/kibana:6.0.0\n```\n\n\n```\ndocker pull elastic/kibana:6.3.2\n\n\ndocker stop kibana6.3.2\ndocker rm kibana6.3.2\ndocker run -d --name kibana6.3.2  -e ELASTICSEARCH_URL=http://10.40.1.180:9200 -p 5601:5601  elastic/kibana:6.3.2\ndocker update kibana6.3.2 --restart=always\n```\n\n### spark\n\n```\ndocker pull sequenceiq/spark:1.6.0\n docker run -it -p 8088:8088 -p 8042:8042 -h sandbox sequenceiq/spark:1.6.0 bash\n```\n\n### git\n\n```\n获取镜像\ndocker pull beginor/gitlab-ce:11.3.0-ce.0\n\n运行\n通常会将 GitLab 的配置 (etc) 、 日志 (log) 、数据 (data) 放到容器之外， 便于日后升级， 因此请先准备这三个目录。\nsudo mkdir -p /mnt/sda1/gitlab/etc\nsudo mkdir -p /mnt/sda1/gitlab/log\nsudo mkdir -p /mnt/sda1/gitlab/data\n\n准备好这三个目录之后， 就可以开始运行 Docker 镜像了。 我的建议是使用unless-stopped 作为重启策略， 因为这样可以手工停止容器， 方便维护。\n完整的运行命令如下：\ndocker run \\\n    --detach \\\n    --publish 8443:443 \\\n    --publish 8080:80 \\\n    --name gitlab \\\n    --restart unless-stopped \\\n    --volume /mnt/sda1/gitlab/etc:/etc/gitlab \\\n    --volume /mnt/sda1/gitlab/log:/var/log/gitlab \\\n    --volume /mnt/sda1/gitlab/data:/var/opt/gitlab \\\n    beginor/gitlab-ce:11.3.0-ce.0\n```\n\n### ftp\n\n```\ndocker pull fauria/vsftpd\nmkdir /home/ultra/ftp\ndocker stop vsftpd\ndocker rm vsftpd\ndocker run -d -v /home/ultra/ftp:/home/vsftpd -p 2120:20 -p 2121:21 -p 21100-21110:21100-21110 -e FTP_USER=urcs -e FTP_PASS=urcs@2018 -e PASV_ADDRESS=10.10.208.194 -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 --name vsftpd --restart=always fauria/vsftpd\ndocker ps\n```\n\n### speed\n\n```\ndocker stop speedtest\ndocker rm speedtest\ndocker run -d --name  speedtest -p 8888:80 adolfintel/speedtest:latest\n```\n","slug":"devops/docker/数据环境","published":1,"date":"2021-09-06T14:29:47.096Z","updated":"2021-09-06T14:29:47.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyij001pu6uk4bsjho4m","content":"<h2 id=\"docker部署数据中间件\"><a href=\"#docker部署数据中间件\" class=\"headerlink\" title=\"docker部署数据中间件\"></a>docker部署数据中间件</h2><ul>\n<li>docker部署开发环境数据中间件</li>\n</ul>\n<h3 id=\"常见工具命令\"><a href=\"#常见工具命令\" class=\"headerlink\" title=\"常见工具命令\"></a>常见工具命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm `docker ps -a -q`</span><br><span class=\"line\">docker start $(docker ps -a | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)</span><br><span class=\"line\">docker stop $(docker ps -a  | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># mysql5.6.40</span><br><span class=\"line\">docker stop mysql.5.6.40</span><br><span class=\"line\">docker rm mysql.5.6.40</span><br><span class=\"line\">docker run --privileged=true --name mysql.5.6.40 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.6.40</span><br><span class=\"line\">docker update mysql.5.6.40 --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\"># mysql3336</span><br><span class=\"line\">docker stop mysql3336</span><br><span class=\"line\">docker rm mysql3336</span><br><span class=\"line\">docker run --privileged=true --name mysql3336 -p 3336:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.6.40</span><br><span class=\"line\">docker update mysql3336 --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\"># mysql3337</span><br><span class=\"line\">docker stop mysql3337</span><br><span class=\"line\">docker rm mysql3337</span><br><span class=\"line\">docker run --privileged=true --name mysql3337 -p 3337:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.6.40</span><br><span class=\"line\">docker update mysql3337 --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\"># mysql5.7.19</span><br><span class=\"line\">docker stop mysql5.7.19</span><br><span class=\"line\">docker rm mysql5.7.19</span><br><span class=\"line\">docker run --name mysql5.7.19 --privileged=true -p 3337:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.7.19</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis 单机</span><br><span class=\"line\">docker stop redis-6379</span><br><span class=\"line\">docker rm redis-6379</span><br><span class=\"line\">docker run -d -p 6379:6379  --name redis-6379  --privileged=true redis:3.2 redis-server --port 6379 --requirepass &quot;urcs@2021&quot;</span><br><span class=\"line\">docker update redis-6379 --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop redis-6380</span><br><span class=\"line\">docker rm redis-6380</span><br><span class=\"line\">docker run -d -p 6380:6380  --name redis-6380  --privileged=true redis:3.2 redis-server --port 6380</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop redis-6379</span><br><span class=\"line\">docker rm redis-6379</span><br><span class=\"line\">docker run -d -p 6379:6379  --name redis-6379  --privileged=true redis:3.2 redis-server --port 6379</span><br><span class=\"line\">docker update redis-6379 --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop redis-6379</span><br><span class=\"line\">docker rm redis-6379</span><br><span class=\"line\">docker run -d -p 6379:6379  --name redis-6379  --privileged=true redis:6.2 redis-server --port 6379</span><br><span class=\"line\">docker update redis-6379 --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\"># sentinel</span><br><span class=\"line\">在当前目录配置文件</span><br><span class=\"line\">vim sentinel.conf</span><br><span class=\"line\">sentinel monitor mymaster 10.10.220.120 6379 1</span><br><span class=\"line\"></span><br><span class=\"line\">启动sentinel</span><br><span class=\"line\">docker stop redis-sentinel-26379</span><br><span class=\"line\">docker rm redis-sentinel-26379</span><br><span class=\"line\">docker run -d -p 26379:26379 -v /Users/wuhao/data/soft/redis/sentinel.conf:/usr/local/bin/redis-conf/sentinel.conf --name redis-sentinel-26379  redis:3.2 redis-sentinel /usr/local/bin/redis-conf/sentinel.conf --port 26379</span><br><span class=\"line\"></span><br><span class=\"line\">docker logs -f redis-sentinel-26379</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hbase\"><a href=\"#hbase\" class=\"headerlink\" title=\"hbase\"></a>hbase</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">拉取镜像</span><br><span class=\"line\">docker pull harisekhon/hbase:1.2</span><br><span class=\"line\">运行镜像</span><br><span class=\"line\">docker stop hbase1.2</span><br><span class=\"line\">docker rm hbase1.2</span><br><span class=\"line\">docker run -d -h hbase --privileged=true -p 2181:2181 -p 18080:8080 -p 18085:8085 -p 19090:9090 -p 19095:9095 -p 16000:16000 -p 16020:16020 -p 16010:16010 -p 16201:16201 -p 16301:16301 --name hbase1.2 harisekhon/hbase:1.2</span><br><span class=\"line\">docker update hbase1.2 --restart=always</span><br><span class=\"line\">docker exec -it hbase bash</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -h hbase --privileged=true -p 2181:2181 -p 18080:8080 -p 18085:8085 -p 19090:9090 -p 19095:9095 -p 16000:16000 -p 16010:16010 -p 16201:16201 -p 16301:16301 --name hbase1.2 harisekhon/hbase:1.2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"zk\"><a href=\"#zk\" class=\"headerlink\" title=\"zk\"></a>zk</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull zookeeper:3.5</span><br><span class=\"line\">docker run --name zookeeper3.5 -p 7998:2181 -d zookeeper:3.5</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop zookeeper</span><br><span class=\"line\">docker rm zookeeper</span><br><span class=\"line\">docker run --privileged=true -d --name zookeeper --publish 2181:2181  -d zookeeper:3.5</span><br><span class=\"line\">docker update zookeeper --restart=always</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"kafka\"><a href=\"#kafka\" class=\"headerlink\" title=\"kafka\"></a>kafka</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull wurstmeister/kafka:2.11-1.1.1</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop kafka2.11</span><br><span class=\"line\">docker rm kafka2.11</span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">--env KAFKA_BROKER_ID=0 \\</span><br><span class=\"line\">--env KAFKA_ZOOKEEPER_CONNECT=172.16.106.78:7998 \\</span><br><span class=\"line\">--env KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.16.106.78:9092 \\</span><br><span class=\"line\">--env KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \\</span><br><span class=\"line\"> --privileged=true -d --name kafka2.11 -p 9092:9092 \\</span><br><span class=\"line\">wurstmeister/kafka:2.11-1.1.1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fastdfs\"><a href=\"#fastdfs\" class=\"headerlink\" title=\"fastdfs\"></a>fastdfs</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker stop trakcer</span><br><span class=\"line\">sudo docker rm trakcer</span><br><span class=\"line\">sudo docker run -d --privileged=true -p 22122:22122 --name trakcer --net=host 10.10.208.193:5000/urcs/fastdfs_tracker:4.08 tracker</span><br><span class=\"line\">sudo docker update trakcer --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">sudo docker stop storage</span><br><span class=\"line\">sudo docker rm storage</span><br><span class=\"line\">sudo docker run -d --privileged=true -p 23000:23000 -p 8888:8888 --name storage --net=host --env TRACKER_SERVER=172.16.106.78:22122 10.10.208.193:5000/urcs/fastdfs_storage:4.08 storage</span><br><span class=\"line\">sudo docker update storage --restart=always</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"es\"><a href=\"#es\" class=\"headerlink\" title=\"es\"></a>es</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull docker.elastic.co/elasticsearch/elasticsearch:6.0.0</span><br><span class=\"line\">docker stop elasticsearch</span><br><span class=\"line\">docker rm elasticsearch</span><br><span class=\"line\">docker run -d --name elasticsearch \\</span><br><span class=\"line\">-p 9200:9200 -p 9300:9300 \\</span><br><span class=\"line\">-e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:6.0.0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull docker.elastic.co/elasticsearch/elasticsearch:6.3.2</span><br><span class=\"line\">docker stop elasticsearch</span><br><span class=\"line\">docker rm elasticsearch</span><br><span class=\"line\">docker run -d --name elasticsearch \\</span><br><span class=\"line\">-p 9200:9200 -p 9300:9300 \\</span><br><span class=\"line\">-e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:6.3.2</span><br><span class=\"line\">docker update elasticsearch --restart=always</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"kibana\"><a href=\"#kibana\" class=\"headerlink\" title=\"kibana\"></a>kibana</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull elastic/kibana:6.0.0</span><br><span class=\"line\"></span><br><span class=\"line\">//做了定制化设置</span><br><span class=\"line\">docker stop kibana6.0.0</span><br><span class=\"line\">docker rm kibana6.0.0</span><br><span class=\"line\">docker run -d --name kibana6.0.0  -e ELASTICSEARCH_URL=http://172.29.203.16:9200 -p 5601:5601  elastic/kibana:6.0.0</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull elastic/kibana:6.3.2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker stop kibana6.3.2</span><br><span class=\"line\">docker rm kibana6.3.2</span><br><span class=\"line\">docker run -d --name kibana6.3.2  -e ELASTICSEARCH_URL=http://10.40.1.180:9200 -p 5601:5601  elastic/kibana:6.3.2</span><br><span class=\"line\">docker update kibana6.3.2 --restart=always</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"spark\"><a href=\"#spark\" class=\"headerlink\" title=\"spark\"></a>spark</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull sequenceiq/spark:1.6.0</span><br><span class=\"line\"> docker run -it -p 8088:8088 -p 8042:8042 -h sandbox sequenceiq/spark:1.6.0 bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取镜像</span><br><span class=\"line\">docker pull beginor/gitlab-ce:11.3.0-ce.0</span><br><span class=\"line\"></span><br><span class=\"line\">运行</span><br><span class=\"line\">通常会将 GitLab 的配置 (etc) 、 日志 (log) 、数据 (data) 放到容器之外， 便于日后升级， 因此请先准备这三个目录。</span><br><span class=\"line\">sudo mkdir -p /mnt/sda1/gitlab/etc</span><br><span class=\"line\">sudo mkdir -p /mnt/sda1/gitlab/log</span><br><span class=\"line\">sudo mkdir -p /mnt/sda1/gitlab/data</span><br><span class=\"line\"></span><br><span class=\"line\">准备好这三个目录之后， 就可以开始运行 Docker 镜像了。 我的建议是使用unless-stopped 作为重启策略， 因为这样可以手工停止容器， 方便维护。</span><br><span class=\"line\">完整的运行命令如下：</span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">    --detach \\</span><br><span class=\"line\">    --publish 8443:443 \\</span><br><span class=\"line\">    --publish 8080:80 \\</span><br><span class=\"line\">    --name gitlab \\</span><br><span class=\"line\">    --restart unless-stopped \\</span><br><span class=\"line\">    --volume /mnt/sda1/gitlab/etc:/etc/gitlab \\</span><br><span class=\"line\">    --volume /mnt/sda1/gitlab/log:/var/log/gitlab \\</span><br><span class=\"line\">    --volume /mnt/sda1/gitlab/data:/var/opt/gitlab \\</span><br><span class=\"line\">    beginor/gitlab-ce:11.3.0-ce.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ftp\"><a href=\"#ftp\" class=\"headerlink\" title=\"ftp\"></a>ftp</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull fauria/vsftpd</span><br><span class=\"line\">mkdir /home/ultra/ftp</span><br><span class=\"line\">docker stop vsftpd</span><br><span class=\"line\">docker rm vsftpd</span><br><span class=\"line\">docker run -d -v /home/ultra/ftp:/home/vsftpd -p 2120:20 -p 2121:21 -p 21100-21110:21100-21110 -e FTP_USER=urcs -e FTP_PASS=urcs@2018 -e PASV_ADDRESS=10.10.208.194 -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 --name vsftpd --restart=always fauria/vsftpd</span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"speed\"><a href=\"#speed\" class=\"headerlink\" title=\"speed\"></a>speed</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop speedtest</span><br><span class=\"line\">docker rm speedtest</span><br><span class=\"line\">docker run -d --name  speedtest -p 8888:80 adolfintel/speedtest:latest</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"docker部署数据中间件\"><a href=\"#docker部署数据中间件\" class=\"headerlink\" title=\"docker部署数据中间件\"></a>docker部署数据中间件</h2><ul>\n<li>docker部署开发环境数据中间件</li>\n</ul>\n<h3 id=\"常见工具命令\"><a href=\"#常见工具命令\" class=\"headerlink\" title=\"常见工具命令\"></a>常见工具命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm `docker ps -a -q`</span><br><span class=\"line\">docker start $(docker ps -a | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)</span><br><span class=\"line\">docker stop $(docker ps -a  | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># mysql5.6.40</span><br><span class=\"line\">docker stop mysql.5.6.40</span><br><span class=\"line\">docker rm mysql.5.6.40</span><br><span class=\"line\">docker run --privileged=true --name mysql.5.6.40 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.6.40</span><br><span class=\"line\">docker update mysql.5.6.40 --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\"># mysql3336</span><br><span class=\"line\">docker stop mysql3336</span><br><span class=\"line\">docker rm mysql3336</span><br><span class=\"line\">docker run --privileged=true --name mysql3336 -p 3336:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.6.40</span><br><span class=\"line\">docker update mysql3336 --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\"># mysql3337</span><br><span class=\"line\">docker stop mysql3337</span><br><span class=\"line\">docker rm mysql3337</span><br><span class=\"line\">docker run --privileged=true --name mysql3337 -p 3337:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.6.40</span><br><span class=\"line\">docker update mysql3337 --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\"># mysql5.7.19</span><br><span class=\"line\">docker stop mysql5.7.19</span><br><span class=\"line\">docker rm mysql5.7.19</span><br><span class=\"line\">docker run --name mysql5.7.19 --privileged=true -p 3337:3306 -e MYSQL_ROOT_PASSWORD=coral@2018 -d mysql:5.7.19</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis 单机</span><br><span class=\"line\">docker stop redis-6379</span><br><span class=\"line\">docker rm redis-6379</span><br><span class=\"line\">docker run -d -p 6379:6379  --name redis-6379  --privileged=true redis:3.2 redis-server --port 6379 --requirepass &quot;urcs@2021&quot;</span><br><span class=\"line\">docker update redis-6379 --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop redis-6380</span><br><span class=\"line\">docker rm redis-6380</span><br><span class=\"line\">docker run -d -p 6380:6380  --name redis-6380  --privileged=true redis:3.2 redis-server --port 6380</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop redis-6379</span><br><span class=\"line\">docker rm redis-6379</span><br><span class=\"line\">docker run -d -p 6379:6379  --name redis-6379  --privileged=true redis:3.2 redis-server --port 6379</span><br><span class=\"line\">docker update redis-6379 --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop redis-6379</span><br><span class=\"line\">docker rm redis-6379</span><br><span class=\"line\">docker run -d -p 6379:6379  --name redis-6379  --privileged=true redis:6.2 redis-server --port 6379</span><br><span class=\"line\">docker update redis-6379 --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\"># sentinel</span><br><span class=\"line\">在当前目录配置文件</span><br><span class=\"line\">vim sentinel.conf</span><br><span class=\"line\">sentinel monitor mymaster 10.10.220.120 6379 1</span><br><span class=\"line\"></span><br><span class=\"line\">启动sentinel</span><br><span class=\"line\">docker stop redis-sentinel-26379</span><br><span class=\"line\">docker rm redis-sentinel-26379</span><br><span class=\"line\">docker run -d -p 26379:26379 -v /Users/wuhao/data/soft/redis/sentinel.conf:/usr/local/bin/redis-conf/sentinel.conf --name redis-sentinel-26379  redis:3.2 redis-sentinel /usr/local/bin/redis-conf/sentinel.conf --port 26379</span><br><span class=\"line\"></span><br><span class=\"line\">docker logs -f redis-sentinel-26379</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hbase\"><a href=\"#hbase\" class=\"headerlink\" title=\"hbase\"></a>hbase</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">拉取镜像</span><br><span class=\"line\">docker pull harisekhon/hbase:1.2</span><br><span class=\"line\">运行镜像</span><br><span class=\"line\">docker stop hbase1.2</span><br><span class=\"line\">docker rm hbase1.2</span><br><span class=\"line\">docker run -d -h hbase --privileged=true -p 2181:2181 -p 18080:8080 -p 18085:8085 -p 19090:9090 -p 19095:9095 -p 16000:16000 -p 16020:16020 -p 16010:16010 -p 16201:16201 -p 16301:16301 --name hbase1.2 harisekhon/hbase:1.2</span><br><span class=\"line\">docker update hbase1.2 --restart=always</span><br><span class=\"line\">docker exec -it hbase bash</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -h hbase --privileged=true -p 2181:2181 -p 18080:8080 -p 18085:8085 -p 19090:9090 -p 19095:9095 -p 16000:16000 -p 16010:16010 -p 16201:16201 -p 16301:16301 --name hbase1.2 harisekhon/hbase:1.2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"zk\"><a href=\"#zk\" class=\"headerlink\" title=\"zk\"></a>zk</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull zookeeper:3.5</span><br><span class=\"line\">docker run --name zookeeper3.5 -p 7998:2181 -d zookeeper:3.5</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop zookeeper</span><br><span class=\"line\">docker rm zookeeper</span><br><span class=\"line\">docker run --privileged=true -d --name zookeeper --publish 2181:2181  -d zookeeper:3.5</span><br><span class=\"line\">docker update zookeeper --restart=always</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"kafka\"><a href=\"#kafka\" class=\"headerlink\" title=\"kafka\"></a>kafka</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull wurstmeister/kafka:2.11-1.1.1</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop kafka2.11</span><br><span class=\"line\">docker rm kafka2.11</span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">--env KAFKA_BROKER_ID=0 \\</span><br><span class=\"line\">--env KAFKA_ZOOKEEPER_CONNECT=172.16.106.78:7998 \\</span><br><span class=\"line\">--env KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.16.106.78:9092 \\</span><br><span class=\"line\">--env KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \\</span><br><span class=\"line\"> --privileged=true -d --name kafka2.11 -p 9092:9092 \\</span><br><span class=\"line\">wurstmeister/kafka:2.11-1.1.1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fastdfs\"><a href=\"#fastdfs\" class=\"headerlink\" title=\"fastdfs\"></a>fastdfs</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker stop trakcer</span><br><span class=\"line\">sudo docker rm trakcer</span><br><span class=\"line\">sudo docker run -d --privileged=true -p 22122:22122 --name trakcer --net=host 10.10.208.193:5000/urcs/fastdfs_tracker:4.08 tracker</span><br><span class=\"line\">sudo docker update trakcer --restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">sudo docker stop storage</span><br><span class=\"line\">sudo docker rm storage</span><br><span class=\"line\">sudo docker run -d --privileged=true -p 23000:23000 -p 8888:8888 --name storage --net=host --env TRACKER_SERVER=172.16.106.78:22122 10.10.208.193:5000/urcs/fastdfs_storage:4.08 storage</span><br><span class=\"line\">sudo docker update storage --restart=always</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"es\"><a href=\"#es\" class=\"headerlink\" title=\"es\"></a>es</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull docker.elastic.co/elasticsearch/elasticsearch:6.0.0</span><br><span class=\"line\">docker stop elasticsearch</span><br><span class=\"line\">docker rm elasticsearch</span><br><span class=\"line\">docker run -d --name elasticsearch \\</span><br><span class=\"line\">-p 9200:9200 -p 9300:9300 \\</span><br><span class=\"line\">-e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:6.0.0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull docker.elastic.co/elasticsearch/elasticsearch:6.3.2</span><br><span class=\"line\">docker stop elasticsearch</span><br><span class=\"line\">docker rm elasticsearch</span><br><span class=\"line\">docker run -d --name elasticsearch \\</span><br><span class=\"line\">-p 9200:9200 -p 9300:9300 \\</span><br><span class=\"line\">-e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:6.3.2</span><br><span class=\"line\">docker update elasticsearch --restart=always</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"kibana\"><a href=\"#kibana\" class=\"headerlink\" title=\"kibana\"></a>kibana</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull elastic/kibana:6.0.0</span><br><span class=\"line\"></span><br><span class=\"line\">//做了定制化设置</span><br><span class=\"line\">docker stop kibana6.0.0</span><br><span class=\"line\">docker rm kibana6.0.0</span><br><span class=\"line\">docker run -d --name kibana6.0.0  -e ELASTICSEARCH_URL=http://172.29.203.16:9200 -p 5601:5601  elastic/kibana:6.0.0</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull elastic/kibana:6.3.2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker stop kibana6.3.2</span><br><span class=\"line\">docker rm kibana6.3.2</span><br><span class=\"line\">docker run -d --name kibana6.3.2  -e ELASTICSEARCH_URL=http://10.40.1.180:9200 -p 5601:5601  elastic/kibana:6.3.2</span><br><span class=\"line\">docker update kibana6.3.2 --restart=always</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"spark\"><a href=\"#spark\" class=\"headerlink\" title=\"spark\"></a>spark</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull sequenceiq/spark:1.6.0</span><br><span class=\"line\"> docker run -it -p 8088:8088 -p 8042:8042 -h sandbox sequenceiq/spark:1.6.0 bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取镜像</span><br><span class=\"line\">docker pull beginor/gitlab-ce:11.3.0-ce.0</span><br><span class=\"line\"></span><br><span class=\"line\">运行</span><br><span class=\"line\">通常会将 GitLab 的配置 (etc) 、 日志 (log) 、数据 (data) 放到容器之外， 便于日后升级， 因此请先准备这三个目录。</span><br><span class=\"line\">sudo mkdir -p /mnt/sda1/gitlab/etc</span><br><span class=\"line\">sudo mkdir -p /mnt/sda1/gitlab/log</span><br><span class=\"line\">sudo mkdir -p /mnt/sda1/gitlab/data</span><br><span class=\"line\"></span><br><span class=\"line\">准备好这三个目录之后， 就可以开始运行 Docker 镜像了。 我的建议是使用unless-stopped 作为重启策略， 因为这样可以手工停止容器， 方便维护。</span><br><span class=\"line\">完整的运行命令如下：</span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">    --detach \\</span><br><span class=\"line\">    --publish 8443:443 \\</span><br><span class=\"line\">    --publish 8080:80 \\</span><br><span class=\"line\">    --name gitlab \\</span><br><span class=\"line\">    --restart unless-stopped \\</span><br><span class=\"line\">    --volume /mnt/sda1/gitlab/etc:/etc/gitlab \\</span><br><span class=\"line\">    --volume /mnt/sda1/gitlab/log:/var/log/gitlab \\</span><br><span class=\"line\">    --volume /mnt/sda1/gitlab/data:/var/opt/gitlab \\</span><br><span class=\"line\">    beginor/gitlab-ce:11.3.0-ce.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ftp\"><a href=\"#ftp\" class=\"headerlink\" title=\"ftp\"></a>ftp</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull fauria/vsftpd</span><br><span class=\"line\">mkdir /home/ultra/ftp</span><br><span class=\"line\">docker stop vsftpd</span><br><span class=\"line\">docker rm vsftpd</span><br><span class=\"line\">docker run -d -v /home/ultra/ftp:/home/vsftpd -p 2120:20 -p 2121:21 -p 21100-21110:21100-21110 -e FTP_USER=urcs -e FTP_PASS=urcs@2018 -e PASV_ADDRESS=10.10.208.194 -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 --name vsftpd --restart=always fauria/vsftpd</span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"speed\"><a href=\"#speed\" class=\"headerlink\" title=\"speed\"></a>speed</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop speedtest</span><br><span class=\"line\">docker rm speedtest</span><br><span class=\"line\">docker run -d --name  speedtest -p 8888:80 adolfintel/speedtest:latest</span><br></pre></td></tr></table></figure>\n"},{"title":"JVM优秀文章","_content":"\n\n# JVM G1 算法系列\n\n- [G1 垃圾收集器介绍](https://www.jianshu.com/p/0f1f5adffdc1)\n- [G1 垃圾收集器之 RSet](https://www.jianshu.com/p/870abddaba41)\n- [G1 垃圾收集器之 SATB](https://www.jianshu.com/p/9e70097807ba)\n- [G1 垃圾收集器之对象分配过程](https://www.jianshu.com/p/a0efa489b99f)\n\n# ZGC 系列\n\n- [ZGC，一个超乎想象的垃圾收集器](https://www.jianshu.com/p/6f89fd5842bf)\n- [ZGC 什么时候进行垃圾回收](https://www.jianshu.com/p/b5fb06ffbb90)\n\n# JVM 源码分析系列\n\n- [深入分析 Object.finalize 方法的实现原理](https://www.jianshu.com/p/9d2788fffd5f)\n- [JVM 源码分析之 Object.wait/notify 实现](https://www.jianshu.com/p/f4454164c017)\n- [JVM 源码分析之 java 对象头实现](https://www.jianshu.com/p/9c19eb0ea4d8)\n- [JVM 源码分析之 synchronized 实现](https://www.jianshu.com/p/c5058b6fe8e5)\n- [JVM 源码分析之 Java 类的加载过程](https://www.jianshu.com/p/252e27863822)\n- [JVM 源码分析之 Java 对象的创建过程](https://www.jianshu.com/p/0009aaac16ed)\n- [JVM 源码分析之 JVM 启动流程](https://www.jianshu.com/p/b91258bc08ac)\n- [JVM 源码分析之堆内存的初始化](https://www.jianshu.com/p/0f7bed2df952)\n- [JVM 源码分析之 Java 对象的内存分配](https://www.jianshu.com/p/e56c808b6c8a)\n- [JVM 源码分析之如何触发并执行 GC 线程](https://www.jianshu.com/p/1544d3011ddb)\n- [JVM 源码分析之垃圾收集的执行过程](https://www.jianshu.com/p/04eff13f3707)\n- [JVM 源码分析之新生代 DefNewGeneration 的实现](https://www.jianshu.com/p/2b64294fa1bd)\n- [JVM 源码分析之老年代 TenuredGeneration 的垃圾回收算法实现](https://www.jianshu.com/p/29c20f0684d0)\n- [JVM 源码分析之安全点 safepoint](https://www.jianshu.com/p/c79c5e02ebe6)\n  [JVM 源码分析之线程局部缓存 TLAB](https://www.jianshu.com/p/cd85098cca39)\n- [JVM 源码分析之不要被 GC 日志的表面现象迷惑](https://www.jianshu.com/p/1f2fd54808e2)\n- [JVM 源码分析之 YGC 的来龙去脉](https://www.jianshu.com/p/9af1a63a33c3)\n- [JVM 源码分析之跨代引用 CardTable](https://www.jianshu.com/p/5037459097ee)\n- [JVM 源码分析之 System.gc()](https://www.jianshu.com/p/be8740726cef)\n- [JVM 源码分析之 GC locker 深度分析](https://www.jianshu.com/p/6d664f026508)\n- [JVM 源码分析之由 JNI 操作引起的迷惑性 GC](https://www.jianshu.com/p/94bd5864f89c)\n- [从 JVM 角度看看 Java 的 clone 操作](https://www.jianshu.com/p/309f80f33190)\n\n\n# JVM学习目录\n\n<p>1. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5204694.html\">【JVM】JVM系列之JVM体系（一）</a></p>\n<p>2. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5218594.html\">【JVM】JVM系列之垃圾回收（二）</a></p>\n<p>3. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5263764.html\">【JVM】JVM系列之Class文件（三）</a></p>\n<p>4. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5269545.html\">【JVM】JVM系列之类加载机制（四）</a></p>\n<p>5. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5275189.html\">【JVM】JVM系列之执行引擎（五）</a></p>\n<p>6. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5291484.html\">【JVM】JVM系列之内存模型（六）</a></p>\n</div>","source":"_posts/language/jvm/JVM优秀文章.md","raw":"---\ntitle: JVM优秀文章\ncategories:\n- java\ntag:\n- JVM\n---\n\n\n# JVM G1 算法系列\n\n- [G1 垃圾收集器介绍](https://www.jianshu.com/p/0f1f5adffdc1)\n- [G1 垃圾收集器之 RSet](https://www.jianshu.com/p/870abddaba41)\n- [G1 垃圾收集器之 SATB](https://www.jianshu.com/p/9e70097807ba)\n- [G1 垃圾收集器之对象分配过程](https://www.jianshu.com/p/a0efa489b99f)\n\n# ZGC 系列\n\n- [ZGC，一个超乎想象的垃圾收集器](https://www.jianshu.com/p/6f89fd5842bf)\n- [ZGC 什么时候进行垃圾回收](https://www.jianshu.com/p/b5fb06ffbb90)\n\n# JVM 源码分析系列\n\n- [深入分析 Object.finalize 方法的实现原理](https://www.jianshu.com/p/9d2788fffd5f)\n- [JVM 源码分析之 Object.wait/notify 实现](https://www.jianshu.com/p/f4454164c017)\n- [JVM 源码分析之 java 对象头实现](https://www.jianshu.com/p/9c19eb0ea4d8)\n- [JVM 源码分析之 synchronized 实现](https://www.jianshu.com/p/c5058b6fe8e5)\n- [JVM 源码分析之 Java 类的加载过程](https://www.jianshu.com/p/252e27863822)\n- [JVM 源码分析之 Java 对象的创建过程](https://www.jianshu.com/p/0009aaac16ed)\n- [JVM 源码分析之 JVM 启动流程](https://www.jianshu.com/p/b91258bc08ac)\n- [JVM 源码分析之堆内存的初始化](https://www.jianshu.com/p/0f7bed2df952)\n- [JVM 源码分析之 Java 对象的内存分配](https://www.jianshu.com/p/e56c808b6c8a)\n- [JVM 源码分析之如何触发并执行 GC 线程](https://www.jianshu.com/p/1544d3011ddb)\n- [JVM 源码分析之垃圾收集的执行过程](https://www.jianshu.com/p/04eff13f3707)\n- [JVM 源码分析之新生代 DefNewGeneration 的实现](https://www.jianshu.com/p/2b64294fa1bd)\n- [JVM 源码分析之老年代 TenuredGeneration 的垃圾回收算法实现](https://www.jianshu.com/p/29c20f0684d0)\n- [JVM 源码分析之安全点 safepoint](https://www.jianshu.com/p/c79c5e02ebe6)\n  [JVM 源码分析之线程局部缓存 TLAB](https://www.jianshu.com/p/cd85098cca39)\n- [JVM 源码分析之不要被 GC 日志的表面现象迷惑](https://www.jianshu.com/p/1f2fd54808e2)\n- [JVM 源码分析之 YGC 的来龙去脉](https://www.jianshu.com/p/9af1a63a33c3)\n- [JVM 源码分析之跨代引用 CardTable](https://www.jianshu.com/p/5037459097ee)\n- [JVM 源码分析之 System.gc()](https://www.jianshu.com/p/be8740726cef)\n- [JVM 源码分析之 GC locker 深度分析](https://www.jianshu.com/p/6d664f026508)\n- [JVM 源码分析之由 JNI 操作引起的迷惑性 GC](https://www.jianshu.com/p/94bd5864f89c)\n- [从 JVM 角度看看 Java 的 clone 操作](https://www.jianshu.com/p/309f80f33190)\n\n\n# JVM学习目录\n\n<p>1. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5204694.html\">【JVM】JVM系列之JVM体系（一）</a></p>\n<p>2. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5218594.html\">【JVM】JVM系列之垃圾回收（二）</a></p>\n<p>3. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5263764.html\">【JVM】JVM系列之Class文件（三）</a></p>\n<p>4. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5269545.html\">【JVM】JVM系列之类加载机制（四）</a></p>\n<p>5. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5275189.html\">【JVM】JVM系列之执行引擎（五）</a></p>\n<p>6. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5291484.html\">【JVM】JVM系列之内存模型（六）</a></p>\n</div>","slug":"language/jvm/JVM优秀文章","published":1,"date":"2021-07-31T11:10:47.898Z","updated":"2021-07-31T11:10:47.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyik001uu6uk3rgtf03z","content":"<h1 id=\"JVM-G1-算法系列\"><a href=\"#JVM-G1-算法系列\" class=\"headerlink\" title=\"JVM G1 算法系列\"></a>JVM G1 算法系列</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/0f1f5adffdc1\">G1 垃圾收集器介绍</a></li>\n<li><a href=\"https://www.jianshu.com/p/870abddaba41\">G1 垃圾收集器之 RSet</a></li>\n<li><a href=\"https://www.jianshu.com/p/9e70097807ba\">G1 垃圾收集器之 SATB</a></li>\n<li><a href=\"https://www.jianshu.com/p/a0efa489b99f\">G1 垃圾收集器之对象分配过程</a></li>\n</ul>\n<h1 id=\"ZGC-系列\"><a href=\"#ZGC-系列\" class=\"headerlink\" title=\"ZGC 系列\"></a>ZGC 系列</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/6f89fd5842bf\">ZGC，一个超乎想象的垃圾收集器</a></li>\n<li><a href=\"https://www.jianshu.com/p/b5fb06ffbb90\">ZGC 什么时候进行垃圾回收</a></li>\n</ul>\n<h1 id=\"JVM-源码分析系列\"><a href=\"#JVM-源码分析系列\" class=\"headerlink\" title=\"JVM 源码分析系列\"></a>JVM 源码分析系列</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/9d2788fffd5f\">深入分析 Object.finalize 方法的实现原理</a></li>\n<li><a href=\"https://www.jianshu.com/p/f4454164c017\">JVM 源码分析之 Object.wait/notify 实现</a></li>\n<li><a href=\"https://www.jianshu.com/p/9c19eb0ea4d8\">JVM 源码分析之 java 对象头实现</a></li>\n<li><a href=\"https://www.jianshu.com/p/c5058b6fe8e5\">JVM 源码分析之 synchronized 实现</a></li>\n<li><a href=\"https://www.jianshu.com/p/252e27863822\">JVM 源码分析之 Java 类的加载过程</a></li>\n<li><a href=\"https://www.jianshu.com/p/0009aaac16ed\">JVM 源码分析之 Java 对象的创建过程</a></li>\n<li><a href=\"https://www.jianshu.com/p/b91258bc08ac\">JVM 源码分析之 JVM 启动流程</a></li>\n<li><a href=\"https://www.jianshu.com/p/0f7bed2df952\">JVM 源码分析之堆内存的初始化</a></li>\n<li><a href=\"https://www.jianshu.com/p/e56c808b6c8a\">JVM 源码分析之 Java 对象的内存分配</a></li>\n<li><a href=\"https://www.jianshu.com/p/1544d3011ddb\">JVM 源码分析之如何触发并执行 GC 线程</a></li>\n<li><a href=\"https://www.jianshu.com/p/04eff13f3707\">JVM 源码分析之垃圾收集的执行过程</a></li>\n<li><a href=\"https://www.jianshu.com/p/2b64294fa1bd\">JVM 源码分析之新生代 DefNewGeneration 的实现</a></li>\n<li><a href=\"https://www.jianshu.com/p/29c20f0684d0\">JVM 源码分析之老年代 TenuredGeneration 的垃圾回收算法实现</a></li>\n<li><a href=\"https://www.jianshu.com/p/c79c5e02ebe6\">JVM 源码分析之安全点 safepoint</a><br><a href=\"https://www.jianshu.com/p/cd85098cca39\">JVM 源码分析之线程局部缓存 TLAB</a></li>\n<li><a href=\"https://www.jianshu.com/p/1f2fd54808e2\">JVM 源码分析之不要被 GC 日志的表面现象迷惑</a></li>\n<li><a href=\"https://www.jianshu.com/p/9af1a63a33c3\">JVM 源码分析之 YGC 的来龙去脉</a></li>\n<li><a href=\"https://www.jianshu.com/p/5037459097ee\">JVM 源码分析之跨代引用 CardTable</a></li>\n<li><a href=\"https://www.jianshu.com/p/be8740726cef\">JVM 源码分析之 System.gc()</a></li>\n<li><a href=\"https://www.jianshu.com/p/6d664f026508\">JVM 源码分析之 GC locker 深度分析</a></li>\n<li><a href=\"https://www.jianshu.com/p/94bd5864f89c\">JVM 源码分析之由 JNI 操作引起的迷惑性 GC</a></li>\n<li><a href=\"https://www.jianshu.com/p/309f80f33190\">从 JVM 角度看看 Java 的 clone 操作</a></li>\n</ul>\n<h1 id=\"JVM学习目录\"><a href=\"#JVM学习目录\" class=\"headerlink\" title=\"JVM学习目录\"></a>JVM学习目录</h1><p>1. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5204694.html\">【JVM】JVM系列之JVM体系（一）</a></p>\n<p>2. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5218594.html\">【JVM】JVM系列之垃圾回收（二）</a></p>\n<p>3. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5263764.html\">【JVM】JVM系列之Class文件（三）</a></p>\n<p>4. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5269545.html\">【JVM】JVM系列之类加载机制（四）</a></p>\n<p>5. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5275189.html\">【JVM】JVM系列之执行引擎（五）</a></p>\n<p>6. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5291484.html\">【JVM】JVM系列之内存模型（六）</a></p>\n</div>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JVM-G1-算法系列\"><a href=\"#JVM-G1-算法系列\" class=\"headerlink\" title=\"JVM G1 算法系列\"></a>JVM G1 算法系列</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/0f1f5adffdc1\">G1 垃圾收集器介绍</a></li>\n<li><a href=\"https://www.jianshu.com/p/870abddaba41\">G1 垃圾收集器之 RSet</a></li>\n<li><a href=\"https://www.jianshu.com/p/9e70097807ba\">G1 垃圾收集器之 SATB</a></li>\n<li><a href=\"https://www.jianshu.com/p/a0efa489b99f\">G1 垃圾收集器之对象分配过程</a></li>\n</ul>\n<h1 id=\"ZGC-系列\"><a href=\"#ZGC-系列\" class=\"headerlink\" title=\"ZGC 系列\"></a>ZGC 系列</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/6f89fd5842bf\">ZGC，一个超乎想象的垃圾收集器</a></li>\n<li><a href=\"https://www.jianshu.com/p/b5fb06ffbb90\">ZGC 什么时候进行垃圾回收</a></li>\n</ul>\n<h1 id=\"JVM-源码分析系列\"><a href=\"#JVM-源码分析系列\" class=\"headerlink\" title=\"JVM 源码分析系列\"></a>JVM 源码分析系列</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/9d2788fffd5f\">深入分析 Object.finalize 方法的实现原理</a></li>\n<li><a href=\"https://www.jianshu.com/p/f4454164c017\">JVM 源码分析之 Object.wait/notify 实现</a></li>\n<li><a href=\"https://www.jianshu.com/p/9c19eb0ea4d8\">JVM 源码分析之 java 对象头实现</a></li>\n<li><a href=\"https://www.jianshu.com/p/c5058b6fe8e5\">JVM 源码分析之 synchronized 实现</a></li>\n<li><a href=\"https://www.jianshu.com/p/252e27863822\">JVM 源码分析之 Java 类的加载过程</a></li>\n<li><a href=\"https://www.jianshu.com/p/0009aaac16ed\">JVM 源码分析之 Java 对象的创建过程</a></li>\n<li><a href=\"https://www.jianshu.com/p/b91258bc08ac\">JVM 源码分析之 JVM 启动流程</a></li>\n<li><a href=\"https://www.jianshu.com/p/0f7bed2df952\">JVM 源码分析之堆内存的初始化</a></li>\n<li><a href=\"https://www.jianshu.com/p/e56c808b6c8a\">JVM 源码分析之 Java 对象的内存分配</a></li>\n<li><a href=\"https://www.jianshu.com/p/1544d3011ddb\">JVM 源码分析之如何触发并执行 GC 线程</a></li>\n<li><a href=\"https://www.jianshu.com/p/04eff13f3707\">JVM 源码分析之垃圾收集的执行过程</a></li>\n<li><a href=\"https://www.jianshu.com/p/2b64294fa1bd\">JVM 源码分析之新生代 DefNewGeneration 的实现</a></li>\n<li><a href=\"https://www.jianshu.com/p/29c20f0684d0\">JVM 源码分析之老年代 TenuredGeneration 的垃圾回收算法实现</a></li>\n<li><a href=\"https://www.jianshu.com/p/c79c5e02ebe6\">JVM 源码分析之安全点 safepoint</a><br><a href=\"https://www.jianshu.com/p/cd85098cca39\">JVM 源码分析之线程局部缓存 TLAB</a></li>\n<li><a href=\"https://www.jianshu.com/p/1f2fd54808e2\">JVM 源码分析之不要被 GC 日志的表面现象迷惑</a></li>\n<li><a href=\"https://www.jianshu.com/p/9af1a63a33c3\">JVM 源码分析之 YGC 的来龙去脉</a></li>\n<li><a href=\"https://www.jianshu.com/p/5037459097ee\">JVM 源码分析之跨代引用 CardTable</a></li>\n<li><a href=\"https://www.jianshu.com/p/be8740726cef\">JVM 源码分析之 System.gc()</a></li>\n<li><a href=\"https://www.jianshu.com/p/6d664f026508\">JVM 源码分析之 GC locker 深度分析</a></li>\n<li><a href=\"https://www.jianshu.com/p/94bd5864f89c\">JVM 源码分析之由 JNI 操作引起的迷惑性 GC</a></li>\n<li><a href=\"https://www.jianshu.com/p/309f80f33190\">从 JVM 角度看看 Java 的 clone 操作</a></li>\n</ul>\n<h1 id=\"JVM学习目录\"><a href=\"#JVM学习目录\" class=\"headerlink\" title=\"JVM学习目录\"></a>JVM学习目录</h1><p>1. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5204694.html\">【JVM】JVM系列之JVM体系（一）</a></p>\n<p>2. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5218594.html\">【JVM】JVM系列之垃圾回收（二）</a></p>\n<p>3. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5263764.html\">【JVM】JVM系列之Class文件（三）</a></p>\n<p>4. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5269545.html\">【JVM】JVM系列之类加载机制（四）</a></p>\n<p>5. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5275189.html\">【JVM】JVM系列之执行引擎（五）</a></p>\n<p>6. <a id=\"cb_post_title_url\" class=\"postTitle2\" href=\"http://www.cnblogs.com/leesf456/p/5291484.html\">【JVM】JVM系列之内存模型（六）</a></p>\n</div>"},{"title":"JVM内存与线程","_content":"\n\n## 1 内存\n\n### 1.1 内存一致性\n\n由于计算机的存储设备与处理器的运算速度之间有着几个数量级的差距，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的高速缓存（Cache）来作为内存与处理器之间的缓冲：将运算需要使用到的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存之中，这样处理器就无须等待缓慢的内存读写了。基于高速缓存的存储交互很好地解决了处理器与内存的速度矛盾，但是也引入了新的问题：缓存一致性（CacheCoherence）。在多处理器系统中，每个处理器都有自己的高速缓存，而它们又共享同一主内存（MainMemory），如图所示：\n\n![这里写图片描述](http://img.blog.csdn.net/20170806222602143?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致的情况，如果真的发生这种情况，那同步回到主内存时以谁的缓存数据为准呢？为了解决一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作，这类协议有 MSI、MESI（IllinoisProtocol）、MOSI、Synapse、Firefly 及 DragonProtocol，等等。\n\n### 1.2 主内存与工作内存\n\nJava 内存模型的主要目标是定义程序各个变量的访问规则，即在虚拟机机中将变量存储到内存和从内存中取出变量这样的底层细节。此处的变量（Variable）与 Java 编程中所说的变量略有区别，它包括了实例字段、静态字段和构成数组对象的元素，但是不包括局部变量与方法参数，因为后者是线程私有的[3]，不会被共享，自然就不存在竞争问题。为了获得较好的执行效能，Java 内存模型并没有限制执行引擎使用处理器的特定寄存器或缓存来和主内存进行交互，也没有限制即时编译器调整代码执行顺序这类权利，线程对变量的操作都必须在工作内存中进行，而不能直接读写主内存，线程间无法直接访问对方工作内存的中变量，线程间变量值得传递均需要通过主内存来完成。如图所示：\n\n### 1.3 内存间的交互操作\n\n关于主内存与工作内存之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步到主内存之间的实现细节，Java 内存模型定义了以下八种操作来完成：\n\nlock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态。\n\nunlock（解锁）：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。\n\nread（读取）：作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的 load 动作使用\n\nload（载入）：作用于工作内存的变量，它把 read 操作从主内存中得到的变量值放入工作内存的变量副本中。\n\nuse（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。\n\nassign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。\n\nstore（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的 write 的操作。\n\nwrite（写入）：作用于主内存的变量，它把 store 操作从工作内存中一个变量的值传送到主内存的变量中。\n\n如果要把一个变量从主内存中复制到工作内存，就需要按顺寻地执行 read 和 load 操作， 如果把变量从工作内存中同步回主内存中，就要按顺序地执行 store 和 write 操作。Java 内存 模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。也就是 read 和 load 之间， store 和 write 之间是可以插入其他指令的，如对主内存中的变量 a、b 进行访问时，可能的顺 序是 read a，read b，load b， load a。\n\nJava 内存模型还规定了在执行上述八种基本操作时，必须满足如下规则：\n\n不允许 read 和 load、store 和 write 操作之一单独出现\n\n不允许一个线程丢弃它的最近 assign 的操作，即变量在工作内存中改变了之后必须同步到主内存中。\n\n不允许一个线程无原因地（没有发生过任何 assign 操作）把数据从工作内存同步回主内存中。\n\n一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load 或 assign）的变量。即就是对一个变量实施 use 和 store 操作之前，必须先执行过了 assign 和 load 操作。\n\n一个变量在同一时刻只允许一条线程对其进行 lock 操作，但 lock 操作可以被同一条线程重复执行多次，多次执行 lock 后，只有执行相同次数的 unlock 操作，变量才会被解锁。lock 和 unlock 必须成对出现\n\n如果对一个变量执行 lock 操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行 load 或 assign 操作初始化变量的值\n\n如果一个变量事先没有被 lock 操作锁定，则不允许对它执行 unlock 操作；也不允许去 unlock 一个被其他线程锁定的变量。\n\n对一个变量执行 unlock 操作之前，必须先把此变量同步到主内存中（执行 store 和 write 操作）。\n\n### 1.4 重排序\n\n在执行程序时为了提高性能，编译器和处理器经常会对指令进行重排序。重排序分成三种类型：\n\n1.编译器优化的重排序。编译器在不改变单线程程序语义放入前提下，可以重新安排语句的执行顺序。\n\n2.指令级并行的重排序。现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。\n\n3.内存系统的重排序。由于处理器使用缓存和读写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。\n\n从 Java 源代码到最终实际执行的指令序列，会经过下面三种重排序：\n\n为了保证内存的可见性，Java 编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。Java 内存模型把内存屏障分为 LoadLoad、LoadStore、StoreLoad 和 StoreStore 四种：\n\n### 1.5 volatile 型变量\n\n当一个变量定义为 volatile 之后，它将具备两种特性：\n\n第一：保证此变量对所有线程的可见性，这里的可见性是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。普通变量的值在线程间传递需要通过主内存来完成\n\n由于 valatile 只能保证可见性，在不符合一下两条规则的运算场景中，我们仍要通过加锁来保证原子性\n\n1.运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值。\n\n2.变量不需要与其他的状态变量共同参与不变约束\n\n第二：禁止指令重排序，普通的变量仅仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证变量赋值操作的顺序与程序代码中执行顺序一致，这个就是所谓的线程内表现为串行的语义\n\nJava 内存模型中对 volatile 变量定义的特殊规则。假定 T 表示一个线程，V 和 W 分别表示两个 volatile 变量，那么在进行 read、load、use、assign、store、write 操作时需要满足如下的规则：\n\n1.只有当线程 T 对变量 V 执行的前一个动作是 load 的时候，线程 T 才能对变量 V 执行 use 动作；并且，只有当线程 T 对变量 V 执行的后一个动作是 use 的时候，线程 T 才能对变量 V 执行 load 操作。线程 T 对变量 V 的 use 操作可以认为是与线程 T 对变量 V 的 load 和 read 操作相关联的，必须一起连续出现。这条规则要求在工作内存中，每次使用变量 V 之前都必须先从主内存刷新最新值，用于保证能看到其它线程对变量 V 所作的修改后的值。\n\n2.只有当线程 T 对变量 V 执行的前一个动是 assign 的时候，线程 T 才能对变量 V 执行 store 操作；并且，只有当线程 T 对变量 V 执行的后一个动作是 store 操作的时候，线程 T 才能对变量 V 执行 assign 操作。线程 T 对变量 V 的 assign 操作可以认为是与线程 T 对变量 V 的 store 和 write 操作相关联的，必须一起连续出现。这一条规则要求在工作内存中，每次修改 V 后都必须立即同步回主内存中，用于保证其它线程可以看到自己对变量 V 的修改。\n\n3.假定操作 A 是线程 T 对变量 V 实施的 use 或 assign 动作，假定操作 F 是操作 A 相关联的 load 或 store 操作，假定操作 P 是与操作 F 相应的对变量 V 的 read 或 write 操作；类型地，假定动作 B 是线程 T 对变量 W 实施的 use 或 assign 动作，假定操作 G 是操作 B 相关联的 load 或 store 操作，假定操作 Q 是与操作 G 相应的对变量 V 的 read 或 write 操作。如果 A 先于 B，那么 P 先于 Q。这条规则要求 valitile 修改的变量不会被指令重排序优化，保证代码的执行顺序与程序的顺序相同。\n\n### 1.6 对于 long 和 double 型变量的特殊规则\n\nJava 模型要求 lock、unlock、read、load、assign、use、store、write 这 8 个操作都具有原子性，但是对于 64 为的数据类型（long 和 double），在模型中特别定义了一条相对宽松的规定：允许虚拟机将没有被 volatile 修饰的 64 位数据的读写操作分为两次 32 为的操作来进行，即允许虚拟机实现选择可以不保证 64 位数据类型的 load、store、read 和 write 这 4 个操作的原子性\n\n### 1.7 原子性、可见性和有序性\n\n原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。Java 内存模型是通过在变量修改后将新值同步会主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式来实现可见性，valatile 特殊规则保障新值可以立即同步到祝内存中。Synchronized 是在对一个变量执行 unlock 之前，必须把变量同步回主内存中（执行 store、write 操作）。被 final 修饰的字段在构造器中一旦初始化完成，并且构造器没有吧 this 的引用传递出去，那在其他线程中就能看见 final 字段的值\n\n可见性：可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。\n\n有序性：即程序执行的顺序按照代码的先后顺序执行。\n\n### 1.8 先行发生原则\n\n这些先行发生关系无须任何同步就已经存在，如果不再此列就不能保障顺序性，虚拟机就可以对它们任意地进行重排序\n\n1.程序次序规则：在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。准确的说，应该是控制顺序而不是程序代码顺序，因为要考虑分支。循环等结构\n\n2.管程锁定规则：一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。这里必须强调的是同一个锁，而后面的是指时间上的先后顺序\n\n3.Volatile 变量规则：对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作，这里的后面同样是指时间上的先后顺序\n\n4.线程启动规则：Thread 对象的 start()方法先行发生于此线程的每一个动作\n\n5.线程终止规则：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过 Thread.joke()方法结束、ThradisAlive()的返回值等手段检测到线程已经终止执行\n\n6.线程中断规则：对线程 interrupt()方法的调用先行发生于被中断线程的代码检测到中断时间的发生，可以通过 Thread.interrupted()方法检测到是否有中断发生\n\n7.对象终结规则：一个对象的初始化完成(构造函数执行结束)先行发生于它的 finalize()方法的开始\n\n8.传递性：如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那就可以得出操作 A 先行发生于操作 C 的结论\n\n## 2 Java 线程\n\n协同式调度：线程的执行时间由线程本身控制\n\n抢占式调度：线程的执行时间由系统来分配\n\n### 2.1 状态转换\n\n1.新建\n\n2.运行：可能正在执行。可能正在等待 CPU 为它分配执行时间\n\n3.无限期等待：不会被分配 CUP 执行时间，它们要等待被其他线程显式唤醒\n\n4.限期等待：不会被分配 CUP 执行时间，它们无须等待被其他线程显式唤醒，一定时间会由系统自动唤醒\n\n5.阻塞：阻塞状态在等待这获取到一个排他锁，这个时间将在另一个线程放弃这个锁的时候发生；等待状态就是在等待一段时间，或者唤醒动作的发生\n\n6.结束：已终止线程的线程状态，线程已经结束执行\n\n### 2.2 线程安全\n\n1、不可变：不可变的对象一定是线程安全的、无论是对象的方法实现还是方法的调用者，都不需要再采取任何的线程安全保障。例如：把对象中带有状态的变量都声明为 final，这样在构造函数结束之后，它就是不可变的。\n\n2、绝对线程安全\n\n3、相对线程安全：相对的线程安全就是我们通常意义上所讲的线程安全，它需要保证对这个对象单独的操作是线程安全的，我们在调用的时候不需要做额外的保障措施，但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性\n\n4、线程兼容：对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全使用\n\n5、线程对立：是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码\n\n### 2.3 线程安全的实现方法\n\n1.互斥同步：\n\n同步是指在多个线程并发访问共享数据时，保证共享数据在同一个时刻只被一个（或者是一些，使用信号量的时候）线程使用。而互斥是实现同步的一种手段，临界区、互斥量和信号量都是主要的互斥实现方式。互斥是因，同步是果：互斥是方法，同步是目的\n\n在 Java 中，最基本的互斥同步手段就是 synchronized 关键字，它经过编译之后，会在同步块的前后分别形成 monitorenter 和 monitorexit 这两个字节码指令，这两个字节码都需要一个 reference 类型的参数来指明要锁定和解锁的对象。如果 Java 程序中的 synchronized 明确指定了对象参数，那就是这个对象的 reference；如果没有指明，那就根据 synchronized 修饰的是实例方法还是类方法，去取对应的对象实例或 Class 对象来作为锁对象。在执行 monitorenter 指令时，首先要尝试获取对象的锁。如果这个对象没有被锁定，或者当前线程已经拥有了那个对象的锁，把锁的计数器加 1，对应的在执行 monitorexit 指令时会将锁计数器减 1，当计数器为 0 时，锁就被释放。如果获取对象锁失败，哪当前线程就要阻塞等待，直到对象锁被另外一个线程释放为止\n\nSynchronized，ReentrantLock 增加了一些高级功能\n\n1.等待可中断：是指当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情，可中断特性对处理执行时间非常长的同步块很有帮助\n\n2.公平锁：是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁；非公平锁则不能保证这一点，在锁被释放时，任何一个等待锁的线程都有机会获得锁。Synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但可以通过带布尔值的构造函数要求使用公平锁\n\n3.锁绑定多个条件是指一个 ReentrantLock 对象可以同时绑定多个 Condition 对象，而在 synchronized 中，锁对象的 wait()和 notify()或 notifyAll()方法可以实现一个隐含的条件，如果要和多余一个的条件关联的时候，就不得不额外地添加一个锁，而 ReentrantLock 则无须这样做，只需要多次调用 newCondition 方法即可\n\n2.非阻塞同步\n\n3.无同步方案\n\n可重入代码：也叫纯代码，可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归调用它本身）而在控制权返回后，原来的程序不会出现任何错误。所有的可重入代码都是线程安全的，但是并非所有的线程安全的代码都是可重入的。\n\n判断一个代码是否具备可重入性：如果一个方法，它的返回结果是可预测的，只要输入了相同的数据，就都能返回相同的结果，那它就满足可重入性的要求，当然也就是线程安全的\n\n线程本地存储：如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行？如果能保障，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题\n\n### 2.4 锁优化\n\n适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁\n\n#### 2.4.1 自旋锁与自适应自旋\n\n自旋锁：如果物理机器上有一个以上的处理器，能让两个或以上的线程同时并行执行，我们就可以让后面请求锁的那个线程稍等一下，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只需让线程执行一个忙循环（自旋），这项技术就是所谓的自旋锁\n\n自适应自旋转：是由前一次在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后要获取这个锁时将可能省略掉自过程，以避免浪费处理器资源。\n\n#### 2.4.2 锁消除\n\n锁消除是指虚拟机即时编辑器在运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。如果在一段代码中。推上的所有数据都不会逃逸出去从而被其他线程访问到，那就可以把它们当作栈上数据对待，认为它们是线程私有的，同步加锁自然就无须进行\n\n#### 2.4.3 锁粗化\n\n如果虚拟机检测到有一串零碎的操作都是对同一对象的加锁，将会把加锁同步的范围扩展（粗化）到整个操作序列的外部\n\n#### 2.4.4 轻量级锁\n\n#### 2.4.5 偏向锁\n\n它的目的是消除无竞争情况下的同步原语，进一步提高程序的运行性能。如果轻量级锁是在无竞争的情况下使用 CAS 操作去消除同步使用的互斥量，那偏向锁就是在无竞争的情况下把这个同步都消除掉，CAS 操作都不做了\n\n如果在接下俩的执行过程中，该锁没有被其他线程获取，则持有偏向锁的线程将永远不需要在进行同步\n\n## 3 逃逸分析\n\n逃逸分析的基本行为就是分析对象动态作用域：当一个对象在方法中被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他方法中，成为方法逃逸。甚至还可能被外部线程访问到，比如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸\n\n如果一个对象不会逃逸到方法或线程之外，也就是别的方法或线程无法通过任何途径访问到这个对象，则可能为这个变量进行一些高效的优化\n\n栈上分配：如果确定一个对象不会逃逸出方法外，那让这个对象在栈上分配内存将会是一个不错的注意，对象所占用的内存空间就可以随栈帧出栈而销毁。如果能使用栈上分配，那大量的对象就随着方法的结束而销毁了，垃圾收集系统的压力将会小很多\n\n同步消除：如果确定一个变量不会逃逸出线程，无法被其他线程访问，那这个变量的读写肯定就不会有竞争，对这个变量实施的同步措施也就可以消除掉\n\n标量替换：标量就是指一个数据无法在分解成更小的数据表示了，int、long 等及 refrence 类型等都不能在进一步分解，它们称为标量。\n\n如果一个数据可以继续分解，就称为聚合量，Java 中的对象就是最典型的聚合量\n\n如果一个对象不会被外部访问，并且这个对象可以被拆散的化，那程序正整执行的时候将可能不创建这个对象，而改为直接创建它的若干个被这个方法使用到的成员变量来代替\n","source":"_posts/language/jvm/JVM内存与线程.md","raw":"---\ntitle: JVM内存与线程\ncategories:\n- java\ntag:\n- JVM\n---\n\n\n## 1 内存\n\n### 1.1 内存一致性\n\n由于计算机的存储设备与处理器的运算速度之间有着几个数量级的差距，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的高速缓存（Cache）来作为内存与处理器之间的缓冲：将运算需要使用到的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存之中，这样处理器就无须等待缓慢的内存读写了。基于高速缓存的存储交互很好地解决了处理器与内存的速度矛盾，但是也引入了新的问题：缓存一致性（CacheCoherence）。在多处理器系统中，每个处理器都有自己的高速缓存，而它们又共享同一主内存（MainMemory），如图所示：\n\n![这里写图片描述](http://img.blog.csdn.net/20170806222602143?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致的情况，如果真的发生这种情况，那同步回到主内存时以谁的缓存数据为准呢？为了解决一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作，这类协议有 MSI、MESI（IllinoisProtocol）、MOSI、Synapse、Firefly 及 DragonProtocol，等等。\n\n### 1.2 主内存与工作内存\n\nJava 内存模型的主要目标是定义程序各个变量的访问规则，即在虚拟机机中将变量存储到内存和从内存中取出变量这样的底层细节。此处的变量（Variable）与 Java 编程中所说的变量略有区别，它包括了实例字段、静态字段和构成数组对象的元素，但是不包括局部变量与方法参数，因为后者是线程私有的[3]，不会被共享，自然就不存在竞争问题。为了获得较好的执行效能，Java 内存模型并没有限制执行引擎使用处理器的特定寄存器或缓存来和主内存进行交互，也没有限制即时编译器调整代码执行顺序这类权利，线程对变量的操作都必须在工作内存中进行，而不能直接读写主内存，线程间无法直接访问对方工作内存的中变量，线程间变量值得传递均需要通过主内存来完成。如图所示：\n\n### 1.3 内存间的交互操作\n\n关于主内存与工作内存之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步到主内存之间的实现细节，Java 内存模型定义了以下八种操作来完成：\n\nlock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态。\n\nunlock（解锁）：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。\n\nread（读取）：作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的 load 动作使用\n\nload（载入）：作用于工作内存的变量，它把 read 操作从主内存中得到的变量值放入工作内存的变量副本中。\n\nuse（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。\n\nassign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。\n\nstore（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的 write 的操作。\n\nwrite（写入）：作用于主内存的变量，它把 store 操作从工作内存中一个变量的值传送到主内存的变量中。\n\n如果要把一个变量从主内存中复制到工作内存，就需要按顺寻地执行 read 和 load 操作， 如果把变量从工作内存中同步回主内存中，就要按顺序地执行 store 和 write 操作。Java 内存 模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。也就是 read 和 load 之间， store 和 write 之间是可以插入其他指令的，如对主内存中的变量 a、b 进行访问时，可能的顺 序是 read a，read b，load b， load a。\n\nJava 内存模型还规定了在执行上述八种基本操作时，必须满足如下规则：\n\n不允许 read 和 load、store 和 write 操作之一单独出现\n\n不允许一个线程丢弃它的最近 assign 的操作，即变量在工作内存中改变了之后必须同步到主内存中。\n\n不允许一个线程无原因地（没有发生过任何 assign 操作）把数据从工作内存同步回主内存中。\n\n一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load 或 assign）的变量。即就是对一个变量实施 use 和 store 操作之前，必须先执行过了 assign 和 load 操作。\n\n一个变量在同一时刻只允许一条线程对其进行 lock 操作，但 lock 操作可以被同一条线程重复执行多次，多次执行 lock 后，只有执行相同次数的 unlock 操作，变量才会被解锁。lock 和 unlock 必须成对出现\n\n如果对一个变量执行 lock 操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行 load 或 assign 操作初始化变量的值\n\n如果一个变量事先没有被 lock 操作锁定，则不允许对它执行 unlock 操作；也不允许去 unlock 一个被其他线程锁定的变量。\n\n对一个变量执行 unlock 操作之前，必须先把此变量同步到主内存中（执行 store 和 write 操作）。\n\n### 1.4 重排序\n\n在执行程序时为了提高性能，编译器和处理器经常会对指令进行重排序。重排序分成三种类型：\n\n1.编译器优化的重排序。编译器在不改变单线程程序语义放入前提下，可以重新安排语句的执行顺序。\n\n2.指令级并行的重排序。现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。\n\n3.内存系统的重排序。由于处理器使用缓存和读写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。\n\n从 Java 源代码到最终实际执行的指令序列，会经过下面三种重排序：\n\n为了保证内存的可见性，Java 编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。Java 内存模型把内存屏障分为 LoadLoad、LoadStore、StoreLoad 和 StoreStore 四种：\n\n### 1.5 volatile 型变量\n\n当一个变量定义为 volatile 之后，它将具备两种特性：\n\n第一：保证此变量对所有线程的可见性，这里的可见性是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。普通变量的值在线程间传递需要通过主内存来完成\n\n由于 valatile 只能保证可见性，在不符合一下两条规则的运算场景中，我们仍要通过加锁来保证原子性\n\n1.运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值。\n\n2.变量不需要与其他的状态变量共同参与不变约束\n\n第二：禁止指令重排序，普通的变量仅仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证变量赋值操作的顺序与程序代码中执行顺序一致，这个就是所谓的线程内表现为串行的语义\n\nJava 内存模型中对 volatile 变量定义的特殊规则。假定 T 表示一个线程，V 和 W 分别表示两个 volatile 变量，那么在进行 read、load、use、assign、store、write 操作时需要满足如下的规则：\n\n1.只有当线程 T 对变量 V 执行的前一个动作是 load 的时候，线程 T 才能对变量 V 执行 use 动作；并且，只有当线程 T 对变量 V 执行的后一个动作是 use 的时候，线程 T 才能对变量 V 执行 load 操作。线程 T 对变量 V 的 use 操作可以认为是与线程 T 对变量 V 的 load 和 read 操作相关联的，必须一起连续出现。这条规则要求在工作内存中，每次使用变量 V 之前都必须先从主内存刷新最新值，用于保证能看到其它线程对变量 V 所作的修改后的值。\n\n2.只有当线程 T 对变量 V 执行的前一个动是 assign 的时候，线程 T 才能对变量 V 执行 store 操作；并且，只有当线程 T 对变量 V 执行的后一个动作是 store 操作的时候，线程 T 才能对变量 V 执行 assign 操作。线程 T 对变量 V 的 assign 操作可以认为是与线程 T 对变量 V 的 store 和 write 操作相关联的，必须一起连续出现。这一条规则要求在工作内存中，每次修改 V 后都必须立即同步回主内存中，用于保证其它线程可以看到自己对变量 V 的修改。\n\n3.假定操作 A 是线程 T 对变量 V 实施的 use 或 assign 动作，假定操作 F 是操作 A 相关联的 load 或 store 操作，假定操作 P 是与操作 F 相应的对变量 V 的 read 或 write 操作；类型地，假定动作 B 是线程 T 对变量 W 实施的 use 或 assign 动作，假定操作 G 是操作 B 相关联的 load 或 store 操作，假定操作 Q 是与操作 G 相应的对变量 V 的 read 或 write 操作。如果 A 先于 B，那么 P 先于 Q。这条规则要求 valitile 修改的变量不会被指令重排序优化，保证代码的执行顺序与程序的顺序相同。\n\n### 1.6 对于 long 和 double 型变量的特殊规则\n\nJava 模型要求 lock、unlock、read、load、assign、use、store、write 这 8 个操作都具有原子性，但是对于 64 为的数据类型（long 和 double），在模型中特别定义了一条相对宽松的规定：允许虚拟机将没有被 volatile 修饰的 64 位数据的读写操作分为两次 32 为的操作来进行，即允许虚拟机实现选择可以不保证 64 位数据类型的 load、store、read 和 write 这 4 个操作的原子性\n\n### 1.7 原子性、可见性和有序性\n\n原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。Java 内存模型是通过在变量修改后将新值同步会主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式来实现可见性，valatile 特殊规则保障新值可以立即同步到祝内存中。Synchronized 是在对一个变量执行 unlock 之前，必须把变量同步回主内存中（执行 store、write 操作）。被 final 修饰的字段在构造器中一旦初始化完成，并且构造器没有吧 this 的引用传递出去，那在其他线程中就能看见 final 字段的值\n\n可见性：可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。\n\n有序性：即程序执行的顺序按照代码的先后顺序执行。\n\n### 1.8 先行发生原则\n\n这些先行发生关系无须任何同步就已经存在，如果不再此列就不能保障顺序性，虚拟机就可以对它们任意地进行重排序\n\n1.程序次序规则：在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。准确的说，应该是控制顺序而不是程序代码顺序，因为要考虑分支。循环等结构\n\n2.管程锁定规则：一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。这里必须强调的是同一个锁，而后面的是指时间上的先后顺序\n\n3.Volatile 变量规则：对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作，这里的后面同样是指时间上的先后顺序\n\n4.线程启动规则：Thread 对象的 start()方法先行发生于此线程的每一个动作\n\n5.线程终止规则：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过 Thread.joke()方法结束、ThradisAlive()的返回值等手段检测到线程已经终止执行\n\n6.线程中断规则：对线程 interrupt()方法的调用先行发生于被中断线程的代码检测到中断时间的发生，可以通过 Thread.interrupted()方法检测到是否有中断发生\n\n7.对象终结规则：一个对象的初始化完成(构造函数执行结束)先行发生于它的 finalize()方法的开始\n\n8.传递性：如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那就可以得出操作 A 先行发生于操作 C 的结论\n\n## 2 Java 线程\n\n协同式调度：线程的执行时间由线程本身控制\n\n抢占式调度：线程的执行时间由系统来分配\n\n### 2.1 状态转换\n\n1.新建\n\n2.运行：可能正在执行。可能正在等待 CPU 为它分配执行时间\n\n3.无限期等待：不会被分配 CUP 执行时间，它们要等待被其他线程显式唤醒\n\n4.限期等待：不会被分配 CUP 执行时间，它们无须等待被其他线程显式唤醒，一定时间会由系统自动唤醒\n\n5.阻塞：阻塞状态在等待这获取到一个排他锁，这个时间将在另一个线程放弃这个锁的时候发生；等待状态就是在等待一段时间，或者唤醒动作的发生\n\n6.结束：已终止线程的线程状态，线程已经结束执行\n\n### 2.2 线程安全\n\n1、不可变：不可变的对象一定是线程安全的、无论是对象的方法实现还是方法的调用者，都不需要再采取任何的线程安全保障。例如：把对象中带有状态的变量都声明为 final，这样在构造函数结束之后，它就是不可变的。\n\n2、绝对线程安全\n\n3、相对线程安全：相对的线程安全就是我们通常意义上所讲的线程安全，它需要保证对这个对象单独的操作是线程安全的，我们在调用的时候不需要做额外的保障措施，但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性\n\n4、线程兼容：对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全使用\n\n5、线程对立：是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码\n\n### 2.3 线程安全的实现方法\n\n1.互斥同步：\n\n同步是指在多个线程并发访问共享数据时，保证共享数据在同一个时刻只被一个（或者是一些，使用信号量的时候）线程使用。而互斥是实现同步的一种手段，临界区、互斥量和信号量都是主要的互斥实现方式。互斥是因，同步是果：互斥是方法，同步是目的\n\n在 Java 中，最基本的互斥同步手段就是 synchronized 关键字，它经过编译之后，会在同步块的前后分别形成 monitorenter 和 monitorexit 这两个字节码指令，这两个字节码都需要一个 reference 类型的参数来指明要锁定和解锁的对象。如果 Java 程序中的 synchronized 明确指定了对象参数，那就是这个对象的 reference；如果没有指明，那就根据 synchronized 修饰的是实例方法还是类方法，去取对应的对象实例或 Class 对象来作为锁对象。在执行 monitorenter 指令时，首先要尝试获取对象的锁。如果这个对象没有被锁定，或者当前线程已经拥有了那个对象的锁，把锁的计数器加 1，对应的在执行 monitorexit 指令时会将锁计数器减 1，当计数器为 0 时，锁就被释放。如果获取对象锁失败，哪当前线程就要阻塞等待，直到对象锁被另外一个线程释放为止\n\nSynchronized，ReentrantLock 增加了一些高级功能\n\n1.等待可中断：是指当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情，可中断特性对处理执行时间非常长的同步块很有帮助\n\n2.公平锁：是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁；非公平锁则不能保证这一点，在锁被释放时，任何一个等待锁的线程都有机会获得锁。Synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但可以通过带布尔值的构造函数要求使用公平锁\n\n3.锁绑定多个条件是指一个 ReentrantLock 对象可以同时绑定多个 Condition 对象，而在 synchronized 中，锁对象的 wait()和 notify()或 notifyAll()方法可以实现一个隐含的条件，如果要和多余一个的条件关联的时候，就不得不额外地添加一个锁，而 ReentrantLock 则无须这样做，只需要多次调用 newCondition 方法即可\n\n2.非阻塞同步\n\n3.无同步方案\n\n可重入代码：也叫纯代码，可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归调用它本身）而在控制权返回后，原来的程序不会出现任何错误。所有的可重入代码都是线程安全的，但是并非所有的线程安全的代码都是可重入的。\n\n判断一个代码是否具备可重入性：如果一个方法，它的返回结果是可预测的，只要输入了相同的数据，就都能返回相同的结果，那它就满足可重入性的要求，当然也就是线程安全的\n\n线程本地存储：如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行？如果能保障，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题\n\n### 2.4 锁优化\n\n适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁\n\n#### 2.4.1 自旋锁与自适应自旋\n\n自旋锁：如果物理机器上有一个以上的处理器，能让两个或以上的线程同时并行执行，我们就可以让后面请求锁的那个线程稍等一下，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只需让线程执行一个忙循环（自旋），这项技术就是所谓的自旋锁\n\n自适应自旋转：是由前一次在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后要获取这个锁时将可能省略掉自过程，以避免浪费处理器资源。\n\n#### 2.4.2 锁消除\n\n锁消除是指虚拟机即时编辑器在运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。如果在一段代码中。推上的所有数据都不会逃逸出去从而被其他线程访问到，那就可以把它们当作栈上数据对待，认为它们是线程私有的，同步加锁自然就无须进行\n\n#### 2.4.3 锁粗化\n\n如果虚拟机检测到有一串零碎的操作都是对同一对象的加锁，将会把加锁同步的范围扩展（粗化）到整个操作序列的外部\n\n#### 2.4.4 轻量级锁\n\n#### 2.4.5 偏向锁\n\n它的目的是消除无竞争情况下的同步原语，进一步提高程序的运行性能。如果轻量级锁是在无竞争的情况下使用 CAS 操作去消除同步使用的互斥量，那偏向锁就是在无竞争的情况下把这个同步都消除掉，CAS 操作都不做了\n\n如果在接下俩的执行过程中，该锁没有被其他线程获取，则持有偏向锁的线程将永远不需要在进行同步\n\n## 3 逃逸分析\n\n逃逸分析的基本行为就是分析对象动态作用域：当一个对象在方法中被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他方法中，成为方法逃逸。甚至还可能被外部线程访问到，比如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸\n\n如果一个对象不会逃逸到方法或线程之外，也就是别的方法或线程无法通过任何途径访问到这个对象，则可能为这个变量进行一些高效的优化\n\n栈上分配：如果确定一个对象不会逃逸出方法外，那让这个对象在栈上分配内存将会是一个不错的注意，对象所占用的内存空间就可以随栈帧出栈而销毁。如果能使用栈上分配，那大量的对象就随着方法的结束而销毁了，垃圾收集系统的压力将会小很多\n\n同步消除：如果确定一个变量不会逃逸出线程，无法被其他线程访问，那这个变量的读写肯定就不会有竞争，对这个变量实施的同步措施也就可以消除掉\n\n标量替换：标量就是指一个数据无法在分解成更小的数据表示了，int、long 等及 refrence 类型等都不能在进一步分解，它们称为标量。\n\n如果一个数据可以继续分解，就称为聚合量，Java 中的对象就是最典型的聚合量\n\n如果一个对象不会被外部访问，并且这个对象可以被拆散的化，那程序正整执行的时候将可能不创建这个对象，而改为直接创建它的若干个被这个方法使用到的成员变量来代替\n","slug":"language/jvm/JVM内存与线程","published":1,"date":"2021-07-31T11:10:47.929Z","updated":"2021-07-31T11:10:47.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyil001wu6ukcrgw7gc3","content":"<h2 id=\"1-内存\"><a href=\"#1-内存\" class=\"headerlink\" title=\"1 内存\"></a>1 内存</h2><h3 id=\"1-1-内存一致性\"><a href=\"#1-1-内存一致性\" class=\"headerlink\" title=\"1.1 内存一致性\"></a>1.1 内存一致性</h3><p>由于计算机的存储设备与处理器的运算速度之间有着几个数量级的差距，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的高速缓存（Cache）来作为内存与处理器之间的缓冲：将运算需要使用到的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存之中，这样处理器就无须等待缓慢的内存读写了。基于高速缓存的存储交互很好地解决了处理器与内存的速度矛盾，但是也引入了新的问题：缓存一致性（CacheCoherence）。在多处理器系统中，每个处理器都有自己的高速缓存，而它们又共享同一主内存（MainMemory），如图所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20170806222602143?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致的情况，如果真的发生这种情况，那同步回到主内存时以谁的缓存数据为准呢？为了解决一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作，这类协议有 MSI、MESI（IllinoisProtocol）、MOSI、Synapse、Firefly 及 DragonProtocol，等等。</p>\n<h3 id=\"1-2-主内存与工作内存\"><a href=\"#1-2-主内存与工作内存\" class=\"headerlink\" title=\"1.2 主内存与工作内存\"></a>1.2 主内存与工作内存</h3><p>Java 内存模型的主要目标是定义程序各个变量的访问规则，即在虚拟机机中将变量存储到内存和从内存中取出变量这样的底层细节。此处的变量（Variable）与 Java 编程中所说的变量略有区别，它包括了实例字段、静态字段和构成数组对象的元素，但是不包括局部变量与方法参数，因为后者是线程私有的[3]，不会被共享，自然就不存在竞争问题。为了获得较好的执行效能，Java 内存模型并没有限制执行引擎使用处理器的特定寄存器或缓存来和主内存进行交互，也没有限制即时编译器调整代码执行顺序这类权利，线程对变量的操作都必须在工作内存中进行，而不能直接读写主内存，线程间无法直接访问对方工作内存的中变量，线程间变量值得传递均需要通过主内存来完成。如图所示：</p>\n<h3 id=\"1-3-内存间的交互操作\"><a href=\"#1-3-内存间的交互操作\" class=\"headerlink\" title=\"1.3 内存间的交互操作\"></a>1.3 内存间的交互操作</h3><p>关于主内存与工作内存之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步到主内存之间的实现细节，Java 内存模型定义了以下八种操作来完成：</p>\n<p>lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态。</p>\n<p>unlock（解锁）：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</p>\n<p>read（读取）：作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的 load 动作使用</p>\n<p>load（载入）：作用于工作内存的变量，它把 read 操作从主内存中得到的变量值放入工作内存的变量副本中。</p>\n<p>use（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。</p>\n<p>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</p>\n<p>store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的 write 的操作。</p>\n<p>write（写入）：作用于主内存的变量，它把 store 操作从工作内存中一个变量的值传送到主内存的变量中。</p>\n<p>如果要把一个变量从主内存中复制到工作内存，就需要按顺寻地执行 read 和 load 操作， 如果把变量从工作内存中同步回主内存中，就要按顺序地执行 store 和 write 操作。Java 内存 模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。也就是 read 和 load 之间， store 和 write 之间是可以插入其他指令的，如对主内存中的变量 a、b 进行访问时，可能的顺 序是 read a，read b，load b， load a。</p>\n<p>Java 内存模型还规定了在执行上述八种基本操作时，必须满足如下规则：</p>\n<p>不允许 read 和 load、store 和 write 操作之一单独出现</p>\n<p>不允许一个线程丢弃它的最近 assign 的操作，即变量在工作内存中改变了之后必须同步到主内存中。</p>\n<p>不允许一个线程无原因地（没有发生过任何 assign 操作）把数据从工作内存同步回主内存中。</p>\n<p>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load 或 assign）的变量。即就是对一个变量实施 use 和 store 操作之前，必须先执行过了 assign 和 load 操作。</p>\n<p>一个变量在同一时刻只允许一条线程对其进行 lock 操作，但 lock 操作可以被同一条线程重复执行多次，多次执行 lock 后，只有执行相同次数的 unlock 操作，变量才会被解锁。lock 和 unlock 必须成对出现</p>\n<p>如果对一个变量执行 lock 操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行 load 或 assign 操作初始化变量的值</p>\n<p>如果一个变量事先没有被 lock 操作锁定，则不允许对它执行 unlock 操作；也不允许去 unlock 一个被其他线程锁定的变量。</p>\n<p>对一个变量执行 unlock 操作之前，必须先把此变量同步到主内存中（执行 store 和 write 操作）。</p>\n<h3 id=\"1-4-重排序\"><a href=\"#1-4-重排序\" class=\"headerlink\" title=\"1.4 重排序\"></a>1.4 重排序</h3><p>在执行程序时为了提高性能，编译器和处理器经常会对指令进行重排序。重排序分成三种类型：</p>\n<p>1.编译器优化的重排序。编译器在不改变单线程程序语义放入前提下，可以重新安排语句的执行顺序。</p>\n<p>2.指令级并行的重排序。现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</p>\n<p>3.内存系统的重排序。由于处理器使用缓存和读写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</p>\n<p>从 Java 源代码到最终实际执行的指令序列，会经过下面三种重排序：</p>\n<p>为了保证内存的可见性，Java 编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。Java 内存模型把内存屏障分为 LoadLoad、LoadStore、StoreLoad 和 StoreStore 四种：</p>\n<h3 id=\"1-5-volatile-型变量\"><a href=\"#1-5-volatile-型变量\" class=\"headerlink\" title=\"1.5 volatile 型变量\"></a>1.5 volatile 型变量</h3><p>当一个变量定义为 volatile 之后，它将具备两种特性：</p>\n<p>第一：保证此变量对所有线程的可见性，这里的可见性是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。普通变量的值在线程间传递需要通过主内存来完成</p>\n<p>由于 valatile 只能保证可见性，在不符合一下两条规则的运算场景中，我们仍要通过加锁来保证原子性</p>\n<p>1.运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值。</p>\n<p>2.变量不需要与其他的状态变量共同参与不变约束</p>\n<p>第二：禁止指令重排序，普通的变量仅仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证变量赋值操作的顺序与程序代码中执行顺序一致，这个就是所谓的线程内表现为串行的语义</p>\n<p>Java 内存模型中对 volatile 变量定义的特殊规则。假定 T 表示一个线程，V 和 W 分别表示两个 volatile 变量，那么在进行 read、load、use、assign、store、write 操作时需要满足如下的规则：</p>\n<p>1.只有当线程 T 对变量 V 执行的前一个动作是 load 的时候，线程 T 才能对变量 V 执行 use 动作；并且，只有当线程 T 对变量 V 执行的后一个动作是 use 的时候，线程 T 才能对变量 V 执行 load 操作。线程 T 对变量 V 的 use 操作可以认为是与线程 T 对变量 V 的 load 和 read 操作相关联的，必须一起连续出现。这条规则要求在工作内存中，每次使用变量 V 之前都必须先从主内存刷新最新值，用于保证能看到其它线程对变量 V 所作的修改后的值。</p>\n<p>2.只有当线程 T 对变量 V 执行的前一个动是 assign 的时候，线程 T 才能对变量 V 执行 store 操作；并且，只有当线程 T 对变量 V 执行的后一个动作是 store 操作的时候，线程 T 才能对变量 V 执行 assign 操作。线程 T 对变量 V 的 assign 操作可以认为是与线程 T 对变量 V 的 store 和 write 操作相关联的，必须一起连续出现。这一条规则要求在工作内存中，每次修改 V 后都必须立即同步回主内存中，用于保证其它线程可以看到自己对变量 V 的修改。</p>\n<p>3.假定操作 A 是线程 T 对变量 V 实施的 use 或 assign 动作，假定操作 F 是操作 A 相关联的 load 或 store 操作，假定操作 P 是与操作 F 相应的对变量 V 的 read 或 write 操作；类型地，假定动作 B 是线程 T 对变量 W 实施的 use 或 assign 动作，假定操作 G 是操作 B 相关联的 load 或 store 操作，假定操作 Q 是与操作 G 相应的对变量 V 的 read 或 write 操作。如果 A 先于 B，那么 P 先于 Q。这条规则要求 valitile 修改的变量不会被指令重排序优化，保证代码的执行顺序与程序的顺序相同。</p>\n<h3 id=\"1-6-对于-long-和-double-型变量的特殊规则\"><a href=\"#1-6-对于-long-和-double-型变量的特殊规则\" class=\"headerlink\" title=\"1.6 对于 long 和 double 型变量的特殊规则\"></a>1.6 对于 long 和 double 型变量的特殊规则</h3><p>Java 模型要求 lock、unlock、read、load、assign、use、store、write 这 8 个操作都具有原子性，但是对于 64 为的数据类型（long 和 double），在模型中特别定义了一条相对宽松的规定：允许虚拟机将没有被 volatile 修饰的 64 位数据的读写操作分为两次 32 为的操作来进行，即允许虚拟机实现选择可以不保证 64 位数据类型的 load、store、read 和 write 这 4 个操作的原子性</p>\n<h3 id=\"1-7-原子性、可见性和有序性\"><a href=\"#1-7-原子性、可见性和有序性\" class=\"headerlink\" title=\"1.7 原子性、可见性和有序性\"></a>1.7 原子性、可见性和有序性</h3><p>原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。Java 内存模型是通过在变量修改后将新值同步会主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式来实现可见性，valatile 特殊规则保障新值可以立即同步到祝内存中。Synchronized 是在对一个变量执行 unlock 之前，必须把变量同步回主内存中（执行 store、write 操作）。被 final 修饰的字段在构造器中一旦初始化完成，并且构造器没有吧 this 的引用传递出去，那在其他线程中就能看见 final 字段的值</p>\n<p>可见性：可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p>\n<p>有序性：即程序执行的顺序按照代码的先后顺序执行。</p>\n<h3 id=\"1-8-先行发生原则\"><a href=\"#1-8-先行发生原则\" class=\"headerlink\" title=\"1.8 先行发生原则\"></a>1.8 先行发生原则</h3><p>这些先行发生关系无须任何同步就已经存在，如果不再此列就不能保障顺序性，虚拟机就可以对它们任意地进行重排序</p>\n<p>1.程序次序规则：在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。准确的说，应该是控制顺序而不是程序代码顺序，因为要考虑分支。循环等结构</p>\n<p>2.管程锁定规则：一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。这里必须强调的是同一个锁，而后面的是指时间上的先后顺序</p>\n<p>3.Volatile 变量规则：对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作，这里的后面同样是指时间上的先后顺序</p>\n<p>4.线程启动规则：Thread 对象的 start()方法先行发生于此线程的每一个动作</p>\n<p>5.线程终止规则：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过 Thread.joke()方法结束、ThradisAlive()的返回值等手段检测到线程已经终止执行</p>\n<p>6.线程中断规则：对线程 interrupt()方法的调用先行发生于被中断线程的代码检测到中断时间的发生，可以通过 Thread.interrupted()方法检测到是否有中断发生</p>\n<p>7.对象终结规则：一个对象的初始化完成(构造函数执行结束)先行发生于它的 finalize()方法的开始</p>\n<p>8.传递性：如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那就可以得出操作 A 先行发生于操作 C 的结论</p>\n<h2 id=\"2-Java-线程\"><a href=\"#2-Java-线程\" class=\"headerlink\" title=\"2 Java 线程\"></a>2 Java 线程</h2><p>协同式调度：线程的执行时间由线程本身控制</p>\n<p>抢占式调度：线程的执行时间由系统来分配</p>\n<h3 id=\"2-1-状态转换\"><a href=\"#2-1-状态转换\" class=\"headerlink\" title=\"2.1 状态转换\"></a>2.1 状态转换</h3><p>1.新建</p>\n<p>2.运行：可能正在执行。可能正在等待 CPU 为它分配执行时间</p>\n<p>3.无限期等待：不会被分配 CUP 执行时间，它们要等待被其他线程显式唤醒</p>\n<p>4.限期等待：不会被分配 CUP 执行时间，它们无须等待被其他线程显式唤醒，一定时间会由系统自动唤醒</p>\n<p>5.阻塞：阻塞状态在等待这获取到一个排他锁，这个时间将在另一个线程放弃这个锁的时候发生；等待状态就是在等待一段时间，或者唤醒动作的发生</p>\n<p>6.结束：已终止线程的线程状态，线程已经结束执行</p>\n<h3 id=\"2-2-线程安全\"><a href=\"#2-2-线程安全\" class=\"headerlink\" title=\"2.2 线程安全\"></a>2.2 线程安全</h3><p>1、不可变：不可变的对象一定是线程安全的、无论是对象的方法实现还是方法的调用者，都不需要再采取任何的线程安全保障。例如：把对象中带有状态的变量都声明为 final，这样在构造函数结束之后，它就是不可变的。</p>\n<p>2、绝对线程安全</p>\n<p>3、相对线程安全：相对的线程安全就是我们通常意义上所讲的线程安全，它需要保证对这个对象单独的操作是线程安全的，我们在调用的时候不需要做额外的保障措施，但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性</p>\n<p>4、线程兼容：对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全使用</p>\n<p>5、线程对立：是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码</p>\n<h3 id=\"2-3-线程安全的实现方法\"><a href=\"#2-3-线程安全的实现方法\" class=\"headerlink\" title=\"2.3 线程安全的实现方法\"></a>2.3 线程安全的实现方法</h3><p>1.互斥同步：</p>\n<p>同步是指在多个线程并发访问共享数据时，保证共享数据在同一个时刻只被一个（或者是一些，使用信号量的时候）线程使用。而互斥是实现同步的一种手段，临界区、互斥量和信号量都是主要的互斥实现方式。互斥是因，同步是果：互斥是方法，同步是目的</p>\n<p>在 Java 中，最基本的互斥同步手段就是 synchronized 关键字，它经过编译之后，会在同步块的前后分别形成 monitorenter 和 monitorexit 这两个字节码指令，这两个字节码都需要一个 reference 类型的参数来指明要锁定和解锁的对象。如果 Java 程序中的 synchronized 明确指定了对象参数，那就是这个对象的 reference；如果没有指明，那就根据 synchronized 修饰的是实例方法还是类方法，去取对应的对象实例或 Class 对象来作为锁对象。在执行 monitorenter 指令时，首先要尝试获取对象的锁。如果这个对象没有被锁定，或者当前线程已经拥有了那个对象的锁，把锁的计数器加 1，对应的在执行 monitorexit 指令时会将锁计数器减 1，当计数器为 0 时，锁就被释放。如果获取对象锁失败，哪当前线程就要阻塞等待，直到对象锁被另外一个线程释放为止</p>\n<p>Synchronized，ReentrantLock 增加了一些高级功能</p>\n<p>1.等待可中断：是指当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情，可中断特性对处理执行时间非常长的同步块很有帮助</p>\n<p>2.公平锁：是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁；非公平锁则不能保证这一点，在锁被释放时，任何一个等待锁的线程都有机会获得锁。Synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但可以通过带布尔值的构造函数要求使用公平锁</p>\n<p>3.锁绑定多个条件是指一个 ReentrantLock 对象可以同时绑定多个 Condition 对象，而在 synchronized 中，锁对象的 wait()和 notify()或 notifyAll()方法可以实现一个隐含的条件，如果要和多余一个的条件关联的时候，就不得不额外地添加一个锁，而 ReentrantLock 则无须这样做，只需要多次调用 newCondition 方法即可</p>\n<p>2.非阻塞同步</p>\n<p>3.无同步方案</p>\n<p>可重入代码：也叫纯代码，可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归调用它本身）而在控制权返回后，原来的程序不会出现任何错误。所有的可重入代码都是线程安全的，但是并非所有的线程安全的代码都是可重入的。</p>\n<p>判断一个代码是否具备可重入性：如果一个方法，它的返回结果是可预测的，只要输入了相同的数据，就都能返回相同的结果，那它就满足可重入性的要求，当然也就是线程安全的</p>\n<p>线程本地存储：如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行？如果能保障，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题</p>\n<h3 id=\"2-4-锁优化\"><a href=\"#2-4-锁优化\" class=\"headerlink\" title=\"2.4 锁优化\"></a>2.4 锁优化</h3><p>适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁</p>\n<h4 id=\"2-4-1-自旋锁与自适应自旋\"><a href=\"#2-4-1-自旋锁与自适应自旋\" class=\"headerlink\" title=\"2.4.1 自旋锁与自适应自旋\"></a>2.4.1 自旋锁与自适应自旋</h4><p>自旋锁：如果物理机器上有一个以上的处理器，能让两个或以上的线程同时并行执行，我们就可以让后面请求锁的那个线程稍等一下，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只需让线程执行一个忙循环（自旋），这项技术就是所谓的自旋锁</p>\n<p>自适应自旋转：是由前一次在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后要获取这个锁时将可能省略掉自过程，以避免浪费处理器资源。</p>\n<h4 id=\"2-4-2-锁消除\"><a href=\"#2-4-2-锁消除\" class=\"headerlink\" title=\"2.4.2 锁消除\"></a>2.4.2 锁消除</h4><p>锁消除是指虚拟机即时编辑器在运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。如果在一段代码中。推上的所有数据都不会逃逸出去从而被其他线程访问到，那就可以把它们当作栈上数据对待，认为它们是线程私有的，同步加锁自然就无须进行</p>\n<h4 id=\"2-4-3-锁粗化\"><a href=\"#2-4-3-锁粗化\" class=\"headerlink\" title=\"2.4.3 锁粗化\"></a>2.4.3 锁粗化</h4><p>如果虚拟机检测到有一串零碎的操作都是对同一对象的加锁，将会把加锁同步的范围扩展（粗化）到整个操作序列的外部</p>\n<h4 id=\"2-4-4-轻量级锁\"><a href=\"#2-4-4-轻量级锁\" class=\"headerlink\" title=\"2.4.4 轻量级锁\"></a>2.4.4 轻量级锁</h4><h4 id=\"2-4-5-偏向锁\"><a href=\"#2-4-5-偏向锁\" class=\"headerlink\" title=\"2.4.5 偏向锁\"></a>2.4.5 偏向锁</h4><p>它的目的是消除无竞争情况下的同步原语，进一步提高程序的运行性能。如果轻量级锁是在无竞争的情况下使用 CAS 操作去消除同步使用的互斥量，那偏向锁就是在无竞争的情况下把这个同步都消除掉，CAS 操作都不做了</p>\n<p>如果在接下俩的执行过程中，该锁没有被其他线程获取，则持有偏向锁的线程将永远不需要在进行同步</p>\n<h2 id=\"3-逃逸分析\"><a href=\"#3-逃逸分析\" class=\"headerlink\" title=\"3 逃逸分析\"></a>3 逃逸分析</h2><p>逃逸分析的基本行为就是分析对象动态作用域：当一个对象在方法中被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他方法中，成为方法逃逸。甚至还可能被外部线程访问到，比如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸</p>\n<p>如果一个对象不会逃逸到方法或线程之外，也就是别的方法或线程无法通过任何途径访问到这个对象，则可能为这个变量进行一些高效的优化</p>\n<p>栈上分配：如果确定一个对象不会逃逸出方法外，那让这个对象在栈上分配内存将会是一个不错的注意，对象所占用的内存空间就可以随栈帧出栈而销毁。如果能使用栈上分配，那大量的对象就随着方法的结束而销毁了，垃圾收集系统的压力将会小很多</p>\n<p>同步消除：如果确定一个变量不会逃逸出线程，无法被其他线程访问，那这个变量的读写肯定就不会有竞争，对这个变量实施的同步措施也就可以消除掉</p>\n<p>标量替换：标量就是指一个数据无法在分解成更小的数据表示了，int、long 等及 refrence 类型等都不能在进一步分解，它们称为标量。</p>\n<p>如果一个数据可以继续分解，就称为聚合量，Java 中的对象就是最典型的聚合量</p>\n<p>如果一个对象不会被外部访问，并且这个对象可以被拆散的化，那程序正整执行的时候将可能不创建这个对象，而改为直接创建它的若干个被这个方法使用到的成员变量来代替</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-内存\"><a href=\"#1-内存\" class=\"headerlink\" title=\"1 内存\"></a>1 内存</h2><h3 id=\"1-1-内存一致性\"><a href=\"#1-1-内存一致性\" class=\"headerlink\" title=\"1.1 内存一致性\"></a>1.1 内存一致性</h3><p>由于计算机的存储设备与处理器的运算速度之间有着几个数量级的差距，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的高速缓存（Cache）来作为内存与处理器之间的缓冲：将运算需要使用到的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存之中，这样处理器就无须等待缓慢的内存读写了。基于高速缓存的存储交互很好地解决了处理器与内存的速度矛盾，但是也引入了新的问题：缓存一致性（CacheCoherence）。在多处理器系统中，每个处理器都有自己的高速缓存，而它们又共享同一主内存（MainMemory），如图所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20170806222602143?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致的情况，如果真的发生这种情况，那同步回到主内存时以谁的缓存数据为准呢？为了解决一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作，这类协议有 MSI、MESI（IllinoisProtocol）、MOSI、Synapse、Firefly 及 DragonProtocol，等等。</p>\n<h3 id=\"1-2-主内存与工作内存\"><a href=\"#1-2-主内存与工作内存\" class=\"headerlink\" title=\"1.2 主内存与工作内存\"></a>1.2 主内存与工作内存</h3><p>Java 内存模型的主要目标是定义程序各个变量的访问规则，即在虚拟机机中将变量存储到内存和从内存中取出变量这样的底层细节。此处的变量（Variable）与 Java 编程中所说的变量略有区别，它包括了实例字段、静态字段和构成数组对象的元素，但是不包括局部变量与方法参数，因为后者是线程私有的[3]，不会被共享，自然就不存在竞争问题。为了获得较好的执行效能，Java 内存模型并没有限制执行引擎使用处理器的特定寄存器或缓存来和主内存进行交互，也没有限制即时编译器调整代码执行顺序这类权利，线程对变量的操作都必须在工作内存中进行，而不能直接读写主内存，线程间无法直接访问对方工作内存的中变量，线程间变量值得传递均需要通过主内存来完成。如图所示：</p>\n<h3 id=\"1-3-内存间的交互操作\"><a href=\"#1-3-内存间的交互操作\" class=\"headerlink\" title=\"1.3 内存间的交互操作\"></a>1.3 内存间的交互操作</h3><p>关于主内存与工作内存之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步到主内存之间的实现细节，Java 内存模型定义了以下八种操作来完成：</p>\n<p>lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态。</p>\n<p>unlock（解锁）：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</p>\n<p>read（读取）：作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的 load 动作使用</p>\n<p>load（载入）：作用于工作内存的变量，它把 read 操作从主内存中得到的变量值放入工作内存的变量副本中。</p>\n<p>use（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。</p>\n<p>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</p>\n<p>store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的 write 的操作。</p>\n<p>write（写入）：作用于主内存的变量，它把 store 操作从工作内存中一个变量的值传送到主内存的变量中。</p>\n<p>如果要把一个变量从主内存中复制到工作内存，就需要按顺寻地执行 read 和 load 操作， 如果把变量从工作内存中同步回主内存中，就要按顺序地执行 store 和 write 操作。Java 内存 模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。也就是 read 和 load 之间， store 和 write 之间是可以插入其他指令的，如对主内存中的变量 a、b 进行访问时，可能的顺 序是 read a，read b，load b， load a。</p>\n<p>Java 内存模型还规定了在执行上述八种基本操作时，必须满足如下规则：</p>\n<p>不允许 read 和 load、store 和 write 操作之一单独出现</p>\n<p>不允许一个线程丢弃它的最近 assign 的操作，即变量在工作内存中改变了之后必须同步到主内存中。</p>\n<p>不允许一个线程无原因地（没有发生过任何 assign 操作）把数据从工作内存同步回主内存中。</p>\n<p>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load 或 assign）的变量。即就是对一个变量实施 use 和 store 操作之前，必须先执行过了 assign 和 load 操作。</p>\n<p>一个变量在同一时刻只允许一条线程对其进行 lock 操作，但 lock 操作可以被同一条线程重复执行多次，多次执行 lock 后，只有执行相同次数的 unlock 操作，变量才会被解锁。lock 和 unlock 必须成对出现</p>\n<p>如果对一个变量执行 lock 操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行 load 或 assign 操作初始化变量的值</p>\n<p>如果一个变量事先没有被 lock 操作锁定，则不允许对它执行 unlock 操作；也不允许去 unlock 一个被其他线程锁定的变量。</p>\n<p>对一个变量执行 unlock 操作之前，必须先把此变量同步到主内存中（执行 store 和 write 操作）。</p>\n<h3 id=\"1-4-重排序\"><a href=\"#1-4-重排序\" class=\"headerlink\" title=\"1.4 重排序\"></a>1.4 重排序</h3><p>在执行程序时为了提高性能，编译器和处理器经常会对指令进行重排序。重排序分成三种类型：</p>\n<p>1.编译器优化的重排序。编译器在不改变单线程程序语义放入前提下，可以重新安排语句的执行顺序。</p>\n<p>2.指令级并行的重排序。现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</p>\n<p>3.内存系统的重排序。由于处理器使用缓存和读写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</p>\n<p>从 Java 源代码到最终实际执行的指令序列，会经过下面三种重排序：</p>\n<p>为了保证内存的可见性，Java 编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。Java 内存模型把内存屏障分为 LoadLoad、LoadStore、StoreLoad 和 StoreStore 四种：</p>\n<h3 id=\"1-5-volatile-型变量\"><a href=\"#1-5-volatile-型变量\" class=\"headerlink\" title=\"1.5 volatile 型变量\"></a>1.5 volatile 型变量</h3><p>当一个变量定义为 volatile 之后，它将具备两种特性：</p>\n<p>第一：保证此变量对所有线程的可见性，这里的可见性是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。普通变量的值在线程间传递需要通过主内存来完成</p>\n<p>由于 valatile 只能保证可见性，在不符合一下两条规则的运算场景中，我们仍要通过加锁来保证原子性</p>\n<p>1.运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值。</p>\n<p>2.变量不需要与其他的状态变量共同参与不变约束</p>\n<p>第二：禁止指令重排序，普通的变量仅仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证变量赋值操作的顺序与程序代码中执行顺序一致，这个就是所谓的线程内表现为串行的语义</p>\n<p>Java 内存模型中对 volatile 变量定义的特殊规则。假定 T 表示一个线程，V 和 W 分别表示两个 volatile 变量，那么在进行 read、load、use、assign、store、write 操作时需要满足如下的规则：</p>\n<p>1.只有当线程 T 对变量 V 执行的前一个动作是 load 的时候，线程 T 才能对变量 V 执行 use 动作；并且，只有当线程 T 对变量 V 执行的后一个动作是 use 的时候，线程 T 才能对变量 V 执行 load 操作。线程 T 对变量 V 的 use 操作可以认为是与线程 T 对变量 V 的 load 和 read 操作相关联的，必须一起连续出现。这条规则要求在工作内存中，每次使用变量 V 之前都必须先从主内存刷新最新值，用于保证能看到其它线程对变量 V 所作的修改后的值。</p>\n<p>2.只有当线程 T 对变量 V 执行的前一个动是 assign 的时候，线程 T 才能对变量 V 执行 store 操作；并且，只有当线程 T 对变量 V 执行的后一个动作是 store 操作的时候，线程 T 才能对变量 V 执行 assign 操作。线程 T 对变量 V 的 assign 操作可以认为是与线程 T 对变量 V 的 store 和 write 操作相关联的，必须一起连续出现。这一条规则要求在工作内存中，每次修改 V 后都必须立即同步回主内存中，用于保证其它线程可以看到自己对变量 V 的修改。</p>\n<p>3.假定操作 A 是线程 T 对变量 V 实施的 use 或 assign 动作，假定操作 F 是操作 A 相关联的 load 或 store 操作，假定操作 P 是与操作 F 相应的对变量 V 的 read 或 write 操作；类型地，假定动作 B 是线程 T 对变量 W 实施的 use 或 assign 动作，假定操作 G 是操作 B 相关联的 load 或 store 操作，假定操作 Q 是与操作 G 相应的对变量 V 的 read 或 write 操作。如果 A 先于 B，那么 P 先于 Q。这条规则要求 valitile 修改的变量不会被指令重排序优化，保证代码的执行顺序与程序的顺序相同。</p>\n<h3 id=\"1-6-对于-long-和-double-型变量的特殊规则\"><a href=\"#1-6-对于-long-和-double-型变量的特殊规则\" class=\"headerlink\" title=\"1.6 对于 long 和 double 型变量的特殊规则\"></a>1.6 对于 long 和 double 型变量的特殊规则</h3><p>Java 模型要求 lock、unlock、read、load、assign、use、store、write 这 8 个操作都具有原子性，但是对于 64 为的数据类型（long 和 double），在模型中特别定义了一条相对宽松的规定：允许虚拟机将没有被 volatile 修饰的 64 位数据的读写操作分为两次 32 为的操作来进行，即允许虚拟机实现选择可以不保证 64 位数据类型的 load、store、read 和 write 这 4 个操作的原子性</p>\n<h3 id=\"1-7-原子性、可见性和有序性\"><a href=\"#1-7-原子性、可见性和有序性\" class=\"headerlink\" title=\"1.7 原子性、可见性和有序性\"></a>1.7 原子性、可见性和有序性</h3><p>原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。Java 内存模型是通过在变量修改后将新值同步会主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式来实现可见性，valatile 特殊规则保障新值可以立即同步到祝内存中。Synchronized 是在对一个变量执行 unlock 之前，必须把变量同步回主内存中（执行 store、write 操作）。被 final 修饰的字段在构造器中一旦初始化完成，并且构造器没有吧 this 的引用传递出去，那在其他线程中就能看见 final 字段的值</p>\n<p>可见性：可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p>\n<p>有序性：即程序执行的顺序按照代码的先后顺序执行。</p>\n<h3 id=\"1-8-先行发生原则\"><a href=\"#1-8-先行发生原则\" class=\"headerlink\" title=\"1.8 先行发生原则\"></a>1.8 先行发生原则</h3><p>这些先行发生关系无须任何同步就已经存在，如果不再此列就不能保障顺序性，虚拟机就可以对它们任意地进行重排序</p>\n<p>1.程序次序规则：在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。准确的说，应该是控制顺序而不是程序代码顺序，因为要考虑分支。循环等结构</p>\n<p>2.管程锁定规则：一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。这里必须强调的是同一个锁，而后面的是指时间上的先后顺序</p>\n<p>3.Volatile 变量规则：对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作，这里的后面同样是指时间上的先后顺序</p>\n<p>4.线程启动规则：Thread 对象的 start()方法先行发生于此线程的每一个动作</p>\n<p>5.线程终止规则：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过 Thread.joke()方法结束、ThradisAlive()的返回值等手段检测到线程已经终止执行</p>\n<p>6.线程中断规则：对线程 interrupt()方法的调用先行发生于被中断线程的代码检测到中断时间的发生，可以通过 Thread.interrupted()方法检测到是否有中断发生</p>\n<p>7.对象终结规则：一个对象的初始化完成(构造函数执行结束)先行发生于它的 finalize()方法的开始</p>\n<p>8.传递性：如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那就可以得出操作 A 先行发生于操作 C 的结论</p>\n<h2 id=\"2-Java-线程\"><a href=\"#2-Java-线程\" class=\"headerlink\" title=\"2 Java 线程\"></a>2 Java 线程</h2><p>协同式调度：线程的执行时间由线程本身控制</p>\n<p>抢占式调度：线程的执行时间由系统来分配</p>\n<h3 id=\"2-1-状态转换\"><a href=\"#2-1-状态转换\" class=\"headerlink\" title=\"2.1 状态转换\"></a>2.1 状态转换</h3><p>1.新建</p>\n<p>2.运行：可能正在执行。可能正在等待 CPU 为它分配执行时间</p>\n<p>3.无限期等待：不会被分配 CUP 执行时间，它们要等待被其他线程显式唤醒</p>\n<p>4.限期等待：不会被分配 CUP 执行时间，它们无须等待被其他线程显式唤醒，一定时间会由系统自动唤醒</p>\n<p>5.阻塞：阻塞状态在等待这获取到一个排他锁，这个时间将在另一个线程放弃这个锁的时候发生；等待状态就是在等待一段时间，或者唤醒动作的发生</p>\n<p>6.结束：已终止线程的线程状态，线程已经结束执行</p>\n<h3 id=\"2-2-线程安全\"><a href=\"#2-2-线程安全\" class=\"headerlink\" title=\"2.2 线程安全\"></a>2.2 线程安全</h3><p>1、不可变：不可变的对象一定是线程安全的、无论是对象的方法实现还是方法的调用者，都不需要再采取任何的线程安全保障。例如：把对象中带有状态的变量都声明为 final，这样在构造函数结束之后，它就是不可变的。</p>\n<p>2、绝对线程安全</p>\n<p>3、相对线程安全：相对的线程安全就是我们通常意义上所讲的线程安全，它需要保证对这个对象单独的操作是线程安全的，我们在调用的时候不需要做额外的保障措施，但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性</p>\n<p>4、线程兼容：对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全使用</p>\n<p>5、线程对立：是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码</p>\n<h3 id=\"2-3-线程安全的实现方法\"><a href=\"#2-3-线程安全的实现方法\" class=\"headerlink\" title=\"2.3 线程安全的实现方法\"></a>2.3 线程安全的实现方法</h3><p>1.互斥同步：</p>\n<p>同步是指在多个线程并发访问共享数据时，保证共享数据在同一个时刻只被一个（或者是一些，使用信号量的时候）线程使用。而互斥是实现同步的一种手段，临界区、互斥量和信号量都是主要的互斥实现方式。互斥是因，同步是果：互斥是方法，同步是目的</p>\n<p>在 Java 中，最基本的互斥同步手段就是 synchronized 关键字，它经过编译之后，会在同步块的前后分别形成 monitorenter 和 monitorexit 这两个字节码指令，这两个字节码都需要一个 reference 类型的参数来指明要锁定和解锁的对象。如果 Java 程序中的 synchronized 明确指定了对象参数，那就是这个对象的 reference；如果没有指明，那就根据 synchronized 修饰的是实例方法还是类方法，去取对应的对象实例或 Class 对象来作为锁对象。在执行 monitorenter 指令时，首先要尝试获取对象的锁。如果这个对象没有被锁定，或者当前线程已经拥有了那个对象的锁，把锁的计数器加 1，对应的在执行 monitorexit 指令时会将锁计数器减 1，当计数器为 0 时，锁就被释放。如果获取对象锁失败，哪当前线程就要阻塞等待，直到对象锁被另外一个线程释放为止</p>\n<p>Synchronized，ReentrantLock 增加了一些高级功能</p>\n<p>1.等待可中断：是指当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情，可中断特性对处理执行时间非常长的同步块很有帮助</p>\n<p>2.公平锁：是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁；非公平锁则不能保证这一点，在锁被释放时，任何一个等待锁的线程都有机会获得锁。Synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但可以通过带布尔值的构造函数要求使用公平锁</p>\n<p>3.锁绑定多个条件是指一个 ReentrantLock 对象可以同时绑定多个 Condition 对象，而在 synchronized 中，锁对象的 wait()和 notify()或 notifyAll()方法可以实现一个隐含的条件，如果要和多余一个的条件关联的时候，就不得不额外地添加一个锁，而 ReentrantLock 则无须这样做，只需要多次调用 newCondition 方法即可</p>\n<p>2.非阻塞同步</p>\n<p>3.无同步方案</p>\n<p>可重入代码：也叫纯代码，可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归调用它本身）而在控制权返回后，原来的程序不会出现任何错误。所有的可重入代码都是线程安全的，但是并非所有的线程安全的代码都是可重入的。</p>\n<p>判断一个代码是否具备可重入性：如果一个方法，它的返回结果是可预测的，只要输入了相同的数据，就都能返回相同的结果，那它就满足可重入性的要求，当然也就是线程安全的</p>\n<p>线程本地存储：如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行？如果能保障，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题</p>\n<h3 id=\"2-4-锁优化\"><a href=\"#2-4-锁优化\" class=\"headerlink\" title=\"2.4 锁优化\"></a>2.4 锁优化</h3><p>适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁</p>\n<h4 id=\"2-4-1-自旋锁与自适应自旋\"><a href=\"#2-4-1-自旋锁与自适应自旋\" class=\"headerlink\" title=\"2.4.1 自旋锁与自适应自旋\"></a>2.4.1 自旋锁与自适应自旋</h4><p>自旋锁：如果物理机器上有一个以上的处理器，能让两个或以上的线程同时并行执行，我们就可以让后面请求锁的那个线程稍等一下，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只需让线程执行一个忙循环（自旋），这项技术就是所谓的自旋锁</p>\n<p>自适应自旋转：是由前一次在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后要获取这个锁时将可能省略掉自过程，以避免浪费处理器资源。</p>\n<h4 id=\"2-4-2-锁消除\"><a href=\"#2-4-2-锁消除\" class=\"headerlink\" title=\"2.4.2 锁消除\"></a>2.4.2 锁消除</h4><p>锁消除是指虚拟机即时编辑器在运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。如果在一段代码中。推上的所有数据都不会逃逸出去从而被其他线程访问到，那就可以把它们当作栈上数据对待，认为它们是线程私有的，同步加锁自然就无须进行</p>\n<h4 id=\"2-4-3-锁粗化\"><a href=\"#2-4-3-锁粗化\" class=\"headerlink\" title=\"2.4.3 锁粗化\"></a>2.4.3 锁粗化</h4><p>如果虚拟机检测到有一串零碎的操作都是对同一对象的加锁，将会把加锁同步的范围扩展（粗化）到整个操作序列的外部</p>\n<h4 id=\"2-4-4-轻量级锁\"><a href=\"#2-4-4-轻量级锁\" class=\"headerlink\" title=\"2.4.4 轻量级锁\"></a>2.4.4 轻量级锁</h4><h4 id=\"2-4-5-偏向锁\"><a href=\"#2-4-5-偏向锁\" class=\"headerlink\" title=\"2.4.5 偏向锁\"></a>2.4.5 偏向锁</h4><p>它的目的是消除无竞争情况下的同步原语，进一步提高程序的运行性能。如果轻量级锁是在无竞争的情况下使用 CAS 操作去消除同步使用的互斥量，那偏向锁就是在无竞争的情况下把这个同步都消除掉，CAS 操作都不做了</p>\n<p>如果在接下俩的执行过程中，该锁没有被其他线程获取，则持有偏向锁的线程将永远不需要在进行同步</p>\n<h2 id=\"3-逃逸分析\"><a href=\"#3-逃逸分析\" class=\"headerlink\" title=\"3 逃逸分析\"></a>3 逃逸分析</h2><p>逃逸分析的基本行为就是分析对象动态作用域：当一个对象在方法中被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他方法中，成为方法逃逸。甚至还可能被外部线程访问到，比如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸</p>\n<p>如果一个对象不会逃逸到方法或线程之外，也就是别的方法或线程无法通过任何途径访问到这个对象，则可能为这个变量进行一些高效的优化</p>\n<p>栈上分配：如果确定一个对象不会逃逸出方法外，那让这个对象在栈上分配内存将会是一个不错的注意，对象所占用的内存空间就可以随栈帧出栈而销毁。如果能使用栈上分配，那大量的对象就随着方法的结束而销毁了，垃圾收集系统的压力将会小很多</p>\n<p>同步消除：如果确定一个变量不会逃逸出线程，无法被其他线程访问，那这个变量的读写肯定就不会有竞争，对这个变量实施的同步措施也就可以消除掉</p>\n<p>标量替换：标量就是指一个数据无法在分解成更小的数据表示了，int、long 等及 refrence 类型等都不能在进一步分解，它们称为标量。</p>\n<p>如果一个数据可以继续分解，就称为聚合量，Java 中的对象就是最典型的聚合量</p>\n<p>如果一个对象不会被外部访问，并且这个对象可以被拆散的化，那程序正整执行的时候将可能不创建这个对象，而改为直接创建它的若干个被这个方法使用到的成员变量来代替</p>\n"},{"title":"JVM内存模型","_content":"\n\n\n##<center>JVM 内存模型</center> 1.内存模型结构图\n\n![**这里写图片描述**](http://img.blog.csdn.net/20170724161538339?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n| 名称         | 特征                                                     | 作用                                                                      | 配置参数                           | 异常                                 |\n| ------------ | -------------------------------------------------------- | ------------------------------------------------------------------------- | ---------------------------------- | ------------------------------------ |\n| 程序计数器   | 占用内存小，线程私有， 生命周期与线程相同                | 大致为字节码行号指示器                                                    | 无                                 | 无                                   |\n| 虚拟机栈     | 线程私有，生命周期与线程相同，使用连续的内存空间         | Java 方法执行的内存模型，存储局部变量表、操作栈、动态链接、方法出口等信息 | -Xss                               | OutOfMemoryError，StackOverflowError |\n| java 堆      | 线程共享，生命周期与虚拟机相同，可以不使用连续的内存地址 | 保存对象实例，所有对象实例（包括数组）都要在堆上分配                      | -Xms-Xsx -Xmn                      | OutOfMemoryError                     |\n| 方法区       | 线程共享，生命周期与虚拟机相同，可以不使用连续的内存地址 | 存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据  | -XX:PermSize:16M-XX:MaxPermSize64M | OutOfMemoryError                     |\n| 运行时常量池 | 方法区的一部分，具有动态性                               | 存放字面量及符号引用                                                      | 无                                 | 无                                   |\n\n<h5>1.1 程序计数器</h5>\n程序 计数器（ Program Counter Register） 是一 块 较小 的 内存 空间， 它的 作用 可以 看做 是 当前 线程 所 执行 的 字节 码 的 行号 指示器。 在 虚拟 机 的 概念 模型 里（ 仅是 概念 模型， 各种 虚拟 机 可能 会 通过 一些 更 高效 的 方式 去 实现）， 字节 码 解释器 工作 时 就是 通过 改变 这个 计数器 的 值 来 选取 下一 条 需要 执行 的 字节 码 指令， 分支、 循环、 跳 转、 异常 处理、 线程 恢复 等 基础 功能 都 需要 依赖 这个 计数器 来 完成。\n由于 Java 虚拟 机 的 多 线程 是 通过 线程 轮流 切换 并 分配 处理器 执行 时间 的 方式 来 实现 的， 在任 何 一个 确定 的 时刻， 一个 处理器（ 对于 多 核 处理器 来说 是一 个 内核） 只会 执行 一条 线程 中的 指令。 因此， 为了 线程 切换 后能 恢复 到 正确 的 执行 位置， 每条 线程 都 需要 有一个 独立 的 程序 计数器， 各条 线程 之间 的 计数器 互不 影响， 独立 存储， 我们 称 这类 内存 区域 为“ 线程 私有” 的 内存。 如果 线程 正在 执行 的 是 一个 Java 方法， 这个 计数器 记录 的 是 正在 执行 的 虚拟 机 字节 码 指令 的 地址； 如果 正在 执 行的 是 Natvie 方法， 这个 计数器 值 则为 空（ Undefined）。 此 内存 区域 是 唯一 一个 在 Java 虚拟 机 规范 中 没有 规定 任何 OutOfMemoryError 情况 的 区域。\n\n<h5>1.2 Java 虚拟 机 栈</h5>\n与 程序 计数器 一样， Java 虚拟 机 栈（ Java Virtual Machine Stacks） 也是 线程 私有 的， 它的 生命 周期 与 线程 相同。 虚拟 机 栈 描述 的 是 Java 方法 执行 的 内存 模型： 每个 方法 被 执行 的 时候 都会 同时 创建 一个 栈 帧（ Stack Frame[ 1]） 用于 存储 局部 变 量表、 操作 栈、 动态 链接、 方法 出口 等 信息。 每一个 方法 被 调用 直至 执行 完成 的 过程， 就 对应 着 一个 栈 帧 在 虚拟 机 栈 中 从 入栈 到 出 栈 的 过程,对于执行引擎来说，活动线程中，只有栈顶的栈帧是有效的，称为当前栈帧，这个栈帧所关联的方法称为当前方法。执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。 经常 有人 把 Java 内存 区 分为 堆 内存（ Heap） 和 栈 内存（ Stack）， 这种 分法 比较 粗糙， Java 内存 区域 的 划分 实际上 远比 这 复杂。 这种 划分 方式 的 流行 只能 说明 大多数 程序员 最 关注 的、 与 对象 内存 分配 关系 最 密切 的 内存 区域 是 这 两块。 其中 所指 的“ 堆” 在后面 会 专门 讲述， 而 所指 的“ 栈” 就是 现在 讲的 虚拟 机 栈， 或者 说是 虚拟 机 栈 中的 局部 变量 表 部分。 局部 变量 表 存放 了 编译 期 可知 的 各种 基本 数据 类型（ boolean、 byte、 char、 short、 int、 float、 long、 double）、 对象 引用（ reference 类型， 它不 等同 于 对象 本身， 根据 不同 的 虚拟 机 实现， 它可 能 是一 个 指向 对象 起始 地址 的 引用 指针， 也可能 指向 一个 代表 对象 的 句柄 或者 其他 与此 对象 相关 的 位置） 和 returnAddress 类型（ 指向 了 一条 字节 码 指令 的 地址）。 其中 64 位 长度 的 long 和 double 类型 的 数据 会 占用 2 个 局部 变量 空间（Slot）， 其余 的 数据 类型 只占 用 1 个。 局部 变量 表 所需 的 内存 空间 在编 译 期间 完成 分配， 当 进入 一个 方法 时， 这个 方法 需 要在 帧 中 分配 多大 的 局部 变量 空间 是 完全 确定 的， 在 方法 运行 期间 不会 改变 局部 变 量表 的 大小。 在 Java 虚拟 机 规范 中， 对这 个 区域 规定了 两种 异常 状况： 如果 线程 请求 的 栈 深度 大于 虚拟 机 所 允许 的 深度， 将 抛出 StackOverflowError 异常； 如果 虚拟 机 栈 可以 动态 扩展（ 当前 大部分 的 Java 虚拟 机 都可 动态 扩展， 只不过 Java 虚拟 机 规范 中 也 允许 固定 长度 的 虚拟 机 栈）， 当 扩展 时 无法 申请 到 足够 的 内存 时会 抛出 OutOfMemoryError 异常。\n<h6>1.2.1 局部变量表</h6>\n局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。在Java程序被编译成Class文件时，就在方法的Code属性的max_locals数据项中确定了该方法所需要分配的最大局部变量表的容量。\n局部变量表的容量以变量槽（Slot）为最小单位，32位虚拟机中一个Slot可以存放一个32位以内的数据类型（boolean、byte、char、short、int、float、reference和returnAddress八种）。\nreference类型虚拟机规范没有明确说明它的长度，但一般来说，虚拟机实现至少都应当能从此引用中直接或者间接地查找到对象在Java堆中的起始地址索引和方法区中的对象类型数据。\nreturnAddress类型是为字节码指令jsr、jsr_w和ret服务的，它指向了一条字节码指令的地址。\n虚拟机是使用局部变量表完成参数值到参数变量列表的传递过程的，如果是实例方法（非static），那么局部变量表的第0位索引的Slot默认是用于传递方法所属对象实例的引用，在方法中通过this访问。\n Slot是可以重用的，当Slot中的变量超出了作用域，那么下一次分配Slot的时候，将会覆盖原来的数据。Slot对对象的引用会影响GC（要是被引用，将不会被回收）。\n 系统不会为局部变量赋予初始值（实例变量和类变量都会被赋予初始值）。也就是说不存在类变量那样的准备阶段。\n<h6>1.2.2 操作数栈</h6>\n和局部变量区一样，操作数栈也是被组织成一个以字长为单位的数组。但是和前者不同的是，它不是通过索引来访问，而是通过标准的栈操作——压栈和出栈—来访问的。比如，如果某个指令把一个值压入到操作数栈中，稍后另一个指令就可以弹出这个值来使用。\n虚拟机在操作数栈中存储数据的方式和在局部变量区中是一样的：如int、long、float、double、reference和returnType的存储。对于byte、short以及char类型的值在压入到操作数栈之前，也会被转换为int。\n虚拟机把操作数栈作为它的工作区——大多数指令都要从这里弹出数据，执行运算，然后把结果压回操作数栈。比如，iadd指令就要从操作数栈中弹出两个整数，执行加法运算，其结果又压回到操作数栈中。如下演示了虚拟机是如何把两个int类型的局部变量相加，再把结果保存到第三个局部变量的：\n```java\n   begin  \n   iload_0    // push the int in local variable 0 ontothe stack  \n   iload_1    //push the int in local variable 1 onto the stack  \n   iadd       // pop two ints, add them, push result  \n   istore_2   // pop int, store into local variable 2  \n   end\n```\n1. 指令iload_0和iload_1将存储在局部变量中索引为0和1的整数压入操作数栈中\n2. iadd指令从操作数栈中弹出那两个整数相加，再将结果压入操作数栈\n3. istore_2则从操作数栈中弹出结果，并把它存储到局部变量区索引为2的位置。\n4. 局部变量和操作数栈的状态变化，图中没有使用的局部变量区和操作数栈区域以空白表示。\n\n![**这里写图片描述**](http://img.blog.csdn.net/20170727201918687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)<center>\n\n<h6>1.2.3 动态连接<h6>\n虚拟机运行的时候,运行时常量池会保存大量的符号引用，这些符号引用可以看成是每个方法的间接引用。如果代表栈帧A的方法想调用代表栈帧B的方法，那么这个虚拟机的方法调用指令就会以B方法的符号引用作为参数，但是因为符号引用并不是直接指向代表B方法的内存位置，所以在调用之前还必须要将符号引用转换为直接引用，然后通过直接引用才可以访问到真正的方法。\n如果符号引用是在类加载阶段或者第一次使用的时候转化为直接应用，那么这种转换成为静态解析，如果是在运行期间转换为直接引用，那么这种转换就成为动态连接。\n<h6> 1.2.4 返回地址 <h6>\n方法的返回分为两种情况，一种是正常退出，退出后会根据方法的定义来决定是否要传返回值给上层的调用者，一种是异常导致的方法结束，这种情况是不会传返回值给上层的调用方法。\n不过无论是那种方式的方法结束，在退出当前方法时都会跳转到当前方法被调用的位置，如果方法是正常退出的，则调用者的PC计数器的值就可以作为返回地址,，果是因为异常退出的，则是需要通过异常处理表来确定。\n方法的的一次调用就对应着栈帧在虚拟机栈中的一次入栈出栈操作，因此方法退出时可能做的事情包括：恢复上层方法的局部变量表以及操作数栈，如果有返回值的话，就把返回值压入到调用者栈帧的操作数栈中，还会把PC计数器的值调整为方法调用入口的下一条指令。\n\n![这里写图片描述](http://img.blog.csdn.net/20170727204302809?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n\n<h6> 1.2.5 异常 <h6>\n在Java 虚拟机规范中，对虚拟机栈规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError 异常；如果虚拟机栈可以动态扩展（当前大部分的Java 虚拟机都可动态扩展，只不过Java 虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError 异常。如下代码为请求大于虚拟机堆栈深度所出现的异常\n\n```\n    java\npackage com.sf.jvm;\n/**\n* VM Args：- Xss128k\n*/\npublic class JavaVMStackSOF {\n  private intstackLength=1;\n  public void stackLeak() {\n    stackLength++;\n    stackLeak();\n  }\n  public static void main(String[] args)throwsThrowable {\n    JavaVMStackSOF oom =newJavaVMStackSOF();\n    try{\n      oom.stackLeak();\n    }catch(Throwable e) {\n      System.out.println(\" stack length:\" + oom.stackLength);\n      throw e;\n    }\n  }\n}\n```\n\n运行出现如下情况：\n\n```\nstack length:22337\nException in thread \"main\" java.lang.StackOverflowError\nat com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)\nat com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)\nat com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)\nat com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)\nat com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)\nat com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)\n```\n\n<h4>1.3 本地 方法 栈</h4>\n\n本地 方法 栈（ Native Method Stacks） 与 虚拟 机 栈 所 发挥 的 作用 是非 常 相似 的， 其 区别 不过 是 虚拟 机 栈 为 虚拟 机 执行 Java 方法（ 也就是 字节 码） 服务， 而 本地 方法 栈 则是 为 虚拟 机 使 用到 的 Native 方法 服务。 虚拟 机 规范 中 对本 地 方法 栈 中的 方法 使用 的 语言、 使用 方式 与 数据 结构 并没有 强制 规定， 因此 具体 的 虚拟 机 可以 自由 实现 它。 甚至 有的 虚拟 机（ 譬如 Sun HotSpot 虚拟 机） 直接 就把 本地 方法 栈 和 虚拟 机 栈 合二为一。 与 虚拟 机 栈 一样， 本地 方法 栈 区域 也会 抛出 StackOverflowError 和 OutOfMemoryError 异常。\n\n对于一个运行中的 Java 程序而言，它还可能会用到一些跟本地方法相关的数据区。当某个线程调用一个本地方法时，它就进入了一个全新的并且不再受虚拟机限制的世界。本地方法可以通过本地方法接口来访问虚拟机的运行时数据区，但不止如此，它还可以做任何它想做的事情。\n　　本地方法本质上时依赖于实现的，虚拟机实现的设计者们可以自由地决定使用怎样的机制来让 Java 程序调用本地方法。\n　　任何本地方法接口都会使用某种本地方法栈。当线程调用 Java 方法时，虚拟机会创建一个新的栈帧并压入 Java 栈。然而当它调用的是本地方法时，虚拟机会保持 Java 栈不变，不再在线程的 Java 栈中压入新的帧，虚拟机只是简单地动态连接并直接调用指定的本地方法。\n　　如果某个虚拟机实现的本地方法接口是使用 C 连接模型的话，那么它的本地方法栈就是 C 栈。当 C 程序调用一个 C 函数时，其栈操作都是确定的。传递给该函数的参数以某个确定的顺序压入栈，它的返回值也以确定的方式传回调用者。同样，这就是虚拟机实现中本地方法栈的行为。\n　　很可能本地方法接口需要回调 Java 虚拟机中的 Java 方法，在这种情况下，该线程会保存本地方法栈的状态并进入到另一个 Java 栈。\n　　![这里写图片描述](http://img.blog.csdn.net/20170727205440144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n　　这幅图展示了 JAVA 虚拟机内部线程运行的全景图。当一个线程调用一个本地方法时，本地方法又回调虚拟机中的另一个 Java 方法，一个线程可能在整个生命周期中都执行 Java 方法，操作它的 Java 栈；或者它可能毫无障碍地在 Java 栈和本地方法栈之间跳转。\n\n该线程首先调用了两个 Java 方法，而第二个 Java 方法又调用了一个本地方法，这样导致虚拟机使用了一个本地方法栈。假设这是一个 C 语言栈，其间有两个 C 函数，第一个 C 函数被第二个 Java 方法当做本地方法调用，而这个 C 函数又调用了第二个 C 函数。之后第二个 C 函数又通过本地方法接口回调了一个 Java 方法（第三个 Java 方法），最终这个 Java 方法又调用了一个 Java 方法（它成为图中的当前方法）。\n内存溢出实例：\n\n```java\npackagecom.sf.jvm;\n/**\n* VM Args：\n* -Xss2M\n*/\npublic classJavaVMStackOOM {\n   private void dontStop() {\n      while(true) {\n         try{\n           Thread.sleep(100000);\n        }catch(InterruptedException e) {\n\t\t   e.printStackTrace();\n\t    }\n\t  }\n  }\n\t  public void stackLeakByThread() {\n\t\tint threadNum =0;\n\t    while(true) {\n\t\t    Thread thread =newThread(newRunnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\tdontStop();\n\t\t\t\t}\n\t\t});\n\t\tthread.start();\n\t\tthreadNum++;\n\t\t}\n\t}\n\tpublic static void main(String[] args)throwsThrowable {\n\t\tJavaVMStackOOM oom =newJavaVMStackOOM();\n\t\toom.stackLeakByThread();\n\t}\n}\n\n运行程序抛出如下异常：\nException in thread \"main\" java. lang. OutOfMemoryError: unable to create new native thread\n```\n\n<h4>1.4 Java 堆<h4>\n\nJava 堆（ Java Heap） 是 Java 虚拟 机 所 管理 的 内存 中最 大的 一块。 Java 堆 是 被 所有 线程 共享 的 一块 内存 区域， 在 虚拟 机 启动 时 创建。 此 内存 区域 的 唯一 目的 就是 存放 对象 实例， 几乎 所有 的 对象 实例 都在 这里 分配 内存。 这一 点在 Java 虚拟 机 规范 中的 描述 是： 所有 的 对象 实例 以及 数组 都 要在 堆 上 分配[ 2]， 但是 随着 JIT 编译器 的 发展 与 逃逸 分析 技术 的 逐渐 成熟， 栈 上 分配、 标量 替换[ 3] 优化 技术 将会 导致 一些 微妙 的 变化 发生， 所有 的 对象 都 分配 在 堆 上 也 渐渐 变得 不是 那么“ 绝对” 了。 Java 堆 是 垃圾 收集 器 管理 的 主要 区域， 因此 很多 时候 也 被 称做“ GC 堆”（ Garbage Collected Heap）。 如果 从内 存 回收 的 角度 看， 由于 现在 收集 器 基本 都是 采 用的 分 代收 集 算法， 所以 Java 堆 中 还可以 细分 为： 新生代 和 老 年代； 再 细致 一点 的 有 Eden 空间、 From Survivor 空间、 To Survivor 空间 等。 如果 从内 存 分配 的 角度 看， 线程 共享 的 Java 堆 中 可能 划分 出 多个 线程 私有 的 分配 缓冲区（ Thread Local Allocation Buffer， TLAB）。 不过， 无论如何 划分， 都与 存放 内容 无关， 无论 哪个 区域， 存储 的 都 仍然是 对象 实例， 进一步 划分 的 目的 是 为了 更好 地 回收 内存， 或者 更快 地 分配 内存。 在 本章 中， 我们 仅仅 针对 内存 区域 的 作用 进行 讨论， Java 堆 中的 上述 各个 区域 的 分配 和 回收 等 细节 将会 是 下 一章 的 主题。 根据 Java 虚拟 机 规范 的 规定， Java 堆 可以 处于 物理上 不连续 的 内存 空间 中， 只要 逻辑上 是 连续 的 即可， 就 像 我们 的 磁盘 空间 一样。 在 实现 时， 既可以 实现 成 固定 大小 的， 也可以 是 可扩展 的， 不过 当前 主流 的 虚拟 机 都是 按照 可扩展 来 实现 的（ 通过- Xmx 和- Xms 控制）。\nJava 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。\n在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。如下图所示：\n\n![这里写图片描述](http://img.blog.csdn.net/20170727210308831?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n\n从图中可以看出： 堆大小 = 新生代 + 老年代。其中，堆的大小可以通过参数 –Xms、-Xmx 来指定。\n默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。\n老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。\n默认的，Edem : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。\nJVM 每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。\n因此，新生代实际可用的内存空间为 9/10 ( 即 90% )的新生代空间。\n\nGC 堆\nJava 中的堆也是 GC 收集垃圾的主要区域。GC 分为两种：Minor GC、Full GC ( 或称为 Major GC )。\nMinor GC 是发生在新生代中的垃圾收集动作，所采用的是复制算法。\n新生代几乎是所有 Java 对象出生的地方，即 Java 对象申请的内存以及存放都是在这个地方。Java 中的大部分对象通常不需长久存活，具有朝生夕灭的性质。\n当一个对象被判定为 “死亡” 的时候，GC 就有责任来回收掉这部分对象的内存空间。新生代是 GC 收集垃圾的频繁区域。\n当对象在 Eden ( 包括一个 Survivor 区域，这里假设是 from 区域 ) 出生后，在经过一次 Minor GC 后，如果对象还存活，并且能够被另外一块 Survivor 区域所容纳\n( 上面已经假设为 from 区域，这里应为 to 区域，即 to 区域有足够的内存空间来存储 Eden 和 from 区域中存活的对象 )，则使用复制算法将这些仍然还存活的对象复制到另外一块 Survivor 区域 ( 即 to 区域 ) 中，然后清理所使用过的 Eden 以及 Survivor 区域 ( 即 from 区域 )，并且将这些对象的年龄设置为 1，以后对象在 Survivor 区每熬过一次 Minor GC，就将对象的年龄 + 1，当对象的年龄达到某个值时 ( 默认是 15 岁，可以通过参数 -XX:MaxTenuringThreshold 来设定 )，这些对象就会成为老年代。\n但这也不是一定的，对于一些较大的对象 ( 即需要分配一块较大的连续内存空间 ) 则是直接进入到老年代。\nFull GC 是发生在老年代的垃圾收集动作，所采用的是标记-清除算法。\n现实的生活中，老年代的人通常会比新生代的人 “早死”。堆内存中的老年代(Old)不同于这个，老年代里面的对象几乎个个都是在 Survivor 区域中熬过来的，它们是不会那么容易就 “死掉” 了的。因此，Full GC 发生的次数不会有 Minor GC 那么频繁，并且做一次 Full GC 要比进行一次 Minor GC 的时间更长。\n另外，标记-清除算法收集垃圾的时候会产生许多的内存碎片 ( 即不连续的内存空间 )，此后需要为较大的对象分配内存空间时，若无法找到足够的连续的内存空间，就会提前触发一次 GC 的收集动作。\n\n设置 JVM 参数为 -XX:+PrintGCDetails，使得控制台能够显示 GC 相关的日志信息，执行上面代码，下面是其中一次执行的结果。\n\n| jvm 参数                        | 解释                                                                                                                    |\n| ------------------------------- | ----------------------------------------------------------------------------------------------------------------------- |\n| -Xms                            | 初始堆大小。如：-Xms256m                                                                                                |\n| -Xmx                            | 最大堆大小。如：-Xmx512m                                                                                                |\n| -Xmn                            | 新生代大小。通常为 Xmx 的 1/3 或 1/4。新生代 = Eden + 2 个 Survivor 空间。实际可用空间为 = Eden + 1 个 Survivor，即 90% |\n| -Xss                            | JDK1.5+ 每个线程堆栈大小为 1M，一般来说如果栈不是很深的话， 1M 是绝对够用了的。                                         |\n| -XX:NewRatio                    | 新生代与老年代的比例，如 –XX:NewRatio=2，则新生代占整个堆空间的 1/3，老年代占 2/3                                       |\n| -XX:SurvivorRatio               | 新生代中 Eden 与 Survivor 的比值。默认值为 8。即 Eden 占新生代空间的 8/10，另外两个 Survivor 各占 1/10                  |\n| -XX:PermSize                    | 永久代(方法区)的初始大小                                                                                                |\n| -XX:MaxPermSize                 | 永久代(方法区)的最大值                                                                                                  |\n| -XX:+PrintGCDetails             | 打印 GC 信息                                                                                                            |\n| -XX:+HeapDumpOnOutOfMemoryError | 让虚拟机在发生内存溢出时 Dump 出当前的内存堆转储快照，以便分析用                                                        |\n\nJava 堆 用于 储存 对象 实例， 我们 只要 不断 地 创建 对象， 并且 保证 GC Roots 到 对象 之间 有可 达 路径 来 避免 垃圾 回收 机制 清除 这些 对象， 就会 在 对象 数量 到达 最 大堆 的 容量 限制 后 产生 内存 溢出 异常。实例如下：\n\n```java\npackagecom.sf.jvm;\nimportjava.util.ArrayList;\nimportjava.util.List;\n/**\n* VM Args：\n* -Xms20m -Xmx20m\n* -XX:+HeapDumpOnOutOfMemoryError\n* -XX:+PrintGCDetails\n*/\npublic classHeapOutOfMemory {\n\n\tpublic static void main(String[] args) {\n\t\toutOfMemory();\n\t}\n\tstatic void noOutOfMemory(){\n\t\twhile(true) {\n\t\t\tnewOOMObject();\n\t\t}\n\t}\n\tstatic void outOfMemory(){\n\t\tList<OOMObject> list =newArrayList<OOMObject>();\n\t\twhile(true) {\n\t\t\tlist.add(newOOMObject());\n\t\t}\n\t}\n}\nclassOOMObject {\n\tbytemem[] =new byte[2014];\n}\n异常信息如下：\n[GC (Allocation Failure) [PSYoungGen: 5632K->512K(6144K)] 5632K->5024K(19968K), 0.0027725 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]\n[GC (Allocation Failure) [PSYoungGen: 6144K->504K(6144K)] 10656K->11432K(19968K), 0.0022202 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]\n[Full GC (Ergonomics) [PSYoungGen: 504K->0K(6144K)] [ParOldGen: 10928K->10092K(13824K)] 11432K->10092K(19968K), [Metaspace: 2973K->2973K(1056768K)], 0.0149535 secs] [Times: user=0.02 sys=0.00, real=0.01 secs]\n........\n[Full GC (Allocation Failure) [PSYoungGen: 5632K->5632K(6144K)] [ParOldGen: 13823K->13823K(13824K)] 19455K->19455K(19968K), [Metaspace: 2973K->2973K(1056768K)], 0.0086009 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]\njava.lang.OutOfMemoryError: Java heap space\nDumping heap to java_pid2780.hprof ...\nHeap dump file created [20898436 bytes in 0.027 secs]\n[Full GC (Ergonomics) Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\nat com.sf.jvm.OOMObject.<init>(HeapOutOfMemory.java:29)\nat com.sf.jvm.HeapOutOfMemory.outOfMemory(HeapOutOfMemory.java:23)\nat com.sf.jvm.HeapOutOfMemory.main(HeapOutOfMemory.java:12)\n[PSYoungGen: 5632K->0K(6144K)] [ParOldGen: 13823K->579K(13824K)] 19455K->579K(19968K), [Metaspace: 2973K->2973K(1056768K)], 0.0096016 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]\nHeap\nPSYoungGen total 6144K, used 177K [0x00000000ff980000, 0x0000000100000000, 0x0000000100000000)\neden space 5632K, 3% used [0x00000000ff980000,0x00000000ff9ac4a0,0x00000000fff00000)\nfrom space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\nto space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\nParOldGen total 13824K, used 579K [0x00000000fec00000, 0x00000000ff980000, 0x00000000ff980000)\nobject space 13824K, 4% used [0x00000000fec00000,0x00000000fec90c20,0x00000000ff980000)\nMetaspace used 3005K, capacity 4496K, committed 4864K, reserved 1056768K\nclass space used 326K, capacity 388K, committed 512K, reserved 1048576K\n```\n\n用 jvisualvm.exe 打开查看 dump，发现主要是 OOMobject 不被释放。\n\n<h4>1.5 方法 区<h4>\n      <h5>1.5.1 方法区</h5> \n方法 区（ Method Area） 与 Java 堆 一样， 是 各个 线程 共享 的 内存 区域， 它 用于 存储 已被 虚拟 机 加载 的 类 信息、 常量、 静态 变量、 即时 编译器 编译 后的 代码 等 数据。 虽然 Java 虚拟 机 规范 把 方法 区 描述为 堆 的 一个 逻辑 部分， 但是 它 却有 一个 别名 叫做 Non- Heap（ 非 堆）， 目的 应该 是与 Java 堆 区分 开来。 对于 习惯 在 HotSpot 虚拟 机上 开发 和 部署 程序 的 开发者 来说， 很多人 愿意 把 方法 区 称为“ 永久 代”（ Permanent Generation）， 本质上 两者 并不 等价， 仅仅 是因为 HotSpot 虚拟 机 的 设计 团队 选择 把 GC 分 代收 集 扩展 至 方法 区， 或者说 使用 永久 代 来 实现 方法 区 而已。 对于 其他 虚拟 机（ 如 BEA JRockit、 IBM J9 等） 来说 是 不存在 永久 代 的 概念 的。 即使是 HotSpot 虚拟 机 本身， 根据 官方 发布 的 路线 图 信息， 现在 也有 放弃 永久 代 并“ 搬家” 至 Native Memory 来 实现 方法 区 的 规划 了。 Java 虚拟 机 规范 对这 个 区域 的 限制 非常 宽松， 除了 和 Java 堆 一样 不需要 连续 的 内存 和 可以 选择 固定 大小 或者 可扩展 外， 还可以 选择 不实 现 垃圾 收集。 相对而言， 垃圾 收集 行为 在这 个 区域 是 比较 少 出现 的， 但 并非 数据 进入 了 方法 区 就 如 永久 代 的 名字 一样“ 永久” 存在 了。 这个 区域 的 内存 回收 目标 主要 是 针对 常量 池 的 回收 和 对 类型 的 卸载， 一般来说 这个 区域 的 回收“ 成绩” 比较 难以 令人满意， 尤其是 类型 的 卸载， 条件 相当 苛刻， 但是 这部 分 区域 的 回收 确实 是有 必要 的。 在 Sun 公司 的 BUG 列表 中， 曾 出现 过 的 若干个 严重 的 BUG 就是 由于 低 版本 的 HotSpot 虚拟 机 对此 区域 未完 全 回收 而 导致 内存 泄漏。 根据 Java 虚拟 机 规范 的 规定， 当 方法 区 无法 满足 内存 分配 需求 时， 将 抛出 OutOfMemoryError 异常。方法 区 用于 存放 Class 的 相关 信息， 如 类 名、 访问 修饰 符、 常量 池、 字段 描述、 方法 描述 等。 对于 这个 区域 的 测试， 基本 的 思路 是 运行时 产生 大量 的 类 去 填满 方法 区， 直到 溢出。 虽然 直接 使用 Java SE API 也可以 动态 产生 类（ 如 反射 时 的 GeneratedConstructorAccessor 和 动态 代理 等）， 但在 本次 实验 中 操作 起来 比较 麻烦。 在 代码 清单 2- 5 中， 笔者 借助 CGLib[ 3] 直接 操作 字节 码 运行时， 生成 了 大量 的 动态 类。 值得 特别 注意 的 是， 我们 在这 个 例子 中 模拟 的 场景 并非 纯粹 是一 个 实验， 这样 的 应用 经常 会 出现 在 实际 应用 中： 当前 的 很多 主流 框架， 如 Spring 和 Hibernate 对 类 进行 增强 时， 都会 使用 到 CGLib 这类 字节 码 技术， 增 强的 类 越多， 就 需要 越大 的 方法 区 来 保证 动态 生成 的 Class 可以 加载 入 内存。\n方法 区 溢出 也是 一种 常见 的 内存 溢出 异常， 一个 类 如果 要被 垃圾 收集 器 回收 掉， 判定 条件 是非 常 苛刻 的。 在 经常 动态 生成 大量 Class 的 应用 中， 需要 特别 注意 类 的 回收 状况。 这类 场景 除了 上面 提到 的 程序 使用 了 GCLib 字节 码 增强 外， 常见 的 还有： 大量 JSP 或 动态 产生 JSP 文件 的 应用（ JSP 第一次 运行时 需要 编译 为 Java 类）、 基于 OSGi 的 应用（ 即使是 同一个 类 文件， 被 不同 的 加载 器 加载 也会 视为 不同 的 类） 等。\n代码 清单 2- 5 　 借助 CGLib 使得 方法 区 出现 内存 溢出 异常\n```java\npackagecom.sf.jvm;\n/**\n* VM Args： -XX: PermSize= 10M -XX: MaxPermSize= 10M\n*/\npublic class JavaMethodAreaOOM {\n\tpublic static void main(String[] args) {\n\t\twhile(true) {\n\t\t\tEnhancer enhancer =newEnhancer();\n\t\t\tenhancer.setSuperclass(OOMObject.class);\n\t\t\tenhancer.setUseCache(false);\n\t\t\tenhancer.setCallback(newMethodInterceptor() {\n\t\t\t\tpublic Object intercept(Object obj, Method method, \n\t\t\t\t\tObject[] args, MethodProxy proxy)throwsThrowable {\n\t\t\t\t\treturnproxy.invokeSuper(obj, args);\n\t\t\t\t}\n\t\t\t});\n\t\t\tenhancer.create();\n\t\t}\n\t}\n\tstatic classOOMObject {\n\t}\n}\n运行 结果：\nCaused by: \njava. lang. OutOfMemoryError: \nPermGen space at java. lang. ClassLoader. defineClass1( Native Method)\nat java. lang. ClassLoader. defineClassCond( ClassLoader. java: 632) \nat java. lang. ClassLoader. defineClass( ClassLoader. java: 616）\n```\n\n<h5>1.5.2 运行时常量池</h5>\n 运行时 常量 池（ Runtime Constant Pool） 是 方法 区 的 一部分。 Class 文件 中 除了 有 类 的 版本、 字段、 方法、接口 等 描述 等 信息 外， 还有 一项 信息 是 常量 池（ Constant Pool Table）， 用于 存放 编译 期 生成 的 各种 字面 量 和 符号 引用， 这部 分 内容 将 在 类 加载 后 存放 到 方法 区 的 运行时 常量 池 中。 Java 虚拟 机 对 Class 文件 的 每一 部分（ 自然 也 包括 常量 池） 的 格式 都有 严格 的 规定， 每一个 字节 用于 存储 哪种 数据 都 必须 符合 规范 上 的 要求， 这样 才会 被 虚拟 机 认可、 装载 和 执行。 但 对于 运行时 常量 池， Java 虚拟 机 规范 没有 做 任何 细节 的 要求， 不同 的 提供 商 实现 的 虚拟 机 可以 按照 自己的 需要 来 实现 这个 内存 区域。 不过， 一般来说， 除了 保存 Class 文件 中 描述 的 符号 引用 外， 还会 把 翻译 出来 的 直接 引用 也 存储 在 运行时 常量 池 中[ 4]。 运行时 常量 池 相对于 Class 文件 常量 池 的 另外 一个 重要 特征 是 具备 动态 性， Java 语言 并不 要求 常量 一定 只能 在 编译 期 产生， 也就是 并非 预置 入 Class 文件 中 常量 池 的 内容 才能 进入 方法 区 运行时 常量 池， 运行 期间 也可 能将 新的 常量 放入 池 中， 这种 特性 被 开发 人员 利用 得比 较多 的 便是 String 类 的 intern() 方法。 既然 运行时 常量 池 是 方法 区 的 一部分， 自然 会受 到 方法 区 内存 的 限制， 当 常量 池 无法 再 申请 到 内存 时会 抛出 OutOfMemoryError 异常。\n \n```java\npackage com.sf.jvm;\nimportjava.util.ArrayList;\nimportjava.util.List;\n/**\n* VM Args：- XX:PermSize=10M -XX:MaxPermSize=10M\n*/\npublic class RuntimeConstantPoolOOM {\n\tpublic static void main(String[] args) {\n\t\t// 使用 List 保持 着 常量 池 引用， 避免 Full GC 回收 常量 池 行为\n\t\tList<String> list =new ArrayList<String>();\n\t\t// 10MB 的 PermSize 在 integer 范围内 足够 产生 OOM 了\n\t\tint i = 0;\n\t\twhile(true) {\n\t\t\tlist.add(String.valueOf(i++ +\"xxxxxxxxxxxxxxxxxxxxx\").intern());\n\t\t}\n\t}\n}\n运行异常：\nException in thread \"main\" java. lang. OutOfMemoryError: \nPermGen space at java. lang. String. intern( Native Method) \nat org. fenixsoft. oom. RuntimeConstantPoolOOM. main( RuntimeConstantPoolOOM. java:...\n```\n\n<h4>1.7 直接 内存</h4>\n 直接内存（DirectMemory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现，所以我们放到这里一起讲解。在JDK1.4中新加入了NIO（NewInput/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。显然，本机直接内存的分配不会受到Java堆大小的限制，但是，既然是内存，则肯定还是会受到本机总内存（包括RAM及SWAP区或者分页文件）的大小及处理器寻址空间的限制。服务器管理员配置虚拟机参数时，一般会根据实际内存设置-Xmx等参数信息，但经常会忽略掉直接内存，使得各个内存区域的总和大于物理内存限制（包括物理上的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。DirectMemory容量可通过-XX：MaxDirectMemorySize指定，如果不指定，则默认与Java堆的最大值（-Xmx指定）一样。越过了DirectByteBuffer类，直接通过反射获取Unsafe实例并进行内存分配（Unsafe类的getUnsafe()方法限制了只有引导类加载器才会返回实例，也就是设计者希望只有rt.jar中的类才能使用Unsafe的功能）。因为，虽然使用DirectByteBuffer分配内存也会抛出内存溢出异常，但它抛出异常时并没有真正向操作系统申请分配内存，而是通过计算得知内存无法分配，于是手动抛出异常，真正申请分配内存的方法是unsafe.allocateMemory()。如下实例为直接内存溢出。    \n```java\npackage com.sf.jvm;\nimport sun.misc.Unsafe;\nimport java.lang.reflect.Field;\nimport staticcom.sun.deploy.util.BufferUtil.MB;\n/**\n* VM Args：- Xmx20M -XX: MaxDirectMemorySize= 10M\n*/\npublic classDirectMemoryOOM {\n\tprivate static final int_1MB=1024*1024;\n\tpublic static void main(String[] args)throwsException {\n\t\tField unsafeField = Unsafe.class.getDeclaredFields()[0];\n\t\tunsafeField.setAccessible(true);\n\t\tUnsafe unsafe = (Unsafe) unsafeField.get(null);\n\t\twhile(true) {\n\t\t\tunsafe.allocateMemory(_1MB);\n\t\t}\n\t}\n}\n运行异常：\nException in thread \"main\" java.lang.OutOfMemoryError\nat sun.misc.Unsafe.allocateMemory(Native Method)\nat com.sf.jvm.DirectMemoryOOM.main(DirectMemoryOOM.java:20)\n```\n<h4>1.8 对象的访问</h4>\n介绍完Java虚拟机的运行时数据区之后，我们就可以来探讨一个问题：在Java语言中，对象访问是如何进行的？对象访问在Java语言中无处不在，是最普通的程序行为，但即使是最简单的访问，也会却涉及Java栈、Java堆、方法区这三个最重要内存区域之间的关联关系，如下面的这句代码：Objectobj=newObject();假设这句代码出现在方法体中，那“Objectobj”这部分的语义将会反映到Java栈的本地变量表中，作为一个reference类型数据出现。而“newObject()”这部分的语义将会反映到Java堆中，形成一块存储了Object类型所有实例数据值（InstanceData，对象中各个实例字段的数据）的结构化内存，根据具体类型以及虚拟机实现的对象内存布局（ObjectMemoryLayout）的不同，这块内存的长度是不固定的。另外，在Java堆中还必须包含能查找到此对象类型数据（如对象类型、父类、实现的接口、方法等）的地址信息，这些类型数据则存储在方法区中。由于reference类型在Java虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该通过哪种方式去定位，以及访问到Java堆中的对象的具体位置，因此不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：使用句柄和直接指针。\n       如果使用句柄访问方式，Java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息，如图:\n![这里写图片描述](http://img.blog.csdn.net/20170728094239784?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n        如果使用直接指针访问方式，Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference中直接存储的就是对象地址，如图:`<center>`![这里写图片描述](http://img.blog.csdn.net/20170728094300056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n         这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。使用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。就本书讨论的主要虚拟机SunHotSpot而言，它是使用第二种方式进行对象访问的，但从整个软件开发的范围来看，各种语言和框架使用句柄来访问的情况也十分常见。\n参照：\n深入理解Java虚拟机\nhttp://blog.csdn.net/u012152619/article/details/46968883\nhttp://www.importnew.com/14630.html\n","source":"_posts/language/jvm/JVM内存模型.md","raw":"---\ntitle: JVM内存模型\ncategories:\n- java\ntag:\n- JVM\n---\n\n\n\n##<center>JVM 内存模型</center> 1.内存模型结构图\n\n![**这里写图片描述**](http://img.blog.csdn.net/20170724161538339?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n| 名称         | 特征                                                     | 作用                                                                      | 配置参数                           | 异常                                 |\n| ------------ | -------------------------------------------------------- | ------------------------------------------------------------------------- | ---------------------------------- | ------------------------------------ |\n| 程序计数器   | 占用内存小，线程私有， 生命周期与线程相同                | 大致为字节码行号指示器                                                    | 无                                 | 无                                   |\n| 虚拟机栈     | 线程私有，生命周期与线程相同，使用连续的内存空间         | Java 方法执行的内存模型，存储局部变量表、操作栈、动态链接、方法出口等信息 | -Xss                               | OutOfMemoryError，StackOverflowError |\n| java 堆      | 线程共享，生命周期与虚拟机相同，可以不使用连续的内存地址 | 保存对象实例，所有对象实例（包括数组）都要在堆上分配                      | -Xms-Xsx -Xmn                      | OutOfMemoryError                     |\n| 方法区       | 线程共享，生命周期与虚拟机相同，可以不使用连续的内存地址 | 存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据  | -XX:PermSize:16M-XX:MaxPermSize64M | OutOfMemoryError                     |\n| 运行时常量池 | 方法区的一部分，具有动态性                               | 存放字面量及符号引用                                                      | 无                                 | 无                                   |\n\n<h5>1.1 程序计数器</h5>\n程序 计数器（ Program Counter Register） 是一 块 较小 的 内存 空间， 它的 作用 可以 看做 是 当前 线程 所 执行 的 字节 码 的 行号 指示器。 在 虚拟 机 的 概念 模型 里（ 仅是 概念 模型， 各种 虚拟 机 可能 会 通过 一些 更 高效 的 方式 去 实现）， 字节 码 解释器 工作 时 就是 通过 改变 这个 计数器 的 值 来 选取 下一 条 需要 执行 的 字节 码 指令， 分支、 循环、 跳 转、 异常 处理、 线程 恢复 等 基础 功能 都 需要 依赖 这个 计数器 来 完成。\n由于 Java 虚拟 机 的 多 线程 是 通过 线程 轮流 切换 并 分配 处理器 执行 时间 的 方式 来 实现 的， 在任 何 一个 确定 的 时刻， 一个 处理器（ 对于 多 核 处理器 来说 是一 个 内核） 只会 执行 一条 线程 中的 指令。 因此， 为了 线程 切换 后能 恢复 到 正确 的 执行 位置， 每条 线程 都 需要 有一个 独立 的 程序 计数器， 各条 线程 之间 的 计数器 互不 影响， 独立 存储， 我们 称 这类 内存 区域 为“ 线程 私有” 的 内存。 如果 线程 正在 执行 的 是 一个 Java 方法， 这个 计数器 记录 的 是 正在 执行 的 虚拟 机 字节 码 指令 的 地址； 如果 正在 执 行的 是 Natvie 方法， 这个 计数器 值 则为 空（ Undefined）。 此 内存 区域 是 唯一 一个 在 Java 虚拟 机 规范 中 没有 规定 任何 OutOfMemoryError 情况 的 区域。\n\n<h5>1.2 Java 虚拟 机 栈</h5>\n与 程序 计数器 一样， Java 虚拟 机 栈（ Java Virtual Machine Stacks） 也是 线程 私有 的， 它的 生命 周期 与 线程 相同。 虚拟 机 栈 描述 的 是 Java 方法 执行 的 内存 模型： 每个 方法 被 执行 的 时候 都会 同时 创建 一个 栈 帧（ Stack Frame[ 1]） 用于 存储 局部 变 量表、 操作 栈、 动态 链接、 方法 出口 等 信息。 每一个 方法 被 调用 直至 执行 完成 的 过程， 就 对应 着 一个 栈 帧 在 虚拟 机 栈 中 从 入栈 到 出 栈 的 过程,对于执行引擎来说，活动线程中，只有栈顶的栈帧是有效的，称为当前栈帧，这个栈帧所关联的方法称为当前方法。执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。 经常 有人 把 Java 内存 区 分为 堆 内存（ Heap） 和 栈 内存（ Stack）， 这种 分法 比较 粗糙， Java 内存 区域 的 划分 实际上 远比 这 复杂。 这种 划分 方式 的 流行 只能 说明 大多数 程序员 最 关注 的、 与 对象 内存 分配 关系 最 密切 的 内存 区域 是 这 两块。 其中 所指 的“ 堆” 在后面 会 专门 讲述， 而 所指 的“ 栈” 就是 现在 讲的 虚拟 机 栈， 或者 说是 虚拟 机 栈 中的 局部 变量 表 部分。 局部 变量 表 存放 了 编译 期 可知 的 各种 基本 数据 类型（ boolean、 byte、 char、 short、 int、 float、 long、 double）、 对象 引用（ reference 类型， 它不 等同 于 对象 本身， 根据 不同 的 虚拟 机 实现， 它可 能 是一 个 指向 对象 起始 地址 的 引用 指针， 也可能 指向 一个 代表 对象 的 句柄 或者 其他 与此 对象 相关 的 位置） 和 returnAddress 类型（ 指向 了 一条 字节 码 指令 的 地址）。 其中 64 位 长度 的 long 和 double 类型 的 数据 会 占用 2 个 局部 变量 空间（Slot）， 其余 的 数据 类型 只占 用 1 个。 局部 变量 表 所需 的 内存 空间 在编 译 期间 完成 分配， 当 进入 一个 方法 时， 这个 方法 需 要在 帧 中 分配 多大 的 局部 变量 空间 是 完全 确定 的， 在 方法 运行 期间 不会 改变 局部 变 量表 的 大小。 在 Java 虚拟 机 规范 中， 对这 个 区域 规定了 两种 异常 状况： 如果 线程 请求 的 栈 深度 大于 虚拟 机 所 允许 的 深度， 将 抛出 StackOverflowError 异常； 如果 虚拟 机 栈 可以 动态 扩展（ 当前 大部分 的 Java 虚拟 机 都可 动态 扩展， 只不过 Java 虚拟 机 规范 中 也 允许 固定 长度 的 虚拟 机 栈）， 当 扩展 时 无法 申请 到 足够 的 内存 时会 抛出 OutOfMemoryError 异常。\n<h6>1.2.1 局部变量表</h6>\n局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。在Java程序被编译成Class文件时，就在方法的Code属性的max_locals数据项中确定了该方法所需要分配的最大局部变量表的容量。\n局部变量表的容量以变量槽（Slot）为最小单位，32位虚拟机中一个Slot可以存放一个32位以内的数据类型（boolean、byte、char、short、int、float、reference和returnAddress八种）。\nreference类型虚拟机规范没有明确说明它的长度，但一般来说，虚拟机实现至少都应当能从此引用中直接或者间接地查找到对象在Java堆中的起始地址索引和方法区中的对象类型数据。\nreturnAddress类型是为字节码指令jsr、jsr_w和ret服务的，它指向了一条字节码指令的地址。\n虚拟机是使用局部变量表完成参数值到参数变量列表的传递过程的，如果是实例方法（非static），那么局部变量表的第0位索引的Slot默认是用于传递方法所属对象实例的引用，在方法中通过this访问。\n Slot是可以重用的，当Slot中的变量超出了作用域，那么下一次分配Slot的时候，将会覆盖原来的数据。Slot对对象的引用会影响GC（要是被引用，将不会被回收）。\n 系统不会为局部变量赋予初始值（实例变量和类变量都会被赋予初始值）。也就是说不存在类变量那样的准备阶段。\n<h6>1.2.2 操作数栈</h6>\n和局部变量区一样，操作数栈也是被组织成一个以字长为单位的数组。但是和前者不同的是，它不是通过索引来访问，而是通过标准的栈操作——压栈和出栈—来访问的。比如，如果某个指令把一个值压入到操作数栈中，稍后另一个指令就可以弹出这个值来使用。\n虚拟机在操作数栈中存储数据的方式和在局部变量区中是一样的：如int、long、float、double、reference和returnType的存储。对于byte、short以及char类型的值在压入到操作数栈之前，也会被转换为int。\n虚拟机把操作数栈作为它的工作区——大多数指令都要从这里弹出数据，执行运算，然后把结果压回操作数栈。比如，iadd指令就要从操作数栈中弹出两个整数，执行加法运算，其结果又压回到操作数栈中。如下演示了虚拟机是如何把两个int类型的局部变量相加，再把结果保存到第三个局部变量的：\n```java\n   begin  \n   iload_0    // push the int in local variable 0 ontothe stack  \n   iload_1    //push the int in local variable 1 onto the stack  \n   iadd       // pop two ints, add them, push result  \n   istore_2   // pop int, store into local variable 2  \n   end\n```\n1. 指令iload_0和iload_1将存储在局部变量中索引为0和1的整数压入操作数栈中\n2. iadd指令从操作数栈中弹出那两个整数相加，再将结果压入操作数栈\n3. istore_2则从操作数栈中弹出结果，并把它存储到局部变量区索引为2的位置。\n4. 局部变量和操作数栈的状态变化，图中没有使用的局部变量区和操作数栈区域以空白表示。\n\n![**这里写图片描述**](http://img.blog.csdn.net/20170727201918687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)<center>\n\n<h6>1.2.3 动态连接<h6>\n虚拟机运行的时候,运行时常量池会保存大量的符号引用，这些符号引用可以看成是每个方法的间接引用。如果代表栈帧A的方法想调用代表栈帧B的方法，那么这个虚拟机的方法调用指令就会以B方法的符号引用作为参数，但是因为符号引用并不是直接指向代表B方法的内存位置，所以在调用之前还必须要将符号引用转换为直接引用，然后通过直接引用才可以访问到真正的方法。\n如果符号引用是在类加载阶段或者第一次使用的时候转化为直接应用，那么这种转换成为静态解析，如果是在运行期间转换为直接引用，那么这种转换就成为动态连接。\n<h6> 1.2.4 返回地址 <h6>\n方法的返回分为两种情况，一种是正常退出，退出后会根据方法的定义来决定是否要传返回值给上层的调用者，一种是异常导致的方法结束，这种情况是不会传返回值给上层的调用方法。\n不过无论是那种方式的方法结束，在退出当前方法时都会跳转到当前方法被调用的位置，如果方法是正常退出的，则调用者的PC计数器的值就可以作为返回地址,，果是因为异常退出的，则是需要通过异常处理表来确定。\n方法的的一次调用就对应着栈帧在虚拟机栈中的一次入栈出栈操作，因此方法退出时可能做的事情包括：恢复上层方法的局部变量表以及操作数栈，如果有返回值的话，就把返回值压入到调用者栈帧的操作数栈中，还会把PC计数器的值调整为方法调用入口的下一条指令。\n\n![这里写图片描述](http://img.blog.csdn.net/20170727204302809?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n\n<h6> 1.2.5 异常 <h6>\n在Java 虚拟机规范中，对虚拟机栈规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError 异常；如果虚拟机栈可以动态扩展（当前大部分的Java 虚拟机都可动态扩展，只不过Java 虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError 异常。如下代码为请求大于虚拟机堆栈深度所出现的异常\n\n```\n    java\npackage com.sf.jvm;\n/**\n* VM Args：- Xss128k\n*/\npublic class JavaVMStackSOF {\n  private intstackLength=1;\n  public void stackLeak() {\n    stackLength++;\n    stackLeak();\n  }\n  public static void main(String[] args)throwsThrowable {\n    JavaVMStackSOF oom =newJavaVMStackSOF();\n    try{\n      oom.stackLeak();\n    }catch(Throwable e) {\n      System.out.println(\" stack length:\" + oom.stackLength);\n      throw e;\n    }\n  }\n}\n```\n\n运行出现如下情况：\n\n```\nstack length:22337\nException in thread \"main\" java.lang.StackOverflowError\nat com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)\nat com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)\nat com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)\nat com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)\nat com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)\nat com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)\n```\n\n<h4>1.3 本地 方法 栈</h4>\n\n本地 方法 栈（ Native Method Stacks） 与 虚拟 机 栈 所 发挥 的 作用 是非 常 相似 的， 其 区别 不过 是 虚拟 机 栈 为 虚拟 机 执行 Java 方法（ 也就是 字节 码） 服务， 而 本地 方法 栈 则是 为 虚拟 机 使 用到 的 Native 方法 服务。 虚拟 机 规范 中 对本 地 方法 栈 中的 方法 使用 的 语言、 使用 方式 与 数据 结构 并没有 强制 规定， 因此 具体 的 虚拟 机 可以 自由 实现 它。 甚至 有的 虚拟 机（ 譬如 Sun HotSpot 虚拟 机） 直接 就把 本地 方法 栈 和 虚拟 机 栈 合二为一。 与 虚拟 机 栈 一样， 本地 方法 栈 区域 也会 抛出 StackOverflowError 和 OutOfMemoryError 异常。\n\n对于一个运行中的 Java 程序而言，它还可能会用到一些跟本地方法相关的数据区。当某个线程调用一个本地方法时，它就进入了一个全新的并且不再受虚拟机限制的世界。本地方法可以通过本地方法接口来访问虚拟机的运行时数据区，但不止如此，它还可以做任何它想做的事情。\n　　本地方法本质上时依赖于实现的，虚拟机实现的设计者们可以自由地决定使用怎样的机制来让 Java 程序调用本地方法。\n　　任何本地方法接口都会使用某种本地方法栈。当线程调用 Java 方法时，虚拟机会创建一个新的栈帧并压入 Java 栈。然而当它调用的是本地方法时，虚拟机会保持 Java 栈不变，不再在线程的 Java 栈中压入新的帧，虚拟机只是简单地动态连接并直接调用指定的本地方法。\n　　如果某个虚拟机实现的本地方法接口是使用 C 连接模型的话，那么它的本地方法栈就是 C 栈。当 C 程序调用一个 C 函数时，其栈操作都是确定的。传递给该函数的参数以某个确定的顺序压入栈，它的返回值也以确定的方式传回调用者。同样，这就是虚拟机实现中本地方法栈的行为。\n　　很可能本地方法接口需要回调 Java 虚拟机中的 Java 方法，在这种情况下，该线程会保存本地方法栈的状态并进入到另一个 Java 栈。\n　　![这里写图片描述](http://img.blog.csdn.net/20170727205440144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n　　这幅图展示了 JAVA 虚拟机内部线程运行的全景图。当一个线程调用一个本地方法时，本地方法又回调虚拟机中的另一个 Java 方法，一个线程可能在整个生命周期中都执行 Java 方法，操作它的 Java 栈；或者它可能毫无障碍地在 Java 栈和本地方法栈之间跳转。\n\n该线程首先调用了两个 Java 方法，而第二个 Java 方法又调用了一个本地方法，这样导致虚拟机使用了一个本地方法栈。假设这是一个 C 语言栈，其间有两个 C 函数，第一个 C 函数被第二个 Java 方法当做本地方法调用，而这个 C 函数又调用了第二个 C 函数。之后第二个 C 函数又通过本地方法接口回调了一个 Java 方法（第三个 Java 方法），最终这个 Java 方法又调用了一个 Java 方法（它成为图中的当前方法）。\n内存溢出实例：\n\n```java\npackagecom.sf.jvm;\n/**\n* VM Args：\n* -Xss2M\n*/\npublic classJavaVMStackOOM {\n   private void dontStop() {\n      while(true) {\n         try{\n           Thread.sleep(100000);\n        }catch(InterruptedException e) {\n\t\t   e.printStackTrace();\n\t    }\n\t  }\n  }\n\t  public void stackLeakByThread() {\n\t\tint threadNum =0;\n\t    while(true) {\n\t\t    Thread thread =newThread(newRunnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\tdontStop();\n\t\t\t\t}\n\t\t});\n\t\tthread.start();\n\t\tthreadNum++;\n\t\t}\n\t}\n\tpublic static void main(String[] args)throwsThrowable {\n\t\tJavaVMStackOOM oom =newJavaVMStackOOM();\n\t\toom.stackLeakByThread();\n\t}\n}\n\n运行程序抛出如下异常：\nException in thread \"main\" java. lang. OutOfMemoryError: unable to create new native thread\n```\n\n<h4>1.4 Java 堆<h4>\n\nJava 堆（ Java Heap） 是 Java 虚拟 机 所 管理 的 内存 中最 大的 一块。 Java 堆 是 被 所有 线程 共享 的 一块 内存 区域， 在 虚拟 机 启动 时 创建。 此 内存 区域 的 唯一 目的 就是 存放 对象 实例， 几乎 所有 的 对象 实例 都在 这里 分配 内存。 这一 点在 Java 虚拟 机 规范 中的 描述 是： 所有 的 对象 实例 以及 数组 都 要在 堆 上 分配[ 2]， 但是 随着 JIT 编译器 的 发展 与 逃逸 分析 技术 的 逐渐 成熟， 栈 上 分配、 标量 替换[ 3] 优化 技术 将会 导致 一些 微妙 的 变化 发生， 所有 的 对象 都 分配 在 堆 上 也 渐渐 变得 不是 那么“ 绝对” 了。 Java 堆 是 垃圾 收集 器 管理 的 主要 区域， 因此 很多 时候 也 被 称做“ GC 堆”（ Garbage Collected Heap）。 如果 从内 存 回收 的 角度 看， 由于 现在 收集 器 基本 都是 采 用的 分 代收 集 算法， 所以 Java 堆 中 还可以 细分 为： 新生代 和 老 年代； 再 细致 一点 的 有 Eden 空间、 From Survivor 空间、 To Survivor 空间 等。 如果 从内 存 分配 的 角度 看， 线程 共享 的 Java 堆 中 可能 划分 出 多个 线程 私有 的 分配 缓冲区（ Thread Local Allocation Buffer， TLAB）。 不过， 无论如何 划分， 都与 存放 内容 无关， 无论 哪个 区域， 存储 的 都 仍然是 对象 实例， 进一步 划分 的 目的 是 为了 更好 地 回收 内存， 或者 更快 地 分配 内存。 在 本章 中， 我们 仅仅 针对 内存 区域 的 作用 进行 讨论， Java 堆 中的 上述 各个 区域 的 分配 和 回收 等 细节 将会 是 下 一章 的 主题。 根据 Java 虚拟 机 规范 的 规定， Java 堆 可以 处于 物理上 不连续 的 内存 空间 中， 只要 逻辑上 是 连续 的 即可， 就 像 我们 的 磁盘 空间 一样。 在 实现 时， 既可以 实现 成 固定 大小 的， 也可以 是 可扩展 的， 不过 当前 主流 的 虚拟 机 都是 按照 可扩展 来 实现 的（ 通过- Xmx 和- Xms 控制）。\nJava 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。\n在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。如下图所示：\n\n![这里写图片描述](http://img.blog.csdn.net/20170727210308831?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n\n从图中可以看出： 堆大小 = 新生代 + 老年代。其中，堆的大小可以通过参数 –Xms、-Xmx 来指定。\n默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。\n老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。\n默认的，Edem : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。\nJVM 每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。\n因此，新生代实际可用的内存空间为 9/10 ( 即 90% )的新生代空间。\n\nGC 堆\nJava 中的堆也是 GC 收集垃圾的主要区域。GC 分为两种：Minor GC、Full GC ( 或称为 Major GC )。\nMinor GC 是发生在新生代中的垃圾收集动作，所采用的是复制算法。\n新生代几乎是所有 Java 对象出生的地方，即 Java 对象申请的内存以及存放都是在这个地方。Java 中的大部分对象通常不需长久存活，具有朝生夕灭的性质。\n当一个对象被判定为 “死亡” 的时候，GC 就有责任来回收掉这部分对象的内存空间。新生代是 GC 收集垃圾的频繁区域。\n当对象在 Eden ( 包括一个 Survivor 区域，这里假设是 from 区域 ) 出生后，在经过一次 Minor GC 后，如果对象还存活，并且能够被另外一块 Survivor 区域所容纳\n( 上面已经假设为 from 区域，这里应为 to 区域，即 to 区域有足够的内存空间来存储 Eden 和 from 区域中存活的对象 )，则使用复制算法将这些仍然还存活的对象复制到另外一块 Survivor 区域 ( 即 to 区域 ) 中，然后清理所使用过的 Eden 以及 Survivor 区域 ( 即 from 区域 )，并且将这些对象的年龄设置为 1，以后对象在 Survivor 区每熬过一次 Minor GC，就将对象的年龄 + 1，当对象的年龄达到某个值时 ( 默认是 15 岁，可以通过参数 -XX:MaxTenuringThreshold 来设定 )，这些对象就会成为老年代。\n但这也不是一定的，对于一些较大的对象 ( 即需要分配一块较大的连续内存空间 ) 则是直接进入到老年代。\nFull GC 是发生在老年代的垃圾收集动作，所采用的是标记-清除算法。\n现实的生活中，老年代的人通常会比新生代的人 “早死”。堆内存中的老年代(Old)不同于这个，老年代里面的对象几乎个个都是在 Survivor 区域中熬过来的，它们是不会那么容易就 “死掉” 了的。因此，Full GC 发生的次数不会有 Minor GC 那么频繁，并且做一次 Full GC 要比进行一次 Minor GC 的时间更长。\n另外，标记-清除算法收集垃圾的时候会产生许多的内存碎片 ( 即不连续的内存空间 )，此后需要为较大的对象分配内存空间时，若无法找到足够的连续的内存空间，就会提前触发一次 GC 的收集动作。\n\n设置 JVM 参数为 -XX:+PrintGCDetails，使得控制台能够显示 GC 相关的日志信息，执行上面代码，下面是其中一次执行的结果。\n\n| jvm 参数                        | 解释                                                                                                                    |\n| ------------------------------- | ----------------------------------------------------------------------------------------------------------------------- |\n| -Xms                            | 初始堆大小。如：-Xms256m                                                                                                |\n| -Xmx                            | 最大堆大小。如：-Xmx512m                                                                                                |\n| -Xmn                            | 新生代大小。通常为 Xmx 的 1/3 或 1/4。新生代 = Eden + 2 个 Survivor 空间。实际可用空间为 = Eden + 1 个 Survivor，即 90% |\n| -Xss                            | JDK1.5+ 每个线程堆栈大小为 1M，一般来说如果栈不是很深的话， 1M 是绝对够用了的。                                         |\n| -XX:NewRatio                    | 新生代与老年代的比例，如 –XX:NewRatio=2，则新生代占整个堆空间的 1/3，老年代占 2/3                                       |\n| -XX:SurvivorRatio               | 新生代中 Eden 与 Survivor 的比值。默认值为 8。即 Eden 占新生代空间的 8/10，另外两个 Survivor 各占 1/10                  |\n| -XX:PermSize                    | 永久代(方法区)的初始大小                                                                                                |\n| -XX:MaxPermSize                 | 永久代(方法区)的最大值                                                                                                  |\n| -XX:+PrintGCDetails             | 打印 GC 信息                                                                                                            |\n| -XX:+HeapDumpOnOutOfMemoryError | 让虚拟机在发生内存溢出时 Dump 出当前的内存堆转储快照，以便分析用                                                        |\n\nJava 堆 用于 储存 对象 实例， 我们 只要 不断 地 创建 对象， 并且 保证 GC Roots 到 对象 之间 有可 达 路径 来 避免 垃圾 回收 机制 清除 这些 对象， 就会 在 对象 数量 到达 最 大堆 的 容量 限制 后 产生 内存 溢出 异常。实例如下：\n\n```java\npackagecom.sf.jvm;\nimportjava.util.ArrayList;\nimportjava.util.List;\n/**\n* VM Args：\n* -Xms20m -Xmx20m\n* -XX:+HeapDumpOnOutOfMemoryError\n* -XX:+PrintGCDetails\n*/\npublic classHeapOutOfMemory {\n\n\tpublic static void main(String[] args) {\n\t\toutOfMemory();\n\t}\n\tstatic void noOutOfMemory(){\n\t\twhile(true) {\n\t\t\tnewOOMObject();\n\t\t}\n\t}\n\tstatic void outOfMemory(){\n\t\tList<OOMObject> list =newArrayList<OOMObject>();\n\t\twhile(true) {\n\t\t\tlist.add(newOOMObject());\n\t\t}\n\t}\n}\nclassOOMObject {\n\tbytemem[] =new byte[2014];\n}\n异常信息如下：\n[GC (Allocation Failure) [PSYoungGen: 5632K->512K(6144K)] 5632K->5024K(19968K), 0.0027725 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]\n[GC (Allocation Failure) [PSYoungGen: 6144K->504K(6144K)] 10656K->11432K(19968K), 0.0022202 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]\n[Full GC (Ergonomics) [PSYoungGen: 504K->0K(6144K)] [ParOldGen: 10928K->10092K(13824K)] 11432K->10092K(19968K), [Metaspace: 2973K->2973K(1056768K)], 0.0149535 secs] [Times: user=0.02 sys=0.00, real=0.01 secs]\n........\n[Full GC (Allocation Failure) [PSYoungGen: 5632K->5632K(6144K)] [ParOldGen: 13823K->13823K(13824K)] 19455K->19455K(19968K), [Metaspace: 2973K->2973K(1056768K)], 0.0086009 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]\njava.lang.OutOfMemoryError: Java heap space\nDumping heap to java_pid2780.hprof ...\nHeap dump file created [20898436 bytes in 0.027 secs]\n[Full GC (Ergonomics) Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\nat com.sf.jvm.OOMObject.<init>(HeapOutOfMemory.java:29)\nat com.sf.jvm.HeapOutOfMemory.outOfMemory(HeapOutOfMemory.java:23)\nat com.sf.jvm.HeapOutOfMemory.main(HeapOutOfMemory.java:12)\n[PSYoungGen: 5632K->0K(6144K)] [ParOldGen: 13823K->579K(13824K)] 19455K->579K(19968K), [Metaspace: 2973K->2973K(1056768K)], 0.0096016 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]\nHeap\nPSYoungGen total 6144K, used 177K [0x00000000ff980000, 0x0000000100000000, 0x0000000100000000)\neden space 5632K, 3% used [0x00000000ff980000,0x00000000ff9ac4a0,0x00000000fff00000)\nfrom space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\nto space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\nParOldGen total 13824K, used 579K [0x00000000fec00000, 0x00000000ff980000, 0x00000000ff980000)\nobject space 13824K, 4% used [0x00000000fec00000,0x00000000fec90c20,0x00000000ff980000)\nMetaspace used 3005K, capacity 4496K, committed 4864K, reserved 1056768K\nclass space used 326K, capacity 388K, committed 512K, reserved 1048576K\n```\n\n用 jvisualvm.exe 打开查看 dump，发现主要是 OOMobject 不被释放。\n\n<h4>1.5 方法 区<h4>\n      <h5>1.5.1 方法区</h5> \n方法 区（ Method Area） 与 Java 堆 一样， 是 各个 线程 共享 的 内存 区域， 它 用于 存储 已被 虚拟 机 加载 的 类 信息、 常量、 静态 变量、 即时 编译器 编译 后的 代码 等 数据。 虽然 Java 虚拟 机 规范 把 方法 区 描述为 堆 的 一个 逻辑 部分， 但是 它 却有 一个 别名 叫做 Non- Heap（ 非 堆）， 目的 应该 是与 Java 堆 区分 开来。 对于 习惯 在 HotSpot 虚拟 机上 开发 和 部署 程序 的 开发者 来说， 很多人 愿意 把 方法 区 称为“ 永久 代”（ Permanent Generation）， 本质上 两者 并不 等价， 仅仅 是因为 HotSpot 虚拟 机 的 设计 团队 选择 把 GC 分 代收 集 扩展 至 方法 区， 或者说 使用 永久 代 来 实现 方法 区 而已。 对于 其他 虚拟 机（ 如 BEA JRockit、 IBM J9 等） 来说 是 不存在 永久 代 的 概念 的。 即使是 HotSpot 虚拟 机 本身， 根据 官方 发布 的 路线 图 信息， 现在 也有 放弃 永久 代 并“ 搬家” 至 Native Memory 来 实现 方法 区 的 规划 了。 Java 虚拟 机 规范 对这 个 区域 的 限制 非常 宽松， 除了 和 Java 堆 一样 不需要 连续 的 内存 和 可以 选择 固定 大小 或者 可扩展 外， 还可以 选择 不实 现 垃圾 收集。 相对而言， 垃圾 收集 行为 在这 个 区域 是 比较 少 出现 的， 但 并非 数据 进入 了 方法 区 就 如 永久 代 的 名字 一样“ 永久” 存在 了。 这个 区域 的 内存 回收 目标 主要 是 针对 常量 池 的 回收 和 对 类型 的 卸载， 一般来说 这个 区域 的 回收“ 成绩” 比较 难以 令人满意， 尤其是 类型 的 卸载， 条件 相当 苛刻， 但是 这部 分 区域 的 回收 确实 是有 必要 的。 在 Sun 公司 的 BUG 列表 中， 曾 出现 过 的 若干个 严重 的 BUG 就是 由于 低 版本 的 HotSpot 虚拟 机 对此 区域 未完 全 回收 而 导致 内存 泄漏。 根据 Java 虚拟 机 规范 的 规定， 当 方法 区 无法 满足 内存 分配 需求 时， 将 抛出 OutOfMemoryError 异常。方法 区 用于 存放 Class 的 相关 信息， 如 类 名、 访问 修饰 符、 常量 池、 字段 描述、 方法 描述 等。 对于 这个 区域 的 测试， 基本 的 思路 是 运行时 产生 大量 的 类 去 填满 方法 区， 直到 溢出。 虽然 直接 使用 Java SE API 也可以 动态 产生 类（ 如 反射 时 的 GeneratedConstructorAccessor 和 动态 代理 等）， 但在 本次 实验 中 操作 起来 比较 麻烦。 在 代码 清单 2- 5 中， 笔者 借助 CGLib[ 3] 直接 操作 字节 码 运行时， 生成 了 大量 的 动态 类。 值得 特别 注意 的 是， 我们 在这 个 例子 中 模拟 的 场景 并非 纯粹 是一 个 实验， 这样 的 应用 经常 会 出现 在 实际 应用 中： 当前 的 很多 主流 框架， 如 Spring 和 Hibernate 对 类 进行 增强 时， 都会 使用 到 CGLib 这类 字节 码 技术， 增 强的 类 越多， 就 需要 越大 的 方法 区 来 保证 动态 生成 的 Class 可以 加载 入 内存。\n方法 区 溢出 也是 一种 常见 的 内存 溢出 异常， 一个 类 如果 要被 垃圾 收集 器 回收 掉， 判定 条件 是非 常 苛刻 的。 在 经常 动态 生成 大量 Class 的 应用 中， 需要 特别 注意 类 的 回收 状况。 这类 场景 除了 上面 提到 的 程序 使用 了 GCLib 字节 码 增强 外， 常见 的 还有： 大量 JSP 或 动态 产生 JSP 文件 的 应用（ JSP 第一次 运行时 需要 编译 为 Java 类）、 基于 OSGi 的 应用（ 即使是 同一个 类 文件， 被 不同 的 加载 器 加载 也会 视为 不同 的 类） 等。\n代码 清单 2- 5 　 借助 CGLib 使得 方法 区 出现 内存 溢出 异常\n```java\npackagecom.sf.jvm;\n/**\n* VM Args： -XX: PermSize= 10M -XX: MaxPermSize= 10M\n*/\npublic class JavaMethodAreaOOM {\n\tpublic static void main(String[] args) {\n\t\twhile(true) {\n\t\t\tEnhancer enhancer =newEnhancer();\n\t\t\tenhancer.setSuperclass(OOMObject.class);\n\t\t\tenhancer.setUseCache(false);\n\t\t\tenhancer.setCallback(newMethodInterceptor() {\n\t\t\t\tpublic Object intercept(Object obj, Method method, \n\t\t\t\t\tObject[] args, MethodProxy proxy)throwsThrowable {\n\t\t\t\t\treturnproxy.invokeSuper(obj, args);\n\t\t\t\t}\n\t\t\t});\n\t\t\tenhancer.create();\n\t\t}\n\t}\n\tstatic classOOMObject {\n\t}\n}\n运行 结果：\nCaused by: \njava. lang. OutOfMemoryError: \nPermGen space at java. lang. ClassLoader. defineClass1( Native Method)\nat java. lang. ClassLoader. defineClassCond( ClassLoader. java: 632) \nat java. lang. ClassLoader. defineClass( ClassLoader. java: 616）\n```\n\n<h5>1.5.2 运行时常量池</h5>\n 运行时 常量 池（ Runtime Constant Pool） 是 方法 区 的 一部分。 Class 文件 中 除了 有 类 的 版本、 字段、 方法、接口 等 描述 等 信息 外， 还有 一项 信息 是 常量 池（ Constant Pool Table）， 用于 存放 编译 期 生成 的 各种 字面 量 和 符号 引用， 这部 分 内容 将 在 类 加载 后 存放 到 方法 区 的 运行时 常量 池 中。 Java 虚拟 机 对 Class 文件 的 每一 部分（ 自然 也 包括 常量 池） 的 格式 都有 严格 的 规定， 每一个 字节 用于 存储 哪种 数据 都 必须 符合 规范 上 的 要求， 这样 才会 被 虚拟 机 认可、 装载 和 执行。 但 对于 运行时 常量 池， Java 虚拟 机 规范 没有 做 任何 细节 的 要求， 不同 的 提供 商 实现 的 虚拟 机 可以 按照 自己的 需要 来 实现 这个 内存 区域。 不过， 一般来说， 除了 保存 Class 文件 中 描述 的 符号 引用 外， 还会 把 翻译 出来 的 直接 引用 也 存储 在 运行时 常量 池 中[ 4]。 运行时 常量 池 相对于 Class 文件 常量 池 的 另外 一个 重要 特征 是 具备 动态 性， Java 语言 并不 要求 常量 一定 只能 在 编译 期 产生， 也就是 并非 预置 入 Class 文件 中 常量 池 的 内容 才能 进入 方法 区 运行时 常量 池， 运行 期间 也可 能将 新的 常量 放入 池 中， 这种 特性 被 开发 人员 利用 得比 较多 的 便是 String 类 的 intern() 方法。 既然 运行时 常量 池 是 方法 区 的 一部分， 自然 会受 到 方法 区 内存 的 限制， 当 常量 池 无法 再 申请 到 内存 时会 抛出 OutOfMemoryError 异常。\n \n```java\npackage com.sf.jvm;\nimportjava.util.ArrayList;\nimportjava.util.List;\n/**\n* VM Args：- XX:PermSize=10M -XX:MaxPermSize=10M\n*/\npublic class RuntimeConstantPoolOOM {\n\tpublic static void main(String[] args) {\n\t\t// 使用 List 保持 着 常量 池 引用， 避免 Full GC 回收 常量 池 行为\n\t\tList<String> list =new ArrayList<String>();\n\t\t// 10MB 的 PermSize 在 integer 范围内 足够 产生 OOM 了\n\t\tint i = 0;\n\t\twhile(true) {\n\t\t\tlist.add(String.valueOf(i++ +\"xxxxxxxxxxxxxxxxxxxxx\").intern());\n\t\t}\n\t}\n}\n运行异常：\nException in thread \"main\" java. lang. OutOfMemoryError: \nPermGen space at java. lang. String. intern( Native Method) \nat org. fenixsoft. oom. RuntimeConstantPoolOOM. main( RuntimeConstantPoolOOM. java:...\n```\n\n<h4>1.7 直接 内存</h4>\n 直接内存（DirectMemory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现，所以我们放到这里一起讲解。在JDK1.4中新加入了NIO（NewInput/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。显然，本机直接内存的分配不会受到Java堆大小的限制，但是，既然是内存，则肯定还是会受到本机总内存（包括RAM及SWAP区或者分页文件）的大小及处理器寻址空间的限制。服务器管理员配置虚拟机参数时，一般会根据实际内存设置-Xmx等参数信息，但经常会忽略掉直接内存，使得各个内存区域的总和大于物理内存限制（包括物理上的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。DirectMemory容量可通过-XX：MaxDirectMemorySize指定，如果不指定，则默认与Java堆的最大值（-Xmx指定）一样。越过了DirectByteBuffer类，直接通过反射获取Unsafe实例并进行内存分配（Unsafe类的getUnsafe()方法限制了只有引导类加载器才会返回实例，也就是设计者希望只有rt.jar中的类才能使用Unsafe的功能）。因为，虽然使用DirectByteBuffer分配内存也会抛出内存溢出异常，但它抛出异常时并没有真正向操作系统申请分配内存，而是通过计算得知内存无法分配，于是手动抛出异常，真正申请分配内存的方法是unsafe.allocateMemory()。如下实例为直接内存溢出。    \n```java\npackage com.sf.jvm;\nimport sun.misc.Unsafe;\nimport java.lang.reflect.Field;\nimport staticcom.sun.deploy.util.BufferUtil.MB;\n/**\n* VM Args：- Xmx20M -XX: MaxDirectMemorySize= 10M\n*/\npublic classDirectMemoryOOM {\n\tprivate static final int_1MB=1024*1024;\n\tpublic static void main(String[] args)throwsException {\n\t\tField unsafeField = Unsafe.class.getDeclaredFields()[0];\n\t\tunsafeField.setAccessible(true);\n\t\tUnsafe unsafe = (Unsafe) unsafeField.get(null);\n\t\twhile(true) {\n\t\t\tunsafe.allocateMemory(_1MB);\n\t\t}\n\t}\n}\n运行异常：\nException in thread \"main\" java.lang.OutOfMemoryError\nat sun.misc.Unsafe.allocateMemory(Native Method)\nat com.sf.jvm.DirectMemoryOOM.main(DirectMemoryOOM.java:20)\n```\n<h4>1.8 对象的访问</h4>\n介绍完Java虚拟机的运行时数据区之后，我们就可以来探讨一个问题：在Java语言中，对象访问是如何进行的？对象访问在Java语言中无处不在，是最普通的程序行为，但即使是最简单的访问，也会却涉及Java栈、Java堆、方法区这三个最重要内存区域之间的关联关系，如下面的这句代码：Objectobj=newObject();假设这句代码出现在方法体中，那“Objectobj”这部分的语义将会反映到Java栈的本地变量表中，作为一个reference类型数据出现。而“newObject()”这部分的语义将会反映到Java堆中，形成一块存储了Object类型所有实例数据值（InstanceData，对象中各个实例字段的数据）的结构化内存，根据具体类型以及虚拟机实现的对象内存布局（ObjectMemoryLayout）的不同，这块内存的长度是不固定的。另外，在Java堆中还必须包含能查找到此对象类型数据（如对象类型、父类、实现的接口、方法等）的地址信息，这些类型数据则存储在方法区中。由于reference类型在Java虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该通过哪种方式去定位，以及访问到Java堆中的对象的具体位置，因此不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：使用句柄和直接指针。\n       如果使用句柄访问方式，Java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息，如图:\n![这里写图片描述](http://img.blog.csdn.net/20170728094239784?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n        如果使用直接指针访问方式，Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference中直接存储的就是对象地址，如图:`<center>`![这里写图片描述](http://img.blog.csdn.net/20170728094300056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n         这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。使用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。就本书讨论的主要虚拟机SunHotSpot而言，它是使用第二种方式进行对象访问的，但从整个软件开发的范围来看，各种语言和框架使用句柄来访问的情况也十分常见。\n参照：\n深入理解Java虚拟机\nhttp://blog.csdn.net/u012152619/article/details/46968883\nhttp://www.importnew.com/14630.html\n","slug":"language/jvm/JVM内存模型","published":1,"date":"2021-07-31T11:10:47.895Z","updated":"2021-07-31T11:10:47.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyim0021u6uk7twe7tsk","content":"<p>##<center>JVM 内存模型</center> 1.内存模型结构图</p>\n<p><img src=\"http://img.blog.csdn.net/20170724161538339?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"**这里写图片描述**\"></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>特征</th>\n<th>作用</th>\n<th>配置参数</th>\n<th>异常</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>程序计数器</td>\n<td>占用内存小，线程私有， 生命周期与线程相同</td>\n<td>大致为字节码行号指示器</td>\n<td>无</td>\n<td>无</td>\n</tr>\n<tr>\n<td>虚拟机栈</td>\n<td>线程私有，生命周期与线程相同，使用连续的内存空间</td>\n<td>Java 方法执行的内存模型，存储局部变量表、操作栈、动态链接、方法出口等信息</td>\n<td>-Xss</td>\n<td>OutOfMemoryError，StackOverflowError</td>\n</tr>\n<tr>\n<td>java 堆</td>\n<td>线程共享，生命周期与虚拟机相同，可以不使用连续的内存地址</td>\n<td>保存对象实例，所有对象实例（包括数组）都要在堆上分配</td>\n<td>-Xms-Xsx -Xmn</td>\n<td>OutOfMemoryError</td>\n</tr>\n<tr>\n<td>方法区</td>\n<td>线程共享，生命周期与虚拟机相同，可以不使用连续的内存地址</td>\n<td>存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</td>\n<td>-XX:PermSize:16M-XX:MaxPermSize64M</td>\n<td>OutOfMemoryError</td>\n</tr>\n<tr>\n<td>运行时常量池</td>\n<td>方法区的一部分，具有动态性</td>\n<td>存放字面量及符号引用</td>\n<td>无</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<h5>1.1 程序计数器</h5>\n程序 计数器（ Program Counter Register） 是一 块 较小 的 内存 空间， 它的 作用 可以 看做 是 当前 线程 所 执行 的 字节 码 的 行号 指示器。 在 虚拟 机 的 概念 模型 里（ 仅是 概念 模型， 各种 虚拟 机 可能 会 通过 一些 更 高效 的 方式 去 实现）， 字节 码 解释器 工作 时 就是 通过 改变 这个 计数器 的 值 来 选取 下一 条 需要 执行 的 字节 码 指令， 分支、 循环、 跳 转、 异常 处理、 线程 恢复 等 基础 功能 都 需要 依赖 这个 计数器 来 完成。\n由于 Java 虚拟 机 的 多 线程 是 通过 线程 轮流 切换 并 分配 处理器 执行 时间 的 方式 来 实现 的， 在任 何 一个 确定 的 时刻， 一个 处理器（ 对于 多 核 处理器 来说 是一 个 内核） 只会 执行 一条 线程 中的 指令。 因此， 为了 线程 切换 后能 恢复 到 正确 的 执行 位置， 每条 线程 都 需要 有一个 独立 的 程序 计数器， 各条 线程 之间 的 计数器 互不 影响， 独立 存储， 我们 称 这类 内存 区域 为“ 线程 私有” 的 内存。 如果 线程 正在 执行 的 是 一个 Java 方法， 这个 计数器 记录 的 是 正在 执行 的 虚拟 机 字节 码 指令 的 地址； 如果 正在 执 行的 是 Natvie 方法， 这个 计数器 值 则为 空（ Undefined）。 此 内存 区域 是 唯一 一个 在 Java 虚拟 机 规范 中 没有 规定 任何 OutOfMemoryError 情况 的 区域。\n\n<h5>1.2 Java 虚拟 机 栈</h5>\n与 程序 计数器 一样， Java 虚拟 机 栈（ Java Virtual Machine Stacks） 也是 线程 私有 的， 它的 生命 周期 与 线程 相同。 虚拟 机 栈 描述 的 是 Java 方法 执行 的 内存 模型： 每个 方法 被 执行 的 时候 都会 同时 创建 一个 栈 帧（ Stack Frame[ 1]） 用于 存储 局部 变 量表、 操作 栈、 动态 链接、 方法 出口 等 信息。 每一个 方法 被 调用 直至 执行 完成 的 过程， 就 对应 着 一个 栈 帧 在 虚拟 机 栈 中 从 入栈 到 出 栈 的 过程,对于执行引擎来说，活动线程中，只有栈顶的栈帧是有效的，称为当前栈帧，这个栈帧所关联的方法称为当前方法。执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。 经常 有人 把 Java 内存 区 分为 堆 内存（ Heap） 和 栈 内存（ Stack）， 这种 分法 比较 粗糙， Java 内存 区域 的 划分 实际上 远比 这 复杂。 这种 划分 方式 的 流行 只能 说明 大多数 程序员 最 关注 的、 与 对象 内存 分配 关系 最 密切 的 内存 区域 是 这 两块。 其中 所指 的“ 堆” 在后面 会 专门 讲述， 而 所指 的“ 栈” 就是 现在 讲的 虚拟 机 栈， 或者 说是 虚拟 机 栈 中的 局部 变量 表 部分。 局部 变量 表 存放 了 编译 期 可知 的 各种 基本 数据 类型（ boolean、 byte、 char、 short、 int、 float、 long、 double）、 对象 引用（ reference 类型， 它不 等同 于 对象 本身， 根据 不同 的 虚拟 机 实现， 它可 能 是一 个 指向 对象 起始 地址 的 引用 指针， 也可能 指向 一个 代表 对象 的 句柄 或者 其他 与此 对象 相关 的 位置） 和 returnAddress 类型（ 指向 了 一条 字节 码 指令 的 地址）。 其中 64 位 长度 的 long 和 double 类型 的 数据 会 占用 2 个 局部 变量 空间（Slot）， 其余 的 数据 类型 只占 用 1 个。 局部 变量 表 所需 的 内存 空间 在编 译 期间 完成 分配， 当 进入 一个 方法 时， 这个 方法 需 要在 帧 中 分配 多大 的 局部 变量 空间 是 完全 确定 的， 在 方法 运行 期间 不会 改变 局部 变 量表 的 大小。 在 Java 虚拟 机 规范 中， 对这 个 区域 规定了 两种 异常 状况： 如果 线程 请求 的 栈 深度 大于 虚拟 机 所 允许 的 深度， 将 抛出 StackOverflowError 异常； 如果 虚拟 机 栈 可以 动态 扩展（ 当前 大部分 的 Java 虚拟 机 都可 动态 扩展， 只不过 Java 虚拟 机 规范 中 也 允许 固定 长度 的 虚拟 机 栈）， 当 扩展 时 无法 申请 到 足够 的 内存 时会 抛出 OutOfMemoryError 异常。\n<h6>1.2.1 局部变量表</h6>\n局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。在Java程序被编译成Class文件时，就在方法的Code属性的max_locals数据项中确定了该方法所需要分配的最大局部变量表的容量。\n局部变量表的容量以变量槽（Slot）为最小单位，32位虚拟机中一个Slot可以存放一个32位以内的数据类型（boolean、byte、char、short、int、float、reference和returnAddress八种）。\nreference类型虚拟机规范没有明确说明它的长度，但一般来说，虚拟机实现至少都应当能从此引用中直接或者间接地查找到对象在Java堆中的起始地址索引和方法区中的对象类型数据。\nreturnAddress类型是为字节码指令jsr、jsr_w和ret服务的，它指向了一条字节码指令的地址。\n虚拟机是使用局部变量表完成参数值到参数变量列表的传递过程的，如果是实例方法（非static），那么局部变量表的第0位索引的Slot默认是用于传递方法所属对象实例的引用，在方法中通过this访问。\n Slot是可以重用的，当Slot中的变量超出了作用域，那么下一次分配Slot的时候，将会覆盖原来的数据。Slot对对象的引用会影响GC（要是被引用，将不会被回收）。\n 系统不会为局部变量赋予初始值（实例变量和类变量都会被赋予初始值）。也就是说不存在类变量那样的准备阶段。\n<h6>1.2.2 操作数栈</h6>\n和局部变量区一样，操作数栈也是被组织成一个以字长为单位的数组。但是和前者不同的是，它不是通过索引来访问，而是通过标准的栈操作——压栈和出栈—来访问的。比如，如果某个指令把一个值压入到操作数栈中，稍后另一个指令就可以弹出这个值来使用。\n虚拟机在操作数栈中存储数据的方式和在局部变量区中是一样的：如int、long、float、double、reference和returnType的存储。对于byte、short以及char类型的值在压入到操作数栈之前，也会被转换为int。\n虚拟机把操作数栈作为它的工作区——大多数指令都要从这里弹出数据，执行运算，然后把结果压回操作数栈。比如，iadd指令就要从操作数栈中弹出两个整数，执行加法运算，其结果又压回到操作数栈中。如下演示了虚拟机是如何把两个int类型的局部变量相加，再把结果保存到第三个局部变量的：\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin  </span><br><span class=\"line\">iload_0    <span class=\"comment\">// push the int in local variable 0 ontothe stack  </span></span><br><span class=\"line\">iload_1    <span class=\"comment\">//push the int in local variable 1 onto the stack  </span></span><br><span class=\"line\">iadd       <span class=\"comment\">// pop two ints, add them, push result  </span></span><br><span class=\"line\">istore_2   <span class=\"comment\">// pop int, store into local variable 2  </span></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n1. 指令iload_0和iload_1将存储在局部变量中索引为0和1的整数压入操作数栈中\n2. iadd指令从操作数栈中弹出那两个整数相加，再将结果压入操作数栈\n3. istore_2则从操作数栈中弹出结果，并把它存储到局部变量区索引为2的位置。\n4. 局部变量和操作数栈的状态变化，图中没有使用的局部变量区和操作数栈区域以空白表示。\n\n<p><img src=\"http://img.blog.csdn.net/20170727201918687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"**这里写图片描述**\"><center></p>\n<h6>1.2.3 动态连接<h6>\n虚拟机运行的时候,运行时常量池会保存大量的符号引用，这些符号引用可以看成是每个方法的间接引用。如果代表栈帧A的方法想调用代表栈帧B的方法，那么这个虚拟机的方法调用指令就会以B方法的符号引用作为参数，但是因为符号引用并不是直接指向代表B方法的内存位置，所以在调用之前还必须要将符号引用转换为直接引用，然后通过直接引用才可以访问到真正的方法。\n如果符号引用是在类加载阶段或者第一次使用的时候转化为直接应用，那么这种转换成为静态解析，如果是在运行期间转换为直接引用，那么这种转换就成为动态连接。\n<h6> 1.2.4 返回地址 <h6>\n方法的返回分为两种情况，一种是正常退出，退出后会根据方法的定义来决定是否要传返回值给上层的调用者，一种是异常导致的方法结束，这种情况是不会传返回值给上层的调用方法。\n不过无论是那种方式的方法结束，在退出当前方法时都会跳转到当前方法被调用的位置，如果方法是正常退出的，则调用者的PC计数器的值就可以作为返回地址,，果是因为异常退出的，则是需要通过异常处理表来确定。\n方法的的一次调用就对应着栈帧在虚拟机栈中的一次入栈出栈操作，因此方法退出时可能做的事情包括：恢复上层方法的局部变量表以及操作数栈，如果有返回值的话，就把返回值压入到调用者栈帧的操作数栈中，还会把PC计数器的值调整为方法调用入口的下一条指令。\n\n<p><img src=\"http://img.blog.csdn.net/20170727204302809?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></center></p>\n<h6> 1.2.5 异常 <h6>\n在Java 虚拟机规范中，对虚拟机栈规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError 异常；如果虚拟机栈可以动态扩展（当前大部分的Java 虚拟机都可动态扩展，只不过Java 虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError 异常。如下代码为请求大于虚拟机堆栈深度所出现的异常\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    java</span><br><span class=\"line\">package com.sf.jvm;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* VM Args：- Xss128k</span><br><span class=\"line\">*/</span><br><span class=\"line\">public class JavaVMStackSOF &#123;</span><br><span class=\"line\">  private intstackLength=1;</span><br><span class=\"line\">  public void stackLeak() &#123;</span><br><span class=\"line\">    stackLength++;</span><br><span class=\"line\">    stackLeak();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public static void main(String[] args)throwsThrowable &#123;</span><br><span class=\"line\">    JavaVMStackSOF oom =newJavaVMStackSOF();</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">      oom.stackLeak();</span><br><span class=\"line\">    &#125;catch(Throwable e) &#123;</span><br><span class=\"line\">      System.out.println(&quot; stack length:&quot; + oom.stackLength);</span><br><span class=\"line\">      throw e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行出现如下情况：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack length:22337</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.StackOverflowError</span><br><span class=\"line\">at com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)</span><br><span class=\"line\">at com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)</span><br><span class=\"line\">at com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)</span><br><span class=\"line\">at com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)</span><br><span class=\"line\">at com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)</span><br><span class=\"line\">at com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)</span><br></pre></td></tr></table></figure>\n\n<h4>1.3 本地 方法 栈</h4>\n\n<p>本地 方法 栈（ Native Method Stacks） 与 虚拟 机 栈 所 发挥 的 作用 是非 常 相似 的， 其 区别 不过 是 虚拟 机 栈 为 虚拟 机 执行 Java 方法（ 也就是 字节 码） 服务， 而 本地 方法 栈 则是 为 虚拟 机 使 用到 的 Native 方法 服务。 虚拟 机 规范 中 对本 地 方法 栈 中的 方法 使用 的 语言、 使用 方式 与 数据 结构 并没有 强制 规定， 因此 具体 的 虚拟 机 可以 自由 实现 它。 甚至 有的 虚拟 机（ 譬如 Sun HotSpot 虚拟 机） 直接 就把 本地 方法 栈 和 虚拟 机 栈 合二为一。 与 虚拟 机 栈 一样， 本地 方法 栈 区域 也会 抛出 StackOverflowError 和 OutOfMemoryError 异常。</p>\n<p>对于一个运行中的 Java 程序而言，它还可能会用到一些跟本地方法相关的数据区。当某个线程调用一个本地方法时，它就进入了一个全新的并且不再受虚拟机限制的世界。本地方法可以通过本地方法接口来访问虚拟机的运行时数据区，但不止如此，它还可以做任何它想做的事情。<br>　　本地方法本质上时依赖于实现的，虚拟机实现的设计者们可以自由地决定使用怎样的机制来让 Java 程序调用本地方法。<br>　　任何本地方法接口都会使用某种本地方法栈。当线程调用 Java 方法时，虚拟机会创建一个新的栈帧并压入 Java 栈。然而当它调用的是本地方法时，虚拟机会保持 Java 栈不变，不再在线程的 Java 栈中压入新的帧，虚拟机只是简单地动态连接并直接调用指定的本地方法。<br>　　如果某个虚拟机实现的本地方法接口是使用 C 连接模型的话，那么它的本地方法栈就是 C 栈。当 C 程序调用一个 C 函数时，其栈操作都是确定的。传递给该函数的参数以某个确定的顺序压入栈，它的返回值也以确定的方式传回调用者。同样，这就是虚拟机实现中本地方法栈的行为。<br>　　很可能本地方法接口需要回调 Java 虚拟机中的 Java 方法，在这种情况下，该线程会保存本地方法栈的状态并进入到另一个 Java 栈。<br>　　<img src=\"http://img.blog.csdn.net/20170727205440144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>　　这幅图展示了 JAVA 虚拟机内部线程运行的全景图。当一个线程调用一个本地方法时，本地方法又回调虚拟机中的另一个 Java 方法，一个线程可能在整个生命周期中都执行 Java 方法，操作它的 Java 栈；或者它可能毫无障碍地在 Java 栈和本地方法栈之间跳转。</p>\n<p>该线程首先调用了两个 Java 方法，而第二个 Java 方法又调用了一个本地方法，这样导致虚拟机使用了一个本地方法栈。假设这是一个 C 语言栈，其间有两个 C 函数，第一个 C 函数被第二个 Java 方法当做本地方法调用，而这个 C 函数又调用了第二个 C 函数。之后第二个 C 函数又通过本地方法接口回调了一个 Java 方法（第三个 Java 方法），最终这个 Java 方法又调用了一个 Java 方法（它成为图中的当前方法）。<br>内存溢出实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">packagecom.sf.jvm;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* VM Args：</span></span><br><span class=\"line\"><span class=\"comment\">* -Xss2M</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> classJavaVMStackOOM &#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dontStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">           Thread.sleep(<span class=\"number\">100000</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">\t\t   e.printStackTrace();</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stackLeakByThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> threadNum =<span class=\"number\">0</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t    Thread thread =newThread(newRunnable() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tdontStop();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tthread.start();</span><br><span class=\"line\">\t\tthreadNum++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>throwsThrowable </span>&#123;</span><br><span class=\"line\">\t\tJavaVMStackOOM oom =newJavaVMStackOOM();</span><br><span class=\"line\">\t\toom.stackLeakByThread();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">运行程序抛出如下异常：</span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java. lang. OutOfMemoryError: unable to create <span class=\"keyword\">new</span> <span class=\"keyword\">native</span> thread</span><br></pre></td></tr></table></figure>\n\n<h4>1.4 Java 堆<h4>\n\n<p>Java 堆（ Java Heap） 是 Java 虚拟 机 所 管理 的 内存 中最 大的 一块。 Java 堆 是 被 所有 线程 共享 的 一块 内存 区域， 在 虚拟 机 启动 时 创建。 此 内存 区域 的 唯一 目的 就是 存放 对象 实例， 几乎 所有 的 对象 实例 都在 这里 分配 内存。 这一 点在 Java 虚拟 机 规范 中的 描述 是： 所有 的 对象 实例 以及 数组 都 要在 堆 上 分配[ 2]， 但是 随着 JIT 编译器 的 发展 与 逃逸 分析 技术 的 逐渐 成熟， 栈 上 分配、 标量 替换[ 3] 优化 技术 将会 导致 一些 微妙 的 变化 发生， 所有 的 对象 都 分配 在 堆 上 也 渐渐 变得 不是 那么“ 绝对” 了。 Java 堆 是 垃圾 收集 器 管理 的 主要 区域， 因此 很多 时候 也 被 称做“ GC 堆”（ Garbage Collected Heap）。 如果 从内 存 回收 的 角度 看， 由于 现在 收集 器 基本 都是 采 用的 分 代收 集 算法， 所以 Java 堆 中 还可以 细分 为： 新生代 和 老 年代； 再 细致 一点 的 有 Eden 空间、 From Survivor 空间、 To Survivor 空间 等。 如果 从内 存 分配 的 角度 看， 线程 共享 的 Java 堆 中 可能 划分 出 多个 线程 私有 的 分配 缓冲区（ Thread Local Allocation Buffer， TLAB）。 不过， 无论如何 划分， 都与 存放 内容 无关， 无论 哪个 区域， 存储 的 都 仍然是 对象 实例， 进一步 划分 的 目的 是 为了 更好 地 回收 内存， 或者 更快 地 分配 内存。 在 本章 中， 我们 仅仅 针对 内存 区域 的 作用 进行 讨论， Java 堆 中的 上述 各个 区域 的 分配 和 回收 等 细节 将会 是 下 一章 的 主题。 根据 Java 虚拟 机 规范 的 规定， Java 堆 可以 处于 物理上 不连续 的 内存 空间 中， 只要 逻辑上 是 连续 的 即可， 就 像 我们 的 磁盘 空间 一样。 在 实现 时， 既可以 实现 成 固定 大小 的， 也可以 是 可扩展 的， 不过 当前 主流 的 虚拟 机 都是 按照 可扩展 来 实现 的（ 通过- Xmx 和- Xms 控制）。<br>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。<br>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。如下图所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20170727210308831?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></center></p>\n<p>从图中可以看出： 堆大小 = 新生代 + 老年代。其中，堆的大小可以通过参数 –Xms、-Xmx 来指定。<br>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。<br>老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。<br>默认的，Edem : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。<br>JVM 每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。<br>因此，新生代实际可用的内存空间为 9/10 ( 即 90% )的新生代空间。</p>\n<p>GC 堆<br>Java 中的堆也是 GC 收集垃圾的主要区域。GC 分为两种：Minor GC、Full GC ( 或称为 Major GC )。<br>Minor GC 是发生在新生代中的垃圾收集动作，所采用的是复制算法。<br>新生代几乎是所有 Java 对象出生的地方，即 Java 对象申请的内存以及存放都是在这个地方。Java 中的大部分对象通常不需长久存活，具有朝生夕灭的性质。<br>当一个对象被判定为 “死亡” 的时候，GC 就有责任来回收掉这部分对象的内存空间。新生代是 GC 收集垃圾的频繁区域。<br>当对象在 Eden ( 包括一个 Survivor 区域，这里假设是 from 区域 ) 出生后，在经过一次 Minor GC 后，如果对象还存活，并且能够被另外一块 Survivor 区域所容纳<br>( 上面已经假设为 from 区域，这里应为 to 区域，即 to 区域有足够的内存空间来存储 Eden 和 from 区域中存活的对象 )，则使用复制算法将这些仍然还存活的对象复制到另外一块 Survivor 区域 ( 即 to 区域 ) 中，然后清理所使用过的 Eden 以及 Survivor 区域 ( 即 from 区域 )，并且将这些对象的年龄设置为 1，以后对象在 Survivor 区每熬过一次 Minor GC，就将对象的年龄 + 1，当对象的年龄达到某个值时 ( 默认是 15 岁，可以通过参数 -XX:MaxTenuringThreshold 来设定 )，这些对象就会成为老年代。<br>但这也不是一定的，对于一些较大的对象 ( 即需要分配一块较大的连续内存空间 ) 则是直接进入到老年代。<br>Full GC 是发生在老年代的垃圾收集动作，所采用的是标记-清除算法。<br>现实的生活中，老年代的人通常会比新生代的人 “早死”。堆内存中的老年代(Old)不同于这个，老年代里面的对象几乎个个都是在 Survivor 区域中熬过来的，它们是不会那么容易就 “死掉” 了的。因此，Full GC 发生的次数不会有 Minor GC 那么频繁，并且做一次 Full GC 要比进行一次 Minor GC 的时间更长。<br>另外，标记-清除算法收集垃圾的时候会产生许多的内存碎片 ( 即不连续的内存空间 )，此后需要为较大的对象分配内存空间时，若无法找到足够的连续的内存空间，就会提前触发一次 GC 的收集动作。</p>\n<p>设置 JVM 参数为 -XX:+PrintGCDetails，使得控制台能够显示 GC 相关的日志信息，执行上面代码，下面是其中一次执行的结果。</p>\n<table>\n<thead>\n<tr>\n<th>jvm 参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-Xms</td>\n<td>初始堆大小。如：-Xms256m</td>\n</tr>\n<tr>\n<td>-Xmx</td>\n<td>最大堆大小。如：-Xmx512m</td>\n</tr>\n<tr>\n<td>-Xmn</td>\n<td>新生代大小。通常为 Xmx 的 1/3 或 1/4。新生代 = Eden + 2 个 Survivor 空间。实际可用空间为 = Eden + 1 个 Survivor，即 90%</td>\n</tr>\n<tr>\n<td>-Xss</td>\n<td>JDK1.5+ 每个线程堆栈大小为 1M，一般来说如果栈不是很深的话， 1M 是绝对够用了的。</td>\n</tr>\n<tr>\n<td>-XX:NewRatio</td>\n<td>新生代与老年代的比例，如 –XX:NewRatio=2，则新生代占整个堆空间的 1/3，老年代占 2/3</td>\n</tr>\n<tr>\n<td>-XX:SurvivorRatio</td>\n<td>新生代中 Eden 与 Survivor 的比值。默认值为 8。即 Eden 占新生代空间的 8/10，另外两个 Survivor 各占 1/10</td>\n</tr>\n<tr>\n<td>-XX:PermSize</td>\n<td>永久代(方法区)的初始大小</td>\n</tr>\n<tr>\n<td>-XX:MaxPermSize</td>\n<td>永久代(方法区)的最大值</td>\n</tr>\n<tr>\n<td>-XX:+PrintGCDetails</td>\n<td>打印 GC 信息</td>\n</tr>\n<tr>\n<td>-XX:+HeapDumpOnOutOfMemoryError</td>\n<td>让虚拟机在发生内存溢出时 Dump 出当前的内存堆转储快照，以便分析用</td>\n</tr>\n</tbody></table>\n<p>Java 堆 用于 储存 对象 实例， 我们 只要 不断 地 创建 对象， 并且 保证 GC Roots 到 对象 之间 有可 达 路径 来 避免 垃圾 回收 机制 清除 这些 对象， 就会 在 对象 数量 到达 最 大堆 的 容量 限制 后 产生 内存 溢出 异常。实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">packagecom.sf.jvm;</span><br><span class=\"line\">importjava.util.ArrayList;</span><br><span class=\"line\">importjava.util.List;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* VM Args：</span></span><br><span class=\"line\"><span class=\"comment\">* -Xms20m -Xmx20m</span></span><br><span class=\"line\"><span class=\"comment\">* -XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class=\"line\"><span class=\"comment\">* -XX:+PrintGCDetails</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> classHeapOutOfMemory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\toutOfMemory();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">noOutOfMemory</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tnewOOMObject();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">outOfMemory</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tList&lt;OOMObject&gt; list =newArrayList&lt;OOMObject&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tlist.add(newOOMObject());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">classOOMObject &#123;</span><br><span class=\"line\">\tbytemem[] =<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">2014</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">异常信息如下：</span><br><span class=\"line\">[GC (Allocation Failure) [PSYoungGen: 5632K-&gt;512K(6144K)] 5632K-&gt;5024K(19968K), <span class=\"number\">0.0027725</span> secs] [Times: user=<span class=\"number\">0.00</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.00</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure) [PSYoungGen: 6144K-&gt;504K(6144K)] 10656K-&gt;11432K(19968K), <span class=\"number\">0.0022202</span> secs] [Times: user=<span class=\"number\">0.00</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.00</span> secs]</span><br><span class=\"line\">[<span class=\"function\">Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span> [PSYoungGen: 504K-&gt;0<span class=\"title\">K</span><span class=\"params\">(6144K)</span>] [ParOldGen: 10928K-&gt;10092<span class=\"title\">K</span><span class=\"params\">(13824K)</span>] 11432K-&gt;10092<span class=\"title\">K</span><span class=\"params\">(19968K)</span>, [Metaspace: 2973K-&gt;2973<span class=\"title\">K</span><span class=\"params\">(1056768K)</span>], 0.0149535 secs] [Times: user</span>=<span class=\"number\">0.02</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.01</span> secs]</span><br><span class=\"line\">........</span><br><span class=\"line\">[<span class=\"function\">Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span> [PSYoungGen: 5632K-&gt;5632<span class=\"title\">K</span><span class=\"params\">(6144K)</span>] [ParOldGen: 13823K-&gt;13823<span class=\"title\">K</span><span class=\"params\">(13824K)</span>] 19455K-&gt;19455<span class=\"title\">K</span><span class=\"params\">(19968K)</span>, [Metaspace: 2973K-&gt;2973<span class=\"title\">K</span><span class=\"params\">(1056768K)</span>], 0.0086009 secs] [Times: user</span>=<span class=\"number\">0.00</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.01</span> secs]</span><br><span class=\"line\">java.lang.OutOfMemoryError: Java heap space</span><br><span class=\"line\">Dumping heap to java_pid2780.hprof ...</span><br><span class=\"line\">Heap dump file created [<span class=\"number\">20898436</span> bytes in <span class=\"number\">0.027</span> secs]</span><br><span class=\"line\">[<span class=\"function\">Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span> Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</span></span><br><span class=\"line\"><span class=\"function\">at com.sf.jvm.OOMObject.&lt;init&gt;<span class=\"params\">(HeapOutOfMemory.java:<span class=\"number\">29</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">at com.sf.jvm.HeapOutOfMemory.<span class=\"title\">outOfMemory</span><span class=\"params\">(HeapOutOfMemory.java:<span class=\"number\">23</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">at com.sf.jvm.HeapOutOfMemory.<span class=\"title\">main</span><span class=\"params\">(HeapOutOfMemory.java:<span class=\"number\">12</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">[PSYoungGen: 5632K-&gt;0<span class=\"title\">K</span><span class=\"params\">(6144K)</span>] [ParOldGen: 13823K-&gt;579<span class=\"title\">K</span><span class=\"params\">(13824K)</span>] 19455K-&gt;579<span class=\"title\">K</span><span class=\"params\">(19968K)</span>, [Metaspace: 2973K-&gt;2973<span class=\"title\">K</span><span class=\"params\">(1056768K)</span>], 0.0096016 secs] [Times: user</span>=<span class=\"number\">0.00</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.01</span> secs]</span><br><span class=\"line\">Heap</span><br><span class=\"line\">PSYoungGen total 6144K, used 177K [<span class=\"number\">0x00000000ff980000</span>, <span class=\"number\">0x0000000100000000</span>, <span class=\"number\">0x0000000100000000</span>)</span><br><span class=\"line\">eden space 5632K, <span class=\"number\">3</span>% used [<span class=\"number\">0x00000000ff980000</span>,<span class=\"number\">0x00000000ff9ac4a0</span>,<span class=\"number\">0x00000000fff00000</span>)</span><br><span class=\"line\">from space 512K, <span class=\"number\">0</span>% used [<span class=\"number\">0x00000000fff80000</span>,<span class=\"number\">0x00000000fff80000</span>,<span class=\"number\">0x0000000100000000</span>)</span><br><span class=\"line\">to space 512K, <span class=\"number\">0</span>% used [<span class=\"number\">0x00000000fff00000</span>,<span class=\"number\">0x00000000fff00000</span>,<span class=\"number\">0x00000000fff80000</span>)</span><br><span class=\"line\">ParOldGen total 13824K, used 579K [<span class=\"number\">0x00000000fec00000</span>, <span class=\"number\">0x00000000ff980000</span>, <span class=\"number\">0x00000000ff980000</span>)</span><br><span class=\"line\">object space 13824K, <span class=\"number\">4</span>% used [<span class=\"number\">0x00000000fec00000</span>,<span class=\"number\">0x00000000fec90c20</span>,<span class=\"number\">0x00000000ff980000</span>)</span><br><span class=\"line\">Metaspace used 3005K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">space</span> <span class=\"title\">used</span> 326<span class=\"title\">K</span>, <span class=\"title\">capacity</span> 388<span class=\"title\">K</span>, <span class=\"title\">committed</span> 512<span class=\"title\">K</span>, <span class=\"title\">reserved</span> 1048576<span class=\"title\">K</span></span></span><br></pre></td></tr></table></figure>\n\n<p>用 jvisualvm.exe 打开查看 dump，发现主要是 OOMobject 不被释放。</p>\n<h4>1.5 方法 区<h4>\n      <h5>1.5.1 方法区</h5> \n方法 区（ Method Area） 与 Java 堆 一样， 是 各个 线程 共享 的 内存 区域， 它 用于 存储 已被 虚拟 机 加载 的 类 信息、 常量、 静态 变量、 即时 编译器 编译 后的 代码 等 数据。 虽然 Java 虚拟 机 规范 把 方法 区 描述为 堆 的 一个 逻辑 部分， 但是 它 却有 一个 别名 叫做 Non- Heap（ 非 堆）， 目的 应该 是与 Java 堆 区分 开来。 对于 习惯 在 HotSpot 虚拟 机上 开发 和 部署 程序 的 开发者 来说， 很多人 愿意 把 方法 区 称为“ 永久 代”（ Permanent Generation）， 本质上 两者 并不 等价， 仅仅 是因为 HotSpot 虚拟 机 的 设计 团队 选择 把 GC 分 代收 集 扩展 至 方法 区， 或者说 使用 永久 代 来 实现 方法 区 而已。 对于 其他 虚拟 机（ 如 BEA JRockit、 IBM J9 等） 来说 是 不存在 永久 代 的 概念 的。 即使是 HotSpot 虚拟 机 本身， 根据 官方 发布 的 路线 图 信息， 现在 也有 放弃 永久 代 并“ 搬家” 至 Native Memory 来 实现 方法 区 的 规划 了。 Java 虚拟 机 规范 对这 个 区域 的 限制 非常 宽松， 除了 和 Java 堆 一样 不需要 连续 的 内存 和 可以 选择 固定 大小 或者 可扩展 外， 还可以 选择 不实 现 垃圾 收集。 相对而言， 垃圾 收集 行为 在这 个 区域 是 比较 少 出现 的， 但 并非 数据 进入 了 方法 区 就 如 永久 代 的 名字 一样“ 永久” 存在 了。 这个 区域 的 内存 回收 目标 主要 是 针对 常量 池 的 回收 和 对 类型 的 卸载， 一般来说 这个 区域 的 回收“ 成绩” 比较 难以 令人满意， 尤其是 类型 的 卸载， 条件 相当 苛刻， 但是 这部 分 区域 的 回收 确实 是有 必要 的。 在 Sun 公司 的 BUG 列表 中， 曾 出现 过 的 若干个 严重 的 BUG 就是 由于 低 版本 的 HotSpot 虚拟 机 对此 区域 未完 全 回收 而 导致 内存 泄漏。 根据 Java 虚拟 机 规范 的 规定， 当 方法 区 无法 满足 内存 分配 需求 时， 将 抛出 OutOfMemoryError 异常。方法 区 用于 存放 Class 的 相关 信息， 如 类 名、 访问 修饰 符、 常量 池、 字段 描述、 方法 描述 等。 对于 这个 区域 的 测试， 基本 的 思路 是 运行时 产生 大量 的 类 去 填满 方法 区， 直到 溢出。 虽然 直接 使用 Java SE API 也可以 动态 产生 类（ 如 反射 时 的 GeneratedConstructorAccessor 和 动态 代理 等）， 但在 本次 实验 中 操作 起来 比较 麻烦。 在 代码 清单 2- 5 中， 笔者 借助 CGLib[ 3] 直接 操作 字节 码 运行时， 生成 了 大量 的 动态 类。 值得 特别 注意 的 是， 我们 在这 个 例子 中 模拟 的 场景 并非 纯粹 是一 个 实验， 这样 的 应用 经常 会 出现 在 实际 应用 中： 当前 的 很多 主流 框架， 如 Spring 和 Hibernate 对 类 进行 增强 时， 都会 使用 到 CGLib 这类 字节 码 技术， 增 强的 类 越多， 就 需要 越大 的 方法 区 来 保证 动态 生成 的 Class 可以 加载 入 内存。\n方法 区 溢出 也是 一种 常见 的 内存 溢出 异常， 一个 类 如果 要被 垃圾 收集 器 回收 掉， 判定 条件 是非 常 苛刻 的。 在 经常 动态 生成 大量 Class 的 应用 中， 需要 特别 注意 类 的 回收 状况。 这类 场景 除了 上面 提到 的 程序 使用 了 GCLib 字节 码 增强 外， 常见 的 还有： 大量 JSP 或 动态 产生 JSP 文件 的 应用（ JSP 第一次 运行时 需要 编译 为 Java 类）、 基于 OSGi 的 应用（ 即使是 同一个 类 文件， 被 不同 的 加载 器 加载 也会 视为 不同 的 类） 等。\n代码 清单 2- 5 　 借助 CGLib 使得 方法 区 出现 内存 溢出 异常\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">packagecom.sf.jvm;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* VM Args： -XX: PermSize= 10M -XX: MaxPermSize= 10M</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaMethodAreaOOM</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tEnhancer enhancer =newEnhancer();</span><br><span class=\"line\">\t\t\tenhancer.setSuperclass(OOMObject.class);</span><br><span class=\"line\">\t\t\tenhancer.setUseCache(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t\t\tenhancer.setCallback(newMethodInterceptor() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object obj, Method method, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t\t\t\tObject[] args, MethodProxy proxy)</span>throwsThrowable </span>&#123;</span><br><span class=\"line\">\t\t\t\t\treturnproxy.invokeSuper(obj, args);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\tenhancer.create();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> classOOMObject &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">运行 结果：</span><br><span class=\"line\">Caused by: </span><br><span class=\"line\">java. lang. OutOfMemoryError: </span><br><span class=\"line\">PermGen space at java. lang. ClassLoader. defineClass1( Native Method)</span><br><span class=\"line\">at java. lang. ClassLoader. defineClassCond( ClassLoader. java: <span class=\"number\">632</span>) </span><br><span class=\"line\">at java. lang. ClassLoader. defineClass( ClassLoader. java: <span class=\"number\">616</span>）</span><br></pre></td></tr></table></figure>\n\n<h5>1.5.2 运行时常量池</h5>\n 运行时 常量 池（ Runtime Constant Pool） 是 方法 区 的 一部分。 Class 文件 中 除了 有 类 的 版本、 字段、 方法、接口 等 描述 等 信息 外， 还有 一项 信息 是 常量 池（ Constant Pool Table）， 用于 存放 编译 期 生成 的 各种 字面 量 和 符号 引用， 这部 分 内容 将 在 类 加载 后 存放 到 方法 区 的 运行时 常量 池 中。 Java 虚拟 机 对 Class 文件 的 每一 部分（ 自然 也 包括 常量 池） 的 格式 都有 严格 的 规定， 每一个 字节 用于 存储 哪种 数据 都 必须 符合 规范 上 的 要求， 这样 才会 被 虚拟 机 认可、 装载 和 执行。 但 对于 运行时 常量 池， Java 虚拟 机 规范 没有 做 任何 细节 的 要求， 不同 的 提供 商 实现 的 虚拟 机 可以 按照 自己的 需要 来 实现 这个 内存 区域。 不过， 一般来说， 除了 保存 Class 文件 中 描述 的 符号 引用 外， 还会 把 翻译 出来 的 直接 引用 也 存储 在 运行时 常量 池 中[ 4]。 运行时 常量 池 相对于 Class 文件 常量 池 的 另外 一个 重要 特征 是 具备 动态 性， Java 语言 并不 要求 常量 一定 只能 在 编译 期 产生， 也就是 并非 预置 入 Class 文件 中 常量 池 的 内容 才能 进入 方法 区 运行时 常量 池， 运行 期间 也可 能将 新的 常量 放入 池 中， 这种 特性 被 开发 人员 利用 得比 较多 的 便是 String 类 的 intern() 方法。 既然 运行时 常量 池 是 方法 区 的 一部分， 自然 会受 到 方法 区 内存 的 限制， 当 常量 池 无法 再 申请 到 内存 时会 抛出 OutOfMemoryError 异常。\n \n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sf.jvm;</span><br><span class=\"line\">importjava.util.ArrayList;</span><br><span class=\"line\">importjava.util.List;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* VM Args：- XX:PermSize=10M -XX:MaxPermSize=10M</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RuntimeConstantPoolOOM</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用 List 保持 着 常量 池 引用， 避免 Full GC 回收 常量 池 行为</span></span><br><span class=\"line\">\t\tList&lt;String&gt; list =<span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 10MB 的 PermSize 在 integer 范围内 足够 产生 OOM 了</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tlist.add(String.valueOf(i++ +<span class=\"string\">&quot;xxxxxxxxxxxxxxxxxxxxx&quot;</span>).intern());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">运行异常：</span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java. lang. OutOfMemoryError: </span><br><span class=\"line\">PermGen space at java. lang. String. intern( Native Method) </span><br><span class=\"line\">at org. fenixsoft. oom. RuntimeConstantPoolOOM. main( RuntimeConstantPoolOOM. java:...</span><br></pre></td></tr></table></figure>\n\n<h4>1.7 直接 内存</h4>\n 直接内存（DirectMemory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现，所以我们放到这里一起讲解。在JDK1.4中新加入了NIO（NewInput/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。显然，本机直接内存的分配不会受到Java堆大小的限制，但是，既然是内存，则肯定还是会受到本机总内存（包括RAM及SWAP区或者分页文件）的大小及处理器寻址空间的限制。服务器管理员配置虚拟机参数时，一般会根据实际内存设置-Xmx等参数信息，但经常会忽略掉直接内存，使得各个内存区域的总和大于物理内存限制（包括物理上的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。DirectMemory容量可通过-XX：MaxDirectMemorySize指定，如果不指定，则默认与Java堆的最大值（-Xmx指定）一样。越过了DirectByteBuffer类，直接通过反射获取Unsafe实例并进行内存分配（Unsafe类的getUnsafe()方法限制了只有引导类加载器才会返回实例，也就是设计者希望只有rt.jar中的类才能使用Unsafe的功能）。因为，虽然使用DirectByteBuffer分配内存也会抛出内存溢出异常，但它抛出异常时并没有真正向操作系统申请分配内存，而是通过计算得知内存无法分配，于是手动抛出异常，真正申请分配内存的方法是unsafe.allocateMemory()。如下实例为直接内存溢出。    \n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sf.jvm;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.Unsafe;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> staticcom.sun.deploy.util.BufferUtil.MB;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* VM Args：- Xmx20M -XX: MaxDirectMemorySize= 10M</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> classDirectMemoryOOM &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> int_1MB=<span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>throwsException </span>&#123;</span><br><span class=\"line\">\t\tField unsafeField = Unsafe.class.getDeclaredFields()[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tunsafeField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\tUnsafe unsafe = (Unsafe) unsafeField.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tunsafe.allocateMemory(_1MB);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">运行异常：</span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.OutOfMemoryError</span><br><span class=\"line\">at sun.misc.Unsafe.allocateMemory(Native Method)</span><br><span class=\"line\">at com.sf.jvm.DirectMemoryOOM.main(DirectMemoryOOM.java:<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<h4>1.8 对象的访问</h4>\n介绍完Java虚拟机的运行时数据区之后，我们就可以来探讨一个问题：在Java语言中，对象访问是如何进行的？对象访问在Java语言中无处不在，是最普通的程序行为，但即使是最简单的访问，也会却涉及Java栈、Java堆、方法区这三个最重要内存区域之间的关联关系，如下面的这句代码：Objectobj=newObject();假设这句代码出现在方法体中，那“Objectobj”这部分的语义将会反映到Java栈的本地变量表中，作为一个reference类型数据出现。而“newObject()”这部分的语义将会反映到Java堆中，形成一块存储了Object类型所有实例数据值（InstanceData，对象中各个实例字段的数据）的结构化内存，根据具体类型以及虚拟机实现的对象内存布局（ObjectMemoryLayout）的不同，这块内存的长度是不固定的。另外，在Java堆中还必须包含能查找到此对象类型数据（如对象类型、父类、实现的接口、方法等）的地址信息，这些类型数据则存储在方法区中。由于reference类型在Java虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该通过哪种方式去定位，以及访问到Java堆中的对象的具体位置，因此不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：使用句柄和直接指针。\n       如果使用句柄访问方式，Java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息，如图:\n![这里写图片描述](http://img.blog.csdn.net/20170728094239784?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n        如果使用直接指针访问方式，Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference中直接存储的就是对象地址，如图:`<center>`![这里写图片描述](http://img.blog.csdn.net/20170728094300056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n         这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。使用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。就本书讨论的主要虚拟机SunHotSpot而言，它是使用第二种方式进行对象访问的，但从整个软件开发的范围来看，各种语言和框架使用句柄来访问的情况也十分常见。\n参照：\n深入理解Java虚拟机\nhttp://blog.csdn.net/u012152619/article/details/46968883\nhttp://www.importnew.com/14630.html\n","site":{"data":{}},"excerpt":"","more":"<p>##<center>JVM 内存模型</center> 1.内存模型结构图</p>\n<p><img src=\"http://img.blog.csdn.net/20170724161538339?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"**这里写图片描述**\"></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>特征</th>\n<th>作用</th>\n<th>配置参数</th>\n<th>异常</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>程序计数器</td>\n<td>占用内存小，线程私有， 生命周期与线程相同</td>\n<td>大致为字节码行号指示器</td>\n<td>无</td>\n<td>无</td>\n</tr>\n<tr>\n<td>虚拟机栈</td>\n<td>线程私有，生命周期与线程相同，使用连续的内存空间</td>\n<td>Java 方法执行的内存模型，存储局部变量表、操作栈、动态链接、方法出口等信息</td>\n<td>-Xss</td>\n<td>OutOfMemoryError，StackOverflowError</td>\n</tr>\n<tr>\n<td>java 堆</td>\n<td>线程共享，生命周期与虚拟机相同，可以不使用连续的内存地址</td>\n<td>保存对象实例，所有对象实例（包括数组）都要在堆上分配</td>\n<td>-Xms-Xsx -Xmn</td>\n<td>OutOfMemoryError</td>\n</tr>\n<tr>\n<td>方法区</td>\n<td>线程共享，生命周期与虚拟机相同，可以不使用连续的内存地址</td>\n<td>存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</td>\n<td>-XX:PermSize:16M-XX:MaxPermSize64M</td>\n<td>OutOfMemoryError</td>\n</tr>\n<tr>\n<td>运行时常量池</td>\n<td>方法区的一部分，具有动态性</td>\n<td>存放字面量及符号引用</td>\n<td>无</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<h5>1.1 程序计数器</h5>\n程序 计数器（ Program Counter Register） 是一 块 较小 的 内存 空间， 它的 作用 可以 看做 是 当前 线程 所 执行 的 字节 码 的 行号 指示器。 在 虚拟 机 的 概念 模型 里（ 仅是 概念 模型， 各种 虚拟 机 可能 会 通过 一些 更 高效 的 方式 去 实现）， 字节 码 解释器 工作 时 就是 通过 改变 这个 计数器 的 值 来 选取 下一 条 需要 执行 的 字节 码 指令， 分支、 循环、 跳 转、 异常 处理、 线程 恢复 等 基础 功能 都 需要 依赖 这个 计数器 来 完成。\n由于 Java 虚拟 机 的 多 线程 是 通过 线程 轮流 切换 并 分配 处理器 执行 时间 的 方式 来 实现 的， 在任 何 一个 确定 的 时刻， 一个 处理器（ 对于 多 核 处理器 来说 是一 个 内核） 只会 执行 一条 线程 中的 指令。 因此， 为了 线程 切换 后能 恢复 到 正确 的 执行 位置， 每条 线程 都 需要 有一个 独立 的 程序 计数器， 各条 线程 之间 的 计数器 互不 影响， 独立 存储， 我们 称 这类 内存 区域 为“ 线程 私有” 的 内存。 如果 线程 正在 执行 的 是 一个 Java 方法， 这个 计数器 记录 的 是 正在 执行 的 虚拟 机 字节 码 指令 的 地址； 如果 正在 执 行的 是 Natvie 方法， 这个 计数器 值 则为 空（ Undefined）。 此 内存 区域 是 唯一 一个 在 Java 虚拟 机 规范 中 没有 规定 任何 OutOfMemoryError 情况 的 区域。\n\n<h5>1.2 Java 虚拟 机 栈</h5>\n与 程序 计数器 一样， Java 虚拟 机 栈（ Java Virtual Machine Stacks） 也是 线程 私有 的， 它的 生命 周期 与 线程 相同。 虚拟 机 栈 描述 的 是 Java 方法 执行 的 内存 模型： 每个 方法 被 执行 的 时候 都会 同时 创建 一个 栈 帧（ Stack Frame[ 1]） 用于 存储 局部 变 量表、 操作 栈、 动态 链接、 方法 出口 等 信息。 每一个 方法 被 调用 直至 执行 完成 的 过程， 就 对应 着 一个 栈 帧 在 虚拟 机 栈 中 从 入栈 到 出 栈 的 过程,对于执行引擎来说，活动线程中，只有栈顶的栈帧是有效的，称为当前栈帧，这个栈帧所关联的方法称为当前方法。执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。 经常 有人 把 Java 内存 区 分为 堆 内存（ Heap） 和 栈 内存（ Stack）， 这种 分法 比较 粗糙， Java 内存 区域 的 划分 实际上 远比 这 复杂。 这种 划分 方式 的 流行 只能 说明 大多数 程序员 最 关注 的、 与 对象 内存 分配 关系 最 密切 的 内存 区域 是 这 两块。 其中 所指 的“ 堆” 在后面 会 专门 讲述， 而 所指 的“ 栈” 就是 现在 讲的 虚拟 机 栈， 或者 说是 虚拟 机 栈 中的 局部 变量 表 部分。 局部 变量 表 存放 了 编译 期 可知 的 各种 基本 数据 类型（ boolean、 byte、 char、 short、 int、 float、 long、 double）、 对象 引用（ reference 类型， 它不 等同 于 对象 本身， 根据 不同 的 虚拟 机 实现， 它可 能 是一 个 指向 对象 起始 地址 的 引用 指针， 也可能 指向 一个 代表 对象 的 句柄 或者 其他 与此 对象 相关 的 位置） 和 returnAddress 类型（ 指向 了 一条 字节 码 指令 的 地址）。 其中 64 位 长度 的 long 和 double 类型 的 数据 会 占用 2 个 局部 变量 空间（Slot）， 其余 的 数据 类型 只占 用 1 个。 局部 变量 表 所需 的 内存 空间 在编 译 期间 完成 分配， 当 进入 一个 方法 时， 这个 方法 需 要在 帧 中 分配 多大 的 局部 变量 空间 是 完全 确定 的， 在 方法 运行 期间 不会 改变 局部 变 量表 的 大小。 在 Java 虚拟 机 规范 中， 对这 个 区域 规定了 两种 异常 状况： 如果 线程 请求 的 栈 深度 大于 虚拟 机 所 允许 的 深度， 将 抛出 StackOverflowError 异常； 如果 虚拟 机 栈 可以 动态 扩展（ 当前 大部分 的 Java 虚拟 机 都可 动态 扩展， 只不过 Java 虚拟 机 规范 中 也 允许 固定 长度 的 虚拟 机 栈）， 当 扩展 时 无法 申请 到 足够 的 内存 时会 抛出 OutOfMemoryError 异常。\n<h6>1.2.1 局部变量表</h6>\n局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。在Java程序被编译成Class文件时，就在方法的Code属性的max_locals数据项中确定了该方法所需要分配的最大局部变量表的容量。\n局部变量表的容量以变量槽（Slot）为最小单位，32位虚拟机中一个Slot可以存放一个32位以内的数据类型（boolean、byte、char、short、int、float、reference和returnAddress八种）。\nreference类型虚拟机规范没有明确说明它的长度，但一般来说，虚拟机实现至少都应当能从此引用中直接或者间接地查找到对象在Java堆中的起始地址索引和方法区中的对象类型数据。\nreturnAddress类型是为字节码指令jsr、jsr_w和ret服务的，它指向了一条字节码指令的地址。\n虚拟机是使用局部变量表完成参数值到参数变量列表的传递过程的，如果是实例方法（非static），那么局部变量表的第0位索引的Slot默认是用于传递方法所属对象实例的引用，在方法中通过this访问。\n Slot是可以重用的，当Slot中的变量超出了作用域，那么下一次分配Slot的时候，将会覆盖原来的数据。Slot对对象的引用会影响GC（要是被引用，将不会被回收）。\n 系统不会为局部变量赋予初始值（实例变量和类变量都会被赋予初始值）。也就是说不存在类变量那样的准备阶段。\n<h6>1.2.2 操作数栈</h6>\n和局部变量区一样，操作数栈也是被组织成一个以字长为单位的数组。但是和前者不同的是，它不是通过索引来访问，而是通过标准的栈操作——压栈和出栈—来访问的。比如，如果某个指令把一个值压入到操作数栈中，稍后另一个指令就可以弹出这个值来使用。\n虚拟机在操作数栈中存储数据的方式和在局部变量区中是一样的：如int、long、float、double、reference和returnType的存储。对于byte、short以及char类型的值在压入到操作数栈之前，也会被转换为int。\n虚拟机把操作数栈作为它的工作区——大多数指令都要从这里弹出数据，执行运算，然后把结果压回操作数栈。比如，iadd指令就要从操作数栈中弹出两个整数，执行加法运算，其结果又压回到操作数栈中。如下演示了虚拟机是如何把两个int类型的局部变量相加，再把结果保存到第三个局部变量的：\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin  </span><br><span class=\"line\">iload_0    <span class=\"comment\">// push the int in local variable 0 ontothe stack  </span></span><br><span class=\"line\">iload_1    <span class=\"comment\">//push the int in local variable 1 onto the stack  </span></span><br><span class=\"line\">iadd       <span class=\"comment\">// pop two ints, add them, push result  </span></span><br><span class=\"line\">istore_2   <span class=\"comment\">// pop int, store into local variable 2  </span></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n1. 指令iload_0和iload_1将存储在局部变量中索引为0和1的整数压入操作数栈中\n2. iadd指令从操作数栈中弹出那两个整数相加，再将结果压入操作数栈\n3. istore_2则从操作数栈中弹出结果，并把它存储到局部变量区索引为2的位置。\n4. 局部变量和操作数栈的状态变化，图中没有使用的局部变量区和操作数栈区域以空白表示。\n\n<p><img src=\"http://img.blog.csdn.net/20170727201918687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"**这里写图片描述**\"><center></p>\n<h6>1.2.3 动态连接<h6>\n虚拟机运行的时候,运行时常量池会保存大量的符号引用，这些符号引用可以看成是每个方法的间接引用。如果代表栈帧A的方法想调用代表栈帧B的方法，那么这个虚拟机的方法调用指令就会以B方法的符号引用作为参数，但是因为符号引用并不是直接指向代表B方法的内存位置，所以在调用之前还必须要将符号引用转换为直接引用，然后通过直接引用才可以访问到真正的方法。\n如果符号引用是在类加载阶段或者第一次使用的时候转化为直接应用，那么这种转换成为静态解析，如果是在运行期间转换为直接引用，那么这种转换就成为动态连接。\n<h6> 1.2.4 返回地址 <h6>\n方法的返回分为两种情况，一种是正常退出，退出后会根据方法的定义来决定是否要传返回值给上层的调用者，一种是异常导致的方法结束，这种情况是不会传返回值给上层的调用方法。\n不过无论是那种方式的方法结束，在退出当前方法时都会跳转到当前方法被调用的位置，如果方法是正常退出的，则调用者的PC计数器的值就可以作为返回地址,，果是因为异常退出的，则是需要通过异常处理表来确定。\n方法的的一次调用就对应着栈帧在虚拟机栈中的一次入栈出栈操作，因此方法退出时可能做的事情包括：恢复上层方法的局部变量表以及操作数栈，如果有返回值的话，就把返回值压入到调用者栈帧的操作数栈中，还会把PC计数器的值调整为方法调用入口的下一条指令。\n\n<p><img src=\"http://img.blog.csdn.net/20170727204302809?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></center></p>\n<h6> 1.2.5 异常 <h6>\n在Java 虚拟机规范中，对虚拟机栈规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError 异常；如果虚拟机栈可以动态扩展（当前大部分的Java 虚拟机都可动态扩展，只不过Java 虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError 异常。如下代码为请求大于虚拟机堆栈深度所出现的异常\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    java</span><br><span class=\"line\">package com.sf.jvm;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* VM Args：- Xss128k</span><br><span class=\"line\">*/</span><br><span class=\"line\">public class JavaVMStackSOF &#123;</span><br><span class=\"line\">  private intstackLength=1;</span><br><span class=\"line\">  public void stackLeak() &#123;</span><br><span class=\"line\">    stackLength++;</span><br><span class=\"line\">    stackLeak();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public static void main(String[] args)throwsThrowable &#123;</span><br><span class=\"line\">    JavaVMStackSOF oom =newJavaVMStackSOF();</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">      oom.stackLeak();</span><br><span class=\"line\">    &#125;catch(Throwable e) &#123;</span><br><span class=\"line\">      System.out.println(&quot; stack length:&quot; + oom.stackLength);</span><br><span class=\"line\">      throw e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行出现如下情况：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack length:22337</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.StackOverflowError</span><br><span class=\"line\">at com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)</span><br><span class=\"line\">at com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)</span><br><span class=\"line\">at com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)</span><br><span class=\"line\">at com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)</span><br><span class=\"line\">at com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)</span><br><span class=\"line\">at com.sf.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)</span><br></pre></td></tr></table></figure>\n\n<h4>1.3 本地 方法 栈</h4>\n\n<p>本地 方法 栈（ Native Method Stacks） 与 虚拟 机 栈 所 发挥 的 作用 是非 常 相似 的， 其 区别 不过 是 虚拟 机 栈 为 虚拟 机 执行 Java 方法（ 也就是 字节 码） 服务， 而 本地 方法 栈 则是 为 虚拟 机 使 用到 的 Native 方法 服务。 虚拟 机 规范 中 对本 地 方法 栈 中的 方法 使用 的 语言、 使用 方式 与 数据 结构 并没有 强制 规定， 因此 具体 的 虚拟 机 可以 自由 实现 它。 甚至 有的 虚拟 机（ 譬如 Sun HotSpot 虚拟 机） 直接 就把 本地 方法 栈 和 虚拟 机 栈 合二为一。 与 虚拟 机 栈 一样， 本地 方法 栈 区域 也会 抛出 StackOverflowError 和 OutOfMemoryError 异常。</p>\n<p>对于一个运行中的 Java 程序而言，它还可能会用到一些跟本地方法相关的数据区。当某个线程调用一个本地方法时，它就进入了一个全新的并且不再受虚拟机限制的世界。本地方法可以通过本地方法接口来访问虚拟机的运行时数据区，但不止如此，它还可以做任何它想做的事情。<br>　　本地方法本质上时依赖于实现的，虚拟机实现的设计者们可以自由地决定使用怎样的机制来让 Java 程序调用本地方法。<br>　　任何本地方法接口都会使用某种本地方法栈。当线程调用 Java 方法时，虚拟机会创建一个新的栈帧并压入 Java 栈。然而当它调用的是本地方法时，虚拟机会保持 Java 栈不变，不再在线程的 Java 栈中压入新的帧，虚拟机只是简单地动态连接并直接调用指定的本地方法。<br>　　如果某个虚拟机实现的本地方法接口是使用 C 连接模型的话，那么它的本地方法栈就是 C 栈。当 C 程序调用一个 C 函数时，其栈操作都是确定的。传递给该函数的参数以某个确定的顺序压入栈，它的返回值也以确定的方式传回调用者。同样，这就是虚拟机实现中本地方法栈的行为。<br>　　很可能本地方法接口需要回调 Java 虚拟机中的 Java 方法，在这种情况下，该线程会保存本地方法栈的状态并进入到另一个 Java 栈。<br>　　<img src=\"http://img.blog.csdn.net/20170727205440144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>　　这幅图展示了 JAVA 虚拟机内部线程运行的全景图。当一个线程调用一个本地方法时，本地方法又回调虚拟机中的另一个 Java 方法，一个线程可能在整个生命周期中都执行 Java 方法，操作它的 Java 栈；或者它可能毫无障碍地在 Java 栈和本地方法栈之间跳转。</p>\n<p>该线程首先调用了两个 Java 方法，而第二个 Java 方法又调用了一个本地方法，这样导致虚拟机使用了一个本地方法栈。假设这是一个 C 语言栈，其间有两个 C 函数，第一个 C 函数被第二个 Java 方法当做本地方法调用，而这个 C 函数又调用了第二个 C 函数。之后第二个 C 函数又通过本地方法接口回调了一个 Java 方法（第三个 Java 方法），最终这个 Java 方法又调用了一个 Java 方法（它成为图中的当前方法）。<br>内存溢出实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">packagecom.sf.jvm;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* VM Args：</span></span><br><span class=\"line\"><span class=\"comment\">* -Xss2M</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> classJavaVMStackOOM &#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dontStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">           Thread.sleep(<span class=\"number\">100000</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">\t\t   e.printStackTrace();</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stackLeakByThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> threadNum =<span class=\"number\">0</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t    Thread thread =newThread(newRunnable() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tdontStop();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tthread.start();</span><br><span class=\"line\">\t\tthreadNum++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>throwsThrowable </span>&#123;</span><br><span class=\"line\">\t\tJavaVMStackOOM oom =newJavaVMStackOOM();</span><br><span class=\"line\">\t\toom.stackLeakByThread();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">运行程序抛出如下异常：</span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java. lang. OutOfMemoryError: unable to create <span class=\"keyword\">new</span> <span class=\"keyword\">native</span> thread</span><br></pre></td></tr></table></figure>\n\n<h4>1.4 Java 堆<h4>\n\n<p>Java 堆（ Java Heap） 是 Java 虚拟 机 所 管理 的 内存 中最 大的 一块。 Java 堆 是 被 所有 线程 共享 的 一块 内存 区域， 在 虚拟 机 启动 时 创建。 此 内存 区域 的 唯一 目的 就是 存放 对象 实例， 几乎 所有 的 对象 实例 都在 这里 分配 内存。 这一 点在 Java 虚拟 机 规范 中的 描述 是： 所有 的 对象 实例 以及 数组 都 要在 堆 上 分配[ 2]， 但是 随着 JIT 编译器 的 发展 与 逃逸 分析 技术 的 逐渐 成熟， 栈 上 分配、 标量 替换[ 3] 优化 技术 将会 导致 一些 微妙 的 变化 发生， 所有 的 对象 都 分配 在 堆 上 也 渐渐 变得 不是 那么“ 绝对” 了。 Java 堆 是 垃圾 收集 器 管理 的 主要 区域， 因此 很多 时候 也 被 称做“ GC 堆”（ Garbage Collected Heap）。 如果 从内 存 回收 的 角度 看， 由于 现在 收集 器 基本 都是 采 用的 分 代收 集 算法， 所以 Java 堆 中 还可以 细分 为： 新生代 和 老 年代； 再 细致 一点 的 有 Eden 空间、 From Survivor 空间、 To Survivor 空间 等。 如果 从内 存 分配 的 角度 看， 线程 共享 的 Java 堆 中 可能 划分 出 多个 线程 私有 的 分配 缓冲区（ Thread Local Allocation Buffer， TLAB）。 不过， 无论如何 划分， 都与 存放 内容 无关， 无论 哪个 区域， 存储 的 都 仍然是 对象 实例， 进一步 划分 的 目的 是 为了 更好 地 回收 内存， 或者 更快 地 分配 内存。 在 本章 中， 我们 仅仅 针对 内存 区域 的 作用 进行 讨论， Java 堆 中的 上述 各个 区域 的 分配 和 回收 等 细节 将会 是 下 一章 的 主题。 根据 Java 虚拟 机 规范 的 规定， Java 堆 可以 处于 物理上 不连续 的 内存 空间 中， 只要 逻辑上 是 连续 的 即可， 就 像 我们 的 磁盘 空间 一样。 在 实现 时， 既可以 实现 成 固定 大小 的， 也可以 是 可扩展 的， 不过 当前 主流 的 虚拟 机 都是 按照 可扩展 来 实现 的（ 通过- Xmx 和- Xms 控制）。<br>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。<br>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。如下图所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20170727210308831?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></center></p>\n<p>从图中可以看出： 堆大小 = 新生代 + 老年代。其中，堆的大小可以通过参数 –Xms、-Xmx 来指定。<br>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。<br>老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。<br>默认的，Edem : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。<br>JVM 每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。<br>因此，新生代实际可用的内存空间为 9/10 ( 即 90% )的新生代空间。</p>\n<p>GC 堆<br>Java 中的堆也是 GC 收集垃圾的主要区域。GC 分为两种：Minor GC、Full GC ( 或称为 Major GC )。<br>Minor GC 是发生在新生代中的垃圾收集动作，所采用的是复制算法。<br>新生代几乎是所有 Java 对象出生的地方，即 Java 对象申请的内存以及存放都是在这个地方。Java 中的大部分对象通常不需长久存活，具有朝生夕灭的性质。<br>当一个对象被判定为 “死亡” 的时候，GC 就有责任来回收掉这部分对象的内存空间。新生代是 GC 收集垃圾的频繁区域。<br>当对象在 Eden ( 包括一个 Survivor 区域，这里假设是 from 区域 ) 出生后，在经过一次 Minor GC 后，如果对象还存活，并且能够被另外一块 Survivor 区域所容纳<br>( 上面已经假设为 from 区域，这里应为 to 区域，即 to 区域有足够的内存空间来存储 Eden 和 from 区域中存活的对象 )，则使用复制算法将这些仍然还存活的对象复制到另外一块 Survivor 区域 ( 即 to 区域 ) 中，然后清理所使用过的 Eden 以及 Survivor 区域 ( 即 from 区域 )，并且将这些对象的年龄设置为 1，以后对象在 Survivor 区每熬过一次 Minor GC，就将对象的年龄 + 1，当对象的年龄达到某个值时 ( 默认是 15 岁，可以通过参数 -XX:MaxTenuringThreshold 来设定 )，这些对象就会成为老年代。<br>但这也不是一定的，对于一些较大的对象 ( 即需要分配一块较大的连续内存空间 ) 则是直接进入到老年代。<br>Full GC 是发生在老年代的垃圾收集动作，所采用的是标记-清除算法。<br>现实的生活中，老年代的人通常会比新生代的人 “早死”。堆内存中的老年代(Old)不同于这个，老年代里面的对象几乎个个都是在 Survivor 区域中熬过来的，它们是不会那么容易就 “死掉” 了的。因此，Full GC 发生的次数不会有 Minor GC 那么频繁，并且做一次 Full GC 要比进行一次 Minor GC 的时间更长。<br>另外，标记-清除算法收集垃圾的时候会产生许多的内存碎片 ( 即不连续的内存空间 )，此后需要为较大的对象分配内存空间时，若无法找到足够的连续的内存空间，就会提前触发一次 GC 的收集动作。</p>\n<p>设置 JVM 参数为 -XX:+PrintGCDetails，使得控制台能够显示 GC 相关的日志信息，执行上面代码，下面是其中一次执行的结果。</p>\n<table>\n<thead>\n<tr>\n<th>jvm 参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-Xms</td>\n<td>初始堆大小。如：-Xms256m</td>\n</tr>\n<tr>\n<td>-Xmx</td>\n<td>最大堆大小。如：-Xmx512m</td>\n</tr>\n<tr>\n<td>-Xmn</td>\n<td>新生代大小。通常为 Xmx 的 1/3 或 1/4。新生代 = Eden + 2 个 Survivor 空间。实际可用空间为 = Eden + 1 个 Survivor，即 90%</td>\n</tr>\n<tr>\n<td>-Xss</td>\n<td>JDK1.5+ 每个线程堆栈大小为 1M，一般来说如果栈不是很深的话， 1M 是绝对够用了的。</td>\n</tr>\n<tr>\n<td>-XX:NewRatio</td>\n<td>新生代与老年代的比例，如 –XX:NewRatio=2，则新生代占整个堆空间的 1/3，老年代占 2/3</td>\n</tr>\n<tr>\n<td>-XX:SurvivorRatio</td>\n<td>新生代中 Eden 与 Survivor 的比值。默认值为 8。即 Eden 占新生代空间的 8/10，另外两个 Survivor 各占 1/10</td>\n</tr>\n<tr>\n<td>-XX:PermSize</td>\n<td>永久代(方法区)的初始大小</td>\n</tr>\n<tr>\n<td>-XX:MaxPermSize</td>\n<td>永久代(方法区)的最大值</td>\n</tr>\n<tr>\n<td>-XX:+PrintGCDetails</td>\n<td>打印 GC 信息</td>\n</tr>\n<tr>\n<td>-XX:+HeapDumpOnOutOfMemoryError</td>\n<td>让虚拟机在发生内存溢出时 Dump 出当前的内存堆转储快照，以便分析用</td>\n</tr>\n</tbody></table>\n<p>Java 堆 用于 储存 对象 实例， 我们 只要 不断 地 创建 对象， 并且 保证 GC Roots 到 对象 之间 有可 达 路径 来 避免 垃圾 回收 机制 清除 这些 对象， 就会 在 对象 数量 到达 最 大堆 的 容量 限制 后 产生 内存 溢出 异常。实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">packagecom.sf.jvm;</span><br><span class=\"line\">importjava.util.ArrayList;</span><br><span class=\"line\">importjava.util.List;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* VM Args：</span></span><br><span class=\"line\"><span class=\"comment\">* -Xms20m -Xmx20m</span></span><br><span class=\"line\"><span class=\"comment\">* -XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class=\"line\"><span class=\"comment\">* -XX:+PrintGCDetails</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> classHeapOutOfMemory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\toutOfMemory();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">noOutOfMemory</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tnewOOMObject();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">outOfMemory</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tList&lt;OOMObject&gt; list =newArrayList&lt;OOMObject&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tlist.add(newOOMObject());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">classOOMObject &#123;</span><br><span class=\"line\">\tbytemem[] =<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">2014</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">异常信息如下：</span><br><span class=\"line\">[GC (Allocation Failure) [PSYoungGen: 5632K-&gt;512K(6144K)] 5632K-&gt;5024K(19968K), <span class=\"number\">0.0027725</span> secs] [Times: user=<span class=\"number\">0.00</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.00</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure) [PSYoungGen: 6144K-&gt;504K(6144K)] 10656K-&gt;11432K(19968K), <span class=\"number\">0.0022202</span> secs] [Times: user=<span class=\"number\">0.00</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.00</span> secs]</span><br><span class=\"line\">[<span class=\"function\">Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span> [PSYoungGen: 504K-&gt;0<span class=\"title\">K</span><span class=\"params\">(6144K)</span>] [ParOldGen: 10928K-&gt;10092<span class=\"title\">K</span><span class=\"params\">(13824K)</span>] 11432K-&gt;10092<span class=\"title\">K</span><span class=\"params\">(19968K)</span>, [Metaspace: 2973K-&gt;2973<span class=\"title\">K</span><span class=\"params\">(1056768K)</span>], 0.0149535 secs] [Times: user</span>=<span class=\"number\">0.02</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.01</span> secs]</span><br><span class=\"line\">........</span><br><span class=\"line\">[<span class=\"function\">Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span> [PSYoungGen: 5632K-&gt;5632<span class=\"title\">K</span><span class=\"params\">(6144K)</span>] [ParOldGen: 13823K-&gt;13823<span class=\"title\">K</span><span class=\"params\">(13824K)</span>] 19455K-&gt;19455<span class=\"title\">K</span><span class=\"params\">(19968K)</span>, [Metaspace: 2973K-&gt;2973<span class=\"title\">K</span><span class=\"params\">(1056768K)</span>], 0.0086009 secs] [Times: user</span>=<span class=\"number\">0.00</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.01</span> secs]</span><br><span class=\"line\">java.lang.OutOfMemoryError: Java heap space</span><br><span class=\"line\">Dumping heap to java_pid2780.hprof ...</span><br><span class=\"line\">Heap dump file created [<span class=\"number\">20898436</span> bytes in <span class=\"number\">0.027</span> secs]</span><br><span class=\"line\">[<span class=\"function\">Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span> Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</span></span><br><span class=\"line\"><span class=\"function\">at com.sf.jvm.OOMObject.&lt;init&gt;<span class=\"params\">(HeapOutOfMemory.java:<span class=\"number\">29</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">at com.sf.jvm.HeapOutOfMemory.<span class=\"title\">outOfMemory</span><span class=\"params\">(HeapOutOfMemory.java:<span class=\"number\">23</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">at com.sf.jvm.HeapOutOfMemory.<span class=\"title\">main</span><span class=\"params\">(HeapOutOfMemory.java:<span class=\"number\">12</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">[PSYoungGen: 5632K-&gt;0<span class=\"title\">K</span><span class=\"params\">(6144K)</span>] [ParOldGen: 13823K-&gt;579<span class=\"title\">K</span><span class=\"params\">(13824K)</span>] 19455K-&gt;579<span class=\"title\">K</span><span class=\"params\">(19968K)</span>, [Metaspace: 2973K-&gt;2973<span class=\"title\">K</span><span class=\"params\">(1056768K)</span>], 0.0096016 secs] [Times: user</span>=<span class=\"number\">0.00</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.01</span> secs]</span><br><span class=\"line\">Heap</span><br><span class=\"line\">PSYoungGen total 6144K, used 177K [<span class=\"number\">0x00000000ff980000</span>, <span class=\"number\">0x0000000100000000</span>, <span class=\"number\">0x0000000100000000</span>)</span><br><span class=\"line\">eden space 5632K, <span class=\"number\">3</span>% used [<span class=\"number\">0x00000000ff980000</span>,<span class=\"number\">0x00000000ff9ac4a0</span>,<span class=\"number\">0x00000000fff00000</span>)</span><br><span class=\"line\">from space 512K, <span class=\"number\">0</span>% used [<span class=\"number\">0x00000000fff80000</span>,<span class=\"number\">0x00000000fff80000</span>,<span class=\"number\">0x0000000100000000</span>)</span><br><span class=\"line\">to space 512K, <span class=\"number\">0</span>% used [<span class=\"number\">0x00000000fff00000</span>,<span class=\"number\">0x00000000fff00000</span>,<span class=\"number\">0x00000000fff80000</span>)</span><br><span class=\"line\">ParOldGen total 13824K, used 579K [<span class=\"number\">0x00000000fec00000</span>, <span class=\"number\">0x00000000ff980000</span>, <span class=\"number\">0x00000000ff980000</span>)</span><br><span class=\"line\">object space 13824K, <span class=\"number\">4</span>% used [<span class=\"number\">0x00000000fec00000</span>,<span class=\"number\">0x00000000fec90c20</span>,<span class=\"number\">0x00000000ff980000</span>)</span><br><span class=\"line\">Metaspace used 3005K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">space</span> <span class=\"title\">used</span> 326<span class=\"title\">K</span>, <span class=\"title\">capacity</span> 388<span class=\"title\">K</span>, <span class=\"title\">committed</span> 512<span class=\"title\">K</span>, <span class=\"title\">reserved</span> 1048576<span class=\"title\">K</span></span></span><br></pre></td></tr></table></figure>\n\n<p>用 jvisualvm.exe 打开查看 dump，发现主要是 OOMobject 不被释放。</p>\n<h4>1.5 方法 区<h4>\n      <h5>1.5.1 方法区</h5> \n方法 区（ Method Area） 与 Java 堆 一样， 是 各个 线程 共享 的 内存 区域， 它 用于 存储 已被 虚拟 机 加载 的 类 信息、 常量、 静态 变量、 即时 编译器 编译 后的 代码 等 数据。 虽然 Java 虚拟 机 规范 把 方法 区 描述为 堆 的 一个 逻辑 部分， 但是 它 却有 一个 别名 叫做 Non- Heap（ 非 堆）， 目的 应该 是与 Java 堆 区分 开来。 对于 习惯 在 HotSpot 虚拟 机上 开发 和 部署 程序 的 开发者 来说， 很多人 愿意 把 方法 区 称为“ 永久 代”（ Permanent Generation）， 本质上 两者 并不 等价， 仅仅 是因为 HotSpot 虚拟 机 的 设计 团队 选择 把 GC 分 代收 集 扩展 至 方法 区， 或者说 使用 永久 代 来 实现 方法 区 而已。 对于 其他 虚拟 机（ 如 BEA JRockit、 IBM J9 等） 来说 是 不存在 永久 代 的 概念 的。 即使是 HotSpot 虚拟 机 本身， 根据 官方 发布 的 路线 图 信息， 现在 也有 放弃 永久 代 并“ 搬家” 至 Native Memory 来 实现 方法 区 的 规划 了。 Java 虚拟 机 规范 对这 个 区域 的 限制 非常 宽松， 除了 和 Java 堆 一样 不需要 连续 的 内存 和 可以 选择 固定 大小 或者 可扩展 外， 还可以 选择 不实 现 垃圾 收集。 相对而言， 垃圾 收集 行为 在这 个 区域 是 比较 少 出现 的， 但 并非 数据 进入 了 方法 区 就 如 永久 代 的 名字 一样“ 永久” 存在 了。 这个 区域 的 内存 回收 目标 主要 是 针对 常量 池 的 回收 和 对 类型 的 卸载， 一般来说 这个 区域 的 回收“ 成绩” 比较 难以 令人满意， 尤其是 类型 的 卸载， 条件 相当 苛刻， 但是 这部 分 区域 的 回收 确实 是有 必要 的。 在 Sun 公司 的 BUG 列表 中， 曾 出现 过 的 若干个 严重 的 BUG 就是 由于 低 版本 的 HotSpot 虚拟 机 对此 区域 未完 全 回收 而 导致 内存 泄漏。 根据 Java 虚拟 机 规范 的 规定， 当 方法 区 无法 满足 内存 分配 需求 时， 将 抛出 OutOfMemoryError 异常。方法 区 用于 存放 Class 的 相关 信息， 如 类 名、 访问 修饰 符、 常量 池、 字段 描述、 方法 描述 等。 对于 这个 区域 的 测试， 基本 的 思路 是 运行时 产生 大量 的 类 去 填满 方法 区， 直到 溢出。 虽然 直接 使用 Java SE API 也可以 动态 产生 类（ 如 反射 时 的 GeneratedConstructorAccessor 和 动态 代理 等）， 但在 本次 实验 中 操作 起来 比较 麻烦。 在 代码 清单 2- 5 中， 笔者 借助 CGLib[ 3] 直接 操作 字节 码 运行时， 生成 了 大量 的 动态 类。 值得 特别 注意 的 是， 我们 在这 个 例子 中 模拟 的 场景 并非 纯粹 是一 个 实验， 这样 的 应用 经常 会 出现 在 实际 应用 中： 当前 的 很多 主流 框架， 如 Spring 和 Hibernate 对 类 进行 增强 时， 都会 使用 到 CGLib 这类 字节 码 技术， 增 强的 类 越多， 就 需要 越大 的 方法 区 来 保证 动态 生成 的 Class 可以 加载 入 内存。\n方法 区 溢出 也是 一种 常见 的 内存 溢出 异常， 一个 类 如果 要被 垃圾 收集 器 回收 掉， 判定 条件 是非 常 苛刻 的。 在 经常 动态 生成 大量 Class 的 应用 中， 需要 特别 注意 类 的 回收 状况。 这类 场景 除了 上面 提到 的 程序 使用 了 GCLib 字节 码 增强 外， 常见 的 还有： 大量 JSP 或 动态 产生 JSP 文件 的 应用（ JSP 第一次 运行时 需要 编译 为 Java 类）、 基于 OSGi 的 应用（ 即使是 同一个 类 文件， 被 不同 的 加载 器 加载 也会 视为 不同 的 类） 等。\n代码 清单 2- 5 　 借助 CGLib 使得 方法 区 出现 内存 溢出 异常\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">packagecom.sf.jvm;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* VM Args： -XX: PermSize= 10M -XX: MaxPermSize= 10M</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaMethodAreaOOM</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tEnhancer enhancer =newEnhancer();</span><br><span class=\"line\">\t\t\tenhancer.setSuperclass(OOMObject.class);</span><br><span class=\"line\">\t\t\tenhancer.setUseCache(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t\t\tenhancer.setCallback(newMethodInterceptor() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object obj, Method method, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t\t\t\tObject[] args, MethodProxy proxy)</span>throwsThrowable </span>&#123;</span><br><span class=\"line\">\t\t\t\t\treturnproxy.invokeSuper(obj, args);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\tenhancer.create();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> classOOMObject &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">运行 结果：</span><br><span class=\"line\">Caused by: </span><br><span class=\"line\">java. lang. OutOfMemoryError: </span><br><span class=\"line\">PermGen space at java. lang. ClassLoader. defineClass1( Native Method)</span><br><span class=\"line\">at java. lang. ClassLoader. defineClassCond( ClassLoader. java: <span class=\"number\">632</span>) </span><br><span class=\"line\">at java. lang. ClassLoader. defineClass( ClassLoader. java: <span class=\"number\">616</span>）</span><br></pre></td></tr></table></figure>\n\n<h5>1.5.2 运行时常量池</h5>\n 运行时 常量 池（ Runtime Constant Pool） 是 方法 区 的 一部分。 Class 文件 中 除了 有 类 的 版本、 字段、 方法、接口 等 描述 等 信息 外， 还有 一项 信息 是 常量 池（ Constant Pool Table）， 用于 存放 编译 期 生成 的 各种 字面 量 和 符号 引用， 这部 分 内容 将 在 类 加载 后 存放 到 方法 区 的 运行时 常量 池 中。 Java 虚拟 机 对 Class 文件 的 每一 部分（ 自然 也 包括 常量 池） 的 格式 都有 严格 的 规定， 每一个 字节 用于 存储 哪种 数据 都 必须 符合 规范 上 的 要求， 这样 才会 被 虚拟 机 认可、 装载 和 执行。 但 对于 运行时 常量 池， Java 虚拟 机 规范 没有 做 任何 细节 的 要求， 不同 的 提供 商 实现 的 虚拟 机 可以 按照 自己的 需要 来 实现 这个 内存 区域。 不过， 一般来说， 除了 保存 Class 文件 中 描述 的 符号 引用 外， 还会 把 翻译 出来 的 直接 引用 也 存储 在 运行时 常量 池 中[ 4]。 运行时 常量 池 相对于 Class 文件 常量 池 的 另外 一个 重要 特征 是 具备 动态 性， Java 语言 并不 要求 常量 一定 只能 在 编译 期 产生， 也就是 并非 预置 入 Class 文件 中 常量 池 的 内容 才能 进入 方法 区 运行时 常量 池， 运行 期间 也可 能将 新的 常量 放入 池 中， 这种 特性 被 开发 人员 利用 得比 较多 的 便是 String 类 的 intern() 方法。 既然 运行时 常量 池 是 方法 区 的 一部分， 自然 会受 到 方法 区 内存 的 限制， 当 常量 池 无法 再 申请 到 内存 时会 抛出 OutOfMemoryError 异常。\n \n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sf.jvm;</span><br><span class=\"line\">importjava.util.ArrayList;</span><br><span class=\"line\">importjava.util.List;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* VM Args：- XX:PermSize=10M -XX:MaxPermSize=10M</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RuntimeConstantPoolOOM</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用 List 保持 着 常量 池 引用， 避免 Full GC 回收 常量 池 行为</span></span><br><span class=\"line\">\t\tList&lt;String&gt; list =<span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 10MB 的 PermSize 在 integer 范围内 足够 产生 OOM 了</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tlist.add(String.valueOf(i++ +<span class=\"string\">&quot;xxxxxxxxxxxxxxxxxxxxx&quot;</span>).intern());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">运行异常：</span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java. lang. OutOfMemoryError: </span><br><span class=\"line\">PermGen space at java. lang. String. intern( Native Method) </span><br><span class=\"line\">at org. fenixsoft. oom. RuntimeConstantPoolOOM. main( RuntimeConstantPoolOOM. java:...</span><br></pre></td></tr></table></figure>\n\n<h4>1.7 直接 内存</h4>\n 直接内存（DirectMemory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现，所以我们放到这里一起讲解。在JDK1.4中新加入了NIO（NewInput/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。显然，本机直接内存的分配不会受到Java堆大小的限制，但是，既然是内存，则肯定还是会受到本机总内存（包括RAM及SWAP区或者分页文件）的大小及处理器寻址空间的限制。服务器管理员配置虚拟机参数时，一般会根据实际内存设置-Xmx等参数信息，但经常会忽略掉直接内存，使得各个内存区域的总和大于物理内存限制（包括物理上的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。DirectMemory容量可通过-XX：MaxDirectMemorySize指定，如果不指定，则默认与Java堆的最大值（-Xmx指定）一样。越过了DirectByteBuffer类，直接通过反射获取Unsafe实例并进行内存分配（Unsafe类的getUnsafe()方法限制了只有引导类加载器才会返回实例，也就是设计者希望只有rt.jar中的类才能使用Unsafe的功能）。因为，虽然使用DirectByteBuffer分配内存也会抛出内存溢出异常，但它抛出异常时并没有真正向操作系统申请分配内存，而是通过计算得知内存无法分配，于是手动抛出异常，真正申请分配内存的方法是unsafe.allocateMemory()。如下实例为直接内存溢出。    \n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sf.jvm;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.Unsafe;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> staticcom.sun.deploy.util.BufferUtil.MB;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* VM Args：- Xmx20M -XX: MaxDirectMemorySize= 10M</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> classDirectMemoryOOM &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> int_1MB=<span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>throwsException </span>&#123;</span><br><span class=\"line\">\t\tField unsafeField = Unsafe.class.getDeclaredFields()[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tunsafeField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\tUnsafe unsafe = (Unsafe) unsafeField.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tunsafe.allocateMemory(_1MB);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">运行异常：</span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.OutOfMemoryError</span><br><span class=\"line\">at sun.misc.Unsafe.allocateMemory(Native Method)</span><br><span class=\"line\">at com.sf.jvm.DirectMemoryOOM.main(DirectMemoryOOM.java:<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<h4>1.8 对象的访问</h4>\n介绍完Java虚拟机的运行时数据区之后，我们就可以来探讨一个问题：在Java语言中，对象访问是如何进行的？对象访问在Java语言中无处不在，是最普通的程序行为，但即使是最简单的访问，也会却涉及Java栈、Java堆、方法区这三个最重要内存区域之间的关联关系，如下面的这句代码：Objectobj=newObject();假设这句代码出现在方法体中，那“Objectobj”这部分的语义将会反映到Java栈的本地变量表中，作为一个reference类型数据出现。而“newObject()”这部分的语义将会反映到Java堆中，形成一块存储了Object类型所有实例数据值（InstanceData，对象中各个实例字段的数据）的结构化内存，根据具体类型以及虚拟机实现的对象内存布局（ObjectMemoryLayout）的不同，这块内存的长度是不固定的。另外，在Java堆中还必须包含能查找到此对象类型数据（如对象类型、父类、实现的接口、方法等）的地址信息，这些类型数据则存储在方法区中。由于reference类型在Java虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该通过哪种方式去定位，以及访问到Java堆中的对象的具体位置，因此不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：使用句柄和直接指针。\n       如果使用句柄访问方式，Java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息，如图:\n![这里写图片描述](http://img.blog.csdn.net/20170728094239784?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n        如果使用直接指针访问方式，Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference中直接存储的就是对象地址，如图:`<center>`![这里写图片描述](http://img.blog.csdn.net/20170728094300056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n         这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。使用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。就本书讨论的主要虚拟机SunHotSpot而言，它是使用第二种方式进行对象访问的，但从整个软件开发的范围来看，各种语言和框架使用句柄来访问的情况也十分常见。\n参照：\n深入理解Java虚拟机\nhttp://blog.csdn.net/u012152619/article/details/46968883\nhttp://www.importnew.com/14630.html\n"},{"title":"JVM常见参数设置","_content":"\n## 1. 查看\n**-XX:+PrintFlagsFinal**\n\n- 查看堆的默认值，使用下面的代码。\n其中 InitialHeapSize 为最开始的堆的大小，MaxHeapSize 为堆的最大值。\n```\n$ java -XX:+PrintFlagsFinal -version | grep HeapSize\n    uintx ErgoHeapSizeLimit                         = 0                                   {product}\n    uintx HeapSizePerGCThread                       = 87241520                            {product}\n    uintx InitialHeapSize                          := 134217728                           {product}\n    uintx LargePageHeapSizeThreshold                = 134217728                           {product}\n    uintx MaxHeapSize                              := 2147483648                          {product}\njava version \"1.8.0_25\"\nJava(TM) SE Runtime Environment (build 1.8.0_25-b17)\nJava HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)\n\n```\n\n- 查看栈的默认值, 其中 ThreadStackSize 为栈内存的大小。\n```\n$ java -XX:+PrintFlagsFinal -version | grep ThreadStackSize\n intx CompilerThreadStackSize                   = 0                                   {pd product}\n intx ThreadStackSize                           = 1024                                {pd product}\n intx VMThreadStackSize                         = 1024                                {pd product}\njava version \"1.8.0_25\"\nJava(TM) SE Runtime Environment (build 1.8.0_25-b17)\nJava HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)\n\n```\n## 2. 堆\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627721065789-f0943cfd-fbc6-4efd-847f-5661628e8a9e.png#clientId=ud7a2e44c-082c-4&from=paste&id=uac2b358e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=321&originWidth=593&originalType=url&ratio=1&size=88416&status=done&style=none&taskId=u6a74a41e-6989-4ec2-b966-583063cd2d7)\n\n- -Xmx：初始堆的大小\n- -Xms：最大堆大小，建议这两个参数大小保持一致，为物理内存的 1/4\n- -Xmn：指定新生代的大小（Eden + Survior from + Survior to）的大小，增大新生代的大小，老年代的大小将被减小，sun 官方推荐 新生代的大小：堆 = 3 : 8\n- -XX:NewSize：设置新生代大小\n- -XX:MaxNewSize：设置新生代的最大值-Xmn 相当于设同时设置 NewSize=MaxNewSize\n- -XX:NewRation：老年代：新生代 = 4，即 old：(Eden + Survivor from + Survivor to) ，则说明新生代为整个堆区的 1/5\n- -XX:SurvivorRation：设置 Eden 区和 Survivor。\n默认值为8；即：Eden：Survivor=8:1 ==> Eden：Survivor from：Survivor to = 8:1:1\n若值为3，即：Eden：Survivor=8:1 ==> Eden：Survivor from：Survivor to = 3:1:1\n## 3. 方法区（非堆）\n\n- -XX:PermSize：设置方法区大小\n- -XX:MaxPermSize： 设置方法区的最大值\n- 1.8 之前可以理解为 永久区（PerSize，MaxPerSize）。\n- 1.8 之后使用 元数据区 取代。（MaxMetaspaceSize）。\n## 4. 栈\n\n- -Xss：栈内存的大小\n## 5. 详细参数\n### 5.1.基础参数\n| **参数名称** | **含义** | **默认值** |   |\n| --- | --- | --- | --- |\n| -Xms | 初始堆大小 | 物理内存的1/64(<1GB) | 默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制. |\n| -Xmx | 最大堆大小 | 物理内存的1/4(<1GB) | 默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制 |\n| -Xmn | 年轻代大小(1.4or lator) |   | **注意**：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。\n整个堆大小=年轻代大小 + 年老代大小 + 持久代大小.\n增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8 |\n| -XX:NewSize | 设置年轻代大小(for 1.3/1.4) |   |   |\n| -XX:MaxNewSize | 年轻代最大值(for 1.3/1.4) |   |   |\n| -XX:PermSize | 设置持久代(perm gen)初始值 | 物理内存的1/64 |   |\n| -XX:MaxPermSize | 设置持久代最大值 | 物理内存的1/4 |   |\n| -Xss | 每个线程的堆栈大小 |   | JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K. 根据应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右\n一般小的应用， 如果栈不是很深， 应该128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。\n和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:”-Xss is translated in a VM flag named ThreadStackSize”. 一般设置128k或者256k这个值就可以了。 |\n| -_XX:ThreadStackSize_ | Thread Stack Size |   | (0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256 prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.] |\n| -XX:NewRatio | 年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代) |   | -XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5\nXms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。 |\n| -XX:SurvivorRatio | Eden区与Survivor区的大小比值 |   | 设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10 |\n| -XX:LargePageSizeInBytes | 内存页的大小不可设置过大， 会影响Perm的大小 |   | =128m |\n| -XX:+UseFastAccessorMethods | 原始类型的快速优化 |   |   |\n| -XX:+DisableExplicitGC | 关闭System.gc() |   | 这个参数需要严格的测试 |\n| -XX:MaxTenuringThreshold | 垃圾最大年龄 |   | 如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率\n该参数只有在串行GC时才有效. |\n| -XX:+AggressiveOpts | 加快编译 |   |   |\n| -XX:+UseBiasedLocking | 锁机制的性能改善 |   |   |\n| -Xnoclassgc | 禁用垃圾回收 |   |   |\n| -XX:SoftRefLRUPolicyMSPerMB | 每兆堆空闲空间中SoftReference的存活时间 | 1s | softly reachable objects will remain alive for some amount of time after the last time they were referenced. The default value is one second of lifetime per free megabyte in the heap |\n| -XX:PretenureSizeThreshold | 对象超过多大是直接在旧生代分配 | 0 | 单位字节 新生代采用Parallel Scavenge GC时无效\n另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象. |\n| -XX:TLABWasteTargetPercent | TLAB占eden区的百分比 | 1% |   |\n| -XX:+_CollectGen0First_ | FullGC时是否先YGC | false |   |\n\n### 5.2 并行收集器相关参数\n| -XX:+UseParallelGC | Full GC采用parallel MSC\n(此项待验证) |   | 选择垃圾收集器为并行收集器.此配置仅对年轻代有效.即上述配置下,年轻代使用并发收集,而年老代仍旧使用串行收集.(此项待验证) |\n| --- | --- | --- | --- |\n| -XX:+UseParNewGC | 设置年轻代为并行收集 |   | 可与CMS收集同时使用\nJDK5.0以上,JVM会根据系统配置自行设置,所以无需再设置此值 |\n| -XX:ParallelGCThreads | 并行收集器的线程数 |   | 此值最好配置与处理器数目相等 同样适用于CMS |\n| -XX:+UseParallelOldGC | 年老代垃圾收集方式为并行收集(Parallel Compacting) |   | 这个是JAVA 6出现的参数选项 |\n| -XX:MaxGCPauseMillis | 每次年轻代垃圾回收的最长时间(最大暂停时间) |   | 如果无法满足此时间,JVM会自动调整年轻代大小,以满足此值. |\n| -XX:+UseAdaptiveSizePolicy | 自动选择年轻代区大小和相应的Survivor区比例 |   | 设置此选项后,并行收集器会自动选择年轻代区大小和相应的Survivor区比例,以达到目标系统规定的最低相应时间或者收集频率等,此值建议使用并行收集器时,一直打开. |\n| -XX:GCTimeRatio | 设置垃圾回收时间占程序运行时间的百分比 |   | 公式为1/(1+n) |\n| -XX:+_ScavengeBeforeFullGC_ | Full GC前调用YGC | true | Do young generation GC prior to a full GC. (Introduced in 1.4.1.) |\n\n### 5.3 CMS相关参数\n| -XX:+UseConcMarkSweepGC | 使用CMS内存收集 |   | 测试中配置这个以后,-XX:NewRatio=4的配置失效了,原因不明.所以,此时年轻代大小最好用-Xmn设置.??? |\n| --- | --- | --- | --- |\n| -XX:+AggressiveHeap |   |   | 试图是使用大量的物理内存\n长时间大内存使用的优化，能检查计算资源（内存， 处理器数量）\n至少需要256MB内存\n大量的CPU／内存， （在1.4.1在4CPU的机器上已经显示有提升） |\n| -XX:CMSFullGCsBeforeCompaction | 多少次后进行内存压缩 |   | 由于并发收集器不对内存空间进行压缩,整理,所以运行一段时间以后会产生\"碎片\",使得运行效率降低.此值设置运行多少次GC以后对内存空间进行压缩,整理. |\n| -XX:+CMSParallelRemarkEnabled | 降低标记停顿 |   |   |\n| -XX+UseCMSCompactAtFullCollection | 在FULL GC的时候， 对年老代的压缩 |   | CMS是不会移动内存的， 因此， 这个非常容易产生碎片， 导致内存不够用， 因此， 内存的压缩这个时候就会被启用。 增加这个参数是个好习惯。\n可能会影响性能,但是可以消除碎片 |\n| -XX:+UseCMSInitiatingOccupancyOnly | 使用手动定义初始化定义开始CMS收集 |   | 禁止hostspot自行触发CMS GC |\n| -XX:CMSInitiatingOccupancyFraction=70 | 使用cms作为垃圾回收\n使用70％后开始CMS收集 | 92 | 为了保证不出现promotion failed(见下面介绍)错误,该值的设置需要满足以下公式[CMSInitiatingOccupancyFraction计算公式](http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html#CMSInitiatingOccupancyFraction_value) |\n| -XX:CMSInitiatingPermOccupancyFraction | 设置Perm Gen使用到达多少比率时触发 | 92 |   |\n| -XX:+CMSIncrementalMode | 设置为增量模式 |   | 用于单CPU情况 |\n| -XX:+CMSClassUnloadingEnabled |   |   |   |\n\n### 5.4 辅助信息\n| -XX:+PrintGC |   |   | 输出形式:\n[GC 118250K->113543K(130112K), 0.0094143 secs]\n[Full GC 121376K->10414K(130112K), 0.0650971 secs] |\n| --- | --- | --- | --- |\n| -XX:+PrintGCDetails |   |   | 输出形式:[GC [DefNew: 8614K->781K(9088K), 0.0123035 secs] 118250K->113543K(130112K), 0.0124633 secs]\n[GC [DefNew: 8614K->8614K(9088K), 0.0000665 secs][Tenured: 112761K->10414K(121024K), 0.0433488 secs] 121376K->10414K(130112K), 0.0436268 secs] |\n| -XX:+PrintGCTimeStamps |   |   |   |\n| -XX:+PrintGC:PrintGCTimeStamps |   |   | 可与-XX:+PrintGC -XX:+PrintGCDetails混合使用\n输出形式:11.851: [GC 98328K->93620K(130112K), 0.0082960 secs] |\n| -XX:+PrintGCApplicationStoppedTime | 打印垃圾回收期间程序暂停的时间.可与上面混合使用 |   | 输出形式:Total time for which application threads were stopped: 0.0468229 seconds |\n| -XX:+PrintGCApplicationConcurrentTime | 打印每次垃圾回收前,程序未中断的执行时间.可与上面混合使用 |   | 输出形式:Application time: 0.5291524 seconds |\n| -XX:+PrintHeapAtGC | 打印GC前后的详细堆栈信息 |   |   |\n| -Xloggc:filename | 把相关日志信息记录到文件以便分析.\n与上面几个配合使用 |   |   |\n| -XX:+PrintClassHistogram | garbage collects before printing the histogram. |   |   |\n| -XX:+PrintTLAB | 查看TLAB空间的使用情况 |   |   |\n| XX:+PrintTenuringDistribution | 查看每次minor GC后新的存活周期的阈值 |   | Desired survivor size 1048576 bytes, new threshold 7 (max 15)\nnew threshold 7即标识新的存活周期的阈值为7。 |\n\n## 6.参考\n[https://juejin.cn/post/6844903740848242695](https://juejin.cn/post/6844903740848242695)\n[http://ssword.cn/f/view-3-be0e37a28e984c9c832a864b70d615cf.html](http://ssword.cn/f/view-3-be0e37a28e984c9c832a864b70d615cf.html)\n","source":"_posts/language/jvm/JVM常见参数设置.md","raw":"---\ntitle: JVM常见参数设置\ncategories:\n- java\ntag:\n- JVM\n---\n\n## 1. 查看\n**-XX:+PrintFlagsFinal**\n\n- 查看堆的默认值，使用下面的代码。\n其中 InitialHeapSize 为最开始的堆的大小，MaxHeapSize 为堆的最大值。\n```\n$ java -XX:+PrintFlagsFinal -version | grep HeapSize\n    uintx ErgoHeapSizeLimit                         = 0                                   {product}\n    uintx HeapSizePerGCThread                       = 87241520                            {product}\n    uintx InitialHeapSize                          := 134217728                           {product}\n    uintx LargePageHeapSizeThreshold                = 134217728                           {product}\n    uintx MaxHeapSize                              := 2147483648                          {product}\njava version \"1.8.0_25\"\nJava(TM) SE Runtime Environment (build 1.8.0_25-b17)\nJava HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)\n\n```\n\n- 查看栈的默认值, 其中 ThreadStackSize 为栈内存的大小。\n```\n$ java -XX:+PrintFlagsFinal -version | grep ThreadStackSize\n intx CompilerThreadStackSize                   = 0                                   {pd product}\n intx ThreadStackSize                           = 1024                                {pd product}\n intx VMThreadStackSize                         = 1024                                {pd product}\njava version \"1.8.0_25\"\nJava(TM) SE Runtime Environment (build 1.8.0_25-b17)\nJava HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)\n\n```\n## 2. 堆\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627721065789-f0943cfd-fbc6-4efd-847f-5661628e8a9e.png#clientId=ud7a2e44c-082c-4&from=paste&id=uac2b358e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=321&originWidth=593&originalType=url&ratio=1&size=88416&status=done&style=none&taskId=u6a74a41e-6989-4ec2-b966-583063cd2d7)\n\n- -Xmx：初始堆的大小\n- -Xms：最大堆大小，建议这两个参数大小保持一致，为物理内存的 1/4\n- -Xmn：指定新生代的大小（Eden + Survior from + Survior to）的大小，增大新生代的大小，老年代的大小将被减小，sun 官方推荐 新生代的大小：堆 = 3 : 8\n- -XX:NewSize：设置新生代大小\n- -XX:MaxNewSize：设置新生代的最大值-Xmn 相当于设同时设置 NewSize=MaxNewSize\n- -XX:NewRation：老年代：新生代 = 4，即 old：(Eden + Survivor from + Survivor to) ，则说明新生代为整个堆区的 1/5\n- -XX:SurvivorRation：设置 Eden 区和 Survivor。\n默认值为8；即：Eden：Survivor=8:1 ==> Eden：Survivor from：Survivor to = 8:1:1\n若值为3，即：Eden：Survivor=8:1 ==> Eden：Survivor from：Survivor to = 3:1:1\n## 3. 方法区（非堆）\n\n- -XX:PermSize：设置方法区大小\n- -XX:MaxPermSize： 设置方法区的最大值\n- 1.8 之前可以理解为 永久区（PerSize，MaxPerSize）。\n- 1.8 之后使用 元数据区 取代。（MaxMetaspaceSize）。\n## 4. 栈\n\n- -Xss：栈内存的大小\n## 5. 详细参数\n### 5.1.基础参数\n| **参数名称** | **含义** | **默认值** |   |\n| --- | --- | --- | --- |\n| -Xms | 初始堆大小 | 物理内存的1/64(<1GB) | 默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制. |\n| -Xmx | 最大堆大小 | 物理内存的1/4(<1GB) | 默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制 |\n| -Xmn | 年轻代大小(1.4or lator) |   | **注意**：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。\n整个堆大小=年轻代大小 + 年老代大小 + 持久代大小.\n增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8 |\n| -XX:NewSize | 设置年轻代大小(for 1.3/1.4) |   |   |\n| -XX:MaxNewSize | 年轻代最大值(for 1.3/1.4) |   |   |\n| -XX:PermSize | 设置持久代(perm gen)初始值 | 物理内存的1/64 |   |\n| -XX:MaxPermSize | 设置持久代最大值 | 物理内存的1/4 |   |\n| -Xss | 每个线程的堆栈大小 |   | JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K. 根据应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右\n一般小的应用， 如果栈不是很深， 应该128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。\n和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:”-Xss is translated in a VM flag named ThreadStackSize”. 一般设置128k或者256k这个值就可以了。 |\n| -_XX:ThreadStackSize_ | Thread Stack Size |   | (0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256 prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.] |\n| -XX:NewRatio | 年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代) |   | -XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5\nXms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。 |\n| -XX:SurvivorRatio | Eden区与Survivor区的大小比值 |   | 设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10 |\n| -XX:LargePageSizeInBytes | 内存页的大小不可设置过大， 会影响Perm的大小 |   | =128m |\n| -XX:+UseFastAccessorMethods | 原始类型的快速优化 |   |   |\n| -XX:+DisableExplicitGC | 关闭System.gc() |   | 这个参数需要严格的测试 |\n| -XX:MaxTenuringThreshold | 垃圾最大年龄 |   | 如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率\n该参数只有在串行GC时才有效. |\n| -XX:+AggressiveOpts | 加快编译 |   |   |\n| -XX:+UseBiasedLocking | 锁机制的性能改善 |   |   |\n| -Xnoclassgc | 禁用垃圾回收 |   |   |\n| -XX:SoftRefLRUPolicyMSPerMB | 每兆堆空闲空间中SoftReference的存活时间 | 1s | softly reachable objects will remain alive for some amount of time after the last time they were referenced. The default value is one second of lifetime per free megabyte in the heap |\n| -XX:PretenureSizeThreshold | 对象超过多大是直接在旧生代分配 | 0 | 单位字节 新生代采用Parallel Scavenge GC时无效\n另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象. |\n| -XX:TLABWasteTargetPercent | TLAB占eden区的百分比 | 1% |   |\n| -XX:+_CollectGen0First_ | FullGC时是否先YGC | false |   |\n\n### 5.2 并行收集器相关参数\n| -XX:+UseParallelGC | Full GC采用parallel MSC\n(此项待验证) |   | 选择垃圾收集器为并行收集器.此配置仅对年轻代有效.即上述配置下,年轻代使用并发收集,而年老代仍旧使用串行收集.(此项待验证) |\n| --- | --- | --- | --- |\n| -XX:+UseParNewGC | 设置年轻代为并行收集 |   | 可与CMS收集同时使用\nJDK5.0以上,JVM会根据系统配置自行设置,所以无需再设置此值 |\n| -XX:ParallelGCThreads | 并行收集器的线程数 |   | 此值最好配置与处理器数目相等 同样适用于CMS |\n| -XX:+UseParallelOldGC | 年老代垃圾收集方式为并行收集(Parallel Compacting) |   | 这个是JAVA 6出现的参数选项 |\n| -XX:MaxGCPauseMillis | 每次年轻代垃圾回收的最长时间(最大暂停时间) |   | 如果无法满足此时间,JVM会自动调整年轻代大小,以满足此值. |\n| -XX:+UseAdaptiveSizePolicy | 自动选择年轻代区大小和相应的Survivor区比例 |   | 设置此选项后,并行收集器会自动选择年轻代区大小和相应的Survivor区比例,以达到目标系统规定的最低相应时间或者收集频率等,此值建议使用并行收集器时,一直打开. |\n| -XX:GCTimeRatio | 设置垃圾回收时间占程序运行时间的百分比 |   | 公式为1/(1+n) |\n| -XX:+_ScavengeBeforeFullGC_ | Full GC前调用YGC | true | Do young generation GC prior to a full GC. (Introduced in 1.4.1.) |\n\n### 5.3 CMS相关参数\n| -XX:+UseConcMarkSweepGC | 使用CMS内存收集 |   | 测试中配置这个以后,-XX:NewRatio=4的配置失效了,原因不明.所以,此时年轻代大小最好用-Xmn设置.??? |\n| --- | --- | --- | --- |\n| -XX:+AggressiveHeap |   |   | 试图是使用大量的物理内存\n长时间大内存使用的优化，能检查计算资源（内存， 处理器数量）\n至少需要256MB内存\n大量的CPU／内存， （在1.4.1在4CPU的机器上已经显示有提升） |\n| -XX:CMSFullGCsBeforeCompaction | 多少次后进行内存压缩 |   | 由于并发收集器不对内存空间进行压缩,整理,所以运行一段时间以后会产生\"碎片\",使得运行效率降低.此值设置运行多少次GC以后对内存空间进行压缩,整理. |\n| -XX:+CMSParallelRemarkEnabled | 降低标记停顿 |   |   |\n| -XX+UseCMSCompactAtFullCollection | 在FULL GC的时候， 对年老代的压缩 |   | CMS是不会移动内存的， 因此， 这个非常容易产生碎片， 导致内存不够用， 因此， 内存的压缩这个时候就会被启用。 增加这个参数是个好习惯。\n可能会影响性能,但是可以消除碎片 |\n| -XX:+UseCMSInitiatingOccupancyOnly | 使用手动定义初始化定义开始CMS收集 |   | 禁止hostspot自行触发CMS GC |\n| -XX:CMSInitiatingOccupancyFraction=70 | 使用cms作为垃圾回收\n使用70％后开始CMS收集 | 92 | 为了保证不出现promotion failed(见下面介绍)错误,该值的设置需要满足以下公式[CMSInitiatingOccupancyFraction计算公式](http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html#CMSInitiatingOccupancyFraction_value) |\n| -XX:CMSInitiatingPermOccupancyFraction | 设置Perm Gen使用到达多少比率时触发 | 92 |   |\n| -XX:+CMSIncrementalMode | 设置为增量模式 |   | 用于单CPU情况 |\n| -XX:+CMSClassUnloadingEnabled |   |   |   |\n\n### 5.4 辅助信息\n| -XX:+PrintGC |   |   | 输出形式:\n[GC 118250K->113543K(130112K), 0.0094143 secs]\n[Full GC 121376K->10414K(130112K), 0.0650971 secs] |\n| --- | --- | --- | --- |\n| -XX:+PrintGCDetails |   |   | 输出形式:[GC [DefNew: 8614K->781K(9088K), 0.0123035 secs] 118250K->113543K(130112K), 0.0124633 secs]\n[GC [DefNew: 8614K->8614K(9088K), 0.0000665 secs][Tenured: 112761K->10414K(121024K), 0.0433488 secs] 121376K->10414K(130112K), 0.0436268 secs] |\n| -XX:+PrintGCTimeStamps |   |   |   |\n| -XX:+PrintGC:PrintGCTimeStamps |   |   | 可与-XX:+PrintGC -XX:+PrintGCDetails混合使用\n输出形式:11.851: [GC 98328K->93620K(130112K), 0.0082960 secs] |\n| -XX:+PrintGCApplicationStoppedTime | 打印垃圾回收期间程序暂停的时间.可与上面混合使用 |   | 输出形式:Total time for which application threads were stopped: 0.0468229 seconds |\n| -XX:+PrintGCApplicationConcurrentTime | 打印每次垃圾回收前,程序未中断的执行时间.可与上面混合使用 |   | 输出形式:Application time: 0.5291524 seconds |\n| -XX:+PrintHeapAtGC | 打印GC前后的详细堆栈信息 |   |   |\n| -Xloggc:filename | 把相关日志信息记录到文件以便分析.\n与上面几个配合使用 |   |   |\n| -XX:+PrintClassHistogram | garbage collects before printing the histogram. |   |   |\n| -XX:+PrintTLAB | 查看TLAB空间的使用情况 |   |   |\n| XX:+PrintTenuringDistribution | 查看每次minor GC后新的存活周期的阈值 |   | Desired survivor size 1048576 bytes, new threshold 7 (max 15)\nnew threshold 7即标识新的存活周期的阈值为7。 |\n\n## 6.参考\n[https://juejin.cn/post/6844903740848242695](https://juejin.cn/post/6844903740848242695)\n[http://ssword.cn/f/view-3-be0e37a28e984c9c832a864b70d615cf.html](http://ssword.cn/f/view-3-be0e37a28e984c9c832a864b70d615cf.html)\n","slug":"language/jvm/JVM常见参数设置","published":1,"date":"2021-07-31T11:10:47.883Z","updated":"2021-07-31T11:10:47.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyim0023u6uk1n718nti","content":"<h2 id=\"1-查看\"><a href=\"#1-查看\" class=\"headerlink\" title=\"1. 查看\"></a>1. 查看</h2><p><strong>-XX:+PrintFlagsFinal</strong></p>\n<ul>\n<li><p>查看堆的默认值，使用下面的代码。<br>其中 InitialHeapSize 为最开始的堆的大小，MaxHeapSize 为堆的最大值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java -XX:+PrintFlagsFinal -version | grep HeapSize</span><br><span class=\"line\">    uintx ErgoHeapSizeLimit                         = 0                                   &#123;product&#125;</span><br><span class=\"line\">    uintx HeapSizePerGCThread                       = 87241520                            &#123;product&#125;</span><br><span class=\"line\">    uintx InitialHeapSize                          := 134217728                           &#123;product&#125;</span><br><span class=\"line\">    uintx LargePageHeapSizeThreshold                = 134217728                           &#123;product&#125;</span><br><span class=\"line\">    uintx MaxHeapSize                              := 2147483648                          &#123;product&#125;</span><br><span class=\"line\">java version &quot;1.8.0_25&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_25-b17)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>查看栈的默认值, 其中 ThreadStackSize 为栈内存的大小。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java -XX:+PrintFlagsFinal -version | grep ThreadStackSize</span><br><span class=\"line\"> intx CompilerThreadStackSize                   = 0                                   &#123;pd product&#125;</span><br><span class=\"line\"> intx ThreadStackSize                           = 1024                                &#123;pd product&#125;</span><br><span class=\"line\"> intx VMThreadStackSize                         = 1024                                &#123;pd product&#125;</span><br><span class=\"line\">java version &quot;1.8.0_25&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_25-b17)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-堆\"><a href=\"#2-堆\" class=\"headerlink\" title=\"2. 堆\"></a>2. 堆</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627721065789-f0943cfd-fbc6-4efd-847f-5661628e8a9e.png#clientId=ud7a2e44c-082c-4&from=paste&id=uac2b358e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=321&originWidth=593&originalType=url&ratio=1&size=88416&status=done&style=none&taskId=u6a74a41e-6989-4ec2-b966-583063cd2d7\" alt=\"image.png\"></p>\n</li>\n<li><p>-Xmx：初始堆的大小</p>\n</li>\n<li><p>-Xms：最大堆大小，建议这两个参数大小保持一致，为物理内存的 1/4</p>\n</li>\n<li><p>-Xmn：指定新生代的大小（Eden + Survior from + Survior to）的大小，增大新生代的大小，老年代的大小将被减小，sun 官方推荐 新生代的大小：堆 = 3 : 8</p>\n</li>\n<li><p>-XX:NewSize：设置新生代大小</p>\n</li>\n<li><p>-XX:MaxNewSize：设置新生代的最大值-Xmn 相当于设同时设置 NewSize=MaxNewSize</p>\n</li>\n<li><p>-XX:NewRation：老年代：新生代 = 4，即 old：(Eden + Survivor from + Survivor to) ，则说明新生代为整个堆区的 1/5</p>\n</li>\n<li><p>-XX:SurvivorRation：设置 Eden 区和 Survivor。<br>默认值为8；即：Eden：Survivor=8:1 ==&gt; Eden：Survivor from：Survivor to = 8:1:1<br>若值为3，即：Eden：Survivor=8:1 ==&gt; Eden：Survivor from：Survivor to = 3:1:1</p>\n<h2 id=\"3-方法区（非堆）\"><a href=\"#3-方法区（非堆）\" class=\"headerlink\" title=\"3. 方法区（非堆）\"></a>3. 方法区（非堆）</h2></li>\n<li><p>-XX:PermSize：设置方法区大小</p>\n</li>\n<li><p>-XX:MaxPermSize： 设置方法区的最大值</p>\n</li>\n<li><p>1.8 之前可以理解为 永久区（PerSize，MaxPerSize）。</p>\n</li>\n<li><p>1.8 之后使用 元数据区 取代。（MaxMetaspaceSize）。</p>\n<h2 id=\"4-栈\"><a href=\"#4-栈\" class=\"headerlink\" title=\"4. 栈\"></a>4. 栈</h2></li>\n<li><p>-Xss：栈内存的大小</p>\n<h2 id=\"5-详细参数\"><a href=\"#5-详细参数\" class=\"headerlink\" title=\"5. 详细参数\"></a>5. 详细参数</h2><h3 id=\"5-1-基础参数\"><a href=\"#5-1-基础参数\" class=\"headerlink\" title=\"5.1.基础参数\"></a>5.1.基础参数</h3><table>\n<thead>\n<tr>\n<th><strong>参数名称</strong></th>\n<th><strong>含义</strong></th>\n<th><strong>默认值</strong></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-Xms</td>\n<td>初始堆大小</td>\n<td>物理内存的1/64(&lt;1GB)</td>\n<td>默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.</td>\n</tr>\n<tr>\n<td>-Xmx</td>\n<td>最大堆大小</td>\n<td>物理内存的1/4(&lt;1GB)</td>\n<td>默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制</td>\n</tr>\n<tr>\n<td>-Xmn</td>\n<td>年轻代大小(1.4or lator)</td>\n<td></td>\n<td><strong>注意</strong>：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。</td>\n</tr>\n<tr>\n<td>整个堆大小=年轻代大小 + 年老代大小 + 持久代大小.</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:NewSize</td>\n<td>设置年轻代大小(for 1.3/1.4)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:MaxNewSize</td>\n<td>年轻代最大值(for 1.3/1.4)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:PermSize</td>\n<td>设置持久代(perm gen)初始值</td>\n<td>物理内存的1/64</td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:MaxPermSize</td>\n<td>设置持久代最大值</td>\n<td>物理内存的1/4</td>\n<td></td>\n</tr>\n<tr>\n<td>-Xss</td>\n<td>每个线程的堆栈大小</td>\n<td></td>\n<td>JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K. 根据应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右</td>\n</tr>\n<tr>\n<td>一般小的应用， 如果栈不是很深， 应该128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:”-Xss is translated in a VM flag named ThreadStackSize”. 一般设置128k或者256k这个值就可以了。</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-<em>XX:ThreadStackSize</em></td>\n<td>Thread Stack Size</td>\n<td></td>\n<td>(0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256 prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.]</td>\n</tr>\n<tr>\n<td>-XX:NewRatio</td>\n<td>年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)</td>\n<td></td>\n<td>-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5</td>\n</tr>\n<tr>\n<td>Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:SurvivorRatio</td>\n<td>Eden区与Survivor区的大小比值</td>\n<td></td>\n<td>设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10</td>\n</tr>\n<tr>\n<td>-XX:LargePageSizeInBytes</td>\n<td>内存页的大小不可设置过大， 会影响Perm的大小</td>\n<td></td>\n<td>=128m</td>\n</tr>\n<tr>\n<td>-XX:+UseFastAccessorMethods</td>\n<td>原始类型的快速优化</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:+DisableExplicitGC</td>\n<td>关闭System.gc()</td>\n<td></td>\n<td>这个参数需要严格的测试</td>\n</tr>\n<tr>\n<td>-XX:MaxTenuringThreshold</td>\n<td>垃圾最大年龄</td>\n<td></td>\n<td>如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率</td>\n</tr>\n<tr>\n<td>该参数只有在串行GC时才有效.</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:+AggressiveOpts</td>\n<td>加快编译</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:+UseBiasedLocking</td>\n<td>锁机制的性能改善</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-Xnoclassgc</td>\n<td>禁用垃圾回收</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:SoftRefLRUPolicyMSPerMB</td>\n<td>每兆堆空闲空间中SoftReference的存活时间</td>\n<td>1s</td>\n<td>softly reachable objects will remain alive for some amount of time after the last time they were referenced. The default value is one second of lifetime per free megabyte in the heap</td>\n</tr>\n<tr>\n<td>-XX:PretenureSizeThreshold</td>\n<td>对象超过多大是直接在旧生代分配</td>\n<td>0</td>\n<td>单位字节 新生代采用Parallel Scavenge GC时无效</td>\n</tr>\n<tr>\n<td>另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:TLABWasteTargetPercent</td>\n<td>TLAB占eden区的百分比</td>\n<td>1%</td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:+<em>CollectGen0First</em></td>\n<td>FullGC时是否先YGC</td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"5-2-并行收集器相关参数\"><a href=\"#5-2-并行收集器相关参数\" class=\"headerlink\" title=\"5.2 并行收集器相关参数\"></a>5.2 并行收集器相关参数</h3><p>| -XX:+UseParallelGC | Full GC采用parallel MSC<br>(此项待验证) |   | 选择垃圾收集器为并行收集器.此配置仅对年轻代有效.即上述配置下,年轻代使用并发收集,而年老代仍旧使用串行收集.(此项待验证) |<br>| — | — | — | — |<br>| -XX:+UseParNewGC | 设置年轻代为并行收集 |   | 可与CMS收集同时使用<br>JDK5.0以上,JVM会根据系统配置自行设置,所以无需再设置此值 |<br>| -XX:ParallelGCThreads | 并行收集器的线程数 |   | 此值最好配置与处理器数目相等 同样适用于CMS |<br>| -XX:+UseParallelOldGC | 年老代垃圾收集方式为并行收集(Parallel Compacting) |   | 这个是JAVA 6出现的参数选项 |<br>| -XX:MaxGCPauseMillis | 每次年轻代垃圾回收的最长时间(最大暂停时间) |   | 如果无法满足此时间,JVM会自动调整年轻代大小,以满足此值. |<br>| -XX:+UseAdaptiveSizePolicy | 自动选择年轻代区大小和相应的Survivor区比例 |   | 设置此选项后,并行收集器会自动选择年轻代区大小和相应的Survivor区比例,以达到目标系统规定的最低相应时间或者收集频率等,此值建议使用并行收集器时,一直打开. |<br>| -XX:GCTimeRatio | 设置垃圾回收时间占程序运行时间的百分比 |   | 公式为1/(1+n) |<br>| -XX:+<em>ScavengeBeforeFullGC</em> | Full GC前调用YGC | true | Do young generation GC prior to a full GC. (Introduced in 1.4.1.) |</p>\n<h3 id=\"5-3-CMS相关参数\"><a href=\"#5-3-CMS相关参数\" class=\"headerlink\" title=\"5.3 CMS相关参数\"></a>5.3 CMS相关参数</h3><table>\n<thead>\n<tr>\n<th>-XX:+UseConcMarkSweepGC</th>\n<th>使用CMS内存收集</th>\n<th></th>\n<th>测试中配置这个以后,-XX:NewRatio=4的配置失效了,原因不明.所以,此时年轻代大小最好用-Xmn设置.???</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-XX:+AggressiveHeap</td>\n<td></td>\n<td></td>\n<td>试图是使用大量的物理内存</td>\n</tr>\n<tr>\n<td>长时间大内存使用的优化，能检查计算资源（内存， 处理器数量）</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>至少需要256MB内存</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>大量的CPU／内存， （在1.4.1在4CPU的机器上已经显示有提升）</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:CMSFullGCsBeforeCompaction</td>\n<td>多少次后进行内存压缩</td>\n<td></td>\n<td>由于并发收集器不对内存空间进行压缩,整理,所以运行一段时间以后会产生”碎片”,使得运行效率降低.此值设置运行多少次GC以后对内存空间进行压缩,整理.</td>\n</tr>\n<tr>\n<td>-XX:+CMSParallelRemarkEnabled</td>\n<td>降低标记停顿</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX+UseCMSCompactAtFullCollection</td>\n<td>在FULL GC的时候， 对年老代的压缩</td>\n<td></td>\n<td>CMS是不会移动内存的， 因此， 这个非常容易产生碎片， 导致内存不够用， 因此， 内存的压缩这个时候就会被启用。 增加这个参数是个好习惯。</td>\n</tr>\n<tr>\n<td>可能会影响性能,但是可以消除碎片</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:+UseCMSInitiatingOccupancyOnly</td>\n<td>使用手动定义初始化定义开始CMS收集</td>\n<td></td>\n<td>禁止hostspot自行触发CMS GC</td>\n</tr>\n<tr>\n<td>-XX:CMSInitiatingOccupancyFraction=70</td>\n<td>使用cms作为垃圾回收</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>使用70％后开始CMS收集</td>\n<td>92</td>\n<td>为了保证不出现promotion failed(见下面介绍)错误,该值的设置需要满足以下公式<a href=\"http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html#CMSInitiatingOccupancyFraction_value\">CMSInitiatingOccupancyFraction计算公式</a></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:CMSInitiatingPermOccupancyFraction</td>\n<td>设置Perm Gen使用到达多少比率时触发</td>\n<td>92</td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:+CMSIncrementalMode</td>\n<td>设置为增量模式</td>\n<td></td>\n<td>用于单CPU情况</td>\n</tr>\n<tr>\n<td>-XX:+CMSClassUnloadingEnabled</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"5-4-辅助信息\"><a href=\"#5-4-辅助信息\" class=\"headerlink\" title=\"5.4 辅助信息\"></a>5.4 辅助信息</h3><p>| -XX:+PrintGC |   |   | 输出形式:<br>[GC 118250K-&gt;113543K(130112K), 0.0094143 secs]<br>[Full GC 121376K-&gt;10414K(130112K), 0.0650971 secs] |<br>| — | — | — | — |<br>| -XX:+PrintGCDetails |   |   | 输出形式:[GC [DefNew: 8614K-&gt;781K(9088K), 0.0123035 secs] 118250K-&gt;113543K(130112K), 0.0124633 secs]<br>[GC [DefNew: 8614K-&gt;8614K(9088K), 0.0000665 secs][Tenured: 112761K-&gt;10414K(121024K), 0.0433488 secs] 121376K-&gt;10414K(130112K), 0.0436268 secs] |<br>| -XX:+PrintGCTimeStamps |   |   |   |<br>| -XX:+PrintGC:PrintGCTimeStamps |   |   | 可与-XX:+PrintGC -XX:+PrintGCDetails混合使用<br>输出形式:11.851: [GC 98328K-&gt;93620K(130112K), 0.0082960 secs] |<br>| -XX:+PrintGCApplicationStoppedTime | 打印垃圾回收期间程序暂停的时间.可与上面混合使用 |   | 输出形式:Total time for which application threads were stopped: 0.0468229 seconds |<br>| -XX:+PrintGCApplicationConcurrentTime | 打印每次垃圾回收前,程序未中断的执行时间.可与上面混合使用 |   | 输出形式:Application time: 0.5291524 seconds |<br>| -XX:+PrintHeapAtGC | 打印GC前后的详细堆栈信息 |   |   |<br>| -Xloggc:filename | 把相关日志信息记录到文件以便分析.<br>与上面几个配合使用 |   |   |<br>| -XX:+PrintClassHistogram | garbage collects before printing the histogram. |   |   |<br>| -XX:+PrintTLAB | 查看TLAB空间的使用情况 |   |   |<br>| XX:+PrintTenuringDistribution | 查看每次minor GC后新的存活周期的阈值 |   | Desired survivor size 1048576 bytes, new threshold 7 (max 15)<br>new threshold 7即标识新的存活周期的阈值为7。 |</p>\n<h2 id=\"6-参考\"><a href=\"#6-参考\" class=\"headerlink\" title=\"6.参考\"></a>6.参考</h2><p><a href=\"https://juejin.cn/post/6844903740848242695\">https://juejin.cn/post/6844903740848242695</a><br><a href=\"http://ssword.cn/f/view-3-be0e37a28e984c9c832a864b70d615cf.html\">http://ssword.cn/f/view-3-be0e37a28e984c9c832a864b70d615cf.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-查看\"><a href=\"#1-查看\" class=\"headerlink\" title=\"1. 查看\"></a>1. 查看</h2><p><strong>-XX:+PrintFlagsFinal</strong></p>\n<ul>\n<li><p>查看堆的默认值，使用下面的代码。<br>其中 InitialHeapSize 为最开始的堆的大小，MaxHeapSize 为堆的最大值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java -XX:+PrintFlagsFinal -version | grep HeapSize</span><br><span class=\"line\">    uintx ErgoHeapSizeLimit                         = 0                                   &#123;product&#125;</span><br><span class=\"line\">    uintx HeapSizePerGCThread                       = 87241520                            &#123;product&#125;</span><br><span class=\"line\">    uintx InitialHeapSize                          := 134217728                           &#123;product&#125;</span><br><span class=\"line\">    uintx LargePageHeapSizeThreshold                = 134217728                           &#123;product&#125;</span><br><span class=\"line\">    uintx MaxHeapSize                              := 2147483648                          &#123;product&#125;</span><br><span class=\"line\">java version &quot;1.8.0_25&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_25-b17)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>查看栈的默认值, 其中 ThreadStackSize 为栈内存的大小。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java -XX:+PrintFlagsFinal -version | grep ThreadStackSize</span><br><span class=\"line\"> intx CompilerThreadStackSize                   = 0                                   &#123;pd product&#125;</span><br><span class=\"line\"> intx ThreadStackSize                           = 1024                                &#123;pd product&#125;</span><br><span class=\"line\"> intx VMThreadStackSize                         = 1024                                &#123;pd product&#125;</span><br><span class=\"line\">java version &quot;1.8.0_25&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_25-b17)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-堆\"><a href=\"#2-堆\" class=\"headerlink\" title=\"2. 堆\"></a>2. 堆</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627721065789-f0943cfd-fbc6-4efd-847f-5661628e8a9e.png#clientId=ud7a2e44c-082c-4&from=paste&id=uac2b358e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=321&originWidth=593&originalType=url&ratio=1&size=88416&status=done&style=none&taskId=u6a74a41e-6989-4ec2-b966-583063cd2d7\" alt=\"image.png\"></p>\n</li>\n<li><p>-Xmx：初始堆的大小</p>\n</li>\n<li><p>-Xms：最大堆大小，建议这两个参数大小保持一致，为物理内存的 1/4</p>\n</li>\n<li><p>-Xmn：指定新生代的大小（Eden + Survior from + Survior to）的大小，增大新生代的大小，老年代的大小将被减小，sun 官方推荐 新生代的大小：堆 = 3 : 8</p>\n</li>\n<li><p>-XX:NewSize：设置新生代大小</p>\n</li>\n<li><p>-XX:MaxNewSize：设置新生代的最大值-Xmn 相当于设同时设置 NewSize=MaxNewSize</p>\n</li>\n<li><p>-XX:NewRation：老年代：新生代 = 4，即 old：(Eden + Survivor from + Survivor to) ，则说明新生代为整个堆区的 1/5</p>\n</li>\n<li><p>-XX:SurvivorRation：设置 Eden 区和 Survivor。<br>默认值为8；即：Eden：Survivor=8:1 ==&gt; Eden：Survivor from：Survivor to = 8:1:1<br>若值为3，即：Eden：Survivor=8:1 ==&gt; Eden：Survivor from：Survivor to = 3:1:1</p>\n<h2 id=\"3-方法区（非堆）\"><a href=\"#3-方法区（非堆）\" class=\"headerlink\" title=\"3. 方法区（非堆）\"></a>3. 方法区（非堆）</h2></li>\n<li><p>-XX:PermSize：设置方法区大小</p>\n</li>\n<li><p>-XX:MaxPermSize： 设置方法区的最大值</p>\n</li>\n<li><p>1.8 之前可以理解为 永久区（PerSize，MaxPerSize）。</p>\n</li>\n<li><p>1.8 之后使用 元数据区 取代。（MaxMetaspaceSize）。</p>\n<h2 id=\"4-栈\"><a href=\"#4-栈\" class=\"headerlink\" title=\"4. 栈\"></a>4. 栈</h2></li>\n<li><p>-Xss：栈内存的大小</p>\n<h2 id=\"5-详细参数\"><a href=\"#5-详细参数\" class=\"headerlink\" title=\"5. 详细参数\"></a>5. 详细参数</h2><h3 id=\"5-1-基础参数\"><a href=\"#5-1-基础参数\" class=\"headerlink\" title=\"5.1.基础参数\"></a>5.1.基础参数</h3><table>\n<thead>\n<tr>\n<th><strong>参数名称</strong></th>\n<th><strong>含义</strong></th>\n<th><strong>默认值</strong></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-Xms</td>\n<td>初始堆大小</td>\n<td>物理内存的1/64(&lt;1GB)</td>\n<td>默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.</td>\n</tr>\n<tr>\n<td>-Xmx</td>\n<td>最大堆大小</td>\n<td>物理内存的1/4(&lt;1GB)</td>\n<td>默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制</td>\n</tr>\n<tr>\n<td>-Xmn</td>\n<td>年轻代大小(1.4or lator)</td>\n<td></td>\n<td><strong>注意</strong>：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。</td>\n</tr>\n<tr>\n<td>整个堆大小=年轻代大小 + 年老代大小 + 持久代大小.</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:NewSize</td>\n<td>设置年轻代大小(for 1.3/1.4)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:MaxNewSize</td>\n<td>年轻代最大值(for 1.3/1.4)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:PermSize</td>\n<td>设置持久代(perm gen)初始值</td>\n<td>物理内存的1/64</td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:MaxPermSize</td>\n<td>设置持久代最大值</td>\n<td>物理内存的1/4</td>\n<td></td>\n</tr>\n<tr>\n<td>-Xss</td>\n<td>每个线程的堆栈大小</td>\n<td></td>\n<td>JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K. 根据应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右</td>\n</tr>\n<tr>\n<td>一般小的应用， 如果栈不是很深， 应该128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:”-Xss is translated in a VM flag named ThreadStackSize”. 一般设置128k或者256k这个值就可以了。</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-<em>XX:ThreadStackSize</em></td>\n<td>Thread Stack Size</td>\n<td></td>\n<td>(0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256 prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.]</td>\n</tr>\n<tr>\n<td>-XX:NewRatio</td>\n<td>年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)</td>\n<td></td>\n<td>-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5</td>\n</tr>\n<tr>\n<td>Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:SurvivorRatio</td>\n<td>Eden区与Survivor区的大小比值</td>\n<td></td>\n<td>设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10</td>\n</tr>\n<tr>\n<td>-XX:LargePageSizeInBytes</td>\n<td>内存页的大小不可设置过大， 会影响Perm的大小</td>\n<td></td>\n<td>=128m</td>\n</tr>\n<tr>\n<td>-XX:+UseFastAccessorMethods</td>\n<td>原始类型的快速优化</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:+DisableExplicitGC</td>\n<td>关闭System.gc()</td>\n<td></td>\n<td>这个参数需要严格的测试</td>\n</tr>\n<tr>\n<td>-XX:MaxTenuringThreshold</td>\n<td>垃圾最大年龄</td>\n<td></td>\n<td>如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率</td>\n</tr>\n<tr>\n<td>该参数只有在串行GC时才有效.</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:+AggressiveOpts</td>\n<td>加快编译</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:+UseBiasedLocking</td>\n<td>锁机制的性能改善</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-Xnoclassgc</td>\n<td>禁用垃圾回收</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:SoftRefLRUPolicyMSPerMB</td>\n<td>每兆堆空闲空间中SoftReference的存活时间</td>\n<td>1s</td>\n<td>softly reachable objects will remain alive for some amount of time after the last time they were referenced. The default value is one second of lifetime per free megabyte in the heap</td>\n</tr>\n<tr>\n<td>-XX:PretenureSizeThreshold</td>\n<td>对象超过多大是直接在旧生代分配</td>\n<td>0</td>\n<td>单位字节 新生代采用Parallel Scavenge GC时无效</td>\n</tr>\n<tr>\n<td>另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:TLABWasteTargetPercent</td>\n<td>TLAB占eden区的百分比</td>\n<td>1%</td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:+<em>CollectGen0First</em></td>\n<td>FullGC时是否先YGC</td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"5-2-并行收集器相关参数\"><a href=\"#5-2-并行收集器相关参数\" class=\"headerlink\" title=\"5.2 并行收集器相关参数\"></a>5.2 并行收集器相关参数</h3><p>| -XX:+UseParallelGC | Full GC采用parallel MSC<br>(此项待验证) |   | 选择垃圾收集器为并行收集器.此配置仅对年轻代有效.即上述配置下,年轻代使用并发收集,而年老代仍旧使用串行收集.(此项待验证) |<br>| — | — | — | — |<br>| -XX:+UseParNewGC | 设置年轻代为并行收集 |   | 可与CMS收集同时使用<br>JDK5.0以上,JVM会根据系统配置自行设置,所以无需再设置此值 |<br>| -XX:ParallelGCThreads | 并行收集器的线程数 |   | 此值最好配置与处理器数目相等 同样适用于CMS |<br>| -XX:+UseParallelOldGC | 年老代垃圾收集方式为并行收集(Parallel Compacting) |   | 这个是JAVA 6出现的参数选项 |<br>| -XX:MaxGCPauseMillis | 每次年轻代垃圾回收的最长时间(最大暂停时间) |   | 如果无法满足此时间,JVM会自动调整年轻代大小,以满足此值. |<br>| -XX:+UseAdaptiveSizePolicy | 自动选择年轻代区大小和相应的Survivor区比例 |   | 设置此选项后,并行收集器会自动选择年轻代区大小和相应的Survivor区比例,以达到目标系统规定的最低相应时间或者收集频率等,此值建议使用并行收集器时,一直打开. |<br>| -XX:GCTimeRatio | 设置垃圾回收时间占程序运行时间的百分比 |   | 公式为1/(1+n) |<br>| -XX:+<em>ScavengeBeforeFullGC</em> | Full GC前调用YGC | true | Do young generation GC prior to a full GC. (Introduced in 1.4.1.) |</p>\n<h3 id=\"5-3-CMS相关参数\"><a href=\"#5-3-CMS相关参数\" class=\"headerlink\" title=\"5.3 CMS相关参数\"></a>5.3 CMS相关参数</h3><table>\n<thead>\n<tr>\n<th>-XX:+UseConcMarkSweepGC</th>\n<th>使用CMS内存收集</th>\n<th></th>\n<th>测试中配置这个以后,-XX:NewRatio=4的配置失效了,原因不明.所以,此时年轻代大小最好用-Xmn设置.???</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-XX:+AggressiveHeap</td>\n<td></td>\n<td></td>\n<td>试图是使用大量的物理内存</td>\n</tr>\n<tr>\n<td>长时间大内存使用的优化，能检查计算资源（内存， 处理器数量）</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>至少需要256MB内存</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>大量的CPU／内存， （在1.4.1在4CPU的机器上已经显示有提升）</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:CMSFullGCsBeforeCompaction</td>\n<td>多少次后进行内存压缩</td>\n<td></td>\n<td>由于并发收集器不对内存空间进行压缩,整理,所以运行一段时间以后会产生”碎片”,使得运行效率降低.此值设置运行多少次GC以后对内存空间进行压缩,整理.</td>\n</tr>\n<tr>\n<td>-XX:+CMSParallelRemarkEnabled</td>\n<td>降低标记停顿</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX+UseCMSCompactAtFullCollection</td>\n<td>在FULL GC的时候， 对年老代的压缩</td>\n<td></td>\n<td>CMS是不会移动内存的， 因此， 这个非常容易产生碎片， 导致内存不够用， 因此， 内存的压缩这个时候就会被启用。 增加这个参数是个好习惯。</td>\n</tr>\n<tr>\n<td>可能会影响性能,但是可以消除碎片</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:+UseCMSInitiatingOccupancyOnly</td>\n<td>使用手动定义初始化定义开始CMS收集</td>\n<td></td>\n<td>禁止hostspot自行触发CMS GC</td>\n</tr>\n<tr>\n<td>-XX:CMSInitiatingOccupancyFraction=70</td>\n<td>使用cms作为垃圾回收</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>使用70％后开始CMS收集</td>\n<td>92</td>\n<td>为了保证不出现promotion failed(见下面介绍)错误,该值的设置需要满足以下公式<a href=\"http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html#CMSInitiatingOccupancyFraction_value\">CMSInitiatingOccupancyFraction计算公式</a></td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:CMSInitiatingPermOccupancyFraction</td>\n<td>设置Perm Gen使用到达多少比率时触发</td>\n<td>92</td>\n<td></td>\n</tr>\n<tr>\n<td>-XX:+CMSIncrementalMode</td>\n<td>设置为增量模式</td>\n<td></td>\n<td>用于单CPU情况</td>\n</tr>\n<tr>\n<td>-XX:+CMSClassUnloadingEnabled</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"5-4-辅助信息\"><a href=\"#5-4-辅助信息\" class=\"headerlink\" title=\"5.4 辅助信息\"></a>5.4 辅助信息</h3><p>| -XX:+PrintGC |   |   | 输出形式:<br>[GC 118250K-&gt;113543K(130112K), 0.0094143 secs]<br>[Full GC 121376K-&gt;10414K(130112K), 0.0650971 secs] |<br>| — | — | — | — |<br>| -XX:+PrintGCDetails |   |   | 输出形式:[GC [DefNew: 8614K-&gt;781K(9088K), 0.0123035 secs] 118250K-&gt;113543K(130112K), 0.0124633 secs]<br>[GC [DefNew: 8614K-&gt;8614K(9088K), 0.0000665 secs][Tenured: 112761K-&gt;10414K(121024K), 0.0433488 secs] 121376K-&gt;10414K(130112K), 0.0436268 secs] |<br>| -XX:+PrintGCTimeStamps |   |   |   |<br>| -XX:+PrintGC:PrintGCTimeStamps |   |   | 可与-XX:+PrintGC -XX:+PrintGCDetails混合使用<br>输出形式:11.851: [GC 98328K-&gt;93620K(130112K), 0.0082960 secs] |<br>| -XX:+PrintGCApplicationStoppedTime | 打印垃圾回收期间程序暂停的时间.可与上面混合使用 |   | 输出形式:Total time for which application threads were stopped: 0.0468229 seconds |<br>| -XX:+PrintGCApplicationConcurrentTime | 打印每次垃圾回收前,程序未中断的执行时间.可与上面混合使用 |   | 输出形式:Application time: 0.5291524 seconds |<br>| -XX:+PrintHeapAtGC | 打印GC前后的详细堆栈信息 |   |   |<br>| -Xloggc:filename | 把相关日志信息记录到文件以便分析.<br>与上面几个配合使用 |   |   |<br>| -XX:+PrintClassHistogram | garbage collects before printing the histogram. |   |   |<br>| -XX:+PrintTLAB | 查看TLAB空间的使用情况 |   |   |<br>| XX:+PrintTenuringDistribution | 查看每次minor GC后新的存活周期的阈值 |   | Desired survivor size 1048576 bytes, new threshold 7 (max 15)<br>new threshold 7即标识新的存活周期的阈值为7。 |</p>\n<h2 id=\"6-参考\"><a href=\"#6-参考\" class=\"headerlink\" title=\"6.参考\"></a>6.参考</h2><p><a href=\"https://juejin.cn/post/6844903740848242695\">https://juejin.cn/post/6844903740848242695</a><br><a href=\"http://ssword.cn/f/view-3-be0e37a28e984c9c832a864b70d615cf.html\">http://ssword.cn/f/view-3-be0e37a28e984c9c832a864b70d615cf.html</a></p>\n"},{"title":"JVM垃圾回收","_content":"\n# JVM垃圾回收\n\n## 1.简介\n jvm要进行垃圾回收粗略分为两个步骤：找出需要清理的内存(无效的内存区域) ， 清理无效的内存区域\n 程序计数器、虚拟机栈、本地方法栈三个区域随线程而生，随线程而灭；栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作。每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的（尽管在运行期会由JIT编译器进行一些优化，但在本章基于概念模型的讨论中，大体上可以认为是编译期可知的），因此这几个区域的内存分配和回收都具备确定性，在这几个区域内不需要过多考虑回收的问题，因为方法结束或线程结束时，内存自然就跟随着回收了。而Java堆和方法区则不一样，一个接口中的多个实现类需要的内存可能不一样，一个方法中的多个分支需要的内存也可能不一样，我们只有在程序处于运行期间时才能知道会创建哪些对象，这部分内存的分配和回收都是动态的，垃圾回收所关注的是这部分内存。\n\n## 2. 无效内存区域的查找\n\n### 2.1 概要　\n\nJava堆中几乎存放着Java世界中所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象有哪些还“存活”着，哪些已经“死去”。判断方法有引用计数器法和根搜索算法等。\n\n#### 2.1.1 引用计数算法\n\n简单解释为给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当该引用失效时，计数器值就减1；任何时刻计数器都为0的对象就是不可能再被使用的。客观地说，引用计数算法（ReferenceCounting）的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，也有一些比较著名的应用案例，例如微软的COM（ComponentObjectModel）技术、使用ActionScript3的FlashPlayer、Python语言以及在游戏脚本领域中被广泛应用的Squirrel中都使用了引用计数算法进行内存管理。但Java语言中没有选用引用计数算法来管理内存，其中最主要的原因是它很难解决对象之间的相互循环引用的问题。如下：\n```java\n/**\n *testGC()方法执行后，objA和objB会不会被GC呢？\n *@authorzzm\n */\npublic class ReferenceCountingGC{　　\n\tpublic Object instance=null;　　 \n\tprivate static final int _1MB=1024*1024;　　\n\t/**　　\n\t*这个成员属性的唯一意义就是占点内存，以便能在GC日志中看清楚是否被回收过　　\n\t*/　　\n\tprivate byte[] bigSize=new byte[2*_1MB];　　\n\tpublic static void testGC(){\n\tReferenceCountingGC objA = new ReferenceCountingGC();\n\tReferenceCountingGC objB = newReferenceCountingGC();\n\tobjA.instance = objB;\n\tobjB.instance = objA;\n\tobjA = null; \n\tobjB = null;\n\t//假设在这行发生GC，那么objA和objB是否能被回收？\n\tSystem.gc();　　\n\t}\n}\n运行结果：\n```\n```\n[FullGC(System)\n[Tenured:0K->210K(10240K),0.0149142secs]\n4603K->210K(19456K),\n[Perm:2999K->2999K(21248K)],0.0150007secs][Times:user=0.01sys=0.00,real=0.02secs]\nHeapdefnewgenerationtotal9216K,used82K\n[0x00000000055e0000,0x0000000005fe0000,0x0000000005fe0000)Edenspace8192K,1%used[0x00000000055e0000,0x00000000055f4850,0x0000000005de0000)\nfromspace1024K,0%used[0x0000000005de0000,0x0000000005de0000,0x0000000005ee0000)\ntospace1024K,0%used[0x0000000005ee0000,0x0000000005ee0000,0x0000000005fe0000)\ntenuredgenerationtotal10240K,used210K[0x0000000005fe0000,0x00000000069e0000,0x00000000069e0000)\nthespace10240K,2%used[0x0000000005fe0000,0x0000000006014a18,0x0000000006014c00,0x00000000069e0000)\ncompactingpermgentotal21248K,\nused3016K[0x00000000069e0000,0x0000000007ea0000,0x000000000bde0000)\nthespace21248K,14%used[0x00000000069e0000,0x0000000006cd2398,0x0000000006cd2400,0x0000000007ea0000)\nNosharedspacesconfigured.\n```\n\n代码中testGC()方法：对象objA和objB都有字段instance，赋值令objA.instance=objB及objB.instance=objA，除此之外，这两个对象再无任何引用，实际上这两个对象已经不可能再被访问，但是它们因为互相引用着对方，导致它们的引用计数都不为0，于是引用计数算法无法通知GC收集器回收它们，为引用计数器的缺陷。但从运行结果中可以清楚地看到GC日志中包含“4603K->210K”，意味着虚拟机并没有因为这两个对象互相引用就不回收它们，这也从侧面说明虚拟机并不是通过引用计数算法来判断对象是否存活的。\n\n#### 2.1.2 根搜索算法\n\n在主流的商用程序语言中（Java和C#，甚至包括前面提到的古老的Lisp），都是使用根搜索算法（GCRootsTracing）判定对象是否存活的。这个算法的基本思路就是通过一系列的名为“GCRoots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（ReferenceChain），当一个对象到GCRoots没有任何引用链相连（用图论的话来说就是从GCRoots到这个对象不可达）时，则证明此对象是不可用的。如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20170728135643324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n对象object5、object6、object7虽然互相有关联，但是它们到GCRoots是不可达的，所以它们将会被判定为是可回收的对象。\n在Java语言里，可作为GCRoots的对象包括下面几种：\n* 虚拟机栈（栈帧中的本地变量表）中的引用的对象。\n* 方法区中的类静态属性引用的对象。\n* 方法区中的常量引用的对象。\n* 本地方法栈中JNI（即一般说的Native方法）的引用的对象。\n\n### 2.2 java的引用类型\n\n无论是通过引用计数算法判断对象的引用数量，还是通过根搜索算法判断对象的引用链是否可达，判定对象是否存活都与“引用”有关。在JDK1.2之前，Java中的引用的定义很传统：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。这种定义很纯粹，但是太过狭隘，一个对象在这种定义下只有被引用或者没有被引用两种状态，对于如何描述一些“食之无味，弃之可惜”的对象就显得无能为力。我们希望能描述这样一类对象：当内存空间还足够时，则能保留在内存之中；如果内存在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。很多系统的缓存功能都符合这样的应用场景。\nJDK1.2之后，Java对引用的概念进行了扩充，并且引用强度不同。如下\n\n引用类型 | 概述\n------|--------\n强引用（StrongReference）|强引用就是指在程序代码之中普遍存在的，类似“Objectobj=newObject()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象\n软引用（SoftReference）|软引用用来描述一些还有用，但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中并进行第二次回收。如果这次回收还是没有足够的内存，才会抛出内存溢出异常。在JDK1.2之后，提供了SoftReference类来实现软引用\n弱引用（WeakReference）|弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2之后，提供了WeakReference类来实现弱引用\n虚引用（PhantomReference）|虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是希望能在这个对象被收集器回收时收到一个系统通知。在JDK1.2之后，提供了PhantomReference类来实现虚引用\n\n### 2.3 对象自救\n在根搜索算法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经经历两次标记过程：如果对象在进行根搜索后发现没有与GCRoots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。如果这个对象被判定为有必要执行finalize()方法，那么这个对象将会被放置在一个名为F-Queue的队列之中，并在稍后由一条由虚拟机自动建立的、低优先级的Finalizer线程去执行。这里所谓的“执行”是指虚拟机会触发这个方法，但并不承诺会等待它运行结束。这样做的原因是，如果一个对象在finalize()方法中执行缓慢，或者发生了死循环（更极端的情况），将很可能会导致F-Queue队列中的其他对象永久处于等待状态，甚至导致整个内存回收系统崩溃。finalize()方法是对象逃脱死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（this关键字）赋值给某个类变量或对象的成员变量，那在第二次标记时它将被移除出“即将回收”的集合；如果对象这时候还没有逃脱，那它就真的离死不远了。\n```java\n/***此代码演示了两点：\n *1.对象可以在被GC时自我拯救。\n *2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次\n *@authorzzm\n * */\npublic class FinalizeEscapeGC {\n    public static FinalizeEscapeGC SAVE_HOOK = null;\n    public static void main(String[] args) throws Throwable {\n        SAVE_HOOK = new FinalizeEscapeGC(); //对象 第一次 成功 拯救 自己\n        SAVE_HOOK = null;\n        System.gc(); // 因为 Finalizer 方法 优先级 很低， 暂停 0. 5 秒， 以 等待 它\n        Thread.sleep(500);\n        if (SAVE_HOOK != null) {\n            SAVE_HOOK.isAlive();\n        } else {\n            System.out.println(\" no, i am dead :(\");\n        } // 下面 这段 代码 与 上面 的 完全 相同， 但是 这次 自救 却 失败 了\n        SAVE_HOOK = null;\n        System.gc(); // 因为 Finalizer 方法 优先级 很低， 暂停 0. 5 秒， 以 等待 它\n        Thread.sleep(500);\n        if (SAVE_HOOK != null) {\n            SAVE_HOOK.isAlive();\n        } else {\n            System.out.println(\" no, i am dead :(\");\n        }\n    }\n    public void isAlive() {\n        System.out.println(\" yes, i am still alive :)\");\n    }\n    @Override\n    protected void finalize() throws Throwable {\n        super.finalize();\n        System.out.println(\" finalize mehtod executed!\");\n        FinalizeEscapeGC.SAVE_HOOK = this;\n    }\n}\n```\n```\n运行结果：\nfinalize mehtod executed! \nyes, i am still alive :) \nno, i am dead :(\n```\n\n从代码中我们可以看到一个对象的finalize()被执行，但是它仍然可以存活。代码中一次对象自我拯救的演示，在运行结果可以看到，SAVE_HOOK对象的finalize()方法确实被GC收集器触发过，并且在被收集前成功逃脱了。另外一个值得注意的地方就是，代码中有两段完全一样的代码片段，执行结果却是一次逃脱成功，一次失败，这是因为任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临下一次回收，它的finalize()方法不会被再次执行，因此第二段代码的自救行动失败了。需要特别说明的是，上面关于对象死亡时finalize()方法的描述可能带有悲情的艺术色彩，笔者并不鼓励大家使用这种方法来拯救对象。相反，笔者建议大家尽量避免使用它，因为它不是C/C++中的析构函数，而是Java刚诞生时为了使C/C++程序员更容易接受它所做出的一个妥协。它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序。有些教材中提到它适合做“关闭外部资源”之类的工作，这完全是对这种方法的用途的一种自我安慰。finalize()能做的所有工作，使用try-finally或其他方式都可以做得更好、更及时，大家完全可以忘掉Java语言中还有这个方法的存在。\n### 2.4 回收方法区\n\n很多人认为方法区（或者HotSpot虚拟机中的永久代）是没有垃圾收集的，Java虚拟机规范中确实说过可以不要求虚拟机在方法区实现垃圾收集，而且在方法区进行垃圾收集的“性价比”一般比较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%~95%的空间，而永久代的垃圾收集效率远低于此。永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。回收废弃常量与回收Java堆中的对象非常类似。以常量池中字面量的回收为例，假如一个字符串“abc”已经进入了常量池中，但是当前系统没有任何一个String对象是叫做“abc”的，换句话说是没有任何String对象引用常量池中的“abc”常量，也没有其他地方引用了这个字面量，如果在这时候发生内存回收，而且必要的话，这个“abc”常量就会被系统“请”出常量池。常量池中的其他类（接口）、方法、字段的符号引用也与此类似。判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。\njava中同时满足下面3个条件才能算是“无用的类”：\n\n* 该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。\n* 加载该类的ClassLoader已经被回收。\n* 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。\n\n虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而不是和对象一样，不使用了就必然会回收。\n是否对类进行回收，HotSpot虚拟机提供了-Xnoclassgc参数进行控制。可以使用-verbose：class及-XX：+TraceClassLoading、-XX：+TraceClassUnLoading查看类的加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，但-XX：+TraceClassLoading参数需要fastdebug版的虚拟机支持。在大量使用反射、动态代理、CGLib等bytecode框架的场景，以及动态生成JSP和OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。\n\n## 3. 清理无效内存\n### 3.1 垃圾收集算法\n\n由于垃圾收集算法的实现涉及大量的程序细节，而且各个平台的虚拟机操作内存的方法又各不相同，因此本节不打算过多地讨论算法的实现，只是介绍几种算法的思想及其发展过程。\n#### 3.1.1 标记-清除算法\n\n最基础的收集算法是“标记-清除”（Mark-Sweep）算法，如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象，它的标记过程其实在前一节讲述对象标记判定时已经基本介绍过了。之所以说它是最基础的收集算法，是因为后续的收集算法都是基于这种思路并对其缺点进行改进而得到的。\n它的主要缺点有两个：\n* 一个是效率问题，标记和清除过程的效率都不高；\n* 一个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n如下图为执行标记清除算法后的内存区域：\n\n![这里写图片描述](http://img.blog.csdn.net/20170729100915368?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n#### 3.1.2 标记-整理算法\n\n标记操作和“标记-清除”算法一致，后续操作不只是直接清理对象，而是在清理无用对象完成后让所有存活的对象都向一端移动，并更新引用其对象的指针。\n主要缺点：在标记-清除的基础上还需进行对象的移动，成本相对较高，好处则是不会产生内存碎片。\n如下图为执行标记清除算法后的内存区域：\n\n![这里写图片描述](http://img.blog.csdn.net/20170729100943066?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n####3.1.3 复制算法\n\n为了解决效率问题，一种称为“复制”（Copying）的收集算法出现了，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对其中的一块进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为原来的一半，未免太高了一点。\n复制算法执行后的内存区域：\n\n![这里写图片描述](http://img.blog.csdn.net/20170729101006020?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n#### 3.1.4 分代收集算法 \n分代收集算法当前商业虚拟机的垃圾收集都采用“分代收集”（GenerationalCollection）算法，这种算法并没有什么新的思想，只是根据对象的存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。\n\n### 3.2 垃圾收集器\n垃圾收集器对比\n\n垃圾收集器 | 解释 | 对比\n-----|-----|-----\nSerial收集器| 新生代复制算法，老年代采用标记整理算法，Serial收集器到JDK1.7为止，它依然是JAVA虚拟机运行在Client模式下的默认新生代收集器。| 它也有着优于其他收集器的地方：简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率\nParNew收集器 | 新生代复制算法，老年代采用标记整理算法，ParNew收集器其实就是Serial收集器的多线程版本 | ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百地保证能超越Serial收集器。当然，随着可以使用的CPU的数量的增加，它对于GC时系统资源的利用还是很有好处的。它默认开启的收集线程数与CPU的数量相同，在CPU非常多，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。\nParallelScavenge收集器 | 新生代收集器采用复制算法 | Parallel Scavenge 收集 器 的 特点 是它 的 关注 点 与其 他 收集 器 不同， CMS 等 收集 器 的 关注 点 尽可能 地 缩短 垃圾 收集 时 用户 线程 的 停顿 时间， 而 Parallel Scavenge 收集 器 的 目标 则是 达到 一个 可 控制 的 吞吐量（ Throughput）。\n Serial Old 收集 器 |  Serial Old 是 Serial 收集 器 的 老年 代 版本 标记-整理算法 |这个 收集 器 的 主要 意义 也是 被 Client 模式 下 的 虚拟 机 使用\n Parallel Old 收集 器 |  Parallel Scavenge 收集 器 的 老年 代 版本 标记-整理算法  |注重 吞吐量 及 CPU 资源 敏感 的 场合， 都可以 优先 考虑 Parallel Scavenge 加 Parallel Old 收集 器。\nCMS收集器 | CMS（ConcurrentMarkSweep）针对老年代进行回收的GC，标记-清除算法 | 收集器是一种以获取最短回收停顿时间为目标的收集器\nG1收集器 | 内存结构变更，相对于CMS的“标记——清理”算法，G1会使用压缩算法，保证不产生多余的碎片。收集阶段，G1会将某个区域存活的对象拷贝的其他区域，然后将整个区域整个回收。 | 服务类型的收集器，目标是多处理器机器、大内存机器。它高度符合垃圾收集暂停时间的目标，同时实现高吞吐量。Oracle JDK 7 update 4 以及更新发布版完全支持G1垃圾收集器。\n\n并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。\n并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序继续运行，而垃圾收集程序运行于另一个CPU上。\n如果说收集算法是内存回收的方法论，垃圾收集器就是内存回收的具体实现。Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大的差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。这里讨论的收集器基于SunHotSpot虚拟机1.6版Update22，这个虚拟机包含的所有收集器如图所示。\n\n![这里写图片描述](http://img.blog.csdn.net/20170728221643962?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nHotSpotJVM1.6的垃圾收集器展示了7种作用于不同分代的收集器（包括JDK1.6_Update14后引入的EarlyAccess版G1收集器），如果两个收集器之间存在连线，就说明它们可以搭配使用。在介绍这些收集器各自的特性之前，我们先来明确一个观点：虽然我们是在对各个收集器进行比较，但并非为了挑选一个最好的收集器出来。因为直到现在为止还没有最好的收集器出现，更加没有万能的收集器，所以我们选择的只是对具体应用最合适的收集器。这点不需要多加解释就能证明：如果有一种放之四海皆准、任何场景下都适用的完美收集器存在，那HotSpot虚拟机就没必要实现那么多不同的收集器了。\n####3.2.1 Serial收集器\n         Serial收集器是最基本、发展历史最悠久的收集器，曾经（在JDK 1.3.1之前）是虚拟机新生代收集的唯一选择。大家看名字就会知道，这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。“Stop The World”这个名字也许听起来很酷，但这项工作实际上是由虚拟机在后台自动发起和自动完成的，在用户不可见的情况下把用户正常工作的线程全部停掉，这对很多应用来说都是难以接受的。读者不妨试想一下，要是你的计算机每运行一个小时就会暂停响应5分钟，你会有什么样的心情？Serial / Serial Old收集器的运行过程如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20170728221849904?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从 JDK 1.3 开始，一直到现在最新的 JDK 1.7，HotSpot 虚拟机开发团队为消除或者减少工作线程因内存回收而导致停顿的努力一直在进行着，从 Serial 收集器到 Parallel 收集器，再到 Concurrent Mark Sweep（CMS）乃至 GC 收集器的最前沿成果 Garbage First（G1）收集器，我们看到了一个个越来越优秀（也越来越复杂）的收集器的出现，用户线程的停顿时间在不断缩短，但是仍然没有办法完全消除（这里暂不包括 RTSJ 中的收集器）。寻找更优秀的垃圾收集器的工作仍在继续！\n\n写到这里，笔者似乎已经把 Serial 收集器描述成一个“老而无用、食之无味弃之可惜”的鸡肋了，但实际上到现在为止，它依然是虚拟机运行在 Client 模式下的默认新生代收集器。它也有着优于其他收集器的地方：简单而高效（与其他收集器的单线程比），对于限定单个 CPU 的环境来说，Serial 收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。在用户的桌面应用场景中，分配给虚拟机管理的内存一般来说不会很大，收集几十兆甚至一两百兆的新生代（仅仅是新生代使用的内存，桌面应用基本上不会再大了），停顿时间完全可以控制在几十毫秒最多一百多毫秒以内，只要不是频繁发生，这点停顿是可以接受的。所以，Serial 收集器对于运行在 Client 模式下的虚拟机来说是一个很好的选择。\n\n#### 3.2.2 ParNew收集器\nParNew收集器其实就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数（例如：-XX:SurvivorRatio、 -XX:PretenureSizeThreshold、-XX:HandlePromotionFailure等）、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，实现上这两种收集器也共用了相当多的代码。ParNew收集器的工作过程如下\n\n![这里写图片描述](http://img.blog.csdn.net/20170728221941057?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nParNew收集器除了多线程收集之外，其他与Serial收集器相比并没有太多创新之处，但它却是许多运行在Server模式下的虚拟机中首选的新生代收集器，其中有一个与性能无关但很重要的原因是，除了Serial收集器外，目前只有它能与CMS收集器配合工作。在JDK 1.5时期，HotSpot推出了一款在强交互应用中几乎可称为有划时代意义的垃圾收集器—CMS收集器（Concurrent Mark Sweep，本节稍后将详细介绍这款收集器），这款收集器是HotSpot虚拟机中第一款真正意义上的并发（Concurrent）收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作，用前面那个例子的话来说，就是做到了在你妈妈打扫房间的时候你还能同时往地上扔纸屑。\n\n不幸的是，它作为老年代的收集器，却无法与 JDK 1.4.0 中已经存在的新生代收集器 Parallel Scavenge 配合工作，所以在 JDK 1.5 中使用 CMS 来收集老年代的时候，新生代只能选择 ParNew 或 Serial 收集器中的一个。ParNew 收集器也是使用 -XX: +UseConcMarkSweepGC 选项后的默认新生代收集器，也可以使用 -XX:+UseParNewGC 选项来强制指定它。\n\nParNew 收集器在单 CPU 的环境中绝对不会有比 Serial 收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个 CPU 的环境中都不能百分之百地保证能超越 Serial 收集器。当然，随着可以使用的 CPU 的数量的增加，它对于 GC 时系统资源的利用还是很有好处的。它默认开启的收集线程数与 CPU 的数量相同，在 CPU 非常多（譬如 32 个，现在 CPU 动辄就 4 核加超线程，服务器超过 32 个逻辑 CPU 的情况越来越多了）的环境下，可以使用-XX:ParallelGCThreads 参数来限制垃圾收集的线程数。\n\n注意 从 ParNew 收集器开始，后面还将会接触到几款并发和并行的收集器。在大家可能产生疑惑之前，有必要先解释两个名词：并发和并行。这两个名词都是并发编程中的概念，在谈论垃圾收集器的上下文语境中，他们可以解释为： 并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。 并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序继续运行，而垃圾收集程序运行于另一个 CPU 上。\n\n#### 3.2.3 ParallelScavenge收集器\nParallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器……看上去和ParNew都一样，那它有什么特别之处呢？\n\nParallel Scavenge 收集器的特点是它的关注点与其他收集器不同，CMS 等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而 Parallel Scavenge 收集器的目标则是达到一个可控制的吞吐量（Throughput）。所谓吞吐量就是 CPU 用于运行用户代码的时间与 CPU 总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间），虚拟机总共运行了 100 分钟，其中垃圾收集花掉 1 分钟，那吞吐量就是 99%。\n\n停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。\n\nParallel Scavenge 收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间的-XX:MaxGCPauseMillis 参数以及直接设置吞吐量大小的-XX:GCTimeRatio 参数。\n\nMaxGCPauseMillis 参数允许的值是一个大于 0 的毫秒数，收集器将尽可能地保证内存回收花费的时间不超过设定值。不过大家不要认为如果把这个参数的值设置得稍小一点就能使得系统的垃圾收集速度变得更快，GC 停顿时间缩短是以牺牲吞吐量和新生代空间来换取的：系统把新生代调小一些，收集 300MB 新生代肯定比收集 500MB 快吧，这也直接导致垃圾收集发生得更频繁一些，原来 10 秒收集一次、每次停顿 100 毫秒，现在变成 5 秒收集一次、每次停顿 70 毫秒。停顿时间的确在下降，但吞吐量也降下来了。\n\nGCTimeRatio 参数的值应当是一个大于 0 且小于 100 的整数，也就是垃圾收集时间占总时间的比率，相当于是吞吐量的倒数。如果把此参数设置为 19，那允许的最大 GC 时间就占总时间的 5%（即 1 /（1+19）），默认值为 99，就是允许最大 1%（即 1 /（1+99））的垃圾收集时间。\n\n由于与吞吐量关系密切，Parallel Scavenge 收集器也经常称为“吞吐量优先”收集器。除上述两个参数之外，Parallel Scavenge 收集器还有一个参数-XX:+UseAdaptiveSizePolicy 值得关注。这是一个开关参数，当这个参数打开之后，就不需要手工指定新生代的大小（-Xmn）、Eden 与 Survivor 区的比例（-XX:SurvivorRatio）、晋升老年代对象年龄（-XX:PretenureSizeThreshold）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为 GC 自适应的调节策略（GC Ergonomics）。如果读者对于收集器运作原来不太了解，手工优化存在困难的时候，使用 Parallel Scavenge 收集器配合自适应调节策略，把内存管理的调优任务交给虚拟机去完成将是一个不错的选择。只需要把基本的内存数据设置好（如-Xmx 设置最大堆），然后使用 MaxGCPauseMillis 参数（更关注最大停顿时间）或 GCTimeRatio（更关注吞吐量）参数给虚拟机设立一个优化目标，那具体细节参数的调节工作就由虚拟机完成了。自适应调节策略也是 Parallel Scavenge 收集器与 ParNew 收集器的一个重要区别。\n\n####3.2.4 Serial Old 收集 器 \n   Serial Old 是 Serial 收集 器 的 老年 代 版本， 它 同样是 一个 单线 程 收集 器， 使用“ 标记- 整理” 算法。 这个 收集 器 的 主要 意义 也是 被 Client 模式 下 的 虚拟 机 使用。 如果 在 Server 模式 下， 它 主要 还有 两大 用途： 一个 是在 JDK 1. 5 及 之前 的 版本 中 与 Parallel Scavenge 收集 器 搭配 使用[ 4]， 另外 一个 就是 作为 CMS 收集 器 的 后备 预 案， 在 并发 收集 发生 Concurrent Mode Failure 的 时候 使用。 这 两点 都将 在后 面的 内容 中 详细 讲解。 Serial Old 收集 器 的 工作 过程 如图 所示。\n\n![这里写图片描述](http://img.blog.csdn.net/20170729114927185?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n   \n####3.2.5 Parallel Old 收集 器\n  Parallel Old 是 Parallel Scavenge 收集 器 的 老年 代 版本， 使用 多 线程 和“ 标记－整理” 算法。 这个 收集 器 是在 JDK 1. 6 中 才 开始 提供 的， 在此之前， 新生代 的 Parallel Scavenge 收集 器 一直 处于 比较 尴尬 的 状态。 原因 是， 如果 新生代 选择 了 Parallel Scavenge 收集 器， 老年 代 除了 Serial Old（ PS MarkSweep） 收集 器 外 别无选择（ 还 记得 上面 说过 Parallel Scavenge 收集 器 无法 与 CMS 收集 器 配合 工作 吗？）。 由于 单 线程 的 老 年代 Serial Old 收集 器 在 服务 端 应用 性 能上 的“ 拖累”， 即便 使用 了 Parallel Scavenge 收集 器 也 未必 能在 整体 应用 上 获得 吞吐量 最大化 的 效果， 又因 为 老年 代收 集中 无法 充分 利用 服务器 多 CPU 的 处理 能力， 在 老年 代 很大 而且 硬件 比较 高级的 环境 中， 这种 组合 的 吞吐量 甚至 还不 一 定有 ParNew 加 CMS 的 组合“ 给 力”。 直到 Parallel Old 收集 器 出现 后，“ 吞吐量 优先” 收集 器 终于 有了 比较 名副其实 的 应用 组合， 在 注重 吞吐量 及 CPU 资源 敏感 的 场合， 都可以 优先 考虑 Parallel Scavenge 加 Parallel Old 收集 器。 Parallel Old 收集 器 的 工作 过程 如图所示。\n ![这里写图片描述](http://img.blog.csdn.net/20170728222929126?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n#### 3.2.6 CMS收集器\nCMS（ConcurrentMarkSweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。从名字（包含“MarkSweep”）上就可以看出CMS收集器是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分如下步骤，\n包括：\n\n 阶段\t|说明\n ----- | -----\n(1) 初始标记 (Initial Mark) |\t(Stop the World Event,所有应用线程暂停) 在老年代(old generation)中的对象, 如果从年轻代(young generation)中能访问到, 则被 “标记,marked” 为可达的(reachable).对象在旧一代“标志”可以包括这些对象可能可以从年轻一代。暂停时间一般持续时间较短,相对小的收集暂停时间.\n(2) 并发标记 (Concurrent Marking) |\t在Java应用程序线程运行的同时遍历老年代(tenured generation)的可达对象图。扫描从被标记的对象开始,直到遍历完从root可达的所有对象. 调整器(mutators)在并发阶段的2、3、5阶段执行,在这些阶段中新分配的所有对象(包括被提升的对象)都立刻标记为存活状态.\n(3) 再次标记(Remark)\t| (Stop the World Event, 所有应用线程暂停) 查找在并发标记阶段漏过的对象，这些对象是在并发收集器完成对象跟踪之后由应用线程更新的.\n(4) 并发清理(Concurrent Sweep) |\t回收在标记阶段(marking phases)确定为不可及的对象. 死对象的回收将此对象占用的空间增加到一个空闲列表(free list),供以后的分配使用。死对象的合并可能在此时发生. 请注意,存活的对象并没有被移动.\n(5) 重置(Resetting)| \t清理数据结构,为下一个并发收集做准备.\n其中初始标记、重新标记这两个步骤仍然需要“StopTheWorld”。初始标记仅仅只是标记一下GCRoots能直接关联到的对象，速度很快，并发标记阶段就是进行GCRootsTracing的过程，而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行的。ConcurrentMarkSweep收集器运行示意图：\n\n![这里写图片描述](http://img.blog.csdn.net/20170728222952502?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nCMS是一款优秀的收集器，它的最主要优点在名字上已经体现出来了：并发收集、低停顿，Sun的一些官方文档里面也称之为并发低停顿收集器（ConcurrentLowPauseCollector）。但是CMS还远达不到完美的程度，它有以下三个显著的缺点：\n* CMS收集器对CPU资源非常敏感。其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。CMS默认启动的回收线程数是（CPU数量+3）/4，也就是当CPU在4个以上时，并发回收时垃圾收集线程最多占用不超过25%的CPU资源。但是当CPU不足4个时（譬如2个），那么CMS对用户程序的影响就可能变得很大，如果CPU负载本来就比较大的时候，还分出一半的运算能力去执行收集器线程，就可能导致用户程序的执行速度忽然降低了50%，这也很让人受不了。为了解决这种情况，虚拟机提供了一种称为“增量式并发收集器”（IncrementalConcurrentMarkSweep/i-CMS）的CMS收集器变种，所做的事情和单CPU年代PC机操作系统使用抢占式来模拟多任务机制的思想一样，就是在并发标记和并发清理的时候让GC线程、用户线程交替运行，尽量减少GC线程的独占资源的时间，这样整个垃圾收集的过程会更长，但对用户程序的影响就会显得少一些，速度下降也就没有那么明显，但是目前版本中，i-CMS已经被声明为“deprecated”，即不再提倡用户使用。\n* CMS收集器无法处理浮动垃圾（FloatingGarbage），可能出现“ConcurrentModeFailure”失败而导致另一次FullGC的产生。由于CMS并发清理阶段用户线程还在运行着，伴随程序的运行自然还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在本次收集中处理掉它们，只好留待下一次GC时再将其清理掉。这一部分垃圾就称为“浮动垃圾”。也是由于在垃圾收集阶段用户线程还需要运行，即还需要预留足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。在默认设置下，CMS收集器在老年代使用了68%的空间后就会被激活，这是一个偏保守的设置，如果在应用中老年代增长不是太快，可以适当调高参数-XX：CMSInitiatingOccupancyFraction的值来提高触发百分比，以便降低内存回收次数以获取更好的性能。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“ConcurrentModeFailure”失败，这时候虚拟机将启动后备预案：临时启用SerialOld收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。所以说参数-XX：CMSInitiatingOccupancyFraction设置得太高将会很容易导致大量“ConcurrentModeFailure”失败，性能反而降低。\n* 还有最后一个缺点，在本节在开头说过，CMS是一款基于“标记-清除”算法实现的收集器，如果读者对前面这种算法介绍还有印象的话，就可能想到这意味着收集结束时会产生大量空间碎片。空间碎片过多时，将会给大对象分配带来很大的麻烦，往往会出现老年代还有很大的空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次FullGC。为了解决这个问题，CMS收集器提供了一个-XX：+UseCMSCompactAtFullCollection开关参数，用于在“享受”完FullGC服务之后额外免费附送一个碎片整理过程，内存整理的过程是无法并发的。空间碎片问题没有了，但停顿时间不得不变长了。虚拟机设计者们还提供了另外一个参数-XX：CMSFullGCsBeforeCompaction，这个参数用于设置在执行多少次不压缩的FullGC后，跟着来一次带压缩的。\n后续分开介绍：\n\n#### 3.2.7.G1收集器G1（GarbageFirst）收集器\n\nG1 GC 是 Jdk7 的新特性之一、Jdk7+版本都可以自主配置 G1 作为 JVM GC 选项；作为 JVM GC 算法的一次重大升级、DK7u 后 G1 已相对稳定、且未来计划替代 CMS、所以有必要深入了解下：\n\n不同于其他的分代回收算法、G1 将堆空间划分成了互相独立的区块。每块区域既有可能属于 O 区、也有可能是 Y 区，且每类区域空间可以是不连续的（对比 CMS 的 O 区和 Y 区都必须是连续的）。这种将 O 区划分成多块的理念源于：当并发后台线程寻找可回收的对象时、有些区块包含可回收的对象要比其他区块多很多。虽然在清理这些区块时 G1 仍然需要暂停应用线程、但可以用相对较少的时间优先回收包含垃圾最多区块。如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20170729121950668?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n这也是为什么G1命名为Garbage First的原因：第一时间处理垃圾最多的区块。\n平时工作中大多数系统都使用CMS、即使静默升级到JDK7默认仍然采用CMS、那么G1相对于CMS的区别在：\n\nG1 在压缩空间方面有优势\nG1 通过将内存空间分成区域（Region）的方式避免内存碎片问题\nEden, Survivor, Old 区不再固定、在内存使用效率上来说更灵活\nG1 可以通过设置预期停顿时间（Pause Time）来控制垃圾收集时间避免应用雪崩现象\nG1 在回收内存后会马上同时做合并空闲内存的工作、而 CMS 默认是在 STW（stop the world）的时候做\nG1 会在 Young GC 中使用、而 CMS 只能在 O 区使用\n就目前而言、CMS 还是默认首选的 GC 策略、可能在以下场景下 G1 更适合：\n\n服务端多核 CPU、JVM 内存占用较大的应用（至少大于 4G）\n应用在运行过程中会产生大量内存碎片、需要经常压缩空间\n想要更可控、可预期的 GC 停顿周期；防止高并发下应用雪崩现象\n一次完整 G1GC 的详细过程：\n\nG1 在运行过程中主要包含如下 4 种操作方式：\n\nYGC（不同于 CMS）\n并发阶段\n混合模式\nfull GC （一般是 G1 出现问题时发生）\nYGC：\n\n下面是一次 YGC 前后内存区域是示意图：\n\n![这里写图片描述](http://img.blog.csdn.net/20170729120730189?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n图中每个小区块都代表 G1 的一个区域（Region），区块里面的字母代表不同的分代内存空间类型（如[E]Eden,[O]Old,[S]Survivor）空白的区块不属于任何一个分区；G1 可以在需要的时候任意指定这个区域属于 Eden 或是 O 区之类的。\nG1 YoungGC 在 Eden 充满时触发，在回收之后所有之前属于 Eden 的区块全变成空白。然后至少有一个区块是属于 S 区的（如图半满的那个区域），同时可能有一些数据移到了 O 区。\n\n目前淘系的应用大都使用 PrintGCDetails 参数打出 GC 日志、这个参数对 G1 同样有效、但日志内容颇为不同；下面是一个 Young GC 的例子：\n```\n23.430: [GC pause (young), 0.23094400 secs]\n...\n[Eden: 1286M(1286M)->0B(1212M)\nSurvivors: 78M->152M Heap: 1454M(4096M)->242M(4096M)][times: user=0.85 sys=0.05, real=0.23 secs]\n```\n\n上面日志的内容解析：Young GC 实际占用 230 毫秒、其中 GC 线程占用 850 毫秒的 CPU 时间\nE：内存占用从 1286MB 变成 0、都被移出\nS：从 78M 增长到了 152M、说明从 Eden 移过来 74M\nHeap:占用从 1454 变成 242M、说明这次 Young GC 一共释放了 1212M 内存空间\n很多情况下，S 区的对象会有部分晋升到 Old 区，另外如果 S 区已满、Eden 存活的对象会直接晋升到 Old 区，这种情况下 Old 的空间就会涨\n\n并发阶段：\n\n一个并发 G1 回收周期前后内存占用情况如下图所示：\n\n![这里写图片描述](http://img.blog.csdn.net/20170729120816584?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上面的图表可以看出以下几点：\n1、Young区发生了变化、这意味着在G1并发阶段内至少发生了一次YGC（这点和CMS就有区别），Eden在标记之前已经被完全清空，因为在并发阶段应用线程同时在工作、所以可以看到Eden又有新的占用\n2、一些区域被X标记，这些区域属于O区，此时仍然有数据存放、不同之处在G1已标记出这些区域包含的垃圾最多、也就是回收收益最高的区域\n3、在并发阶段完成之后实际上O区的容量变得更大了（O+X的方块）。这时因为这个过程中发生了YGC有新的对象进入所致。此外，这个阶段在O区没有回收任何对象：它的作用主要是标记出垃圾最多的区块出来。对象实际上是在后面的阶段真正开始被回收\n\nG1 并发标记周期可以分成几个阶段、其中有些需要暂停应用线程。第一个阶段是初始标记阶段。这个阶段会暂停所有应用线程-部分原因是这个过程会执行一次 YGC、下面是一个日志示例：\n\n> 50.541: [GC pause (young) (initial-mark), 0.27767100 secs][eden: 1220m(1220m)->0b(1220m) survivors: 144m->144m heap: 3242m(4096m)->2093m(4096m)] [Times: user=1.02 sys=0.04, real=0.28\n>\n> > secs]\n\n上面的日志表明发生了 YGC、应用线程为此暂停了 280 毫秒，Eden 区被清空（71MB 从 Young 区移到了 O 区）。\n日志里面 initial-mark 的字样表明后台的并发 GC 阶段开始了。因为初始标记阶段本身也是要暂停应用线程的，\nG1 正好在 YGC 的过程中把这个事情也一起干了。为此带来的额外开销不是很大、增加了 20%的 CPU，暂停时间相应的略微变长了些。\n\n接下来，G1 开始扫描根区域、日志示例：\n\n```\n50.819: [GC concurrent-root-region-scan-start]\n51.408: [GC concurrent-root-region-scan-end, 0.5890230]\n```\n\n一共花了 580 毫秒，这个过程没有暂停应用线程；是后台线程并行处理的。这个阶段不能被 YGC 所打断、因此后台线程有足够的 CPU 时间很关键。如果 Young 区空间恰好在 Root 扫描的时候\n满了、YGC 必须等待 root 扫描之后才能进行。带来的影响是 YGC 暂停时间会相应的增加。这时的 GC 日志是这样的：\n\n```\n> 350.994: [GC pause (young)\n> 351.093: [GC concurrent-root-region-scan-end, 0.6100090]\n> 351.093: [GC concurrent-mark-start],0.37559600 secs]\n```\n\nGC 暂停这里可以看出在 root 扫描结束之前就发生了，表明 YGC 发生了等待，等待时间大概是 100 毫秒。\n在 root 扫描完成后，G1 进入了一个并发标记阶段。这个阶段也是完全后台进行的；GC 日志里面下面的信息代表这个阶段的开始和结束：\n\n```\n111.382: [GC concurrent-mark-start] ....\n120.905: [GC concurrent-mark-end, 9.5225160 sec]\n```\n\n并发标记阶段是可以被打断的，比如这个过程中发生了 YGC 就会。这个阶段之后会有一个二次标记阶段和清理阶段：\n\n```\n> 120.910: [GC remark 120.959: [GC ref-PRC, 0.0000890 secs], 0.0718990 secs][times: user=0.23 sys=0.01, real=0.08 secs]\n> 120.985: [GC cleanup 3510M->3434M(4096M), 0.0111040 secs][times: user=0.04 sys=0.00, real=0.01 secs]\n```\n\n这两个阶段同样会暂停应用线程，但时间很短。接下来还有额外的一次并发清理阶段：\n```\n120.996: [GC concurrent-cleanup-start]\n120.996: [GC concurrent-cleanup-end, 0.0004520]\n```\n到此为止，正常的一个 G1 周期已完成–这个周期主要做的是发现哪些区域包含可回收的垃圾最多（标记为 X），实际空间释放较少。\n\n混合 GC：\n\n接下来 G1 执行一系列的混合 GC。这个时期因为会同时进行 YGC 和清理上面已标记为 X 的区域，所以称之为混合阶段，下面是一个混合 GC 执行的前后示意图：\n\n![这里写图片描述](http://img.blog.csdn.net/20170729120910552?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n像普通的YGC那样、G1完全清空掉Eden同时调整survivor区。另外，两个标记也被回收了，他们有个共同的特点是包含最多可回收的对象，因此这两个区域绝对部分空间都被释放了。这两个区域任何存活的对象都被移到了其他区域（和YGC存活对象晋升到O区类似）。这就是为什么G1的堆比CMS内存碎片要少很多的原因–移动这些对象的同时也就是在压缩对内存。下面是一个混合GC的日志：\n\n> 79.826: [GC pause (mixed), 0.26161600 secs] .... [Eden: 1222M(1222M)->0B(1220M) Survivors: 142M->144M Heap:\n> 3200M(4096M)->1964M(4096M)][times: user=1.01 sys=0.00, real=0.26 secs]\n> 上面的日志可以注意到 Eden 释放了 1222MB、但整个堆的空间释放内存要大于这个数目。数量相差看起来比较少、只有 16MB，但是要考虑同时有 survivor 区的对象晋升到 O 区；另外，每次混合 GC 只是清理一部分的 O 区内存，整个 GC 会一直持续到几乎所有的标记区域垃圾对象都被回收，这个阶段完了之后 G1 会重新回到正常的 YGC 阶段。周期性的，当 O 区内存占用达到一定数量之后 G1 又会开启一次新的并行 GC 阶段.\n> 后续分开介绍：。。\n\n## 参考\n深入理解 java 虚拟机\nhttp://ifeve.com/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/\n","source":"_posts/language/jvm/JVM垃圾回收.md","raw":"---\ntitle: JVM垃圾回收\ncategories:\n- java\ntag:\n- JVM\n---\n\n# JVM垃圾回收\n\n## 1.简介\n jvm要进行垃圾回收粗略分为两个步骤：找出需要清理的内存(无效的内存区域) ， 清理无效的内存区域\n 程序计数器、虚拟机栈、本地方法栈三个区域随线程而生，随线程而灭；栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作。每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的（尽管在运行期会由JIT编译器进行一些优化，但在本章基于概念模型的讨论中，大体上可以认为是编译期可知的），因此这几个区域的内存分配和回收都具备确定性，在这几个区域内不需要过多考虑回收的问题，因为方法结束或线程结束时，内存自然就跟随着回收了。而Java堆和方法区则不一样，一个接口中的多个实现类需要的内存可能不一样，一个方法中的多个分支需要的内存也可能不一样，我们只有在程序处于运行期间时才能知道会创建哪些对象，这部分内存的分配和回收都是动态的，垃圾回收所关注的是这部分内存。\n\n## 2. 无效内存区域的查找\n\n### 2.1 概要　\n\nJava堆中几乎存放着Java世界中所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象有哪些还“存活”着，哪些已经“死去”。判断方法有引用计数器法和根搜索算法等。\n\n#### 2.1.1 引用计数算法\n\n简单解释为给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当该引用失效时，计数器值就减1；任何时刻计数器都为0的对象就是不可能再被使用的。客观地说，引用计数算法（ReferenceCounting）的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，也有一些比较著名的应用案例，例如微软的COM（ComponentObjectModel）技术、使用ActionScript3的FlashPlayer、Python语言以及在游戏脚本领域中被广泛应用的Squirrel中都使用了引用计数算法进行内存管理。但Java语言中没有选用引用计数算法来管理内存，其中最主要的原因是它很难解决对象之间的相互循环引用的问题。如下：\n```java\n/**\n *testGC()方法执行后，objA和objB会不会被GC呢？\n *@authorzzm\n */\npublic class ReferenceCountingGC{　　\n\tpublic Object instance=null;　　 \n\tprivate static final int _1MB=1024*1024;　　\n\t/**　　\n\t*这个成员属性的唯一意义就是占点内存，以便能在GC日志中看清楚是否被回收过　　\n\t*/　　\n\tprivate byte[] bigSize=new byte[2*_1MB];　　\n\tpublic static void testGC(){\n\tReferenceCountingGC objA = new ReferenceCountingGC();\n\tReferenceCountingGC objB = newReferenceCountingGC();\n\tobjA.instance = objB;\n\tobjB.instance = objA;\n\tobjA = null; \n\tobjB = null;\n\t//假设在这行发生GC，那么objA和objB是否能被回收？\n\tSystem.gc();　　\n\t}\n}\n运行结果：\n```\n```\n[FullGC(System)\n[Tenured:0K->210K(10240K),0.0149142secs]\n4603K->210K(19456K),\n[Perm:2999K->2999K(21248K)],0.0150007secs][Times:user=0.01sys=0.00,real=0.02secs]\nHeapdefnewgenerationtotal9216K,used82K\n[0x00000000055e0000,0x0000000005fe0000,0x0000000005fe0000)Edenspace8192K,1%used[0x00000000055e0000,0x00000000055f4850,0x0000000005de0000)\nfromspace1024K,0%used[0x0000000005de0000,0x0000000005de0000,0x0000000005ee0000)\ntospace1024K,0%used[0x0000000005ee0000,0x0000000005ee0000,0x0000000005fe0000)\ntenuredgenerationtotal10240K,used210K[0x0000000005fe0000,0x00000000069e0000,0x00000000069e0000)\nthespace10240K,2%used[0x0000000005fe0000,0x0000000006014a18,0x0000000006014c00,0x00000000069e0000)\ncompactingpermgentotal21248K,\nused3016K[0x00000000069e0000,0x0000000007ea0000,0x000000000bde0000)\nthespace21248K,14%used[0x00000000069e0000,0x0000000006cd2398,0x0000000006cd2400,0x0000000007ea0000)\nNosharedspacesconfigured.\n```\n\n代码中testGC()方法：对象objA和objB都有字段instance，赋值令objA.instance=objB及objB.instance=objA，除此之外，这两个对象再无任何引用，实际上这两个对象已经不可能再被访问，但是它们因为互相引用着对方，导致它们的引用计数都不为0，于是引用计数算法无法通知GC收集器回收它们，为引用计数器的缺陷。但从运行结果中可以清楚地看到GC日志中包含“4603K->210K”，意味着虚拟机并没有因为这两个对象互相引用就不回收它们，这也从侧面说明虚拟机并不是通过引用计数算法来判断对象是否存活的。\n\n#### 2.1.2 根搜索算法\n\n在主流的商用程序语言中（Java和C#，甚至包括前面提到的古老的Lisp），都是使用根搜索算法（GCRootsTracing）判定对象是否存活的。这个算法的基本思路就是通过一系列的名为“GCRoots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（ReferenceChain），当一个对象到GCRoots没有任何引用链相连（用图论的话来说就是从GCRoots到这个对象不可达）时，则证明此对象是不可用的。如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20170728135643324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n对象object5、object6、object7虽然互相有关联，但是它们到GCRoots是不可达的，所以它们将会被判定为是可回收的对象。\n在Java语言里，可作为GCRoots的对象包括下面几种：\n* 虚拟机栈（栈帧中的本地变量表）中的引用的对象。\n* 方法区中的类静态属性引用的对象。\n* 方法区中的常量引用的对象。\n* 本地方法栈中JNI（即一般说的Native方法）的引用的对象。\n\n### 2.2 java的引用类型\n\n无论是通过引用计数算法判断对象的引用数量，还是通过根搜索算法判断对象的引用链是否可达，判定对象是否存活都与“引用”有关。在JDK1.2之前，Java中的引用的定义很传统：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。这种定义很纯粹，但是太过狭隘，一个对象在这种定义下只有被引用或者没有被引用两种状态，对于如何描述一些“食之无味，弃之可惜”的对象就显得无能为力。我们希望能描述这样一类对象：当内存空间还足够时，则能保留在内存之中；如果内存在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。很多系统的缓存功能都符合这样的应用场景。\nJDK1.2之后，Java对引用的概念进行了扩充，并且引用强度不同。如下\n\n引用类型 | 概述\n------|--------\n强引用（StrongReference）|强引用就是指在程序代码之中普遍存在的，类似“Objectobj=newObject()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象\n软引用（SoftReference）|软引用用来描述一些还有用，但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中并进行第二次回收。如果这次回收还是没有足够的内存，才会抛出内存溢出异常。在JDK1.2之后，提供了SoftReference类来实现软引用\n弱引用（WeakReference）|弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2之后，提供了WeakReference类来实现弱引用\n虚引用（PhantomReference）|虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是希望能在这个对象被收集器回收时收到一个系统通知。在JDK1.2之后，提供了PhantomReference类来实现虚引用\n\n### 2.3 对象自救\n在根搜索算法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经经历两次标记过程：如果对象在进行根搜索后发现没有与GCRoots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。如果这个对象被判定为有必要执行finalize()方法，那么这个对象将会被放置在一个名为F-Queue的队列之中，并在稍后由一条由虚拟机自动建立的、低优先级的Finalizer线程去执行。这里所谓的“执行”是指虚拟机会触发这个方法，但并不承诺会等待它运行结束。这样做的原因是，如果一个对象在finalize()方法中执行缓慢，或者发生了死循环（更极端的情况），将很可能会导致F-Queue队列中的其他对象永久处于等待状态，甚至导致整个内存回收系统崩溃。finalize()方法是对象逃脱死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（this关键字）赋值给某个类变量或对象的成员变量，那在第二次标记时它将被移除出“即将回收”的集合；如果对象这时候还没有逃脱，那它就真的离死不远了。\n```java\n/***此代码演示了两点：\n *1.对象可以在被GC时自我拯救。\n *2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次\n *@authorzzm\n * */\npublic class FinalizeEscapeGC {\n    public static FinalizeEscapeGC SAVE_HOOK = null;\n    public static void main(String[] args) throws Throwable {\n        SAVE_HOOK = new FinalizeEscapeGC(); //对象 第一次 成功 拯救 自己\n        SAVE_HOOK = null;\n        System.gc(); // 因为 Finalizer 方法 优先级 很低， 暂停 0. 5 秒， 以 等待 它\n        Thread.sleep(500);\n        if (SAVE_HOOK != null) {\n            SAVE_HOOK.isAlive();\n        } else {\n            System.out.println(\" no, i am dead :(\");\n        } // 下面 这段 代码 与 上面 的 完全 相同， 但是 这次 自救 却 失败 了\n        SAVE_HOOK = null;\n        System.gc(); // 因为 Finalizer 方法 优先级 很低， 暂停 0. 5 秒， 以 等待 它\n        Thread.sleep(500);\n        if (SAVE_HOOK != null) {\n            SAVE_HOOK.isAlive();\n        } else {\n            System.out.println(\" no, i am dead :(\");\n        }\n    }\n    public void isAlive() {\n        System.out.println(\" yes, i am still alive :)\");\n    }\n    @Override\n    protected void finalize() throws Throwable {\n        super.finalize();\n        System.out.println(\" finalize mehtod executed!\");\n        FinalizeEscapeGC.SAVE_HOOK = this;\n    }\n}\n```\n```\n运行结果：\nfinalize mehtod executed! \nyes, i am still alive :) \nno, i am dead :(\n```\n\n从代码中我们可以看到一个对象的finalize()被执行，但是它仍然可以存活。代码中一次对象自我拯救的演示，在运行结果可以看到，SAVE_HOOK对象的finalize()方法确实被GC收集器触发过，并且在被收集前成功逃脱了。另外一个值得注意的地方就是，代码中有两段完全一样的代码片段，执行结果却是一次逃脱成功，一次失败，这是因为任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临下一次回收，它的finalize()方法不会被再次执行，因此第二段代码的自救行动失败了。需要特别说明的是，上面关于对象死亡时finalize()方法的描述可能带有悲情的艺术色彩，笔者并不鼓励大家使用这种方法来拯救对象。相反，笔者建议大家尽量避免使用它，因为它不是C/C++中的析构函数，而是Java刚诞生时为了使C/C++程序员更容易接受它所做出的一个妥协。它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序。有些教材中提到它适合做“关闭外部资源”之类的工作，这完全是对这种方法的用途的一种自我安慰。finalize()能做的所有工作，使用try-finally或其他方式都可以做得更好、更及时，大家完全可以忘掉Java语言中还有这个方法的存在。\n### 2.4 回收方法区\n\n很多人认为方法区（或者HotSpot虚拟机中的永久代）是没有垃圾收集的，Java虚拟机规范中确实说过可以不要求虚拟机在方法区实现垃圾收集，而且在方法区进行垃圾收集的“性价比”一般比较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%~95%的空间，而永久代的垃圾收集效率远低于此。永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。回收废弃常量与回收Java堆中的对象非常类似。以常量池中字面量的回收为例，假如一个字符串“abc”已经进入了常量池中，但是当前系统没有任何一个String对象是叫做“abc”的，换句话说是没有任何String对象引用常量池中的“abc”常量，也没有其他地方引用了这个字面量，如果在这时候发生内存回收，而且必要的话，这个“abc”常量就会被系统“请”出常量池。常量池中的其他类（接口）、方法、字段的符号引用也与此类似。判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。\njava中同时满足下面3个条件才能算是“无用的类”：\n\n* 该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。\n* 加载该类的ClassLoader已经被回收。\n* 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。\n\n虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而不是和对象一样，不使用了就必然会回收。\n是否对类进行回收，HotSpot虚拟机提供了-Xnoclassgc参数进行控制。可以使用-verbose：class及-XX：+TraceClassLoading、-XX：+TraceClassUnLoading查看类的加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，但-XX：+TraceClassLoading参数需要fastdebug版的虚拟机支持。在大量使用反射、动态代理、CGLib等bytecode框架的场景，以及动态生成JSP和OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。\n\n## 3. 清理无效内存\n### 3.1 垃圾收集算法\n\n由于垃圾收集算法的实现涉及大量的程序细节，而且各个平台的虚拟机操作内存的方法又各不相同，因此本节不打算过多地讨论算法的实现，只是介绍几种算法的思想及其发展过程。\n#### 3.1.1 标记-清除算法\n\n最基础的收集算法是“标记-清除”（Mark-Sweep）算法，如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象，它的标记过程其实在前一节讲述对象标记判定时已经基本介绍过了。之所以说它是最基础的收集算法，是因为后续的收集算法都是基于这种思路并对其缺点进行改进而得到的。\n它的主要缺点有两个：\n* 一个是效率问题，标记和清除过程的效率都不高；\n* 一个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n如下图为执行标记清除算法后的内存区域：\n\n![这里写图片描述](http://img.blog.csdn.net/20170729100915368?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n#### 3.1.2 标记-整理算法\n\n标记操作和“标记-清除”算法一致，后续操作不只是直接清理对象，而是在清理无用对象完成后让所有存活的对象都向一端移动，并更新引用其对象的指针。\n主要缺点：在标记-清除的基础上还需进行对象的移动，成本相对较高，好处则是不会产生内存碎片。\n如下图为执行标记清除算法后的内存区域：\n\n![这里写图片描述](http://img.blog.csdn.net/20170729100943066?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n####3.1.3 复制算法\n\n为了解决效率问题，一种称为“复制”（Copying）的收集算法出现了，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对其中的一块进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为原来的一半，未免太高了一点。\n复制算法执行后的内存区域：\n\n![这里写图片描述](http://img.blog.csdn.net/20170729101006020?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n#### 3.1.4 分代收集算法 \n分代收集算法当前商业虚拟机的垃圾收集都采用“分代收集”（GenerationalCollection）算法，这种算法并没有什么新的思想，只是根据对象的存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。\n\n### 3.2 垃圾收集器\n垃圾收集器对比\n\n垃圾收集器 | 解释 | 对比\n-----|-----|-----\nSerial收集器| 新生代复制算法，老年代采用标记整理算法，Serial收集器到JDK1.7为止，它依然是JAVA虚拟机运行在Client模式下的默认新生代收集器。| 它也有着优于其他收集器的地方：简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率\nParNew收集器 | 新生代复制算法，老年代采用标记整理算法，ParNew收集器其实就是Serial收集器的多线程版本 | ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百地保证能超越Serial收集器。当然，随着可以使用的CPU的数量的增加，它对于GC时系统资源的利用还是很有好处的。它默认开启的收集线程数与CPU的数量相同，在CPU非常多，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。\nParallelScavenge收集器 | 新生代收集器采用复制算法 | Parallel Scavenge 收集 器 的 特点 是它 的 关注 点 与其 他 收集 器 不同， CMS 等 收集 器 的 关注 点 尽可能 地 缩短 垃圾 收集 时 用户 线程 的 停顿 时间， 而 Parallel Scavenge 收集 器 的 目标 则是 达到 一个 可 控制 的 吞吐量（ Throughput）。\n Serial Old 收集 器 |  Serial Old 是 Serial 收集 器 的 老年 代 版本 标记-整理算法 |这个 收集 器 的 主要 意义 也是 被 Client 模式 下 的 虚拟 机 使用\n Parallel Old 收集 器 |  Parallel Scavenge 收集 器 的 老年 代 版本 标记-整理算法  |注重 吞吐量 及 CPU 资源 敏感 的 场合， 都可以 优先 考虑 Parallel Scavenge 加 Parallel Old 收集 器。\nCMS收集器 | CMS（ConcurrentMarkSweep）针对老年代进行回收的GC，标记-清除算法 | 收集器是一种以获取最短回收停顿时间为目标的收集器\nG1收集器 | 内存结构变更，相对于CMS的“标记——清理”算法，G1会使用压缩算法，保证不产生多余的碎片。收集阶段，G1会将某个区域存活的对象拷贝的其他区域，然后将整个区域整个回收。 | 服务类型的收集器，目标是多处理器机器、大内存机器。它高度符合垃圾收集暂停时间的目标，同时实现高吞吐量。Oracle JDK 7 update 4 以及更新发布版完全支持G1垃圾收集器。\n\n并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。\n并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序继续运行，而垃圾收集程序运行于另一个CPU上。\n如果说收集算法是内存回收的方法论，垃圾收集器就是内存回收的具体实现。Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大的差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。这里讨论的收集器基于SunHotSpot虚拟机1.6版Update22，这个虚拟机包含的所有收集器如图所示。\n\n![这里写图片描述](http://img.blog.csdn.net/20170728221643962?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nHotSpotJVM1.6的垃圾收集器展示了7种作用于不同分代的收集器（包括JDK1.6_Update14后引入的EarlyAccess版G1收集器），如果两个收集器之间存在连线，就说明它们可以搭配使用。在介绍这些收集器各自的特性之前，我们先来明确一个观点：虽然我们是在对各个收集器进行比较，但并非为了挑选一个最好的收集器出来。因为直到现在为止还没有最好的收集器出现，更加没有万能的收集器，所以我们选择的只是对具体应用最合适的收集器。这点不需要多加解释就能证明：如果有一种放之四海皆准、任何场景下都适用的完美收集器存在，那HotSpot虚拟机就没必要实现那么多不同的收集器了。\n####3.2.1 Serial收集器\n         Serial收集器是最基本、发展历史最悠久的收集器，曾经（在JDK 1.3.1之前）是虚拟机新生代收集的唯一选择。大家看名字就会知道，这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。“Stop The World”这个名字也许听起来很酷，但这项工作实际上是由虚拟机在后台自动发起和自动完成的，在用户不可见的情况下把用户正常工作的线程全部停掉，这对很多应用来说都是难以接受的。读者不妨试想一下，要是你的计算机每运行一个小时就会暂停响应5分钟，你会有什么样的心情？Serial / Serial Old收集器的运行过程如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20170728221849904?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从 JDK 1.3 开始，一直到现在最新的 JDK 1.7，HotSpot 虚拟机开发团队为消除或者减少工作线程因内存回收而导致停顿的努力一直在进行着，从 Serial 收集器到 Parallel 收集器，再到 Concurrent Mark Sweep（CMS）乃至 GC 收集器的最前沿成果 Garbage First（G1）收集器，我们看到了一个个越来越优秀（也越来越复杂）的收集器的出现，用户线程的停顿时间在不断缩短，但是仍然没有办法完全消除（这里暂不包括 RTSJ 中的收集器）。寻找更优秀的垃圾收集器的工作仍在继续！\n\n写到这里，笔者似乎已经把 Serial 收集器描述成一个“老而无用、食之无味弃之可惜”的鸡肋了，但实际上到现在为止，它依然是虚拟机运行在 Client 模式下的默认新生代收集器。它也有着优于其他收集器的地方：简单而高效（与其他收集器的单线程比），对于限定单个 CPU 的环境来说，Serial 收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。在用户的桌面应用场景中，分配给虚拟机管理的内存一般来说不会很大，收集几十兆甚至一两百兆的新生代（仅仅是新生代使用的内存，桌面应用基本上不会再大了），停顿时间完全可以控制在几十毫秒最多一百多毫秒以内，只要不是频繁发生，这点停顿是可以接受的。所以，Serial 收集器对于运行在 Client 模式下的虚拟机来说是一个很好的选择。\n\n#### 3.2.2 ParNew收集器\nParNew收集器其实就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数（例如：-XX:SurvivorRatio、 -XX:PretenureSizeThreshold、-XX:HandlePromotionFailure等）、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，实现上这两种收集器也共用了相当多的代码。ParNew收集器的工作过程如下\n\n![这里写图片描述](http://img.blog.csdn.net/20170728221941057?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nParNew收集器除了多线程收集之外，其他与Serial收集器相比并没有太多创新之处，但它却是许多运行在Server模式下的虚拟机中首选的新生代收集器，其中有一个与性能无关但很重要的原因是，除了Serial收集器外，目前只有它能与CMS收集器配合工作。在JDK 1.5时期，HotSpot推出了一款在强交互应用中几乎可称为有划时代意义的垃圾收集器—CMS收集器（Concurrent Mark Sweep，本节稍后将详细介绍这款收集器），这款收集器是HotSpot虚拟机中第一款真正意义上的并发（Concurrent）收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作，用前面那个例子的话来说，就是做到了在你妈妈打扫房间的时候你还能同时往地上扔纸屑。\n\n不幸的是，它作为老年代的收集器，却无法与 JDK 1.4.0 中已经存在的新生代收集器 Parallel Scavenge 配合工作，所以在 JDK 1.5 中使用 CMS 来收集老年代的时候，新生代只能选择 ParNew 或 Serial 收集器中的一个。ParNew 收集器也是使用 -XX: +UseConcMarkSweepGC 选项后的默认新生代收集器，也可以使用 -XX:+UseParNewGC 选项来强制指定它。\n\nParNew 收集器在单 CPU 的环境中绝对不会有比 Serial 收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个 CPU 的环境中都不能百分之百地保证能超越 Serial 收集器。当然，随着可以使用的 CPU 的数量的增加，它对于 GC 时系统资源的利用还是很有好处的。它默认开启的收集线程数与 CPU 的数量相同，在 CPU 非常多（譬如 32 个，现在 CPU 动辄就 4 核加超线程，服务器超过 32 个逻辑 CPU 的情况越来越多了）的环境下，可以使用-XX:ParallelGCThreads 参数来限制垃圾收集的线程数。\n\n注意 从 ParNew 收集器开始，后面还将会接触到几款并发和并行的收集器。在大家可能产生疑惑之前，有必要先解释两个名词：并发和并行。这两个名词都是并发编程中的概念，在谈论垃圾收集器的上下文语境中，他们可以解释为： 并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。 并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序继续运行，而垃圾收集程序运行于另一个 CPU 上。\n\n#### 3.2.3 ParallelScavenge收集器\nParallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器……看上去和ParNew都一样，那它有什么特别之处呢？\n\nParallel Scavenge 收集器的特点是它的关注点与其他收集器不同，CMS 等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而 Parallel Scavenge 收集器的目标则是达到一个可控制的吞吐量（Throughput）。所谓吞吐量就是 CPU 用于运行用户代码的时间与 CPU 总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间），虚拟机总共运行了 100 分钟，其中垃圾收集花掉 1 分钟，那吞吐量就是 99%。\n\n停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。\n\nParallel Scavenge 收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间的-XX:MaxGCPauseMillis 参数以及直接设置吞吐量大小的-XX:GCTimeRatio 参数。\n\nMaxGCPauseMillis 参数允许的值是一个大于 0 的毫秒数，收集器将尽可能地保证内存回收花费的时间不超过设定值。不过大家不要认为如果把这个参数的值设置得稍小一点就能使得系统的垃圾收集速度变得更快，GC 停顿时间缩短是以牺牲吞吐量和新生代空间来换取的：系统把新生代调小一些，收集 300MB 新生代肯定比收集 500MB 快吧，这也直接导致垃圾收集发生得更频繁一些，原来 10 秒收集一次、每次停顿 100 毫秒，现在变成 5 秒收集一次、每次停顿 70 毫秒。停顿时间的确在下降，但吞吐量也降下来了。\n\nGCTimeRatio 参数的值应当是一个大于 0 且小于 100 的整数，也就是垃圾收集时间占总时间的比率，相当于是吞吐量的倒数。如果把此参数设置为 19，那允许的最大 GC 时间就占总时间的 5%（即 1 /（1+19）），默认值为 99，就是允许最大 1%（即 1 /（1+99））的垃圾收集时间。\n\n由于与吞吐量关系密切，Parallel Scavenge 收集器也经常称为“吞吐量优先”收集器。除上述两个参数之外，Parallel Scavenge 收集器还有一个参数-XX:+UseAdaptiveSizePolicy 值得关注。这是一个开关参数，当这个参数打开之后，就不需要手工指定新生代的大小（-Xmn）、Eden 与 Survivor 区的比例（-XX:SurvivorRatio）、晋升老年代对象年龄（-XX:PretenureSizeThreshold）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为 GC 自适应的调节策略（GC Ergonomics）。如果读者对于收集器运作原来不太了解，手工优化存在困难的时候，使用 Parallel Scavenge 收集器配合自适应调节策略，把内存管理的调优任务交给虚拟机去完成将是一个不错的选择。只需要把基本的内存数据设置好（如-Xmx 设置最大堆），然后使用 MaxGCPauseMillis 参数（更关注最大停顿时间）或 GCTimeRatio（更关注吞吐量）参数给虚拟机设立一个优化目标，那具体细节参数的调节工作就由虚拟机完成了。自适应调节策略也是 Parallel Scavenge 收集器与 ParNew 收集器的一个重要区别。\n\n####3.2.4 Serial Old 收集 器 \n   Serial Old 是 Serial 收集 器 的 老年 代 版本， 它 同样是 一个 单线 程 收集 器， 使用“ 标记- 整理” 算法。 这个 收集 器 的 主要 意义 也是 被 Client 模式 下 的 虚拟 机 使用。 如果 在 Server 模式 下， 它 主要 还有 两大 用途： 一个 是在 JDK 1. 5 及 之前 的 版本 中 与 Parallel Scavenge 收集 器 搭配 使用[ 4]， 另外 一个 就是 作为 CMS 收集 器 的 后备 预 案， 在 并发 收集 发生 Concurrent Mode Failure 的 时候 使用。 这 两点 都将 在后 面的 内容 中 详细 讲解。 Serial Old 收集 器 的 工作 过程 如图 所示。\n\n![这里写图片描述](http://img.blog.csdn.net/20170729114927185?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n   \n####3.2.5 Parallel Old 收集 器\n  Parallel Old 是 Parallel Scavenge 收集 器 的 老年 代 版本， 使用 多 线程 和“ 标记－整理” 算法。 这个 收集 器 是在 JDK 1. 6 中 才 开始 提供 的， 在此之前， 新生代 的 Parallel Scavenge 收集 器 一直 处于 比较 尴尬 的 状态。 原因 是， 如果 新生代 选择 了 Parallel Scavenge 收集 器， 老年 代 除了 Serial Old（ PS MarkSweep） 收集 器 外 别无选择（ 还 记得 上面 说过 Parallel Scavenge 收集 器 无法 与 CMS 收集 器 配合 工作 吗？）。 由于 单 线程 的 老 年代 Serial Old 收集 器 在 服务 端 应用 性 能上 的“ 拖累”， 即便 使用 了 Parallel Scavenge 收集 器 也 未必 能在 整体 应用 上 获得 吞吐量 最大化 的 效果， 又因 为 老年 代收 集中 无法 充分 利用 服务器 多 CPU 的 处理 能力， 在 老年 代 很大 而且 硬件 比较 高级的 环境 中， 这种 组合 的 吞吐量 甚至 还不 一 定有 ParNew 加 CMS 的 组合“ 给 力”。 直到 Parallel Old 收集 器 出现 后，“ 吞吐量 优先” 收集 器 终于 有了 比较 名副其实 的 应用 组合， 在 注重 吞吐量 及 CPU 资源 敏感 的 场合， 都可以 优先 考虑 Parallel Scavenge 加 Parallel Old 收集 器。 Parallel Old 收集 器 的 工作 过程 如图所示。\n ![这里写图片描述](http://img.blog.csdn.net/20170728222929126?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n#### 3.2.6 CMS收集器\nCMS（ConcurrentMarkSweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。从名字（包含“MarkSweep”）上就可以看出CMS收集器是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分如下步骤，\n包括：\n\n 阶段\t|说明\n ----- | -----\n(1) 初始标记 (Initial Mark) |\t(Stop the World Event,所有应用线程暂停) 在老年代(old generation)中的对象, 如果从年轻代(young generation)中能访问到, 则被 “标记,marked” 为可达的(reachable).对象在旧一代“标志”可以包括这些对象可能可以从年轻一代。暂停时间一般持续时间较短,相对小的收集暂停时间.\n(2) 并发标记 (Concurrent Marking) |\t在Java应用程序线程运行的同时遍历老年代(tenured generation)的可达对象图。扫描从被标记的对象开始,直到遍历完从root可达的所有对象. 调整器(mutators)在并发阶段的2、3、5阶段执行,在这些阶段中新分配的所有对象(包括被提升的对象)都立刻标记为存活状态.\n(3) 再次标记(Remark)\t| (Stop the World Event, 所有应用线程暂停) 查找在并发标记阶段漏过的对象，这些对象是在并发收集器完成对象跟踪之后由应用线程更新的.\n(4) 并发清理(Concurrent Sweep) |\t回收在标记阶段(marking phases)确定为不可及的对象. 死对象的回收将此对象占用的空间增加到一个空闲列表(free list),供以后的分配使用。死对象的合并可能在此时发生. 请注意,存活的对象并没有被移动.\n(5) 重置(Resetting)| \t清理数据结构,为下一个并发收集做准备.\n其中初始标记、重新标记这两个步骤仍然需要“StopTheWorld”。初始标记仅仅只是标记一下GCRoots能直接关联到的对象，速度很快，并发标记阶段就是进行GCRootsTracing的过程，而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行的。ConcurrentMarkSweep收集器运行示意图：\n\n![这里写图片描述](http://img.blog.csdn.net/20170728222952502?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nCMS是一款优秀的收集器，它的最主要优点在名字上已经体现出来了：并发收集、低停顿，Sun的一些官方文档里面也称之为并发低停顿收集器（ConcurrentLowPauseCollector）。但是CMS还远达不到完美的程度，它有以下三个显著的缺点：\n* CMS收集器对CPU资源非常敏感。其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。CMS默认启动的回收线程数是（CPU数量+3）/4，也就是当CPU在4个以上时，并发回收时垃圾收集线程最多占用不超过25%的CPU资源。但是当CPU不足4个时（譬如2个），那么CMS对用户程序的影响就可能变得很大，如果CPU负载本来就比较大的时候，还分出一半的运算能力去执行收集器线程，就可能导致用户程序的执行速度忽然降低了50%，这也很让人受不了。为了解决这种情况，虚拟机提供了一种称为“增量式并发收集器”（IncrementalConcurrentMarkSweep/i-CMS）的CMS收集器变种，所做的事情和单CPU年代PC机操作系统使用抢占式来模拟多任务机制的思想一样，就是在并发标记和并发清理的时候让GC线程、用户线程交替运行，尽量减少GC线程的独占资源的时间，这样整个垃圾收集的过程会更长，但对用户程序的影响就会显得少一些，速度下降也就没有那么明显，但是目前版本中，i-CMS已经被声明为“deprecated”，即不再提倡用户使用。\n* CMS收集器无法处理浮动垃圾（FloatingGarbage），可能出现“ConcurrentModeFailure”失败而导致另一次FullGC的产生。由于CMS并发清理阶段用户线程还在运行着，伴随程序的运行自然还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在本次收集中处理掉它们，只好留待下一次GC时再将其清理掉。这一部分垃圾就称为“浮动垃圾”。也是由于在垃圾收集阶段用户线程还需要运行，即还需要预留足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。在默认设置下，CMS收集器在老年代使用了68%的空间后就会被激活，这是一个偏保守的设置，如果在应用中老年代增长不是太快，可以适当调高参数-XX：CMSInitiatingOccupancyFraction的值来提高触发百分比，以便降低内存回收次数以获取更好的性能。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“ConcurrentModeFailure”失败，这时候虚拟机将启动后备预案：临时启用SerialOld收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。所以说参数-XX：CMSInitiatingOccupancyFraction设置得太高将会很容易导致大量“ConcurrentModeFailure”失败，性能反而降低。\n* 还有最后一个缺点，在本节在开头说过，CMS是一款基于“标记-清除”算法实现的收集器，如果读者对前面这种算法介绍还有印象的话，就可能想到这意味着收集结束时会产生大量空间碎片。空间碎片过多时，将会给大对象分配带来很大的麻烦，往往会出现老年代还有很大的空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次FullGC。为了解决这个问题，CMS收集器提供了一个-XX：+UseCMSCompactAtFullCollection开关参数，用于在“享受”完FullGC服务之后额外免费附送一个碎片整理过程，内存整理的过程是无法并发的。空间碎片问题没有了，但停顿时间不得不变长了。虚拟机设计者们还提供了另外一个参数-XX：CMSFullGCsBeforeCompaction，这个参数用于设置在执行多少次不压缩的FullGC后，跟着来一次带压缩的。\n后续分开介绍：\n\n#### 3.2.7.G1收集器G1（GarbageFirst）收集器\n\nG1 GC 是 Jdk7 的新特性之一、Jdk7+版本都可以自主配置 G1 作为 JVM GC 选项；作为 JVM GC 算法的一次重大升级、DK7u 后 G1 已相对稳定、且未来计划替代 CMS、所以有必要深入了解下：\n\n不同于其他的分代回收算法、G1 将堆空间划分成了互相独立的区块。每块区域既有可能属于 O 区、也有可能是 Y 区，且每类区域空间可以是不连续的（对比 CMS 的 O 区和 Y 区都必须是连续的）。这种将 O 区划分成多块的理念源于：当并发后台线程寻找可回收的对象时、有些区块包含可回收的对象要比其他区块多很多。虽然在清理这些区块时 G1 仍然需要暂停应用线程、但可以用相对较少的时间优先回收包含垃圾最多区块。如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20170729121950668?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n这也是为什么G1命名为Garbage First的原因：第一时间处理垃圾最多的区块。\n平时工作中大多数系统都使用CMS、即使静默升级到JDK7默认仍然采用CMS、那么G1相对于CMS的区别在：\n\nG1 在压缩空间方面有优势\nG1 通过将内存空间分成区域（Region）的方式避免内存碎片问题\nEden, Survivor, Old 区不再固定、在内存使用效率上来说更灵活\nG1 可以通过设置预期停顿时间（Pause Time）来控制垃圾收集时间避免应用雪崩现象\nG1 在回收内存后会马上同时做合并空闲内存的工作、而 CMS 默认是在 STW（stop the world）的时候做\nG1 会在 Young GC 中使用、而 CMS 只能在 O 区使用\n就目前而言、CMS 还是默认首选的 GC 策略、可能在以下场景下 G1 更适合：\n\n服务端多核 CPU、JVM 内存占用较大的应用（至少大于 4G）\n应用在运行过程中会产生大量内存碎片、需要经常压缩空间\n想要更可控、可预期的 GC 停顿周期；防止高并发下应用雪崩现象\n一次完整 G1GC 的详细过程：\n\nG1 在运行过程中主要包含如下 4 种操作方式：\n\nYGC（不同于 CMS）\n并发阶段\n混合模式\nfull GC （一般是 G1 出现问题时发生）\nYGC：\n\n下面是一次 YGC 前后内存区域是示意图：\n\n![这里写图片描述](http://img.blog.csdn.net/20170729120730189?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n图中每个小区块都代表 G1 的一个区域（Region），区块里面的字母代表不同的分代内存空间类型（如[E]Eden,[O]Old,[S]Survivor）空白的区块不属于任何一个分区；G1 可以在需要的时候任意指定这个区域属于 Eden 或是 O 区之类的。\nG1 YoungGC 在 Eden 充满时触发，在回收之后所有之前属于 Eden 的区块全变成空白。然后至少有一个区块是属于 S 区的（如图半满的那个区域），同时可能有一些数据移到了 O 区。\n\n目前淘系的应用大都使用 PrintGCDetails 参数打出 GC 日志、这个参数对 G1 同样有效、但日志内容颇为不同；下面是一个 Young GC 的例子：\n```\n23.430: [GC pause (young), 0.23094400 secs]\n...\n[Eden: 1286M(1286M)->0B(1212M)\nSurvivors: 78M->152M Heap: 1454M(4096M)->242M(4096M)][times: user=0.85 sys=0.05, real=0.23 secs]\n```\n\n上面日志的内容解析：Young GC 实际占用 230 毫秒、其中 GC 线程占用 850 毫秒的 CPU 时间\nE：内存占用从 1286MB 变成 0、都被移出\nS：从 78M 增长到了 152M、说明从 Eden 移过来 74M\nHeap:占用从 1454 变成 242M、说明这次 Young GC 一共释放了 1212M 内存空间\n很多情况下，S 区的对象会有部分晋升到 Old 区，另外如果 S 区已满、Eden 存活的对象会直接晋升到 Old 区，这种情况下 Old 的空间就会涨\n\n并发阶段：\n\n一个并发 G1 回收周期前后内存占用情况如下图所示：\n\n![这里写图片描述](http://img.blog.csdn.net/20170729120816584?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从上面的图表可以看出以下几点：\n1、Young区发生了变化、这意味着在G1并发阶段内至少发生了一次YGC（这点和CMS就有区别），Eden在标记之前已经被完全清空，因为在并发阶段应用线程同时在工作、所以可以看到Eden又有新的占用\n2、一些区域被X标记，这些区域属于O区，此时仍然有数据存放、不同之处在G1已标记出这些区域包含的垃圾最多、也就是回收收益最高的区域\n3、在并发阶段完成之后实际上O区的容量变得更大了（O+X的方块）。这时因为这个过程中发生了YGC有新的对象进入所致。此外，这个阶段在O区没有回收任何对象：它的作用主要是标记出垃圾最多的区块出来。对象实际上是在后面的阶段真正开始被回收\n\nG1 并发标记周期可以分成几个阶段、其中有些需要暂停应用线程。第一个阶段是初始标记阶段。这个阶段会暂停所有应用线程-部分原因是这个过程会执行一次 YGC、下面是一个日志示例：\n\n> 50.541: [GC pause (young) (initial-mark), 0.27767100 secs][eden: 1220m(1220m)->0b(1220m) survivors: 144m->144m heap: 3242m(4096m)->2093m(4096m)] [Times: user=1.02 sys=0.04, real=0.28\n>\n> > secs]\n\n上面的日志表明发生了 YGC、应用线程为此暂停了 280 毫秒，Eden 区被清空（71MB 从 Young 区移到了 O 区）。\n日志里面 initial-mark 的字样表明后台的并发 GC 阶段开始了。因为初始标记阶段本身也是要暂停应用线程的，\nG1 正好在 YGC 的过程中把这个事情也一起干了。为此带来的额外开销不是很大、增加了 20%的 CPU，暂停时间相应的略微变长了些。\n\n接下来，G1 开始扫描根区域、日志示例：\n\n```\n50.819: [GC concurrent-root-region-scan-start]\n51.408: [GC concurrent-root-region-scan-end, 0.5890230]\n```\n\n一共花了 580 毫秒，这个过程没有暂停应用线程；是后台线程并行处理的。这个阶段不能被 YGC 所打断、因此后台线程有足够的 CPU 时间很关键。如果 Young 区空间恰好在 Root 扫描的时候\n满了、YGC 必须等待 root 扫描之后才能进行。带来的影响是 YGC 暂停时间会相应的增加。这时的 GC 日志是这样的：\n\n```\n> 350.994: [GC pause (young)\n> 351.093: [GC concurrent-root-region-scan-end, 0.6100090]\n> 351.093: [GC concurrent-mark-start],0.37559600 secs]\n```\n\nGC 暂停这里可以看出在 root 扫描结束之前就发生了，表明 YGC 发生了等待，等待时间大概是 100 毫秒。\n在 root 扫描完成后，G1 进入了一个并发标记阶段。这个阶段也是完全后台进行的；GC 日志里面下面的信息代表这个阶段的开始和结束：\n\n```\n111.382: [GC concurrent-mark-start] ....\n120.905: [GC concurrent-mark-end, 9.5225160 sec]\n```\n\n并发标记阶段是可以被打断的，比如这个过程中发生了 YGC 就会。这个阶段之后会有一个二次标记阶段和清理阶段：\n\n```\n> 120.910: [GC remark 120.959: [GC ref-PRC, 0.0000890 secs], 0.0718990 secs][times: user=0.23 sys=0.01, real=0.08 secs]\n> 120.985: [GC cleanup 3510M->3434M(4096M), 0.0111040 secs][times: user=0.04 sys=0.00, real=0.01 secs]\n```\n\n这两个阶段同样会暂停应用线程，但时间很短。接下来还有额外的一次并发清理阶段：\n```\n120.996: [GC concurrent-cleanup-start]\n120.996: [GC concurrent-cleanup-end, 0.0004520]\n```\n到此为止，正常的一个 G1 周期已完成–这个周期主要做的是发现哪些区域包含可回收的垃圾最多（标记为 X），实际空间释放较少。\n\n混合 GC：\n\n接下来 G1 执行一系列的混合 GC。这个时期因为会同时进行 YGC 和清理上面已标记为 X 的区域，所以称之为混合阶段，下面是一个混合 GC 执行的前后示意图：\n\n![这里写图片描述](http://img.blog.csdn.net/20170729120910552?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n像普通的YGC那样、G1完全清空掉Eden同时调整survivor区。另外，两个标记也被回收了，他们有个共同的特点是包含最多可回收的对象，因此这两个区域绝对部分空间都被释放了。这两个区域任何存活的对象都被移到了其他区域（和YGC存活对象晋升到O区类似）。这就是为什么G1的堆比CMS内存碎片要少很多的原因–移动这些对象的同时也就是在压缩对内存。下面是一个混合GC的日志：\n\n> 79.826: [GC pause (mixed), 0.26161600 secs] .... [Eden: 1222M(1222M)->0B(1220M) Survivors: 142M->144M Heap:\n> 3200M(4096M)->1964M(4096M)][times: user=1.01 sys=0.00, real=0.26 secs]\n> 上面的日志可以注意到 Eden 释放了 1222MB、但整个堆的空间释放内存要大于这个数目。数量相差看起来比较少、只有 16MB，但是要考虑同时有 survivor 区的对象晋升到 O 区；另外，每次混合 GC 只是清理一部分的 O 区内存，整个 GC 会一直持续到几乎所有的标记区域垃圾对象都被回收，这个阶段完了之后 G1 会重新回到正常的 YGC 阶段。周期性的，当 O 区内存占用达到一定数量之后 G1 又会开启一次新的并行 GC 阶段.\n> 后续分开介绍：。。\n\n## 参考\n深入理解 java 虚拟机\nhttp://ifeve.com/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/\n","slug":"language/jvm/JVM垃圾回收","published":1,"date":"2021-07-31T11:10:47.902Z","updated":"2021-07-31T11:10:47.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyin0027u6uk9xzvhfs3","content":"<h1 id=\"JVM垃圾回收\"><a href=\"#JVM垃圾回收\" class=\"headerlink\" title=\"JVM垃圾回收\"></a>JVM垃圾回收</h1><h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h2><p> jvm要进行垃圾回收粗略分为两个步骤：找出需要清理的内存(无效的内存区域) ， 清理无效的内存区域<br> 程序计数器、虚拟机栈、本地方法栈三个区域随线程而生，随线程而灭；栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作。每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的（尽管在运行期会由JIT编译器进行一些优化，但在本章基于概念模型的讨论中，大体上可以认为是编译期可知的），因此这几个区域的内存分配和回收都具备确定性，在这几个区域内不需要过多考虑回收的问题，因为方法结束或线程结束时，内存自然就跟随着回收了。而Java堆和方法区则不一样，一个接口中的多个实现类需要的内存可能不一样，一个方法中的多个分支需要的内存也可能不一样，我们只有在程序处于运行期间时才能知道会创建哪些对象，这部分内存的分配和回收都是动态的，垃圾回收所关注的是这部分内存。</p>\n<h2 id=\"2-无效内存区域的查找\"><a href=\"#2-无效内存区域的查找\" class=\"headerlink\" title=\"2. 无效内存区域的查找\"></a>2. 无效内存区域的查找</h2><h3 id=\"2-1-概要\"><a href=\"#2-1-概要\" class=\"headerlink\" title=\"2.1 概要\"></a>2.1 概要</h3><p>Java堆中几乎存放着Java世界中所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象有哪些还“存活”着，哪些已经“死去”。判断方法有引用计数器法和根搜索算法等。</p>\n<h4 id=\"2-1-1-引用计数算法\"><a href=\"#2-1-1-引用计数算法\" class=\"headerlink\" title=\"2.1.1 引用计数算法\"></a>2.1.1 引用计数算法</h4><p>简单解释为给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当该引用失效时，计数器值就减1；任何时刻计数器都为0的对象就是不可能再被使用的。客观地说，引用计数算法（ReferenceCounting）的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，也有一些比较著名的应用案例，例如微软的COM（ComponentObjectModel）技术、使用ActionScript3的FlashPlayer、Python语言以及在游戏脚本领域中被广泛应用的Squirrel中都使用了引用计数算法进行内存管理。但Java语言中没有选用引用计数算法来管理内存，其中最主要的原因是它很难解决对象之间的相互循环引用的问题。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *testGC()方法执行后，objA和objB会不会被GC呢？</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@authorzzm</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReferenceCountingGC</span></span>&#123;　　</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object instance=<span class=\"keyword\">null</span>;　　 </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> _1MB=<span class=\"number\">1024</span>*<span class=\"number\">1024</span>;　　</span><br><span class=\"line\">\t<span class=\"comment\">/**　　</span></span><br><span class=\"line\"><span class=\"comment\">\t*这个成员属性的唯一意义就是占点内存，以便能在GC日志中看清楚是否被回收过　　</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span>　　</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] bigSize=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">2</span>*_1MB];　　</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testGC</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tReferenceCountingGC objA = <span class=\"keyword\">new</span> ReferenceCountingGC();</span><br><span class=\"line\">\tReferenceCountingGC objB = newReferenceCountingGC();</span><br><span class=\"line\">\tobjA.instance = objB;</span><br><span class=\"line\">\tobjB.instance = objA;</span><br><span class=\"line\">\tobjA = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">\tobjB = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//假设在这行发生GC，那么objA和objB是否能被回收？</span></span><br><span class=\"line\">\tSystem.gc();　　</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">运行结果：</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FullGC(System)</span><br><span class=\"line\">[Tenured:0K-&gt;210K(10240K),0.0149142secs]</span><br><span class=\"line\">4603K-&gt;210K(19456K),</span><br><span class=\"line\">[Perm:2999K-&gt;2999K(21248K)],0.0150007secs][Times:user=0.01sys=0.00,real=0.02secs]</span><br><span class=\"line\">Heapdefnewgenerationtotal9216K,used82K</span><br><span class=\"line\">[0x00000000055e0000,0x0000000005fe0000,0x0000000005fe0000)Edenspace8192K,1%used[0x00000000055e0000,0x00000000055f4850,0x0000000005de0000)</span><br><span class=\"line\">fromspace1024K,0%used[0x0000000005de0000,0x0000000005de0000,0x0000000005ee0000)</span><br><span class=\"line\">tospace1024K,0%used[0x0000000005ee0000,0x0000000005ee0000,0x0000000005fe0000)</span><br><span class=\"line\">tenuredgenerationtotal10240K,used210K[0x0000000005fe0000,0x00000000069e0000,0x00000000069e0000)</span><br><span class=\"line\">thespace10240K,2%used[0x0000000005fe0000,0x0000000006014a18,0x0000000006014c00,0x00000000069e0000)</span><br><span class=\"line\">compactingpermgentotal21248K,</span><br><span class=\"line\">used3016K[0x00000000069e0000,0x0000000007ea0000,0x000000000bde0000)</span><br><span class=\"line\">thespace21248K,14%used[0x00000000069e0000,0x0000000006cd2398,0x0000000006cd2400,0x0000000007ea0000)</span><br><span class=\"line\">Nosharedspacesconfigured.</span><br></pre></td></tr></table></figure>\n\n<p>代码中testGC()方法：对象objA和objB都有字段instance，赋值令objA.instance=objB及objB.instance=objA，除此之外，这两个对象再无任何引用，实际上这两个对象已经不可能再被访问，但是它们因为互相引用着对方，导致它们的引用计数都不为0，于是引用计数算法无法通知GC收集器回收它们，为引用计数器的缺陷。但从运行结果中可以清楚地看到GC日志中包含“4603K-&gt;210K”，意味着虚拟机并没有因为这两个对象互相引用就不回收它们，这也从侧面说明虚拟机并不是通过引用计数算法来判断对象是否存活的。</p>\n<h4 id=\"2-1-2-根搜索算法\"><a href=\"#2-1-2-根搜索算法\" class=\"headerlink\" title=\"2.1.2 根搜索算法\"></a>2.1.2 根搜索算法</h4><p>在主流的商用程序语言中（Java和C#，甚至包括前面提到的古老的Lisp），都是使用根搜索算法（GCRootsTracing）判定对象是否存活的。这个算法的基本思路就是通过一系列的名为“GCRoots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（ReferenceChain），当一个对象到GCRoots没有任何引用链相连（用图论的话来说就是从GCRoots到这个对象不可达）时，则证明此对象是不可用的。如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170728135643324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>对象object5、object6、object7虽然互相有关联，但是它们到GCRoots是不可达的，所以它们将会被判定为是可回收的对象。<br>在Java语言里，可作为GCRoots的对象包括下面几种：</p>\n<ul>\n<li>虚拟机栈（栈帧中的本地变量表）中的引用的对象。</li>\n<li>方法区中的类静态属性引用的对象。</li>\n<li>方法区中的常量引用的对象。</li>\n<li>本地方法栈中JNI（即一般说的Native方法）的引用的对象。</li>\n</ul>\n<h3 id=\"2-2-java的引用类型\"><a href=\"#2-2-java的引用类型\" class=\"headerlink\" title=\"2.2 java的引用类型\"></a>2.2 java的引用类型</h3><p>无论是通过引用计数算法判断对象的引用数量，还是通过根搜索算法判断对象的引用链是否可达，判定对象是否存活都与“引用”有关。在JDK1.2之前，Java中的引用的定义很传统：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。这种定义很纯粹，但是太过狭隘，一个对象在这种定义下只有被引用或者没有被引用两种状态，对于如何描述一些“食之无味，弃之可惜”的对象就显得无能为力。我们希望能描述这样一类对象：当内存空间还足够时，则能保留在内存之中；如果内存在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。很多系统的缓存功能都符合这样的应用场景。<br>JDK1.2之后，Java对引用的概念进行了扩充，并且引用强度不同。如下</p>\n<table>\n<thead>\n<tr>\n<th>引用类型</th>\n<th>概述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>强引用（StrongReference）</td>\n<td>强引用就是指在程序代码之中普遍存在的，类似“Objectobj=newObject()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象</td>\n</tr>\n<tr>\n<td>软引用（SoftReference）</td>\n<td>软引用用来描述一些还有用，但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中并进行第二次回收。如果这次回收还是没有足够的内存，才会抛出内存溢出异常。在JDK1.2之后，提供了SoftReference类来实现软引用</td>\n</tr>\n<tr>\n<td>弱引用（WeakReference）</td>\n<td>弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2之后，提供了WeakReference类来实现弱引用</td>\n</tr>\n<tr>\n<td>虚引用（PhantomReference）</td>\n<td>虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是希望能在这个对象被收集器回收时收到一个系统通知。在JDK1.2之后，提供了PhantomReference类来实现虚引用</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-3-对象自救\"><a href=\"#2-3-对象自救\" class=\"headerlink\" title=\"2.3 对象自救\"></a>2.3 对象自救</h3><p>在根搜索算法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经经历两次标记过程：如果对象在进行根搜索后发现没有与GCRoots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。如果这个对象被判定为有必要执行finalize()方法，那么这个对象将会被放置在一个名为F-Queue的队列之中，并在稍后由一条由虚拟机自动建立的、低优先级的Finalizer线程去执行。这里所谓的“执行”是指虚拟机会触发这个方法，但并不承诺会等待它运行结束。这样做的原因是，如果一个对象在finalize()方法中执行缓慢，或者发生了死循环（更极端的情况），将很可能会导致F-Queue队列中的其他对象永久处于等待状态，甚至导致整个内存回收系统崩溃。finalize()方法是对象逃脱死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（this关键字）赋值给某个类变量或对象的成员变量，那在第二次标记时它将被移除出“即将回收”的集合；如果对象这时候还没有逃脱，那它就真的离死不远了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***此代码演示了两点：</span></span><br><span class=\"line\"><span class=\"comment\"> *1.对象可以在被GC时自我拯救。</span></span><br><span class=\"line\"><span class=\"comment\"> *2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@authorzzm</span></span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalizeEscapeGC</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FinalizeEscapeGC SAVE_HOOK = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        SAVE_HOOK = <span class=\"keyword\">new</span> FinalizeEscapeGC(); <span class=\"comment\">//对象 第一次 成功 拯救 自己</span></span><br><span class=\"line\">        SAVE_HOOK = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        System.gc(); <span class=\"comment\">// 因为 Finalizer 方法 优先级 很低， 暂停 0. 5 秒， 以 等待 它</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SAVE_HOOK != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            SAVE_HOOK.isAlive();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot; no, i am dead :(&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"comment\">// 下面 这段 代码 与 上面 的 完全 相同， 但是 这次 自救 却 失败 了</span></span><br><span class=\"line\">        SAVE_HOOK = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        System.gc(); <span class=\"comment\">// 因为 Finalizer 方法 优先级 很低， 暂停 0. 5 秒， 以 等待 它</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SAVE_HOOK != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            SAVE_HOOK.isAlive();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot; no, i am dead :(&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">isAlive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; yes, i am still alive :)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.finalize();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; finalize mehtod executed!&quot;</span>);</span><br><span class=\"line\">        FinalizeEscapeGC.SAVE_HOOK = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">finalize mehtod executed! </span><br><span class=\"line\">yes, i am still alive :) </span><br><span class=\"line\">no, i am dead :(</span><br></pre></td></tr></table></figure>\n\n<p>从代码中我们可以看到一个对象的finalize()被执行，但是它仍然可以存活。代码中一次对象自我拯救的演示，在运行结果可以看到，SAVE_HOOK对象的finalize()方法确实被GC收集器触发过，并且在被收集前成功逃脱了。另外一个值得注意的地方就是，代码中有两段完全一样的代码片段，执行结果却是一次逃脱成功，一次失败，这是因为任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临下一次回收，它的finalize()方法不会被再次执行，因此第二段代码的自救行动失败了。需要特别说明的是，上面关于对象死亡时finalize()方法的描述可能带有悲情的艺术色彩，笔者并不鼓励大家使用这种方法来拯救对象。相反，笔者建议大家尽量避免使用它，因为它不是C/C++中的析构函数，而是Java刚诞生时为了使C/C++程序员更容易接受它所做出的一个妥协。它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序。有些教材中提到它适合做“关闭外部资源”之类的工作，这完全是对这种方法的用途的一种自我安慰。finalize()能做的所有工作，使用try-finally或其他方式都可以做得更好、更及时，大家完全可以忘掉Java语言中还有这个方法的存在。</p>\n<h3 id=\"2-4-回收方法区\"><a href=\"#2-4-回收方法区\" class=\"headerlink\" title=\"2.4 回收方法区\"></a>2.4 回收方法区</h3><p>很多人认为方法区（或者HotSpot虚拟机中的永久代）是没有垃圾收集的，Java虚拟机规范中确实说过可以不要求虚拟机在方法区实现垃圾收集，而且在方法区进行垃圾收集的“性价比”一般比较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%~95%的空间，而永久代的垃圾收集效率远低于此。永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。回收废弃常量与回收Java堆中的对象非常类似。以常量池中字面量的回收为例，假如一个字符串“abc”已经进入了常量池中，但是当前系统没有任何一个String对象是叫做“abc”的，换句话说是没有任何String对象引用常量池中的“abc”常量，也没有其他地方引用了这个字面量，如果在这时候发生内存回收，而且必要的话，这个“abc”常量就会被系统“请”出常量池。常量池中的其他类（接口）、方法、字段的符号引用也与此类似。判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。<br>java中同时满足下面3个条件才能算是“无用的类”：</p>\n<ul>\n<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li>\n<li>加载该类的ClassLoader已经被回收。</li>\n<li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>\n</ul>\n<p>虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而不是和对象一样，不使用了就必然会回收。<br>是否对类进行回收，HotSpot虚拟机提供了-Xnoclassgc参数进行控制。可以使用-verbose：class及-XX：+TraceClassLoading、-XX：+TraceClassUnLoading查看类的加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，但-XX：+TraceClassLoading参数需要fastdebug版的虚拟机支持。在大量使用反射、动态代理、CGLib等bytecode框架的场景，以及动态生成JSP和OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。</p>\n<h2 id=\"3-清理无效内存\"><a href=\"#3-清理无效内存\" class=\"headerlink\" title=\"3. 清理无效内存\"></a>3. 清理无效内存</h2><h3 id=\"3-1-垃圾收集算法\"><a href=\"#3-1-垃圾收集算法\" class=\"headerlink\" title=\"3.1 垃圾收集算法\"></a>3.1 垃圾收集算法</h3><p>由于垃圾收集算法的实现涉及大量的程序细节，而且各个平台的虚拟机操作内存的方法又各不相同，因此本节不打算过多地讨论算法的实现，只是介绍几种算法的思想及其发展过程。</p>\n<h4 id=\"3-1-1-标记-清除算法\"><a href=\"#3-1-1-标记-清除算法\" class=\"headerlink\" title=\"3.1.1 标记-清除算法\"></a>3.1.1 标记-清除算法</h4><p>最基础的收集算法是“标记-清除”（Mark-Sweep）算法，如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象，它的标记过程其实在前一节讲述对象标记判定时已经基本介绍过了。之所以说它是最基础的收集算法，是因为后续的收集算法都是基于这种思路并对其缺点进行改进而得到的。<br>它的主要缺点有两个：</p>\n<ul>\n<li>一个是效率问题，标记和清除过程的效率都不高；</li>\n<li>一个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。<br>如下图为执行标记清除算法后的内存区域：</li>\n</ul>\n<p><img src=\"http://img.blog.csdn.net/20170729100915368?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h4 id=\"3-1-2-标记-整理算法\"><a href=\"#3-1-2-标记-整理算法\" class=\"headerlink\" title=\"3.1.2 标记-整理算法\"></a>3.1.2 标记-整理算法</h4><p>标记操作和“标记-清除”算法一致，后续操作不只是直接清理对象，而是在清理无用对象完成后让所有存活的对象都向一端移动，并更新引用其对象的指针。<br>主要缺点：在标记-清除的基础上还需进行对象的移动，成本相对较高，好处则是不会产生内存碎片。<br>如下图为执行标记清除算法后的内存区域：</p>\n<p><img src=\"http://img.blog.csdn.net/20170729100943066?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>####3.1.3 复制算法</p>\n<p>为了解决效率问题，一种称为“复制”（Copying）的收集算法出现了，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对其中的一块进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为原来的一半，未免太高了一点。<br>复制算法执行后的内存区域：</p>\n<p><img src=\"http://img.blog.csdn.net/20170729101006020?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h4 id=\"3-1-4-分代收集算法\"><a href=\"#3-1-4-分代收集算法\" class=\"headerlink\" title=\"3.1.4 分代收集算法\"></a>3.1.4 分代收集算法</h4><p>分代收集算法当前商业虚拟机的垃圾收集都采用“分代收集”（GenerationalCollection）算法，这种算法并没有什么新的思想，只是根据对象的存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。</p>\n<h3 id=\"3-2-垃圾收集器\"><a href=\"#3-2-垃圾收集器\" class=\"headerlink\" title=\"3.2 垃圾收集器\"></a>3.2 垃圾收集器</h3><p>垃圾收集器对比</p>\n<table>\n<thead>\n<tr>\n<th>垃圾收集器</th>\n<th>解释</th>\n<th>对比</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Serial收集器</td>\n<td>新生代复制算法，老年代采用标记整理算法，Serial收集器到JDK1.7为止，它依然是JAVA虚拟机运行在Client模式下的默认新生代收集器。</td>\n<td>它也有着优于其他收集器的地方：简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率</td>\n</tr>\n<tr>\n<td>ParNew收集器</td>\n<td>新生代复制算法，老年代采用标记整理算法，ParNew收集器其实就是Serial收集器的多线程版本</td>\n<td>ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百地保证能超越Serial收集器。当然，随着可以使用的CPU的数量的增加，它对于GC时系统资源的利用还是很有好处的。它默认开启的收集线程数与CPU的数量相同，在CPU非常多，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。</td>\n</tr>\n<tr>\n<td>ParallelScavenge收集器</td>\n<td>新生代收集器采用复制算法</td>\n<td>Parallel Scavenge 收集 器 的 特点 是它 的 关注 点 与其 他 收集 器 不同， CMS 等 收集 器 的 关注 点 尽可能 地 缩短 垃圾 收集 时 用户 线程 的 停顿 时间， 而 Parallel Scavenge 收集 器 的 目标 则是 达到 一个 可 控制 的 吞吐量（ Throughput）。</td>\n</tr>\n<tr>\n<td>Serial Old 收集 器</td>\n<td>Serial Old 是 Serial 收集 器 的 老年 代 版本 标记-整理算法</td>\n<td>这个 收集 器 的 主要 意义 也是 被 Client 模式 下 的 虚拟 机 使用</td>\n</tr>\n<tr>\n<td>Parallel Old 收集 器</td>\n<td>Parallel Scavenge 收集 器 的 老年 代 版本 标记-整理算法</td>\n<td>注重 吞吐量 及 CPU 资源 敏感 的 场合， 都可以 优先 考虑 Parallel Scavenge 加 Parallel Old 收集 器。</td>\n</tr>\n<tr>\n<td>CMS收集器</td>\n<td>CMS（ConcurrentMarkSweep）针对老年代进行回收的GC，标记-清除算法</td>\n<td>收集器是一种以获取最短回收停顿时间为目标的收集器</td>\n</tr>\n<tr>\n<td>G1收集器</td>\n<td>内存结构变更，相对于CMS的“标记——清理”算法，G1会使用压缩算法，保证不产生多余的碎片。收集阶段，G1会将某个区域存活的对象拷贝的其他区域，然后将整个区域整个回收。</td>\n<td>服务类型的收集器，目标是多处理器机器、大内存机器。它高度符合垃圾收集暂停时间的目标，同时实现高吞吐量。Oracle JDK 7 update 4 以及更新发布版完全支持G1垃圾收集器。</td>\n</tr>\n</tbody></table>\n<p>并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。<br>并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序继续运行，而垃圾收集程序运行于另一个CPU上。<br>如果说收集算法是内存回收的方法论，垃圾收集器就是内存回收的具体实现。Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大的差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。这里讨论的收集器基于SunHotSpot虚拟机1.6版Update22，这个虚拟机包含的所有收集器如图所示。</p>\n<p><img src=\"http://img.blog.csdn.net/20170728221643962?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>HotSpotJVM1.6的垃圾收集器展示了7种作用于不同分代的收集器（包括JDK1.6_Update14后引入的EarlyAccess版G1收集器），如果两个收集器之间存在连线，就说明它们可以搭配使用。在介绍这些收集器各自的特性之前，我们先来明确一个观点：虽然我们是在对各个收集器进行比较，但并非为了挑选一个最好的收集器出来。因为直到现在为止还没有最好的收集器出现，更加没有万能的收集器，所以我们选择的只是对具体应用最合适的收集器。这点不需要多加解释就能证明：如果有一种放之四海皆准、任何场景下都适用的完美收集器存在，那HotSpot虚拟机就没必要实现那么多不同的收集器了。<br>####3.2.1 Serial收集器<br>         Serial收集器是最基本、发展历史最悠久的收集器，曾经（在JDK 1.3.1之前）是虚拟机新生代收集的唯一选择。大家看名字就会知道，这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。“Stop The World”这个名字也许听起来很酷，但这项工作实际上是由虚拟机在后台自动发起和自动完成的，在用户不可见的情况下把用户正常工作的线程全部停掉，这对很多应用来说都是难以接受的。读者不妨试想一下，要是你的计算机每运行一个小时就会暂停响应5分钟，你会有什么样的心情？Serial / Serial Old收集器的运行过程如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170728221849904?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>从 JDK 1.3 开始，一直到现在最新的 JDK 1.7，HotSpot 虚拟机开发团队为消除或者减少工作线程因内存回收而导致停顿的努力一直在进行着，从 Serial 收集器到 Parallel 收集器，再到 Concurrent Mark Sweep（CMS）乃至 GC 收集器的最前沿成果 Garbage First（G1）收集器，我们看到了一个个越来越优秀（也越来越复杂）的收集器的出现，用户线程的停顿时间在不断缩短，但是仍然没有办法完全消除（这里暂不包括 RTSJ 中的收集器）。寻找更优秀的垃圾收集器的工作仍在继续！</p>\n<p>写到这里，笔者似乎已经把 Serial 收集器描述成一个“老而无用、食之无味弃之可惜”的鸡肋了，但实际上到现在为止，它依然是虚拟机运行在 Client 模式下的默认新生代收集器。它也有着优于其他收集器的地方：简单而高效（与其他收集器的单线程比），对于限定单个 CPU 的环境来说，Serial 收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。在用户的桌面应用场景中，分配给虚拟机管理的内存一般来说不会很大，收集几十兆甚至一两百兆的新生代（仅仅是新生代使用的内存，桌面应用基本上不会再大了），停顿时间完全可以控制在几十毫秒最多一百多毫秒以内，只要不是频繁发生，这点停顿是可以接受的。所以，Serial 收集器对于运行在 Client 模式下的虚拟机来说是一个很好的选择。</p>\n<h4 id=\"3-2-2-ParNew收集器\"><a href=\"#3-2-2-ParNew收集器\" class=\"headerlink\" title=\"3.2.2 ParNew收集器\"></a>3.2.2 ParNew收集器</h4><p>ParNew收集器其实就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数（例如：-XX:SurvivorRatio、 -XX:PretenureSizeThreshold、-XX:HandlePromotionFailure等）、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，实现上这两种收集器也共用了相当多的代码。ParNew收集器的工作过程如下</p>\n<p><img src=\"http://img.blog.csdn.net/20170728221941057?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>ParNew收集器除了多线程收集之外，其他与Serial收集器相比并没有太多创新之处，但它却是许多运行在Server模式下的虚拟机中首选的新生代收集器，其中有一个与性能无关但很重要的原因是，除了Serial收集器外，目前只有它能与CMS收集器配合工作。在JDK 1.5时期，HotSpot推出了一款在强交互应用中几乎可称为有划时代意义的垃圾收集器—CMS收集器（Concurrent Mark Sweep，本节稍后将详细介绍这款收集器），这款收集器是HotSpot虚拟机中第一款真正意义上的并发（Concurrent）收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作，用前面那个例子的话来说，就是做到了在你妈妈打扫房间的时候你还能同时往地上扔纸屑。</p>\n<p>不幸的是，它作为老年代的收集器，却无法与 JDK 1.4.0 中已经存在的新生代收集器 Parallel Scavenge 配合工作，所以在 JDK 1.5 中使用 CMS 来收集老年代的时候，新生代只能选择 ParNew 或 Serial 收集器中的一个。ParNew 收集器也是使用 -XX: +UseConcMarkSweepGC 选项后的默认新生代收集器，也可以使用 -XX:+UseParNewGC 选项来强制指定它。</p>\n<p>ParNew 收集器在单 CPU 的环境中绝对不会有比 Serial 收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个 CPU 的环境中都不能百分之百地保证能超越 Serial 收集器。当然，随着可以使用的 CPU 的数量的增加，它对于 GC 时系统资源的利用还是很有好处的。它默认开启的收集线程数与 CPU 的数量相同，在 CPU 非常多（譬如 32 个，现在 CPU 动辄就 4 核加超线程，服务器超过 32 个逻辑 CPU 的情况越来越多了）的环境下，可以使用-XX:ParallelGCThreads 参数来限制垃圾收集的线程数。</p>\n<p>注意 从 ParNew 收集器开始，后面还将会接触到几款并发和并行的收集器。在大家可能产生疑惑之前，有必要先解释两个名词：并发和并行。这两个名词都是并发编程中的概念，在谈论垃圾收集器的上下文语境中，他们可以解释为： 并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。 并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序继续运行，而垃圾收集程序运行于另一个 CPU 上。</p>\n<h4 id=\"3-2-3-ParallelScavenge收集器\"><a href=\"#3-2-3-ParallelScavenge收集器\" class=\"headerlink\" title=\"3.2.3 ParallelScavenge收集器\"></a>3.2.3 ParallelScavenge收集器</h4><p>Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器……看上去和ParNew都一样，那它有什么特别之处呢？</p>\n<p>Parallel Scavenge 收集器的特点是它的关注点与其他收集器不同，CMS 等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而 Parallel Scavenge 收集器的目标则是达到一个可控制的吞吐量（Throughput）。所谓吞吐量就是 CPU 用于运行用户代码的时间与 CPU 总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间），虚拟机总共运行了 100 分钟，其中垃圾收集花掉 1 分钟，那吞吐量就是 99%。</p>\n<p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</p>\n<p>Parallel Scavenge 收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间的-XX:MaxGCPauseMillis 参数以及直接设置吞吐量大小的-XX:GCTimeRatio 参数。</p>\n<p>MaxGCPauseMillis 参数允许的值是一个大于 0 的毫秒数，收集器将尽可能地保证内存回收花费的时间不超过设定值。不过大家不要认为如果把这个参数的值设置得稍小一点就能使得系统的垃圾收集速度变得更快，GC 停顿时间缩短是以牺牲吞吐量和新生代空间来换取的：系统把新生代调小一些，收集 300MB 新生代肯定比收集 500MB 快吧，这也直接导致垃圾收集发生得更频繁一些，原来 10 秒收集一次、每次停顿 100 毫秒，现在变成 5 秒收集一次、每次停顿 70 毫秒。停顿时间的确在下降，但吞吐量也降下来了。</p>\n<p>GCTimeRatio 参数的值应当是一个大于 0 且小于 100 的整数，也就是垃圾收集时间占总时间的比率，相当于是吞吐量的倒数。如果把此参数设置为 19，那允许的最大 GC 时间就占总时间的 5%（即 1 /（1+19）），默认值为 99，就是允许最大 1%（即 1 /（1+99））的垃圾收集时间。</p>\n<p>由于与吞吐量关系密切，Parallel Scavenge 收集器也经常称为“吞吐量优先”收集器。除上述两个参数之外，Parallel Scavenge 收集器还有一个参数-XX:+UseAdaptiveSizePolicy 值得关注。这是一个开关参数，当这个参数打开之后，就不需要手工指定新生代的大小（-Xmn）、Eden 与 Survivor 区的比例（-XX:SurvivorRatio）、晋升老年代对象年龄（-XX:PretenureSizeThreshold）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为 GC 自适应的调节策略（GC Ergonomics）。如果读者对于收集器运作原来不太了解，手工优化存在困难的时候，使用 Parallel Scavenge 收集器配合自适应调节策略，把内存管理的调优任务交给虚拟机去完成将是一个不错的选择。只需要把基本的内存数据设置好（如-Xmx 设置最大堆），然后使用 MaxGCPauseMillis 参数（更关注最大停顿时间）或 GCTimeRatio（更关注吞吐量）参数给虚拟机设立一个优化目标，那具体细节参数的调节工作就由虚拟机完成了。自适应调节策略也是 Parallel Scavenge 收集器与 ParNew 收集器的一个重要区别。</p>\n<p>####3.2.4 Serial Old 收集 器<br>   Serial Old 是 Serial 收集 器 的 老年 代 版本， 它 同样是 一个 单线 程 收集 器， 使用“ 标记- 整理” 算法。 这个 收集 器 的 主要 意义 也是 被 Client 模式 下 的 虚拟 机 使用。 如果 在 Server 模式 下， 它 主要 还有 两大 用途： 一个 是在 JDK 1. 5 及 之前 的 版本 中 与 Parallel Scavenge 收集 器 搭配 使用[ 4]， 另外 一个 就是 作为 CMS 收集 器 的 后备 预 案， 在 并发 收集 发生 Concurrent Mode Failure 的 时候 使用。 这 两点 都将 在后 面的 内容 中 详细 讲解。 Serial Old 收集 器 的 工作 过程 如图 所示。</p>\n<p><img src=\"http://img.blog.csdn.net/20170729114927185?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>####3.2.5 Parallel Old 收集 器<br>  Parallel Old 是 Parallel Scavenge 收集 器 的 老年 代 版本， 使用 多 线程 和“ 标记－整理” 算法。 这个 收集 器 是在 JDK 1. 6 中 才 开始 提供 的， 在此之前， 新生代 的 Parallel Scavenge 收集 器 一直 处于 比较 尴尬 的 状态。 原因 是， 如果 新生代 选择 了 Parallel Scavenge 收集 器， 老年 代 除了 Serial Old（ PS MarkSweep） 收集 器 外 别无选择（ 还 记得 上面 说过 Parallel Scavenge 收集 器 无法 与 CMS 收集 器 配合 工作 吗？）。 由于 单 线程 的 老 年代 Serial Old 收集 器 在 服务 端 应用 性 能上 的“ 拖累”， 即便 使用 了 Parallel Scavenge 收集 器 也 未必 能在 整体 应用 上 获得 吞吐量 最大化 的 效果， 又因 为 老年 代收 集中 无法 充分 利用 服务器 多 CPU 的 处理 能力， 在 老年 代 很大 而且 硬件 比较 高级的 环境 中， 这种 组合 的 吞吐量 甚至 还不 一 定有 ParNew 加 CMS 的 组合“ 给 力”。 直到 Parallel Old 收集 器 出现 后，“ 吞吐量 优先” 收集 器 终于 有了 比较 名副其实 的 应用 组合， 在 注重 吞吐量 及 CPU 资源 敏感 的 场合， 都可以 优先 考虑 Parallel Scavenge 加 Parallel Old 收集 器。 Parallel Old 收集 器 的 工作 过程 如图所示。<br> <img src=\"http://img.blog.csdn.net/20170728222929126?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h4 id=\"3-2-6-CMS收集器\"><a href=\"#3-2-6-CMS收集器\" class=\"headerlink\" title=\"3.2.6 CMS收集器\"></a>3.2.6 CMS收集器</h4><p>CMS（ConcurrentMarkSweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。从名字（包含“MarkSweep”）上就可以看出CMS收集器是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分如下步骤，<br>包括：</p>\n<table>\n<thead>\n<tr>\n<th>阶段</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(1) 初始标记 (Initial Mark)</td>\n<td>(Stop the World Event,所有应用线程暂停) 在老年代(old generation)中的对象, 如果从年轻代(young generation)中能访问到, 则被 “标记,marked” 为可达的(reachable).对象在旧一代“标志”可以包括这些对象可能可以从年轻一代。暂停时间一般持续时间较短,相对小的收集暂停时间.</td>\n</tr>\n<tr>\n<td>(2) 并发标记 (Concurrent Marking)</td>\n<td>在Java应用程序线程运行的同时遍历老年代(tenured generation)的可达对象图。扫描从被标记的对象开始,直到遍历完从root可达的所有对象. 调整器(mutators)在并发阶段的2、3、5阶段执行,在这些阶段中新分配的所有对象(包括被提升的对象)都立刻标记为存活状态.</td>\n</tr>\n<tr>\n<td>(3) 再次标记(Remark)</td>\n<td>(Stop the World Event, 所有应用线程暂停) 查找在并发标记阶段漏过的对象，这些对象是在并发收集器完成对象跟踪之后由应用线程更新的.</td>\n</tr>\n<tr>\n<td>(4) 并发清理(Concurrent Sweep)</td>\n<td>回收在标记阶段(marking phases)确定为不可及的对象. 死对象的回收将此对象占用的空间增加到一个空闲列表(free list),供以后的分配使用。死对象的合并可能在此时发生. 请注意,存活的对象并没有被移动.</td>\n</tr>\n<tr>\n<td>(5) 重置(Resetting)</td>\n<td>清理数据结构,为下一个并发收集做准备.</td>\n</tr>\n<tr>\n<td>其中初始标记、重新标记这两个步骤仍然需要“StopTheWorld”。初始标记仅仅只是标记一下GCRoots能直接关联到的对象，速度很快，并发标记阶段就是进行GCRootsTracing的过程，而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行的。ConcurrentMarkSweep收集器运行示意图：</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img src=\"http://img.blog.csdn.net/20170728222952502?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>CMS是一款优秀的收集器，它的最主要优点在名字上已经体现出来了：并发收集、低停顿，Sun的一些官方文档里面也称之为并发低停顿收集器（ConcurrentLowPauseCollector）。但是CMS还远达不到完美的程度，它有以下三个显著的缺点：</p>\n<ul>\n<li>CMS收集器对CPU资源非常敏感。其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。CMS默认启动的回收线程数是（CPU数量+3）/4，也就是当CPU在4个以上时，并发回收时垃圾收集线程最多占用不超过25%的CPU资源。但是当CPU不足4个时（譬如2个），那么CMS对用户程序的影响就可能变得很大，如果CPU负载本来就比较大的时候，还分出一半的运算能力去执行收集器线程，就可能导致用户程序的执行速度忽然降低了50%，这也很让人受不了。为了解决这种情况，虚拟机提供了一种称为“增量式并发收集器”（IncrementalConcurrentMarkSweep/i-CMS）的CMS收集器变种，所做的事情和单CPU年代PC机操作系统使用抢占式来模拟多任务机制的思想一样，就是在并发标记和并发清理的时候让GC线程、用户线程交替运行，尽量减少GC线程的独占资源的时间，这样整个垃圾收集的过程会更长，但对用户程序的影响就会显得少一些，速度下降也就没有那么明显，但是目前版本中，i-CMS已经被声明为“deprecated”，即不再提倡用户使用。</li>\n<li>CMS收集器无法处理浮动垃圾（FloatingGarbage），可能出现“ConcurrentModeFailure”失败而导致另一次FullGC的产生。由于CMS并发清理阶段用户线程还在运行着，伴随程序的运行自然还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在本次收集中处理掉它们，只好留待下一次GC时再将其清理掉。这一部分垃圾就称为“浮动垃圾”。也是由于在垃圾收集阶段用户线程还需要运行，即还需要预留足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。在默认设置下，CMS收集器在老年代使用了68%的空间后就会被激活，这是一个偏保守的设置，如果在应用中老年代增长不是太快，可以适当调高参数-XX：CMSInitiatingOccupancyFraction的值来提高触发百分比，以便降低内存回收次数以获取更好的性能。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“ConcurrentModeFailure”失败，这时候虚拟机将启动后备预案：临时启用SerialOld收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。所以说参数-XX：CMSInitiatingOccupancyFraction设置得太高将会很容易导致大量“ConcurrentModeFailure”失败，性能反而降低。</li>\n<li>还有最后一个缺点，在本节在开头说过，CMS是一款基于“标记-清除”算法实现的收集器，如果读者对前面这种算法介绍还有印象的话，就可能想到这意味着收集结束时会产生大量空间碎片。空间碎片过多时，将会给大对象分配带来很大的麻烦，往往会出现老年代还有很大的空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次FullGC。为了解决这个问题，CMS收集器提供了一个-XX：+UseCMSCompactAtFullCollection开关参数，用于在“享受”完FullGC服务之后额外免费附送一个碎片整理过程，内存整理的过程是无法并发的。空间碎片问题没有了，但停顿时间不得不变长了。虚拟机设计者们还提供了另外一个参数-XX：CMSFullGCsBeforeCompaction，这个参数用于设置在执行多少次不压缩的FullGC后，跟着来一次带压缩的。<br>后续分开介绍：</li>\n</ul>\n<h4 id=\"3-2-7-G1收集器G1（GarbageFirst）收集器\"><a href=\"#3-2-7-G1收集器G1（GarbageFirst）收集器\" class=\"headerlink\" title=\"3.2.7.G1收集器G1（GarbageFirst）收集器\"></a>3.2.7.G1收集器G1（GarbageFirst）收集器</h4><p>G1 GC 是 Jdk7 的新特性之一、Jdk7+版本都可以自主配置 G1 作为 JVM GC 选项；作为 JVM GC 算法的一次重大升级、DK7u 后 G1 已相对稳定、且未来计划替代 CMS、所以有必要深入了解下：</p>\n<p>不同于其他的分代回收算法、G1 将堆空间划分成了互相独立的区块。每块区域既有可能属于 O 区、也有可能是 Y 区，且每类区域空间可以是不连续的（对比 CMS 的 O 区和 Y 区都必须是连续的）。这种将 O 区划分成多块的理念源于：当并发后台线程寻找可回收的对象时、有些区块包含可回收的对象要比其他区块多很多。虽然在清理这些区块时 G1 仍然需要暂停应用线程、但可以用相对较少的时间优先回收包含垃圾最多区块。如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170729121950668?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这也是为什么G1命名为Garbage First的原因：第一时间处理垃圾最多的区块。<br>平时工作中大多数系统都使用CMS、即使静默升级到JDK7默认仍然采用CMS、那么G1相对于CMS的区别在：</p>\n<p>G1 在压缩空间方面有优势<br>G1 通过将内存空间分成区域（Region）的方式避免内存碎片问题<br>Eden, Survivor, Old 区不再固定、在内存使用效率上来说更灵活<br>G1 可以通过设置预期停顿时间（Pause Time）来控制垃圾收集时间避免应用雪崩现象<br>G1 在回收内存后会马上同时做合并空闲内存的工作、而 CMS 默认是在 STW（stop the world）的时候做<br>G1 会在 Young GC 中使用、而 CMS 只能在 O 区使用<br>就目前而言、CMS 还是默认首选的 GC 策略、可能在以下场景下 G1 更适合：</p>\n<p>服务端多核 CPU、JVM 内存占用较大的应用（至少大于 4G）<br>应用在运行过程中会产生大量内存碎片、需要经常压缩空间<br>想要更可控、可预期的 GC 停顿周期；防止高并发下应用雪崩现象<br>一次完整 G1GC 的详细过程：</p>\n<p>G1 在运行过程中主要包含如下 4 种操作方式：</p>\n<p>YGC（不同于 CMS）<br>并发阶段<br>混合模式<br>full GC （一般是 G1 出现问题时发生）<br>YGC：</p>\n<p>下面是一次 YGC 前后内存区域是示意图：</p>\n<p><img src=\"http://img.blog.csdn.net/20170729120730189?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>图中每个小区块都代表 G1 的一个区域（Region），区块里面的字母代表不同的分代内存空间类型（如[E]Eden,[O]Old,[S]Survivor）空白的区块不属于任何一个分区；G1 可以在需要的时候任意指定这个区域属于 Eden 或是 O 区之类的。<br>G1 YoungGC 在 Eden 充满时触发，在回收之后所有之前属于 Eden 的区块全变成空白。然后至少有一个区块是属于 S 区的（如图半满的那个区域），同时可能有一些数据移到了 O 区。</p>\n<p>目前淘系的应用大都使用 PrintGCDetails 参数打出 GC 日志、这个参数对 G1 同样有效、但日志内容颇为不同；下面是一个 Young GC 的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">23.430: [GC pause (young), 0.23094400 secs]</span><br><span class=\"line\">...</span><br><span class=\"line\">[Eden: 1286M(1286M)-&gt;0B(1212M)</span><br><span class=\"line\">Survivors: 78M-&gt;152M Heap: 1454M(4096M)-&gt;242M(4096M)][times: user=0.85 sys=0.05, real=0.23 secs]</span><br></pre></td></tr></table></figure>\n\n<p>上面日志的内容解析：Young GC 实际占用 230 毫秒、其中 GC 线程占用 850 毫秒的 CPU 时间<br>E：内存占用从 1286MB 变成 0、都被移出<br>S：从 78M 增长到了 152M、说明从 Eden 移过来 74M<br>Heap:占用从 1454 变成 242M、说明这次 Young GC 一共释放了 1212M 内存空间<br>很多情况下，S 区的对象会有部分晋升到 Old 区，另外如果 S 区已满、Eden 存活的对象会直接晋升到 Old 区，这种情况下 Old 的空间就会涨</p>\n<p>并发阶段：</p>\n<p>一个并发 G1 回收周期前后内存占用情况如下图所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20170729120816584?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>从上面的图表可以看出以下几点：<br>1、Young区发生了变化、这意味着在G1并发阶段内至少发生了一次YGC（这点和CMS就有区别），Eden在标记之前已经被完全清空，因为在并发阶段应用线程同时在工作、所以可以看到Eden又有新的占用<br>2、一些区域被X标记，这些区域属于O区，此时仍然有数据存放、不同之处在G1已标记出这些区域包含的垃圾最多、也就是回收收益最高的区域<br>3、在并发阶段完成之后实际上O区的容量变得更大了（O+X的方块）。这时因为这个过程中发生了YGC有新的对象进入所致。此外，这个阶段在O区没有回收任何对象：它的作用主要是标记出垃圾最多的区块出来。对象实际上是在后面的阶段真正开始被回收</p>\n<p>G1 并发标记周期可以分成几个阶段、其中有些需要暂停应用线程。第一个阶段是初始标记阶段。这个阶段会暂停所有应用线程-部分原因是这个过程会执行一次 YGC、下面是一个日志示例：</p>\n<blockquote>\n<p>50.541: [GC pause (young) (initial-mark), 0.27767100 secs][eden: 1220m(1220m)-&gt;0b(1220m) survivors: 144m-&gt;144m heap: 3242m(4096m)-&gt;2093m(4096m)] [Times: user=1.02 sys=0.04, real=0.28</p>\n<blockquote>\n<p>secs]</p>\n</blockquote>\n</blockquote>\n<p>上面的日志表明发生了 YGC、应用线程为此暂停了 280 毫秒，Eden 区被清空（71MB 从 Young 区移到了 O 区）。<br>日志里面 initial-mark 的字样表明后台的并发 GC 阶段开始了。因为初始标记阶段本身也是要暂停应用线程的，<br>G1 正好在 YGC 的过程中把这个事情也一起干了。为此带来的额外开销不是很大、增加了 20%的 CPU，暂停时间相应的略微变长了些。</p>\n<p>接下来，G1 开始扫描根区域、日志示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">50.819: [GC concurrent-root-region-scan-start]</span><br><span class=\"line\">51.408: [GC concurrent-root-region-scan-end, 0.5890230]</span><br></pre></td></tr></table></figure>\n\n<p>一共花了 580 毫秒，这个过程没有暂停应用线程；是后台线程并行处理的。这个阶段不能被 YGC 所打断、因此后台线程有足够的 CPU 时间很关键。如果 Young 区空间恰好在 Root 扫描的时候<br>满了、YGC 必须等待 root 扫描之后才能进行。带来的影响是 YGC 暂停时间会相应的增加。这时的 GC 日志是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 350.994: [GC pause (young)</span><br><span class=\"line\">&gt; 351.093: [GC concurrent-root-region-scan-end, 0.6100090]</span><br><span class=\"line\">&gt; 351.093: [GC concurrent-mark-start],0.37559600 secs]</span><br></pre></td></tr></table></figure>\n\n<p>GC 暂停这里可以看出在 root 扫描结束之前就发生了，表明 YGC 发生了等待，等待时间大概是 100 毫秒。<br>在 root 扫描完成后，G1 进入了一个并发标记阶段。这个阶段也是完全后台进行的；GC 日志里面下面的信息代表这个阶段的开始和结束：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">111.382: [GC concurrent-mark-start] ....</span><br><span class=\"line\">120.905: [GC concurrent-mark-end, 9.5225160 sec]</span><br></pre></td></tr></table></figure>\n\n<p>并发标记阶段是可以被打断的，比如这个过程中发生了 YGC 就会。这个阶段之后会有一个二次标记阶段和清理阶段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 120.910: [GC remark 120.959: [GC ref-PRC, 0.0000890 secs], 0.0718990 secs][times: user=0.23 sys=0.01, real=0.08 secs]</span><br><span class=\"line\">&gt; 120.985: [GC cleanup 3510M-&gt;3434M(4096M), 0.0111040 secs][times: user=0.04 sys=0.00, real=0.01 secs]</span><br></pre></td></tr></table></figure>\n\n<p>这两个阶段同样会暂停应用线程，但时间很短。接下来还有额外的一次并发清理阶段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">120.996: [GC concurrent-cleanup-start]</span><br><span class=\"line\">120.996: [GC concurrent-cleanup-end, 0.0004520]</span><br></pre></td></tr></table></figure>\n<p>到此为止，正常的一个 G1 周期已完成–这个周期主要做的是发现哪些区域包含可回收的垃圾最多（标记为 X），实际空间释放较少。</p>\n<p>混合 GC：</p>\n<p>接下来 G1 执行一系列的混合 GC。这个时期因为会同时进行 YGC 和清理上面已标记为 X 的区域，所以称之为混合阶段，下面是一个混合 GC 执行的前后示意图：</p>\n<p><img src=\"http://img.blog.csdn.net/20170729120910552?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>像普通的YGC那样、G1完全清空掉Eden同时调整survivor区。另外，两个标记也被回收了，他们有个共同的特点是包含最多可回收的对象，因此这两个区域绝对部分空间都被释放了。这两个区域任何存活的对象都被移到了其他区域（和YGC存活对象晋升到O区类似）。这就是为什么G1的堆比CMS内存碎片要少很多的原因–移动这些对象的同时也就是在压缩对内存。下面是一个混合GC的日志：</p>\n<blockquote>\n<p>79.826: [GC pause (mixed), 0.26161600 secs] …. [Eden: 1222M(1222M)-&gt;0B(1220M) Survivors: 142M-&gt;144M Heap:<br>3200M(4096M)-&gt;1964M(4096M)][times: user=1.01 sys=0.00, real=0.26 secs]<br>上面的日志可以注意到 Eden 释放了 1222MB、但整个堆的空间释放内存要大于这个数目。数量相差看起来比较少、只有 16MB，但是要考虑同时有 survivor 区的对象晋升到 O 区；另外，每次混合 GC 只是清理一部分的 O 区内存，整个 GC 会一直持续到几乎所有的标记区域垃圾对象都被回收，这个阶段完了之后 G1 会重新回到正常的 YGC 阶段。周期性的，当 O 区内存占用达到一定数量之后 G1 又会开启一次新的并行 GC 阶段.<br>后续分开介绍：。。</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>深入理解 java 虚拟机<br><a href=\"http://ifeve.com/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/\">http://ifeve.com/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JVM垃圾回收\"><a href=\"#JVM垃圾回收\" class=\"headerlink\" title=\"JVM垃圾回收\"></a>JVM垃圾回收</h1><h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h2><p> jvm要进行垃圾回收粗略分为两个步骤：找出需要清理的内存(无效的内存区域) ， 清理无效的内存区域<br> 程序计数器、虚拟机栈、本地方法栈三个区域随线程而生，随线程而灭；栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作。每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的（尽管在运行期会由JIT编译器进行一些优化，但在本章基于概念模型的讨论中，大体上可以认为是编译期可知的），因此这几个区域的内存分配和回收都具备确定性，在这几个区域内不需要过多考虑回收的问题，因为方法结束或线程结束时，内存自然就跟随着回收了。而Java堆和方法区则不一样，一个接口中的多个实现类需要的内存可能不一样，一个方法中的多个分支需要的内存也可能不一样，我们只有在程序处于运行期间时才能知道会创建哪些对象，这部分内存的分配和回收都是动态的，垃圾回收所关注的是这部分内存。</p>\n<h2 id=\"2-无效内存区域的查找\"><a href=\"#2-无效内存区域的查找\" class=\"headerlink\" title=\"2. 无效内存区域的查找\"></a>2. 无效内存区域的查找</h2><h3 id=\"2-1-概要\"><a href=\"#2-1-概要\" class=\"headerlink\" title=\"2.1 概要\"></a>2.1 概要</h3><p>Java堆中几乎存放着Java世界中所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象有哪些还“存活”着，哪些已经“死去”。判断方法有引用计数器法和根搜索算法等。</p>\n<h4 id=\"2-1-1-引用计数算法\"><a href=\"#2-1-1-引用计数算法\" class=\"headerlink\" title=\"2.1.1 引用计数算法\"></a>2.1.1 引用计数算法</h4><p>简单解释为给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当该引用失效时，计数器值就减1；任何时刻计数器都为0的对象就是不可能再被使用的。客观地说，引用计数算法（ReferenceCounting）的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，也有一些比较著名的应用案例，例如微软的COM（ComponentObjectModel）技术、使用ActionScript3的FlashPlayer、Python语言以及在游戏脚本领域中被广泛应用的Squirrel中都使用了引用计数算法进行内存管理。但Java语言中没有选用引用计数算法来管理内存，其中最主要的原因是它很难解决对象之间的相互循环引用的问题。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *testGC()方法执行后，objA和objB会不会被GC呢？</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@authorzzm</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReferenceCountingGC</span></span>&#123;　　</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object instance=<span class=\"keyword\">null</span>;　　 </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> _1MB=<span class=\"number\">1024</span>*<span class=\"number\">1024</span>;　　</span><br><span class=\"line\">\t<span class=\"comment\">/**　　</span></span><br><span class=\"line\"><span class=\"comment\">\t*这个成员属性的唯一意义就是占点内存，以便能在GC日志中看清楚是否被回收过　　</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span>　　</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] bigSize=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">2</span>*_1MB];　　</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testGC</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tReferenceCountingGC objA = <span class=\"keyword\">new</span> ReferenceCountingGC();</span><br><span class=\"line\">\tReferenceCountingGC objB = newReferenceCountingGC();</span><br><span class=\"line\">\tobjA.instance = objB;</span><br><span class=\"line\">\tobjB.instance = objA;</span><br><span class=\"line\">\tobjA = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">\tobjB = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//假设在这行发生GC，那么objA和objB是否能被回收？</span></span><br><span class=\"line\">\tSystem.gc();　　</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">运行结果：</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[FullGC(System)</span><br><span class=\"line\">[Tenured:0K-&gt;210K(10240K),0.0149142secs]</span><br><span class=\"line\">4603K-&gt;210K(19456K),</span><br><span class=\"line\">[Perm:2999K-&gt;2999K(21248K)],0.0150007secs][Times:user=0.01sys=0.00,real=0.02secs]</span><br><span class=\"line\">Heapdefnewgenerationtotal9216K,used82K</span><br><span class=\"line\">[0x00000000055e0000,0x0000000005fe0000,0x0000000005fe0000)Edenspace8192K,1%used[0x00000000055e0000,0x00000000055f4850,0x0000000005de0000)</span><br><span class=\"line\">fromspace1024K,0%used[0x0000000005de0000,0x0000000005de0000,0x0000000005ee0000)</span><br><span class=\"line\">tospace1024K,0%used[0x0000000005ee0000,0x0000000005ee0000,0x0000000005fe0000)</span><br><span class=\"line\">tenuredgenerationtotal10240K,used210K[0x0000000005fe0000,0x00000000069e0000,0x00000000069e0000)</span><br><span class=\"line\">thespace10240K,2%used[0x0000000005fe0000,0x0000000006014a18,0x0000000006014c00,0x00000000069e0000)</span><br><span class=\"line\">compactingpermgentotal21248K,</span><br><span class=\"line\">used3016K[0x00000000069e0000,0x0000000007ea0000,0x000000000bde0000)</span><br><span class=\"line\">thespace21248K,14%used[0x00000000069e0000,0x0000000006cd2398,0x0000000006cd2400,0x0000000007ea0000)</span><br><span class=\"line\">Nosharedspacesconfigured.</span><br></pre></td></tr></table></figure>\n\n<p>代码中testGC()方法：对象objA和objB都有字段instance，赋值令objA.instance=objB及objB.instance=objA，除此之外，这两个对象再无任何引用，实际上这两个对象已经不可能再被访问，但是它们因为互相引用着对方，导致它们的引用计数都不为0，于是引用计数算法无法通知GC收集器回收它们，为引用计数器的缺陷。但从运行结果中可以清楚地看到GC日志中包含“4603K-&gt;210K”，意味着虚拟机并没有因为这两个对象互相引用就不回收它们，这也从侧面说明虚拟机并不是通过引用计数算法来判断对象是否存活的。</p>\n<h4 id=\"2-1-2-根搜索算法\"><a href=\"#2-1-2-根搜索算法\" class=\"headerlink\" title=\"2.1.2 根搜索算法\"></a>2.1.2 根搜索算法</h4><p>在主流的商用程序语言中（Java和C#，甚至包括前面提到的古老的Lisp），都是使用根搜索算法（GCRootsTracing）判定对象是否存活的。这个算法的基本思路就是通过一系列的名为“GCRoots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（ReferenceChain），当一个对象到GCRoots没有任何引用链相连（用图论的话来说就是从GCRoots到这个对象不可达）时，则证明此对象是不可用的。如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170728135643324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>对象object5、object6、object7虽然互相有关联，但是它们到GCRoots是不可达的，所以它们将会被判定为是可回收的对象。<br>在Java语言里，可作为GCRoots的对象包括下面几种：</p>\n<ul>\n<li>虚拟机栈（栈帧中的本地变量表）中的引用的对象。</li>\n<li>方法区中的类静态属性引用的对象。</li>\n<li>方法区中的常量引用的对象。</li>\n<li>本地方法栈中JNI（即一般说的Native方法）的引用的对象。</li>\n</ul>\n<h3 id=\"2-2-java的引用类型\"><a href=\"#2-2-java的引用类型\" class=\"headerlink\" title=\"2.2 java的引用类型\"></a>2.2 java的引用类型</h3><p>无论是通过引用计数算法判断对象的引用数量，还是通过根搜索算法判断对象的引用链是否可达，判定对象是否存活都与“引用”有关。在JDK1.2之前，Java中的引用的定义很传统：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。这种定义很纯粹，但是太过狭隘，一个对象在这种定义下只有被引用或者没有被引用两种状态，对于如何描述一些“食之无味，弃之可惜”的对象就显得无能为力。我们希望能描述这样一类对象：当内存空间还足够时，则能保留在内存之中；如果内存在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。很多系统的缓存功能都符合这样的应用场景。<br>JDK1.2之后，Java对引用的概念进行了扩充，并且引用强度不同。如下</p>\n<table>\n<thead>\n<tr>\n<th>引用类型</th>\n<th>概述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>强引用（StrongReference）</td>\n<td>强引用就是指在程序代码之中普遍存在的，类似“Objectobj=newObject()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象</td>\n</tr>\n<tr>\n<td>软引用（SoftReference）</td>\n<td>软引用用来描述一些还有用，但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中并进行第二次回收。如果这次回收还是没有足够的内存，才会抛出内存溢出异常。在JDK1.2之后，提供了SoftReference类来实现软引用</td>\n</tr>\n<tr>\n<td>弱引用（WeakReference）</td>\n<td>弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2之后，提供了WeakReference类来实现弱引用</td>\n</tr>\n<tr>\n<td>虚引用（PhantomReference）</td>\n<td>虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是希望能在这个对象被收集器回收时收到一个系统通知。在JDK1.2之后，提供了PhantomReference类来实现虚引用</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-3-对象自救\"><a href=\"#2-3-对象自救\" class=\"headerlink\" title=\"2.3 对象自救\"></a>2.3 对象自救</h3><p>在根搜索算法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经经历两次标记过程：如果对象在进行根搜索后发现没有与GCRoots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。如果这个对象被判定为有必要执行finalize()方法，那么这个对象将会被放置在一个名为F-Queue的队列之中，并在稍后由一条由虚拟机自动建立的、低优先级的Finalizer线程去执行。这里所谓的“执行”是指虚拟机会触发这个方法，但并不承诺会等待它运行结束。这样做的原因是，如果一个对象在finalize()方法中执行缓慢，或者发生了死循环（更极端的情况），将很可能会导致F-Queue队列中的其他对象永久处于等待状态，甚至导致整个内存回收系统崩溃。finalize()方法是对象逃脱死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（this关键字）赋值给某个类变量或对象的成员变量，那在第二次标记时它将被移除出“即将回收”的集合；如果对象这时候还没有逃脱，那它就真的离死不远了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***此代码演示了两点：</span></span><br><span class=\"line\"><span class=\"comment\"> *1.对象可以在被GC时自我拯救。</span></span><br><span class=\"line\"><span class=\"comment\"> *2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@authorzzm</span></span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalizeEscapeGC</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FinalizeEscapeGC SAVE_HOOK = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        SAVE_HOOK = <span class=\"keyword\">new</span> FinalizeEscapeGC(); <span class=\"comment\">//对象 第一次 成功 拯救 自己</span></span><br><span class=\"line\">        SAVE_HOOK = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        System.gc(); <span class=\"comment\">// 因为 Finalizer 方法 优先级 很低， 暂停 0. 5 秒， 以 等待 它</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SAVE_HOOK != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            SAVE_HOOK.isAlive();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot; no, i am dead :(&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"comment\">// 下面 这段 代码 与 上面 的 完全 相同， 但是 这次 自救 却 失败 了</span></span><br><span class=\"line\">        SAVE_HOOK = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        System.gc(); <span class=\"comment\">// 因为 Finalizer 方法 优先级 很低， 暂停 0. 5 秒， 以 等待 它</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SAVE_HOOK != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            SAVE_HOOK.isAlive();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot; no, i am dead :(&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">isAlive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; yes, i am still alive :)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.finalize();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot; finalize mehtod executed!&quot;</span>);</span><br><span class=\"line\">        FinalizeEscapeGC.SAVE_HOOK = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">finalize mehtod executed! </span><br><span class=\"line\">yes, i am still alive :) </span><br><span class=\"line\">no, i am dead :(</span><br></pre></td></tr></table></figure>\n\n<p>从代码中我们可以看到一个对象的finalize()被执行，但是它仍然可以存活。代码中一次对象自我拯救的演示，在运行结果可以看到，SAVE_HOOK对象的finalize()方法确实被GC收集器触发过，并且在被收集前成功逃脱了。另外一个值得注意的地方就是，代码中有两段完全一样的代码片段，执行结果却是一次逃脱成功，一次失败，这是因为任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临下一次回收，它的finalize()方法不会被再次执行，因此第二段代码的自救行动失败了。需要特别说明的是，上面关于对象死亡时finalize()方法的描述可能带有悲情的艺术色彩，笔者并不鼓励大家使用这种方法来拯救对象。相反，笔者建议大家尽量避免使用它，因为它不是C/C++中的析构函数，而是Java刚诞生时为了使C/C++程序员更容易接受它所做出的一个妥协。它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序。有些教材中提到它适合做“关闭外部资源”之类的工作，这完全是对这种方法的用途的一种自我安慰。finalize()能做的所有工作，使用try-finally或其他方式都可以做得更好、更及时，大家完全可以忘掉Java语言中还有这个方法的存在。</p>\n<h3 id=\"2-4-回收方法区\"><a href=\"#2-4-回收方法区\" class=\"headerlink\" title=\"2.4 回收方法区\"></a>2.4 回收方法区</h3><p>很多人认为方法区（或者HotSpot虚拟机中的永久代）是没有垃圾收集的，Java虚拟机规范中确实说过可以不要求虚拟机在方法区实现垃圾收集，而且在方法区进行垃圾收集的“性价比”一般比较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%~95%的空间，而永久代的垃圾收集效率远低于此。永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。回收废弃常量与回收Java堆中的对象非常类似。以常量池中字面量的回收为例，假如一个字符串“abc”已经进入了常量池中，但是当前系统没有任何一个String对象是叫做“abc”的，换句话说是没有任何String对象引用常量池中的“abc”常量，也没有其他地方引用了这个字面量，如果在这时候发生内存回收，而且必要的话，这个“abc”常量就会被系统“请”出常量池。常量池中的其他类（接口）、方法、字段的符号引用也与此类似。判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。<br>java中同时满足下面3个条件才能算是“无用的类”：</p>\n<ul>\n<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li>\n<li>加载该类的ClassLoader已经被回收。</li>\n<li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>\n</ul>\n<p>虚拟机可以对满足上述3个条件的无用类进行回收，这里说的仅仅是“可以”，而不是和对象一样，不使用了就必然会回收。<br>是否对类进行回收，HotSpot虚拟机提供了-Xnoclassgc参数进行控制。可以使用-verbose：class及-XX：+TraceClassLoading、-XX：+TraceClassUnLoading查看类的加载和卸载信息，其中-verbose：class和-XX：+TraceClassLoading可以在Product版的虚拟机中使用，但-XX：+TraceClassLoading参数需要fastdebug版的虚拟机支持。在大量使用反射、动态代理、CGLib等bytecode框架的场景，以及动态生成JSP和OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。</p>\n<h2 id=\"3-清理无效内存\"><a href=\"#3-清理无效内存\" class=\"headerlink\" title=\"3. 清理无效内存\"></a>3. 清理无效内存</h2><h3 id=\"3-1-垃圾收集算法\"><a href=\"#3-1-垃圾收集算法\" class=\"headerlink\" title=\"3.1 垃圾收集算法\"></a>3.1 垃圾收集算法</h3><p>由于垃圾收集算法的实现涉及大量的程序细节，而且各个平台的虚拟机操作内存的方法又各不相同，因此本节不打算过多地讨论算法的实现，只是介绍几种算法的思想及其发展过程。</p>\n<h4 id=\"3-1-1-标记-清除算法\"><a href=\"#3-1-1-标记-清除算法\" class=\"headerlink\" title=\"3.1.1 标记-清除算法\"></a>3.1.1 标记-清除算法</h4><p>最基础的收集算法是“标记-清除”（Mark-Sweep）算法，如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象，它的标记过程其实在前一节讲述对象标记判定时已经基本介绍过了。之所以说它是最基础的收集算法，是因为后续的收集算法都是基于这种思路并对其缺点进行改进而得到的。<br>它的主要缺点有两个：</p>\n<ul>\n<li>一个是效率问题，标记和清除过程的效率都不高；</li>\n<li>一个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。<br>如下图为执行标记清除算法后的内存区域：</li>\n</ul>\n<p><img src=\"http://img.blog.csdn.net/20170729100915368?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h4 id=\"3-1-2-标记-整理算法\"><a href=\"#3-1-2-标记-整理算法\" class=\"headerlink\" title=\"3.1.2 标记-整理算法\"></a>3.1.2 标记-整理算法</h4><p>标记操作和“标记-清除”算法一致，后续操作不只是直接清理对象，而是在清理无用对象完成后让所有存活的对象都向一端移动，并更新引用其对象的指针。<br>主要缺点：在标记-清除的基础上还需进行对象的移动，成本相对较高，好处则是不会产生内存碎片。<br>如下图为执行标记清除算法后的内存区域：</p>\n<p><img src=\"http://img.blog.csdn.net/20170729100943066?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>####3.1.3 复制算法</p>\n<p>为了解决效率问题，一种称为“复制”（Copying）的收集算法出现了，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对其中的一块进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为原来的一半，未免太高了一点。<br>复制算法执行后的内存区域：</p>\n<p><img src=\"http://img.blog.csdn.net/20170729101006020?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h4 id=\"3-1-4-分代收集算法\"><a href=\"#3-1-4-分代收集算法\" class=\"headerlink\" title=\"3.1.4 分代收集算法\"></a>3.1.4 分代收集算法</h4><p>分代收集算法当前商业虚拟机的垃圾收集都采用“分代收集”（GenerationalCollection）算法，这种算法并没有什么新的思想，只是根据对象的存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。</p>\n<h3 id=\"3-2-垃圾收集器\"><a href=\"#3-2-垃圾收集器\" class=\"headerlink\" title=\"3.2 垃圾收集器\"></a>3.2 垃圾收集器</h3><p>垃圾收集器对比</p>\n<table>\n<thead>\n<tr>\n<th>垃圾收集器</th>\n<th>解释</th>\n<th>对比</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Serial收集器</td>\n<td>新生代复制算法，老年代采用标记整理算法，Serial收集器到JDK1.7为止，它依然是JAVA虚拟机运行在Client模式下的默认新生代收集器。</td>\n<td>它也有着优于其他收集器的地方：简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率</td>\n</tr>\n<tr>\n<td>ParNew收集器</td>\n<td>新生代复制算法，老年代采用标记整理算法，ParNew收集器其实就是Serial收集器的多线程版本</td>\n<td>ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百地保证能超越Serial收集器。当然，随着可以使用的CPU的数量的增加，它对于GC时系统资源的利用还是很有好处的。它默认开启的收集线程数与CPU的数量相同，在CPU非常多，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。</td>\n</tr>\n<tr>\n<td>ParallelScavenge收集器</td>\n<td>新生代收集器采用复制算法</td>\n<td>Parallel Scavenge 收集 器 的 特点 是它 的 关注 点 与其 他 收集 器 不同， CMS 等 收集 器 的 关注 点 尽可能 地 缩短 垃圾 收集 时 用户 线程 的 停顿 时间， 而 Parallel Scavenge 收集 器 的 目标 则是 达到 一个 可 控制 的 吞吐量（ Throughput）。</td>\n</tr>\n<tr>\n<td>Serial Old 收集 器</td>\n<td>Serial Old 是 Serial 收集 器 的 老年 代 版本 标记-整理算法</td>\n<td>这个 收集 器 的 主要 意义 也是 被 Client 模式 下 的 虚拟 机 使用</td>\n</tr>\n<tr>\n<td>Parallel Old 收集 器</td>\n<td>Parallel Scavenge 收集 器 的 老年 代 版本 标记-整理算法</td>\n<td>注重 吞吐量 及 CPU 资源 敏感 的 场合， 都可以 优先 考虑 Parallel Scavenge 加 Parallel Old 收集 器。</td>\n</tr>\n<tr>\n<td>CMS收集器</td>\n<td>CMS（ConcurrentMarkSweep）针对老年代进行回收的GC，标记-清除算法</td>\n<td>收集器是一种以获取最短回收停顿时间为目标的收集器</td>\n</tr>\n<tr>\n<td>G1收集器</td>\n<td>内存结构变更，相对于CMS的“标记——清理”算法，G1会使用压缩算法，保证不产生多余的碎片。收集阶段，G1会将某个区域存活的对象拷贝的其他区域，然后将整个区域整个回收。</td>\n<td>服务类型的收集器，目标是多处理器机器、大内存机器。它高度符合垃圾收集暂停时间的目标，同时实现高吞吐量。Oracle JDK 7 update 4 以及更新发布版完全支持G1垃圾收集器。</td>\n</tr>\n</tbody></table>\n<p>并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。<br>并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序继续运行，而垃圾收集程序运行于另一个CPU上。<br>如果说收集算法是内存回收的方法论，垃圾收集器就是内存回收的具体实现。Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大的差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。这里讨论的收集器基于SunHotSpot虚拟机1.6版Update22，这个虚拟机包含的所有收集器如图所示。</p>\n<p><img src=\"http://img.blog.csdn.net/20170728221643962?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>HotSpotJVM1.6的垃圾收集器展示了7种作用于不同分代的收集器（包括JDK1.6_Update14后引入的EarlyAccess版G1收集器），如果两个收集器之间存在连线，就说明它们可以搭配使用。在介绍这些收集器各自的特性之前，我们先来明确一个观点：虽然我们是在对各个收集器进行比较，但并非为了挑选一个最好的收集器出来。因为直到现在为止还没有最好的收集器出现，更加没有万能的收集器，所以我们选择的只是对具体应用最合适的收集器。这点不需要多加解释就能证明：如果有一种放之四海皆准、任何场景下都适用的完美收集器存在，那HotSpot虚拟机就没必要实现那么多不同的收集器了。<br>####3.2.1 Serial收集器<br>         Serial收集器是最基本、发展历史最悠久的收集器，曾经（在JDK 1.3.1之前）是虚拟机新生代收集的唯一选择。大家看名字就会知道，这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。“Stop The World”这个名字也许听起来很酷，但这项工作实际上是由虚拟机在后台自动发起和自动完成的，在用户不可见的情况下把用户正常工作的线程全部停掉，这对很多应用来说都是难以接受的。读者不妨试想一下，要是你的计算机每运行一个小时就会暂停响应5分钟，你会有什么样的心情？Serial / Serial Old收集器的运行过程如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170728221849904?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>从 JDK 1.3 开始，一直到现在最新的 JDK 1.7，HotSpot 虚拟机开发团队为消除或者减少工作线程因内存回收而导致停顿的努力一直在进行着，从 Serial 收集器到 Parallel 收集器，再到 Concurrent Mark Sweep（CMS）乃至 GC 收集器的最前沿成果 Garbage First（G1）收集器，我们看到了一个个越来越优秀（也越来越复杂）的收集器的出现，用户线程的停顿时间在不断缩短，但是仍然没有办法完全消除（这里暂不包括 RTSJ 中的收集器）。寻找更优秀的垃圾收集器的工作仍在继续！</p>\n<p>写到这里，笔者似乎已经把 Serial 收集器描述成一个“老而无用、食之无味弃之可惜”的鸡肋了，但实际上到现在为止，它依然是虚拟机运行在 Client 模式下的默认新生代收集器。它也有着优于其他收集器的地方：简单而高效（与其他收集器的单线程比），对于限定单个 CPU 的环境来说，Serial 收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。在用户的桌面应用场景中，分配给虚拟机管理的内存一般来说不会很大，收集几十兆甚至一两百兆的新生代（仅仅是新生代使用的内存，桌面应用基本上不会再大了），停顿时间完全可以控制在几十毫秒最多一百多毫秒以内，只要不是频繁发生，这点停顿是可以接受的。所以，Serial 收集器对于运行在 Client 模式下的虚拟机来说是一个很好的选择。</p>\n<h4 id=\"3-2-2-ParNew收集器\"><a href=\"#3-2-2-ParNew收集器\" class=\"headerlink\" title=\"3.2.2 ParNew收集器\"></a>3.2.2 ParNew收集器</h4><p>ParNew收集器其实就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数（例如：-XX:SurvivorRatio、 -XX:PretenureSizeThreshold、-XX:HandlePromotionFailure等）、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，实现上这两种收集器也共用了相当多的代码。ParNew收集器的工作过程如下</p>\n<p><img src=\"http://img.blog.csdn.net/20170728221941057?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>ParNew收集器除了多线程收集之外，其他与Serial收集器相比并没有太多创新之处，但它却是许多运行在Server模式下的虚拟机中首选的新生代收集器，其中有一个与性能无关但很重要的原因是，除了Serial收集器外，目前只有它能与CMS收集器配合工作。在JDK 1.5时期，HotSpot推出了一款在强交互应用中几乎可称为有划时代意义的垃圾收集器—CMS收集器（Concurrent Mark Sweep，本节稍后将详细介绍这款收集器），这款收集器是HotSpot虚拟机中第一款真正意义上的并发（Concurrent）收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作，用前面那个例子的话来说，就是做到了在你妈妈打扫房间的时候你还能同时往地上扔纸屑。</p>\n<p>不幸的是，它作为老年代的收集器，却无法与 JDK 1.4.0 中已经存在的新生代收集器 Parallel Scavenge 配合工作，所以在 JDK 1.5 中使用 CMS 来收集老年代的时候，新生代只能选择 ParNew 或 Serial 收集器中的一个。ParNew 收集器也是使用 -XX: +UseConcMarkSweepGC 选项后的默认新生代收集器，也可以使用 -XX:+UseParNewGC 选项来强制指定它。</p>\n<p>ParNew 收集器在单 CPU 的环境中绝对不会有比 Serial 收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个 CPU 的环境中都不能百分之百地保证能超越 Serial 收集器。当然，随着可以使用的 CPU 的数量的增加，它对于 GC 时系统资源的利用还是很有好处的。它默认开启的收集线程数与 CPU 的数量相同，在 CPU 非常多（譬如 32 个，现在 CPU 动辄就 4 核加超线程，服务器超过 32 个逻辑 CPU 的情况越来越多了）的环境下，可以使用-XX:ParallelGCThreads 参数来限制垃圾收集的线程数。</p>\n<p>注意 从 ParNew 收集器开始，后面还将会接触到几款并发和并行的收集器。在大家可能产生疑惑之前，有必要先解释两个名词：并发和并行。这两个名词都是并发编程中的概念，在谈论垃圾收集器的上下文语境中，他们可以解释为： 并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。 并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序继续运行，而垃圾收集程序运行于另一个 CPU 上。</p>\n<h4 id=\"3-2-3-ParallelScavenge收集器\"><a href=\"#3-2-3-ParallelScavenge收集器\" class=\"headerlink\" title=\"3.2.3 ParallelScavenge收集器\"></a>3.2.3 ParallelScavenge收集器</h4><p>Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器……看上去和ParNew都一样，那它有什么特别之处呢？</p>\n<p>Parallel Scavenge 收集器的特点是它的关注点与其他收集器不同，CMS 等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而 Parallel Scavenge 收集器的目标则是达到一个可控制的吞吐量（Throughput）。所谓吞吐量就是 CPU 用于运行用户代码的时间与 CPU 总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间），虚拟机总共运行了 100 分钟，其中垃圾收集花掉 1 分钟，那吞吐量就是 99%。</p>\n<p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</p>\n<p>Parallel Scavenge 收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间的-XX:MaxGCPauseMillis 参数以及直接设置吞吐量大小的-XX:GCTimeRatio 参数。</p>\n<p>MaxGCPauseMillis 参数允许的值是一个大于 0 的毫秒数，收集器将尽可能地保证内存回收花费的时间不超过设定值。不过大家不要认为如果把这个参数的值设置得稍小一点就能使得系统的垃圾收集速度变得更快，GC 停顿时间缩短是以牺牲吞吐量和新生代空间来换取的：系统把新生代调小一些，收集 300MB 新生代肯定比收集 500MB 快吧，这也直接导致垃圾收集发生得更频繁一些，原来 10 秒收集一次、每次停顿 100 毫秒，现在变成 5 秒收集一次、每次停顿 70 毫秒。停顿时间的确在下降，但吞吐量也降下来了。</p>\n<p>GCTimeRatio 参数的值应当是一个大于 0 且小于 100 的整数，也就是垃圾收集时间占总时间的比率，相当于是吞吐量的倒数。如果把此参数设置为 19，那允许的最大 GC 时间就占总时间的 5%（即 1 /（1+19）），默认值为 99，就是允许最大 1%（即 1 /（1+99））的垃圾收集时间。</p>\n<p>由于与吞吐量关系密切，Parallel Scavenge 收集器也经常称为“吞吐量优先”收集器。除上述两个参数之外，Parallel Scavenge 收集器还有一个参数-XX:+UseAdaptiveSizePolicy 值得关注。这是一个开关参数，当这个参数打开之后，就不需要手工指定新生代的大小（-Xmn）、Eden 与 Survivor 区的比例（-XX:SurvivorRatio）、晋升老年代对象年龄（-XX:PretenureSizeThreshold）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为 GC 自适应的调节策略（GC Ergonomics）。如果读者对于收集器运作原来不太了解，手工优化存在困难的时候，使用 Parallel Scavenge 收集器配合自适应调节策略，把内存管理的调优任务交给虚拟机去完成将是一个不错的选择。只需要把基本的内存数据设置好（如-Xmx 设置最大堆），然后使用 MaxGCPauseMillis 参数（更关注最大停顿时间）或 GCTimeRatio（更关注吞吐量）参数给虚拟机设立一个优化目标，那具体细节参数的调节工作就由虚拟机完成了。自适应调节策略也是 Parallel Scavenge 收集器与 ParNew 收集器的一个重要区别。</p>\n<p>####3.2.4 Serial Old 收集 器<br>   Serial Old 是 Serial 收集 器 的 老年 代 版本， 它 同样是 一个 单线 程 收集 器， 使用“ 标记- 整理” 算法。 这个 收集 器 的 主要 意义 也是 被 Client 模式 下 的 虚拟 机 使用。 如果 在 Server 模式 下， 它 主要 还有 两大 用途： 一个 是在 JDK 1. 5 及 之前 的 版本 中 与 Parallel Scavenge 收集 器 搭配 使用[ 4]， 另外 一个 就是 作为 CMS 收集 器 的 后备 预 案， 在 并发 收集 发生 Concurrent Mode Failure 的 时候 使用。 这 两点 都将 在后 面的 内容 中 详细 讲解。 Serial Old 收集 器 的 工作 过程 如图 所示。</p>\n<p><img src=\"http://img.blog.csdn.net/20170729114927185?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>####3.2.5 Parallel Old 收集 器<br>  Parallel Old 是 Parallel Scavenge 收集 器 的 老年 代 版本， 使用 多 线程 和“ 标记－整理” 算法。 这个 收集 器 是在 JDK 1. 6 中 才 开始 提供 的， 在此之前， 新生代 的 Parallel Scavenge 收集 器 一直 处于 比较 尴尬 的 状态。 原因 是， 如果 新生代 选择 了 Parallel Scavenge 收集 器， 老年 代 除了 Serial Old（ PS MarkSweep） 收集 器 外 别无选择（ 还 记得 上面 说过 Parallel Scavenge 收集 器 无法 与 CMS 收集 器 配合 工作 吗？）。 由于 单 线程 的 老 年代 Serial Old 收集 器 在 服务 端 应用 性 能上 的“ 拖累”， 即便 使用 了 Parallel Scavenge 收集 器 也 未必 能在 整体 应用 上 获得 吞吐量 最大化 的 效果， 又因 为 老年 代收 集中 无法 充分 利用 服务器 多 CPU 的 处理 能力， 在 老年 代 很大 而且 硬件 比较 高级的 环境 中， 这种 组合 的 吞吐量 甚至 还不 一 定有 ParNew 加 CMS 的 组合“ 给 力”。 直到 Parallel Old 收集 器 出现 后，“ 吞吐量 优先” 收集 器 终于 有了 比较 名副其实 的 应用 组合， 在 注重 吞吐量 及 CPU 资源 敏感 的 场合， 都可以 优先 考虑 Parallel Scavenge 加 Parallel Old 收集 器。 Parallel Old 收集 器 的 工作 过程 如图所示。<br> <img src=\"http://img.blog.csdn.net/20170728222929126?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h4 id=\"3-2-6-CMS收集器\"><a href=\"#3-2-6-CMS收集器\" class=\"headerlink\" title=\"3.2.6 CMS收集器\"></a>3.2.6 CMS收集器</h4><p>CMS（ConcurrentMarkSweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。从名字（包含“MarkSweep”）上就可以看出CMS收集器是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分如下步骤，<br>包括：</p>\n<table>\n<thead>\n<tr>\n<th>阶段</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(1) 初始标记 (Initial Mark)</td>\n<td>(Stop the World Event,所有应用线程暂停) 在老年代(old generation)中的对象, 如果从年轻代(young generation)中能访问到, 则被 “标记,marked” 为可达的(reachable).对象在旧一代“标志”可以包括这些对象可能可以从年轻一代。暂停时间一般持续时间较短,相对小的收集暂停时间.</td>\n</tr>\n<tr>\n<td>(2) 并发标记 (Concurrent Marking)</td>\n<td>在Java应用程序线程运行的同时遍历老年代(tenured generation)的可达对象图。扫描从被标记的对象开始,直到遍历完从root可达的所有对象. 调整器(mutators)在并发阶段的2、3、5阶段执行,在这些阶段中新分配的所有对象(包括被提升的对象)都立刻标记为存活状态.</td>\n</tr>\n<tr>\n<td>(3) 再次标记(Remark)</td>\n<td>(Stop the World Event, 所有应用线程暂停) 查找在并发标记阶段漏过的对象，这些对象是在并发收集器完成对象跟踪之后由应用线程更新的.</td>\n</tr>\n<tr>\n<td>(4) 并发清理(Concurrent Sweep)</td>\n<td>回收在标记阶段(marking phases)确定为不可及的对象. 死对象的回收将此对象占用的空间增加到一个空闲列表(free list),供以后的分配使用。死对象的合并可能在此时发生. 请注意,存活的对象并没有被移动.</td>\n</tr>\n<tr>\n<td>(5) 重置(Resetting)</td>\n<td>清理数据结构,为下一个并发收集做准备.</td>\n</tr>\n<tr>\n<td>其中初始标记、重新标记这两个步骤仍然需要“StopTheWorld”。初始标记仅仅只是标记一下GCRoots能直接关联到的对象，速度很快，并发标记阶段就是进行GCRootsTracing的过程，而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行的。ConcurrentMarkSweep收集器运行示意图：</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img src=\"http://img.blog.csdn.net/20170728222952502?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>CMS是一款优秀的收集器，它的最主要优点在名字上已经体现出来了：并发收集、低停顿，Sun的一些官方文档里面也称之为并发低停顿收集器（ConcurrentLowPauseCollector）。但是CMS还远达不到完美的程度，它有以下三个显著的缺点：</p>\n<ul>\n<li>CMS收集器对CPU资源非常敏感。其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。CMS默认启动的回收线程数是（CPU数量+3）/4，也就是当CPU在4个以上时，并发回收时垃圾收集线程最多占用不超过25%的CPU资源。但是当CPU不足4个时（譬如2个），那么CMS对用户程序的影响就可能变得很大，如果CPU负载本来就比较大的时候，还分出一半的运算能力去执行收集器线程，就可能导致用户程序的执行速度忽然降低了50%，这也很让人受不了。为了解决这种情况，虚拟机提供了一种称为“增量式并发收集器”（IncrementalConcurrentMarkSweep/i-CMS）的CMS收集器变种，所做的事情和单CPU年代PC机操作系统使用抢占式来模拟多任务机制的思想一样，就是在并发标记和并发清理的时候让GC线程、用户线程交替运行，尽量减少GC线程的独占资源的时间，这样整个垃圾收集的过程会更长，但对用户程序的影响就会显得少一些，速度下降也就没有那么明显，但是目前版本中，i-CMS已经被声明为“deprecated”，即不再提倡用户使用。</li>\n<li>CMS收集器无法处理浮动垃圾（FloatingGarbage），可能出现“ConcurrentModeFailure”失败而导致另一次FullGC的产生。由于CMS并发清理阶段用户线程还在运行着，伴随程序的运行自然还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在本次收集中处理掉它们，只好留待下一次GC时再将其清理掉。这一部分垃圾就称为“浮动垃圾”。也是由于在垃圾收集阶段用户线程还需要运行，即还需要预留足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。在默认设置下，CMS收集器在老年代使用了68%的空间后就会被激活，这是一个偏保守的设置，如果在应用中老年代增长不是太快，可以适当调高参数-XX：CMSInitiatingOccupancyFraction的值来提高触发百分比，以便降低内存回收次数以获取更好的性能。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“ConcurrentModeFailure”失败，这时候虚拟机将启动后备预案：临时启用SerialOld收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。所以说参数-XX：CMSInitiatingOccupancyFraction设置得太高将会很容易导致大量“ConcurrentModeFailure”失败，性能反而降低。</li>\n<li>还有最后一个缺点，在本节在开头说过，CMS是一款基于“标记-清除”算法实现的收集器，如果读者对前面这种算法介绍还有印象的话，就可能想到这意味着收集结束时会产生大量空间碎片。空间碎片过多时，将会给大对象分配带来很大的麻烦，往往会出现老年代还有很大的空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次FullGC。为了解决这个问题，CMS收集器提供了一个-XX：+UseCMSCompactAtFullCollection开关参数，用于在“享受”完FullGC服务之后额外免费附送一个碎片整理过程，内存整理的过程是无法并发的。空间碎片问题没有了，但停顿时间不得不变长了。虚拟机设计者们还提供了另外一个参数-XX：CMSFullGCsBeforeCompaction，这个参数用于设置在执行多少次不压缩的FullGC后，跟着来一次带压缩的。<br>后续分开介绍：</li>\n</ul>\n<h4 id=\"3-2-7-G1收集器G1（GarbageFirst）收集器\"><a href=\"#3-2-7-G1收集器G1（GarbageFirst）收集器\" class=\"headerlink\" title=\"3.2.7.G1收集器G1（GarbageFirst）收集器\"></a>3.2.7.G1收集器G1（GarbageFirst）收集器</h4><p>G1 GC 是 Jdk7 的新特性之一、Jdk7+版本都可以自主配置 G1 作为 JVM GC 选项；作为 JVM GC 算法的一次重大升级、DK7u 后 G1 已相对稳定、且未来计划替代 CMS、所以有必要深入了解下：</p>\n<p>不同于其他的分代回收算法、G1 将堆空间划分成了互相独立的区块。每块区域既有可能属于 O 区、也有可能是 Y 区，且每类区域空间可以是不连续的（对比 CMS 的 O 区和 Y 区都必须是连续的）。这种将 O 区划分成多块的理念源于：当并发后台线程寻找可回收的对象时、有些区块包含可回收的对象要比其他区块多很多。虽然在清理这些区块时 G1 仍然需要暂停应用线程、但可以用相对较少的时间优先回收包含垃圾最多区块。如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170729121950668?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这也是为什么G1命名为Garbage First的原因：第一时间处理垃圾最多的区块。<br>平时工作中大多数系统都使用CMS、即使静默升级到JDK7默认仍然采用CMS、那么G1相对于CMS的区别在：</p>\n<p>G1 在压缩空间方面有优势<br>G1 通过将内存空间分成区域（Region）的方式避免内存碎片问题<br>Eden, Survivor, Old 区不再固定、在内存使用效率上来说更灵活<br>G1 可以通过设置预期停顿时间（Pause Time）来控制垃圾收集时间避免应用雪崩现象<br>G1 在回收内存后会马上同时做合并空闲内存的工作、而 CMS 默认是在 STW（stop the world）的时候做<br>G1 会在 Young GC 中使用、而 CMS 只能在 O 区使用<br>就目前而言、CMS 还是默认首选的 GC 策略、可能在以下场景下 G1 更适合：</p>\n<p>服务端多核 CPU、JVM 内存占用较大的应用（至少大于 4G）<br>应用在运行过程中会产生大量内存碎片、需要经常压缩空间<br>想要更可控、可预期的 GC 停顿周期；防止高并发下应用雪崩现象<br>一次完整 G1GC 的详细过程：</p>\n<p>G1 在运行过程中主要包含如下 4 种操作方式：</p>\n<p>YGC（不同于 CMS）<br>并发阶段<br>混合模式<br>full GC （一般是 G1 出现问题时发生）<br>YGC：</p>\n<p>下面是一次 YGC 前后内存区域是示意图：</p>\n<p><img src=\"http://img.blog.csdn.net/20170729120730189?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>图中每个小区块都代表 G1 的一个区域（Region），区块里面的字母代表不同的分代内存空间类型（如[E]Eden,[O]Old,[S]Survivor）空白的区块不属于任何一个分区；G1 可以在需要的时候任意指定这个区域属于 Eden 或是 O 区之类的。<br>G1 YoungGC 在 Eden 充满时触发，在回收之后所有之前属于 Eden 的区块全变成空白。然后至少有一个区块是属于 S 区的（如图半满的那个区域），同时可能有一些数据移到了 O 区。</p>\n<p>目前淘系的应用大都使用 PrintGCDetails 参数打出 GC 日志、这个参数对 G1 同样有效、但日志内容颇为不同；下面是一个 Young GC 的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">23.430: [GC pause (young), 0.23094400 secs]</span><br><span class=\"line\">...</span><br><span class=\"line\">[Eden: 1286M(1286M)-&gt;0B(1212M)</span><br><span class=\"line\">Survivors: 78M-&gt;152M Heap: 1454M(4096M)-&gt;242M(4096M)][times: user=0.85 sys=0.05, real=0.23 secs]</span><br></pre></td></tr></table></figure>\n\n<p>上面日志的内容解析：Young GC 实际占用 230 毫秒、其中 GC 线程占用 850 毫秒的 CPU 时间<br>E：内存占用从 1286MB 变成 0、都被移出<br>S：从 78M 增长到了 152M、说明从 Eden 移过来 74M<br>Heap:占用从 1454 变成 242M、说明这次 Young GC 一共释放了 1212M 内存空间<br>很多情况下，S 区的对象会有部分晋升到 Old 区，另外如果 S 区已满、Eden 存活的对象会直接晋升到 Old 区，这种情况下 Old 的空间就会涨</p>\n<p>并发阶段：</p>\n<p>一个并发 G1 回收周期前后内存占用情况如下图所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20170729120816584?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>从上面的图表可以看出以下几点：<br>1、Young区发生了变化、这意味着在G1并发阶段内至少发生了一次YGC（这点和CMS就有区别），Eden在标记之前已经被完全清空，因为在并发阶段应用线程同时在工作、所以可以看到Eden又有新的占用<br>2、一些区域被X标记，这些区域属于O区，此时仍然有数据存放、不同之处在G1已标记出这些区域包含的垃圾最多、也就是回收收益最高的区域<br>3、在并发阶段完成之后实际上O区的容量变得更大了（O+X的方块）。这时因为这个过程中发生了YGC有新的对象进入所致。此外，这个阶段在O区没有回收任何对象：它的作用主要是标记出垃圾最多的区块出来。对象实际上是在后面的阶段真正开始被回收</p>\n<p>G1 并发标记周期可以分成几个阶段、其中有些需要暂停应用线程。第一个阶段是初始标记阶段。这个阶段会暂停所有应用线程-部分原因是这个过程会执行一次 YGC、下面是一个日志示例：</p>\n<blockquote>\n<p>50.541: [GC pause (young) (initial-mark), 0.27767100 secs][eden: 1220m(1220m)-&gt;0b(1220m) survivors: 144m-&gt;144m heap: 3242m(4096m)-&gt;2093m(4096m)] [Times: user=1.02 sys=0.04, real=0.28</p>\n<blockquote>\n<p>secs]</p>\n</blockquote>\n</blockquote>\n<p>上面的日志表明发生了 YGC、应用线程为此暂停了 280 毫秒，Eden 区被清空（71MB 从 Young 区移到了 O 区）。<br>日志里面 initial-mark 的字样表明后台的并发 GC 阶段开始了。因为初始标记阶段本身也是要暂停应用线程的，<br>G1 正好在 YGC 的过程中把这个事情也一起干了。为此带来的额外开销不是很大、增加了 20%的 CPU，暂停时间相应的略微变长了些。</p>\n<p>接下来，G1 开始扫描根区域、日志示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">50.819: [GC concurrent-root-region-scan-start]</span><br><span class=\"line\">51.408: [GC concurrent-root-region-scan-end, 0.5890230]</span><br></pre></td></tr></table></figure>\n\n<p>一共花了 580 毫秒，这个过程没有暂停应用线程；是后台线程并行处理的。这个阶段不能被 YGC 所打断、因此后台线程有足够的 CPU 时间很关键。如果 Young 区空间恰好在 Root 扫描的时候<br>满了、YGC 必须等待 root 扫描之后才能进行。带来的影响是 YGC 暂停时间会相应的增加。这时的 GC 日志是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 350.994: [GC pause (young)</span><br><span class=\"line\">&gt; 351.093: [GC concurrent-root-region-scan-end, 0.6100090]</span><br><span class=\"line\">&gt; 351.093: [GC concurrent-mark-start],0.37559600 secs]</span><br></pre></td></tr></table></figure>\n\n<p>GC 暂停这里可以看出在 root 扫描结束之前就发生了，表明 YGC 发生了等待，等待时间大概是 100 毫秒。<br>在 root 扫描完成后，G1 进入了一个并发标记阶段。这个阶段也是完全后台进行的；GC 日志里面下面的信息代表这个阶段的开始和结束：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">111.382: [GC concurrent-mark-start] ....</span><br><span class=\"line\">120.905: [GC concurrent-mark-end, 9.5225160 sec]</span><br></pre></td></tr></table></figure>\n\n<p>并发标记阶段是可以被打断的，比如这个过程中发生了 YGC 就会。这个阶段之后会有一个二次标记阶段和清理阶段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 120.910: [GC remark 120.959: [GC ref-PRC, 0.0000890 secs], 0.0718990 secs][times: user=0.23 sys=0.01, real=0.08 secs]</span><br><span class=\"line\">&gt; 120.985: [GC cleanup 3510M-&gt;3434M(4096M), 0.0111040 secs][times: user=0.04 sys=0.00, real=0.01 secs]</span><br></pre></td></tr></table></figure>\n\n<p>这两个阶段同样会暂停应用线程，但时间很短。接下来还有额外的一次并发清理阶段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">120.996: [GC concurrent-cleanup-start]</span><br><span class=\"line\">120.996: [GC concurrent-cleanup-end, 0.0004520]</span><br></pre></td></tr></table></figure>\n<p>到此为止，正常的一个 G1 周期已完成–这个周期主要做的是发现哪些区域包含可回收的垃圾最多（标记为 X），实际空间释放较少。</p>\n<p>混合 GC：</p>\n<p>接下来 G1 执行一系列的混合 GC。这个时期因为会同时进行 YGC 和清理上面已标记为 X 的区域，所以称之为混合阶段，下面是一个混合 GC 执行的前后示意图：</p>\n<p><img src=\"http://img.blog.csdn.net/20170729120910552?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>像普通的YGC那样、G1完全清空掉Eden同时调整survivor区。另外，两个标记也被回收了，他们有个共同的特点是包含最多可回收的对象，因此这两个区域绝对部分空间都被释放了。这两个区域任何存活的对象都被移到了其他区域（和YGC存活对象晋升到O区类似）。这就是为什么G1的堆比CMS内存碎片要少很多的原因–移动这些对象的同时也就是在压缩对内存。下面是一个混合GC的日志：</p>\n<blockquote>\n<p>79.826: [GC pause (mixed), 0.26161600 secs] …. [Eden: 1222M(1222M)-&gt;0B(1220M) Survivors: 142M-&gt;144M Heap:<br>3200M(4096M)-&gt;1964M(4096M)][times: user=1.01 sys=0.00, real=0.26 secs]<br>上面的日志可以注意到 Eden 释放了 1222MB、但整个堆的空间释放内存要大于这个数目。数量相差看起来比较少、只有 16MB，但是要考虑同时有 survivor 区的对象晋升到 O 区；另外，每次混合 GC 只是清理一部分的 O 区内存，整个 GC 会一直持续到几乎所有的标记区域垃圾对象都被回收，这个阶段完了之后 G1 会重新回到正常的 YGC 阶段。周期性的，当 O 区内存占用达到一定数量之后 G1 又会开启一次新的并行 GC 阶段.<br>后续分开介绍：。。</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>深入理解 java 虚拟机<br><a href=\"http://ifeve.com/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/\">http://ifeve.com/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</a></p>\n"},{"title":"JVM性能监控及故障分析工具","_content":"\n\n# JVM 性能监控及故障分析工具\n\n## 1.概要\nJDK官方提供了不少好用的JAVA故障处理工具,JDK的命令行工具在JDK的bin目录下供用户使用。\n## ２.jps\n### ２.1.简介　\njps是jdk提供的查看当前java进程的工具，简单看作为JavaVirtual Machine Process Status Tool。\n命令格式：\n```java\njps [options] [hostid] \n```\noptions 参数详解:\n参数 | 解释\n----| ----\n -q | 仅输出VM标识符，不包括classname,jar name,arguments in main method \n -m | 输出main method的参数 \n -l | 输出完全的包名，应用主类名，jar的完全路径名 \n -v | 输出jvm参数 \n -V | 输出通过flag文件传递到JVM中的参数(.hotspotrc文件或-XX:Flags=所指定的文件 \n -J | 传递参数到vm,例如:-J-Xms512m\nhostid 参数解释:\n[protocol:][[//]hostname][:port][/servername]\n\n### ２.２.实例\n\n```java\n[java@RCS-AS-01 root]$ jps\n3201 Jps\n20819 AuthBootstrap\n```\n\n```java\n[java@RCS-AS-01 root]$ jps -lv\n20819 com.feinno.urcs.auth.main.AuthBootstrap -Duser.dir=/home/urcs/urcs-as-authentication -Xmx1024m -Xms1024m\n```\n\n```java\n[java@RCS-AS-01 root]$ jps -lvm 10.10.220.101\nRMI Registry not available at 10.10.220.101:1099\nConnection refused to host: 10.10.220.101; nested exception is:java.net.ConnectException: Connection refused。\n需要在远程机器上开启：jstatd\n```\n\n## 3.jstat\n### 3.1.简介　\n\nJstat是JDK自带的一个轻量级小工具。全称“Java Virtual Machine statistics monitoring tool”，它位于Java的bin目录下，主要利用JVM内建的指令对Java应用程序的资源和性能进行实时的命令行的监控，包括了对Heap size和垃圾回收状况的监控。可见，Jstat是轻量级的、专门针对JVM的工具。\n命令格式：\n```java\njstat [options]\n```\n###  3.2.options 参数详解:\n\n* 3.2.1. jstat -class <pid> : 显示加载 class 的数量,及所占空间等信息,\n\n显示列名|具体描述\n------|-------\nLoaded|装载的类的数量\nBytes|装载类所占用的字节数\nUnloaded|卸载类的数量\nBytes|卸载类的字节数\nTime|装载和卸载类所花费的时间\n\n* 3.2.2.jstat -compiler <pid>:显示 VM 实时编译的数量等信息,\n\n显示列名|具体描述\n------|-------\nCompiled|编译任务执行数量\nFailed|编译任务执行失败数量\nInvalid|编译任务执行失效数量\nTime|编译任务消耗时间\nFailedType|最后一个编译失败任务的类型\nFailedMethod|最后一个编译失败任务所在的类及方法\n\n* 3.2.3.jstat -gc <pid>: 可以显示 gc 的信息,查看 gc 的次数,及时间,\n\n显示列名|具体描述\n------|-------\nS0C|年轻代中第一个 survivor(幸存区)的容量(字节)\nS1C|年轻代中第二个 survivor(幸存区)的容量(字节)\nS0U|年轻代中第一个 survivor(幸存区)目前已使用空间(字节)\nS1U|年轻代中第二个 survivor(幸存区)目前已使用空间(字节)\nEC|年轻代中 Eden(伊甸园)的容量(字节)\nEU|年轻代中 Eden(伊甸园)目前已使用空间(字节)\nOC|Old 代的容量(字节)\nOU|Old 代目前已使用空间(字节)\nPC|Perm(持久代)的容量(字节)\nPU|Perm(持久代)目前已使用空间(字节)\nYGC|从应用程序启动到采样时年轻代中 gc 次数\nYGCT|从应用程序启动到采样时年轻代中 gc 所用时间(s)\nFGC|从应用程序启动到采样时 old 代(全 gc)gc 次数\nFGCT|从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)\nGCT|从应用程序启动到采样时 gc 用的总时间(s)\n\n*  3.2.4. jstat -gccapacity <pid>:可以显示,VM 内存中三代(young,old,perm)对象的使用和占用大小\n\n显示列名|具体描述\n------|-------\nNGCMN|年轻代(young)中初始化(最小)的大小(字节)\nNGCMX|年轻代(young)的最大容量(字节)\nNGC|年轻代(young)中当前的容量(字节)\nS0C|年轻代中第一个 survivor(幸存区)的容量(字节)\nS1C|年轻代中第二个 survivor(幸存区)的容量(字节)\nEC|年轻代中 Eden(伊甸园)的容量(字节)\nOGCMN|old 代中初始化(最小)的大小(字节)\nOGCMX|old 代的最大容量(字节)\nOGC|old 代当前新生成的容量(字节)\nOC|Old 代的容量(字节)\nPGCMN|perm 代中初始化(最小)的大小(字节)\nPGCMX|perm 代的最大容量(字节)\nPGC|perm 代当前新生成的容量(字节)\nPC|Perm(持久代)的容量(字节)\nYGC|从应用程序启动到采样时年轻代中 gc 次数\nFGC|从应用程序启动到采样时 old 代(全 gc)gc 次数\n\n* 3.2.5.jstat -gcutil <pid>:统计 gc 信息\n\n显示列名|具体描述\n------|-------\nS0| 年轻代中第一个 survivor(幸存区)已使用的占当前容量百分比\nS1|年轻代中第二个 survivor(幸存区)已使用的占当前容量百分比\nE|年轻代中 Eden(伊甸园)已使用的占当前容量百分比\nO|old 代已使用的占当前容量百分比\nP|perm 代已使用的占当前容量百分比\nYGC|从应用程序启动到采样时年轻代中 gc 次数\nYGCT|从应用程序启动到采样时年轻代中 gc 所用时间(s)\nFGC|从应用程序启动到采样时 old 代(全 gc)gc 次数\nFGCT|从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)\nGCT|从应用程序启动到采样时 gc 用的总时间(s)\n\n* 3.2.6. jstat -gcnew <pid>:年轻代对象的信息,\n\n显示列名|具体描述\n------|-------\nS0C|年轻代中第一个 survivor(幸存区)的容量(字节)\nS1C|年轻代中第二个 survivor(幸存区)的容量(字节)\nS0U|年轻代中第一个 survivor(幸存区)目前已使用空间(字节)\nS1U|年轻代中第二个 survivor(幸存区)目前已使用空间(字节)\nTT|持有次数限制\nMTT|最大持有次数限制\nEC|年轻代中 Eden(伊甸园)的容量(字节)\nEU|年轻代中 Eden(伊甸园)目前已使用空间(字节)\nYGC|从应用程序启动到采样时年轻代中 gc 次数\nYGCT|从应用程序启动到采样时年轻代中 gc 所用时间(s)\n\n* 3.2.7. jstat -gcnewcapacity <pid>: 年轻代对象的信息及其占用量,\n\n显示列名|具体描述\n------|-------\nNGCMN|年轻代(young)中初始化(最小)的大小(字节)\nNGCMX|年轻代(young)的最大容量(字节)\nNGC|年轻代(young)中当前的容量(字节)\nS0CMX|年轻代中第一个 survivor(幸存区)的最大容量(字节)\nS0C|年轻代中第一个 survivor(幸存区)的容量(字节)\nS1CMX|年轻代中第二个 survivor(幸存区)的最大容量(字节)\nS1C|年轻代中第二个 survivor(幸存区)的容量(字节)\nECMX|年轻代中 Eden(伊甸园)的最大容量(字节)\nEC|年轻代中 Eden(伊甸园)的容量(字节)\n\n* 3.2.8. jstat -gcold <pid>:old 代对象的信息,\n\n显示列名|具体描述\n------|-------\nPC|Perm(持久代)的容量(字节)\nPU|Perm(持久代)目前已使用空间(字节)\nOC|Old 代的容量(字节)\nOU|Old 代目前已使用空间(字节)\nYGC|从应用程序启动到采样时年轻代中 gc 次数\nFGC|从应用程序启动到采样时 old 代(全 gc)gc 次数\nFGCT|从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)\nGCT|从应用程序启动到采样时 gc 用的总时间(s)\n\n* 3.2.9.stat -gcoldcapacity <pid>: old 代对象的信息及其占用量\n\n显示列名|具体描述\n------|-------\nOGCMN|old 代中初始化(最小)的大小(字节)\nOGCMX|old 代的最大容量(字节)\nOGC|old 代当前新生成的容量(字节)\nOC|Old 代的容量(字节)\nYGC|从应用程序启动到采样时年轻代中 gc 次数\nFGC|从应用程序启动到采样时 old 代(全 gc)gc 次数\nFGCT|从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)\nGCT|从应用程序启动到采样时 gc 用的总时间(s)\n\n* 3.2.10. jstat -gcpermcapacity<pid>: perm 对象的信息及其占用量,\n\n显示列名|具体描述\n------|-------\nPGCMN|perm 代中初始化(最小)的大小(字节)\nPGCMX|perm 代的最大容量(字节)\nPGC|perm 代当前新生成的容量(字节)\nPC|Perm(持久代)的容量(字节)\nYGC|从应用程序启动到采样时年轻代中 gc 次数\nFGC|从应用程序启动到采样时 old 代(全 gc)gc 次数\nFGCT|从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)\nGCT|从应用程序启动到采样时 gc 用的总时间(s)\n\n* 3.2.11. jstat -printcompilation <pid>:当前 VM 执行的信息,\n\n显示列名|具体描述\n------|-------\nCompiled|编译任务的数目\nSize|方法生成的字节码的大小\nType|编译类型\nMethod|类名和方法名用来标识编译的方法,类名使用/做为一个命名空间分隔符,方法名是给定类中的方法,上述格式是由-XX:+PrintComplation 选项进行设置的\n\n### 3.3.实例:\n\n```java\n[java@RCS-AS-01 root]$ jstat -gcutil 16885 1000\n  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT\n  0.00  93.51  54.24  10.36  98.25  96.86    205   16.720     3    1.041   17.760\n  0.00  93.51  54.24  10.36  98.25  96.86    205   16.720     3    1.041   17.760\n```\n\n```java\n[java@RCS-AS-01 root]$ jstat -class 16885 1000\nLoaded  Bytes  Unloaded  Bytes     Time\n 10051 19327.1       32    44.2      27.15\n 10051 19327.1       32    44.2      27.15\n```\n\n## 4.jinfo\n### 4.1.简介　\n\njinfo(Java Configuration Information)，主要用于查看指定Java进程(或核心文件、远程调试服务器)的Java配置信息。\n命令格式：\n\n```java\njinfo [options] pid\njinfo [options] executable core\njinfo [options] [server-id@]remote-hostname-or-IP\n```\n\n参数详解:\n参数 | 解释\n----| ----\n pid  | 进程号\n executable | 产生core dump的java executable\n core  | core file\n remote-hostname-or-IP  | 主机名或ip\n server-id | 远程主机上的debug server的唯一id\n\noptions 参数详解:\n\n参数 | 解释\n----| ----\nno option | 打印命令行参数和系统属性\n-flags | 打印命令行参数\n-sysprops | 打印系统属性\n-h | 帮助\n\n### 4.2.实例\n\n```java\n[java@RCS-AS-01 root]$ jinfo 16885\nAttaching to process ID 16885, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 25.65-b01\nJava System Properties:\njava.runtime.name = Java(TM) SE Runtime Environment\njava.vm.version = 25.65-b01\nsun.boot.library.path = /usr/local/jdk8u65/jre/lib/amd64\njava.vendor.url = http://java.oracle.com/\njava.vm.vendor = Oracle Corporation\npath.separator = :\nfile.encoding.pkg = sun.io\njava.vm.name = Java HotSpot(TM) 64-Bit Server VM\n.....\nVM Flags:\nNon-default VM flags: -XX:CICompilerCount=2 -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=357564416 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=357564416 -XX:OldSize=716177408 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC\nCommand line:  -Duser.dir=/home/urcs/urcs-as-im -Xmx1024m -Xms1024m\n```\n\n```java\n[java@RCS-AS-01 root]$ jinfo -flags 16885\nAttaching to process ID 16885, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 25.65-b01\nNon-default VM flags: -XX:CICompilerCount=2 -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=357564416 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=357564416 -XX:OldSize=716177408 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC\nCommand line:  -Duser.dir=/home/urcs/urcs-as-im -Xmx1024m -Xms1024m\n```\n\n## 5.jmap\n\n### 5.1.简介　\njps是jdk提供的查看当前java进程的工具，简单看作为JavaVirtual Machine Process Status Tool。\n命令格式：\n```java\njmap [options] pid\njmap [options] executable core\njmap [options] [server-id@]remote-hostname-or-IP\n```\n参数详解:\n参数 | 解释\n----| ----\n pid  | 进程号\n executable | 产生core dump的java executable\n core  | core file\n remote-hostname-or-IP  | 主机名或ip\n server-id | 远程主机上的debug server的唯一id\n \noptions 参数详解:\n参数 | 解释\n----| ----\n-dump:[live,]format=b,file=<filename> | 使用hprof二进制形式,输出jvm的heap内容到文件=. live子选项是可选的，假如指定live选项,那么只输出活的对象到文件. \n-finalizerinfo | 打印正等候回收的对象的信息.\n-heap  | 打印heap的概要信息，GC使用的算法，heap的配置及wise heap的使用情况.\n-histo[:live] | 打印每个class的实例数目,内存占用,类全名信息. VM的内部类名字开头会加上前缀”*”. 如果live子参数加上后,只统计活的对象数量. \n-permstat | 打印classload和jvm heap长久层的信息. 包含每个classloader的名字,活泼性,地址,父classloader和加载的class数量. 另外,内部String的数量和占用内存数也会打印出来. \n-F | 强迫.在pid没有相应的时候使用-dump或者-histo参数. 在这个模式下,live子参数无效. \n-h | -help 打印辅助信息 \n-J | 传递参数给jmap启动的jvm.\n\n### 5.2.实例\n\n```java\n[java@RCS-AS-01 root]$ jmap -dump:live,format=b,file=/tmp/heap.dump 16885\nDumping heap to /tmp/heap.dump ...\nHeap dump file created\n```\n\n## 6.jstack\n\n### 6.1.简介　\njstack（ Stack Trace for Java） 命令 用于 生成 虚拟 机 当前 时刻 的 线程 快照（ 一般 称为 threaddump 或 javacore 文件）。 线程 快照 就是 当前 虚拟 机内 每一 条 线程 正在 执行 的 方法 堆栈 的 集合， 生成 线程 快照 的 主要 目的 是 定位 线程 出现 长时间 停顿 的 原因， 如 线程间死锁,死 循环,请求 外部 资源 导致 的 长时间 等待 等 都是 导致 线程 长时间 停顿 的 常见 原因。\n\n命令格式：\n\n```java\njstack [options] pid\njstack [options] executable core\njstack [options] [server-id@]remote-hostname-or-IP\n```\n\n参数详解:\n\n参数 | 解释\n----| ----\npid | 进程号\nexecutable | 产生 core dump 的 java executable\ncore | core file\nremote-hostname-or-IP | 主机名或 ip\nserver-id | 远程主机上的 debug server 的唯一 id\n\noptions 参数详解:\n\n参数 | 解释\n----| ----\n-F | 当 jstack [-l] pid 没有相应的时候强制打印栈信息\n-l | 长列表. 打印关于锁的附加信息,例如属于 java.util.concurrent 的 ownable synchronizers 列表.\n-m | 打印 java 和 native c/c++框架的所有栈信息.\n-h | -help 打印帮助信息\n\n### 6.2.实例\n\n```java\n[java@RCS-AS-01 root]$ jstack 16885 > /tmp/stack16885.1\n\n查看文件显示：\n2017-07-29 16:20:51\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.65-b01 mixed mode):\n\n\"HikariCP connection filler (pool HikariPool-11)\" #26011 daemon prio=5 os_prio=0 tid=0x0000000000f46000 nid=0x2bde waiting on condition [0x00007f334e8b4000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000c25016e8> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)\n        at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:467)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1066)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n............\n```\n\n## 7.jhat\n\n### 7.1.简介　\n\n提供 jhat（ JVM Heap Analysis Tool） 命令 与 jmap 搭配 使用， 来 分析 jmap 生成 的 堆 转储 快照。\n命令格式：\n```java\n　jhat -J-Xmx512m <heap dump file>\n```\n备注:\njhat 内置 了 一个 微型 的 HTTP/ HTML 服务器， 生成 dump 文件 的 分析 结果 后， 可以 在 浏览器 中 查看。 不过 实事求是 地说， 在 实际 工作中， 除非 笔者 手上 真的 没有 别的 工具 可用， 否则 一般 都 不会 去 直接 使用 jhat 命令 来 分析 dump 文件， 主要原因 有 二： 一是 一般 不会 在 部署 应用 程序 的 服务器 上 直接 分析 dump 文件， 即使 可以 这样做， 也会 尽量 将dump 文件 拷贝 到 其他 机器[ 4] 上进 行 分析， 因为 分析 工作 是一 个 耗时 而且 消耗 硬件 资源 的 过程， 既然 都要 在 其他 机器 上 进行， 就 没 必要 受到 命令行 工具 的 限制 了。 另外 一个 原因 是 jhat 的 分析 功能 相对来说 比较 简陋， 后文 将会 介绍 到 的 VisualVM\n\n### 7.2.实例:\n\n1、产生dump文件 c:\\>jmap -dump:file=f:\\yown\\dump.bin   16912\nDumping heap to F:\\apps\\dump.txt ...\nHeap dump file created\n\n2、生成站点分析报告，便于网络访问 c:\\>jhat -J-Xmx512m -port 88f:\\yown\\dump.bin\n```\nReading from f:\\apps\\dump.bin...\nDump file created Thu Jul 26 16:31:36 CST 2012\nSnapshot read, resolving...\nResolving 2194971 objects...\nChasing references, expect 438 dots.............................................\n................................................................................\n................................................................................\n................................................................................\n................................................................................\n.........................................................................\nEliminating duplicate references................................................\n................................................................................\n................................................................................\n................................................................................\n................................................................................\n......................................................................\nSnapshot resolved.\nStarted HTTP server on port 88\nServer is ready. 3.访问 http://localhost:88/ 这里记录了进程中所有类及实例个数\n```\n\n## 8.jvisualvm\n\n### 8.1.简介:\n\nVisualVM（ All- in- One Java Troubleshooting Tool） 是 到 目前 为止， 随 JDK 发布 的 功能 最强 大的 运行 监视 和 故障 处理 程序， 并且 可以 预见 在 未来 一段时间 内 都是 官方 主力 发展 的 虚拟 机 故障 处理 工具。 官方 在 VisualVM 的 软件 说明 中写 上了“ All- in- One” 的 描述 字样， 预示 着 它 除了 运行 监视、 故障 处理 外， 还 提供 了 很多 其他 方面 的 功能。VisualVM 基于 NetBeans 平台 开发， 因此 它 一 开始 就 具备 了 插件 扩展 功能 的 特性， 通过 插件 扩展 支持， VisualVM 可以 做到：\n·显示 虚拟 机 进程 及 进程 的 配置 和 环境 信息（ jps、 jinfo）\n·监视 应用 程序 的 CPU、 GC、 堆、 方法 区 及 线程 的 信息（ jstat、 jstack）。\n·dump 及 分析 堆 转储 快照（ jmap、 jhat）\n·方法 级 的 程序 运行 性能 分析， 找出 被 调用 最多、 运行 时间 最长 的 方法\n·离 线程 序 快照： 收集 程序 的 运行时 配置、 线程 dump、 内存 dump 等 信息 建立 一个 快照， 可以 将 快照 发送 开发者 处 进行 Bug 反馈。\n·其他 plugins 的 无限 的 可能性\n\n### 8.2.界面展示如下图\n\n![这里写图片描述](http://img.blog.csdn.net/20170729163459058?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20170729163624195?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 9.开启Java服务远程监控\n### 9.1.启动脚本中添加如下参数\n```ruby\nJAVA_ARGS[2]=\"-Dcom.sun.management.jmxremote.port=8999 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=10.10.220.101\"\n```\n### 9.2.通过jvisualvm可以监控远程java服务，如下：\n![这里写图片描述](http://img.blog.csdn.net/20170729163143819?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n","source":"_posts/language/jvm/JVM性能监控及故障分析工具.md","raw":"---\ntitle: JVM性能监控及故障分析工具\ncategories:\n- java\ntag:\n- JVM\n---\n\n\n# JVM 性能监控及故障分析工具\n\n## 1.概要\nJDK官方提供了不少好用的JAVA故障处理工具,JDK的命令行工具在JDK的bin目录下供用户使用。\n## ２.jps\n### ２.1.简介　\njps是jdk提供的查看当前java进程的工具，简单看作为JavaVirtual Machine Process Status Tool。\n命令格式：\n```java\njps [options] [hostid] \n```\noptions 参数详解:\n参数 | 解释\n----| ----\n -q | 仅输出VM标识符，不包括classname,jar name,arguments in main method \n -m | 输出main method的参数 \n -l | 输出完全的包名，应用主类名，jar的完全路径名 \n -v | 输出jvm参数 \n -V | 输出通过flag文件传递到JVM中的参数(.hotspotrc文件或-XX:Flags=所指定的文件 \n -J | 传递参数到vm,例如:-J-Xms512m\nhostid 参数解释:\n[protocol:][[//]hostname][:port][/servername]\n\n### ２.２.实例\n\n```java\n[java@RCS-AS-01 root]$ jps\n3201 Jps\n20819 AuthBootstrap\n```\n\n```java\n[java@RCS-AS-01 root]$ jps -lv\n20819 com.feinno.urcs.auth.main.AuthBootstrap -Duser.dir=/home/urcs/urcs-as-authentication -Xmx1024m -Xms1024m\n```\n\n```java\n[java@RCS-AS-01 root]$ jps -lvm 10.10.220.101\nRMI Registry not available at 10.10.220.101:1099\nConnection refused to host: 10.10.220.101; nested exception is:java.net.ConnectException: Connection refused。\n需要在远程机器上开启：jstatd\n```\n\n## 3.jstat\n### 3.1.简介　\n\nJstat是JDK自带的一个轻量级小工具。全称“Java Virtual Machine statistics monitoring tool”，它位于Java的bin目录下，主要利用JVM内建的指令对Java应用程序的资源和性能进行实时的命令行的监控，包括了对Heap size和垃圾回收状况的监控。可见，Jstat是轻量级的、专门针对JVM的工具。\n命令格式：\n```java\njstat [options]\n```\n###  3.2.options 参数详解:\n\n* 3.2.1. jstat -class <pid> : 显示加载 class 的数量,及所占空间等信息,\n\n显示列名|具体描述\n------|-------\nLoaded|装载的类的数量\nBytes|装载类所占用的字节数\nUnloaded|卸载类的数量\nBytes|卸载类的字节数\nTime|装载和卸载类所花费的时间\n\n* 3.2.2.jstat -compiler <pid>:显示 VM 实时编译的数量等信息,\n\n显示列名|具体描述\n------|-------\nCompiled|编译任务执行数量\nFailed|编译任务执行失败数量\nInvalid|编译任务执行失效数量\nTime|编译任务消耗时间\nFailedType|最后一个编译失败任务的类型\nFailedMethod|最后一个编译失败任务所在的类及方法\n\n* 3.2.3.jstat -gc <pid>: 可以显示 gc 的信息,查看 gc 的次数,及时间,\n\n显示列名|具体描述\n------|-------\nS0C|年轻代中第一个 survivor(幸存区)的容量(字节)\nS1C|年轻代中第二个 survivor(幸存区)的容量(字节)\nS0U|年轻代中第一个 survivor(幸存区)目前已使用空间(字节)\nS1U|年轻代中第二个 survivor(幸存区)目前已使用空间(字节)\nEC|年轻代中 Eden(伊甸园)的容量(字节)\nEU|年轻代中 Eden(伊甸园)目前已使用空间(字节)\nOC|Old 代的容量(字节)\nOU|Old 代目前已使用空间(字节)\nPC|Perm(持久代)的容量(字节)\nPU|Perm(持久代)目前已使用空间(字节)\nYGC|从应用程序启动到采样时年轻代中 gc 次数\nYGCT|从应用程序启动到采样时年轻代中 gc 所用时间(s)\nFGC|从应用程序启动到采样时 old 代(全 gc)gc 次数\nFGCT|从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)\nGCT|从应用程序启动到采样时 gc 用的总时间(s)\n\n*  3.2.4. jstat -gccapacity <pid>:可以显示,VM 内存中三代(young,old,perm)对象的使用和占用大小\n\n显示列名|具体描述\n------|-------\nNGCMN|年轻代(young)中初始化(最小)的大小(字节)\nNGCMX|年轻代(young)的最大容量(字节)\nNGC|年轻代(young)中当前的容量(字节)\nS0C|年轻代中第一个 survivor(幸存区)的容量(字节)\nS1C|年轻代中第二个 survivor(幸存区)的容量(字节)\nEC|年轻代中 Eden(伊甸园)的容量(字节)\nOGCMN|old 代中初始化(最小)的大小(字节)\nOGCMX|old 代的最大容量(字节)\nOGC|old 代当前新生成的容量(字节)\nOC|Old 代的容量(字节)\nPGCMN|perm 代中初始化(最小)的大小(字节)\nPGCMX|perm 代的最大容量(字节)\nPGC|perm 代当前新生成的容量(字节)\nPC|Perm(持久代)的容量(字节)\nYGC|从应用程序启动到采样时年轻代中 gc 次数\nFGC|从应用程序启动到采样时 old 代(全 gc)gc 次数\n\n* 3.2.5.jstat -gcutil <pid>:统计 gc 信息\n\n显示列名|具体描述\n------|-------\nS0| 年轻代中第一个 survivor(幸存区)已使用的占当前容量百分比\nS1|年轻代中第二个 survivor(幸存区)已使用的占当前容量百分比\nE|年轻代中 Eden(伊甸园)已使用的占当前容量百分比\nO|old 代已使用的占当前容量百分比\nP|perm 代已使用的占当前容量百分比\nYGC|从应用程序启动到采样时年轻代中 gc 次数\nYGCT|从应用程序启动到采样时年轻代中 gc 所用时间(s)\nFGC|从应用程序启动到采样时 old 代(全 gc)gc 次数\nFGCT|从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)\nGCT|从应用程序启动到采样时 gc 用的总时间(s)\n\n* 3.2.6. jstat -gcnew <pid>:年轻代对象的信息,\n\n显示列名|具体描述\n------|-------\nS0C|年轻代中第一个 survivor(幸存区)的容量(字节)\nS1C|年轻代中第二个 survivor(幸存区)的容量(字节)\nS0U|年轻代中第一个 survivor(幸存区)目前已使用空间(字节)\nS1U|年轻代中第二个 survivor(幸存区)目前已使用空间(字节)\nTT|持有次数限制\nMTT|最大持有次数限制\nEC|年轻代中 Eden(伊甸园)的容量(字节)\nEU|年轻代中 Eden(伊甸园)目前已使用空间(字节)\nYGC|从应用程序启动到采样时年轻代中 gc 次数\nYGCT|从应用程序启动到采样时年轻代中 gc 所用时间(s)\n\n* 3.2.7. jstat -gcnewcapacity <pid>: 年轻代对象的信息及其占用量,\n\n显示列名|具体描述\n------|-------\nNGCMN|年轻代(young)中初始化(最小)的大小(字节)\nNGCMX|年轻代(young)的最大容量(字节)\nNGC|年轻代(young)中当前的容量(字节)\nS0CMX|年轻代中第一个 survivor(幸存区)的最大容量(字节)\nS0C|年轻代中第一个 survivor(幸存区)的容量(字节)\nS1CMX|年轻代中第二个 survivor(幸存区)的最大容量(字节)\nS1C|年轻代中第二个 survivor(幸存区)的容量(字节)\nECMX|年轻代中 Eden(伊甸园)的最大容量(字节)\nEC|年轻代中 Eden(伊甸园)的容量(字节)\n\n* 3.2.8. jstat -gcold <pid>:old 代对象的信息,\n\n显示列名|具体描述\n------|-------\nPC|Perm(持久代)的容量(字节)\nPU|Perm(持久代)目前已使用空间(字节)\nOC|Old 代的容量(字节)\nOU|Old 代目前已使用空间(字节)\nYGC|从应用程序启动到采样时年轻代中 gc 次数\nFGC|从应用程序启动到采样时 old 代(全 gc)gc 次数\nFGCT|从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)\nGCT|从应用程序启动到采样时 gc 用的总时间(s)\n\n* 3.2.9.stat -gcoldcapacity <pid>: old 代对象的信息及其占用量\n\n显示列名|具体描述\n------|-------\nOGCMN|old 代中初始化(最小)的大小(字节)\nOGCMX|old 代的最大容量(字节)\nOGC|old 代当前新生成的容量(字节)\nOC|Old 代的容量(字节)\nYGC|从应用程序启动到采样时年轻代中 gc 次数\nFGC|从应用程序启动到采样时 old 代(全 gc)gc 次数\nFGCT|从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)\nGCT|从应用程序启动到采样时 gc 用的总时间(s)\n\n* 3.2.10. jstat -gcpermcapacity<pid>: perm 对象的信息及其占用量,\n\n显示列名|具体描述\n------|-------\nPGCMN|perm 代中初始化(最小)的大小(字节)\nPGCMX|perm 代的最大容量(字节)\nPGC|perm 代当前新生成的容量(字节)\nPC|Perm(持久代)的容量(字节)\nYGC|从应用程序启动到采样时年轻代中 gc 次数\nFGC|从应用程序启动到采样时 old 代(全 gc)gc 次数\nFGCT|从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)\nGCT|从应用程序启动到采样时 gc 用的总时间(s)\n\n* 3.2.11. jstat -printcompilation <pid>:当前 VM 执行的信息,\n\n显示列名|具体描述\n------|-------\nCompiled|编译任务的数目\nSize|方法生成的字节码的大小\nType|编译类型\nMethod|类名和方法名用来标识编译的方法,类名使用/做为一个命名空间分隔符,方法名是给定类中的方法,上述格式是由-XX:+PrintComplation 选项进行设置的\n\n### 3.3.实例:\n\n```java\n[java@RCS-AS-01 root]$ jstat -gcutil 16885 1000\n  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT\n  0.00  93.51  54.24  10.36  98.25  96.86    205   16.720     3    1.041   17.760\n  0.00  93.51  54.24  10.36  98.25  96.86    205   16.720     3    1.041   17.760\n```\n\n```java\n[java@RCS-AS-01 root]$ jstat -class 16885 1000\nLoaded  Bytes  Unloaded  Bytes     Time\n 10051 19327.1       32    44.2      27.15\n 10051 19327.1       32    44.2      27.15\n```\n\n## 4.jinfo\n### 4.1.简介　\n\njinfo(Java Configuration Information)，主要用于查看指定Java进程(或核心文件、远程调试服务器)的Java配置信息。\n命令格式：\n\n```java\njinfo [options] pid\njinfo [options] executable core\njinfo [options] [server-id@]remote-hostname-or-IP\n```\n\n参数详解:\n参数 | 解释\n----| ----\n pid  | 进程号\n executable | 产生core dump的java executable\n core  | core file\n remote-hostname-or-IP  | 主机名或ip\n server-id | 远程主机上的debug server的唯一id\n\noptions 参数详解:\n\n参数 | 解释\n----| ----\nno option | 打印命令行参数和系统属性\n-flags | 打印命令行参数\n-sysprops | 打印系统属性\n-h | 帮助\n\n### 4.2.实例\n\n```java\n[java@RCS-AS-01 root]$ jinfo 16885\nAttaching to process ID 16885, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 25.65-b01\nJava System Properties:\njava.runtime.name = Java(TM) SE Runtime Environment\njava.vm.version = 25.65-b01\nsun.boot.library.path = /usr/local/jdk8u65/jre/lib/amd64\njava.vendor.url = http://java.oracle.com/\njava.vm.vendor = Oracle Corporation\npath.separator = :\nfile.encoding.pkg = sun.io\njava.vm.name = Java HotSpot(TM) 64-Bit Server VM\n.....\nVM Flags:\nNon-default VM flags: -XX:CICompilerCount=2 -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=357564416 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=357564416 -XX:OldSize=716177408 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC\nCommand line:  -Duser.dir=/home/urcs/urcs-as-im -Xmx1024m -Xms1024m\n```\n\n```java\n[java@RCS-AS-01 root]$ jinfo -flags 16885\nAttaching to process ID 16885, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 25.65-b01\nNon-default VM flags: -XX:CICompilerCount=2 -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=357564416 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=357564416 -XX:OldSize=716177408 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC\nCommand line:  -Duser.dir=/home/urcs/urcs-as-im -Xmx1024m -Xms1024m\n```\n\n## 5.jmap\n\n### 5.1.简介　\njps是jdk提供的查看当前java进程的工具，简单看作为JavaVirtual Machine Process Status Tool。\n命令格式：\n```java\njmap [options] pid\njmap [options] executable core\njmap [options] [server-id@]remote-hostname-or-IP\n```\n参数详解:\n参数 | 解释\n----| ----\n pid  | 进程号\n executable | 产生core dump的java executable\n core  | core file\n remote-hostname-or-IP  | 主机名或ip\n server-id | 远程主机上的debug server的唯一id\n \noptions 参数详解:\n参数 | 解释\n----| ----\n-dump:[live,]format=b,file=<filename> | 使用hprof二进制形式,输出jvm的heap内容到文件=. live子选项是可选的，假如指定live选项,那么只输出活的对象到文件. \n-finalizerinfo | 打印正等候回收的对象的信息.\n-heap  | 打印heap的概要信息，GC使用的算法，heap的配置及wise heap的使用情况.\n-histo[:live] | 打印每个class的实例数目,内存占用,类全名信息. VM的内部类名字开头会加上前缀”*”. 如果live子参数加上后,只统计活的对象数量. \n-permstat | 打印classload和jvm heap长久层的信息. 包含每个classloader的名字,活泼性,地址,父classloader和加载的class数量. 另外,内部String的数量和占用内存数也会打印出来. \n-F | 强迫.在pid没有相应的时候使用-dump或者-histo参数. 在这个模式下,live子参数无效. \n-h | -help 打印辅助信息 \n-J | 传递参数给jmap启动的jvm.\n\n### 5.2.实例\n\n```java\n[java@RCS-AS-01 root]$ jmap -dump:live,format=b,file=/tmp/heap.dump 16885\nDumping heap to /tmp/heap.dump ...\nHeap dump file created\n```\n\n## 6.jstack\n\n### 6.1.简介　\njstack（ Stack Trace for Java） 命令 用于 生成 虚拟 机 当前 时刻 的 线程 快照（ 一般 称为 threaddump 或 javacore 文件）。 线程 快照 就是 当前 虚拟 机内 每一 条 线程 正在 执行 的 方法 堆栈 的 集合， 生成 线程 快照 的 主要 目的 是 定位 线程 出现 长时间 停顿 的 原因， 如 线程间死锁,死 循环,请求 外部 资源 导致 的 长时间 等待 等 都是 导致 线程 长时间 停顿 的 常见 原因。\n\n命令格式：\n\n```java\njstack [options] pid\njstack [options] executable core\njstack [options] [server-id@]remote-hostname-or-IP\n```\n\n参数详解:\n\n参数 | 解释\n----| ----\npid | 进程号\nexecutable | 产生 core dump 的 java executable\ncore | core file\nremote-hostname-or-IP | 主机名或 ip\nserver-id | 远程主机上的 debug server 的唯一 id\n\noptions 参数详解:\n\n参数 | 解释\n----| ----\n-F | 当 jstack [-l] pid 没有相应的时候强制打印栈信息\n-l | 长列表. 打印关于锁的附加信息,例如属于 java.util.concurrent 的 ownable synchronizers 列表.\n-m | 打印 java 和 native c/c++框架的所有栈信息.\n-h | -help 打印帮助信息\n\n### 6.2.实例\n\n```java\n[java@RCS-AS-01 root]$ jstack 16885 > /tmp/stack16885.1\n\n查看文件显示：\n2017-07-29 16:20:51\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.65-b01 mixed mode):\n\n\"HikariCP connection filler (pool HikariPool-11)\" #26011 daemon prio=5 os_prio=0 tid=0x0000000000f46000 nid=0x2bde waiting on condition [0x00007f334e8b4000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000c25016e8> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)\n        at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:467)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1066)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n............\n```\n\n## 7.jhat\n\n### 7.1.简介　\n\n提供 jhat（ JVM Heap Analysis Tool） 命令 与 jmap 搭配 使用， 来 分析 jmap 生成 的 堆 转储 快照。\n命令格式：\n```java\n　jhat -J-Xmx512m <heap dump file>\n```\n备注:\njhat 内置 了 一个 微型 的 HTTP/ HTML 服务器， 生成 dump 文件 的 分析 结果 后， 可以 在 浏览器 中 查看。 不过 实事求是 地说， 在 实际 工作中， 除非 笔者 手上 真的 没有 别的 工具 可用， 否则 一般 都 不会 去 直接 使用 jhat 命令 来 分析 dump 文件， 主要原因 有 二： 一是 一般 不会 在 部署 应用 程序 的 服务器 上 直接 分析 dump 文件， 即使 可以 这样做， 也会 尽量 将dump 文件 拷贝 到 其他 机器[ 4] 上进 行 分析， 因为 分析 工作 是一 个 耗时 而且 消耗 硬件 资源 的 过程， 既然 都要 在 其他 机器 上 进行， 就 没 必要 受到 命令行 工具 的 限制 了。 另外 一个 原因 是 jhat 的 分析 功能 相对来说 比较 简陋， 后文 将会 介绍 到 的 VisualVM\n\n### 7.2.实例:\n\n1、产生dump文件 c:\\>jmap -dump:file=f:\\yown\\dump.bin   16912\nDumping heap to F:\\apps\\dump.txt ...\nHeap dump file created\n\n2、生成站点分析报告，便于网络访问 c:\\>jhat -J-Xmx512m -port 88f:\\yown\\dump.bin\n```\nReading from f:\\apps\\dump.bin...\nDump file created Thu Jul 26 16:31:36 CST 2012\nSnapshot read, resolving...\nResolving 2194971 objects...\nChasing references, expect 438 dots.............................................\n................................................................................\n................................................................................\n................................................................................\n................................................................................\n.........................................................................\nEliminating duplicate references................................................\n................................................................................\n................................................................................\n................................................................................\n................................................................................\n......................................................................\nSnapshot resolved.\nStarted HTTP server on port 88\nServer is ready. 3.访问 http://localhost:88/ 这里记录了进程中所有类及实例个数\n```\n\n## 8.jvisualvm\n\n### 8.1.简介:\n\nVisualVM（ All- in- One Java Troubleshooting Tool） 是 到 目前 为止， 随 JDK 发布 的 功能 最强 大的 运行 监视 和 故障 处理 程序， 并且 可以 预见 在 未来 一段时间 内 都是 官方 主力 发展 的 虚拟 机 故障 处理 工具。 官方 在 VisualVM 的 软件 说明 中写 上了“ All- in- One” 的 描述 字样， 预示 着 它 除了 运行 监视、 故障 处理 外， 还 提供 了 很多 其他 方面 的 功能。VisualVM 基于 NetBeans 平台 开发， 因此 它 一 开始 就 具备 了 插件 扩展 功能 的 特性， 通过 插件 扩展 支持， VisualVM 可以 做到：\n·显示 虚拟 机 进程 及 进程 的 配置 和 环境 信息（ jps、 jinfo）\n·监视 应用 程序 的 CPU、 GC、 堆、 方法 区 及 线程 的 信息（ jstat、 jstack）。\n·dump 及 分析 堆 转储 快照（ jmap、 jhat）\n·方法 级 的 程序 运行 性能 分析， 找出 被 调用 最多、 运行 时间 最长 的 方法\n·离 线程 序 快照： 收集 程序 的 运行时 配置、 线程 dump、 内存 dump 等 信息 建立 一个 快照， 可以 将 快照 发送 开发者 处 进行 Bug 反馈。\n·其他 plugins 的 无限 的 可能性\n\n### 8.2.界面展示如下图\n\n![这里写图片描述](http://img.blog.csdn.net/20170729163459058?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20170729163624195?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 9.开启Java服务远程监控\n### 9.1.启动脚本中添加如下参数\n```ruby\nJAVA_ARGS[2]=\"-Dcom.sun.management.jmxremote.port=8999 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=10.10.220.101\"\n```\n### 9.2.通过jvisualvm可以监控远程java服务，如下：\n![这里写图片描述](http://img.blog.csdn.net/20170729163143819?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n","slug":"language/jvm/JVM性能监控及故障分析工具","published":1,"date":"2021-07-31T11:10:47.932Z","updated":"2021-07-31T11:10:47.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyio002au6uk9bkhg7ot","content":"<h1 id=\"JVM-性能监控及故障分析工具\"><a href=\"#JVM-性能监控及故障分析工具\" class=\"headerlink\" title=\"JVM 性能监控及故障分析工具\"></a>JVM 性能监控及故障分析工具</h1><h2 id=\"1-概要\"><a href=\"#1-概要\" class=\"headerlink\" title=\"1.概要\"></a>1.概要</h2><p>JDK官方提供了不少好用的JAVA故障处理工具,JDK的命令行工具在JDK的bin目录下供用户使用。</p>\n<h2 id=\"２-jps\"><a href=\"#２-jps\" class=\"headerlink\" title=\"２.jps\"></a>２.jps</h2><h3 id=\"２-1-简介\"><a href=\"#２-1-简介\" class=\"headerlink\" title=\"２.1.简介\"></a>２.1.简介</h3><p>jps是jdk提供的查看当前java进程的工具，简单看作为JavaVirtual Machine Process Status Tool。<br>命令格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jps [options] [hostid] </span><br></pre></td></tr></table></figure>\n<p>options 参数详解:<br>参数 | 解释<br>—-| —-<br> -q | 仅输出VM标识符，不包括classname,jar name,arguments in main method<br> -m | 输出main method的参数<br> -l | 输出完全的包名，应用主类名，jar的完全路径名<br> -v | 输出jvm参数<br> -V | 输出通过flag文件传递到JVM中的参数(.hotspotrc文件或-XX:Flags=所指定的文件<br> -J | 传递参数到vm,例如:-J-Xms512m<br>hostid 参数解释:<br>[protocol:][[//]hostname][:port][/servername]</p>\n<h3 id=\"２-２-实例\"><a href=\"#２-２-实例\" class=\"headerlink\" title=\"２.２.实例\"></a>２.２.实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jps</span><br><span class=\"line\"><span class=\"number\">3201</span> Jps</span><br><span class=\"line\"><span class=\"number\">20819</span> AuthBootstrap</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jps -lv</span><br><span class=\"line\"><span class=\"number\">20819</span> com.feinno.urcs.auth.main.AuthBootstrap -Duser.dir=/home/urcs/urcs-as-authentication -Xmx1024m -Xms1024m</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jps -lvm <span class=\"number\">10.10</span><span class=\"number\">.220</span><span class=\"number\">.101</span></span><br><span class=\"line\">RMI Registry not available at <span class=\"number\">10.10</span><span class=\"number\">.220</span><span class=\"number\">.101</span>:<span class=\"number\">1099</span></span><br><span class=\"line\">Connection refused to host: <span class=\"number\">10.10</span><span class=\"number\">.220</span><span class=\"number\">.101</span>; nested exception is:java.net.ConnectException: Connection refused。</span><br><span class=\"line\">需要在远程机器上开启：jstatd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-jstat\"><a href=\"#3-jstat\" class=\"headerlink\" title=\"3.jstat\"></a>3.jstat</h2><h3 id=\"3-1-简介\"><a href=\"#3-1-简介\" class=\"headerlink\" title=\"3.1.简介\"></a>3.1.简介</h3><p>Jstat是JDK自带的一个轻量级小工具。全称“Java Virtual Machine statistics monitoring tool”，它位于Java的bin目录下，主要利用JVM内建的指令对Java应用程序的资源和性能进行实时的命令行的监控，包括了对Heap size和垃圾回收状况的监控。可见，Jstat是轻量级的、专门针对JVM的工具。<br>命令格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstat [options]</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-options-参数详解\"><a href=\"#3-2-options-参数详解\" class=\"headerlink\" title=\"3.2.options 参数详解:\"></a>3.2.options 参数详解:</h3><ul>\n<li>3.2.1. jstat -class <pid> : 显示加载 class 的数量,及所占空间等信息,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Loaded</td>\n<td>装载的类的数量</td>\n</tr>\n<tr>\n<td>Bytes</td>\n<td>装载类所占用的字节数</td>\n</tr>\n<tr>\n<td>Unloaded</td>\n<td>卸载类的数量</td>\n</tr>\n<tr>\n<td>Bytes</td>\n<td>卸载类的字节数</td>\n</tr>\n<tr>\n<td>Time</td>\n<td>装载和卸载类所花费的时间</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.2.jstat -compiler <pid>:显示 VM 实时编译的数量等信息,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Compiled</td>\n<td>编译任务执行数量</td>\n</tr>\n<tr>\n<td>Failed</td>\n<td>编译任务执行失败数量</td>\n</tr>\n<tr>\n<td>Invalid</td>\n<td>编译任务执行失效数量</td>\n</tr>\n<tr>\n<td>Time</td>\n<td>编译任务消耗时间</td>\n</tr>\n<tr>\n<td>FailedType</td>\n<td>最后一个编译失败任务的类型</td>\n</tr>\n<tr>\n<td>FailedMethod</td>\n<td>最后一个编译失败任务所在的类及方法</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.3.jstat -gc <pid>: 可以显示 gc 的信息,查看 gc 的次数,及时间,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>S0C</td>\n<td>年轻代中第一个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>S1C</td>\n<td>年轻代中第二个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>S0U</td>\n<td>年轻代中第一个 survivor(幸存区)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>S1U</td>\n<td>年轻代中第二个 survivor(幸存区)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>年轻代中 Eden(伊甸园)的容量(字节)</td>\n</tr>\n<tr>\n<td>EU</td>\n<td>年轻代中 Eden(伊甸园)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>OC</td>\n<td>Old 代的容量(字节)</td>\n</tr>\n<tr>\n<td>OU</td>\n<td>Old 代目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>PC</td>\n<td>Perm(持久代)的容量(字节)</td>\n</tr>\n<tr>\n<td>PU</td>\n<td>Perm(持久代)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>YGC</td>\n<td>从应用程序启动到采样时年轻代中 gc 次数</td>\n</tr>\n<tr>\n<td>YGCT</td>\n<td>从应用程序启动到采样时年轻代中 gc 所用时间(s)</td>\n</tr>\n<tr>\n<td>FGC</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 次数</td>\n</tr>\n<tr>\n<td>FGCT</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)</td>\n</tr>\n<tr>\n<td>GCT</td>\n<td>从应用程序启动到采样时 gc 用的总时间(s)</td>\n</tr>\n</tbody></table>\n<ul>\n<li> 3.2.4. jstat -gccapacity <pid>:可以显示,VM 内存中三代(young,old,perm)对象的使用和占用大小</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NGCMN</td>\n<td>年轻代(young)中初始化(最小)的大小(字节)</td>\n</tr>\n<tr>\n<td>NGCMX</td>\n<td>年轻代(young)的最大容量(字节)</td>\n</tr>\n<tr>\n<td>NGC</td>\n<td>年轻代(young)中当前的容量(字节)</td>\n</tr>\n<tr>\n<td>S0C</td>\n<td>年轻代中第一个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>S1C</td>\n<td>年轻代中第二个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>年轻代中 Eden(伊甸园)的容量(字节)</td>\n</tr>\n<tr>\n<td>OGCMN</td>\n<td>old 代中初始化(最小)的大小(字节)</td>\n</tr>\n<tr>\n<td>OGCMX</td>\n<td>old 代的最大容量(字节)</td>\n</tr>\n<tr>\n<td>OGC</td>\n<td>old 代当前新生成的容量(字节)</td>\n</tr>\n<tr>\n<td>OC</td>\n<td>Old 代的容量(字节)</td>\n</tr>\n<tr>\n<td>PGCMN</td>\n<td>perm 代中初始化(最小)的大小(字节)</td>\n</tr>\n<tr>\n<td>PGCMX</td>\n<td>perm 代的最大容量(字节)</td>\n</tr>\n<tr>\n<td>PGC</td>\n<td>perm 代当前新生成的容量(字节)</td>\n</tr>\n<tr>\n<td>PC</td>\n<td>Perm(持久代)的容量(字节)</td>\n</tr>\n<tr>\n<td>YGC</td>\n<td>从应用程序启动到采样时年轻代中 gc 次数</td>\n</tr>\n<tr>\n<td>FGC</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 次数</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.5.jstat -gcutil <pid>:统计 gc 信息</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>S0</td>\n<td>年轻代中第一个 survivor(幸存区)已使用的占当前容量百分比</td>\n</tr>\n<tr>\n<td>S1</td>\n<td>年轻代中第二个 survivor(幸存区)已使用的占当前容量百分比</td>\n</tr>\n<tr>\n<td>E</td>\n<td>年轻代中 Eden(伊甸园)已使用的占当前容量百分比</td>\n</tr>\n<tr>\n<td>O</td>\n<td>old 代已使用的占当前容量百分比</td>\n</tr>\n<tr>\n<td>P</td>\n<td>perm 代已使用的占当前容量百分比</td>\n</tr>\n<tr>\n<td>YGC</td>\n<td>从应用程序启动到采样时年轻代中 gc 次数</td>\n</tr>\n<tr>\n<td>YGCT</td>\n<td>从应用程序启动到采样时年轻代中 gc 所用时间(s)</td>\n</tr>\n<tr>\n<td>FGC</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 次数</td>\n</tr>\n<tr>\n<td>FGCT</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)</td>\n</tr>\n<tr>\n<td>GCT</td>\n<td>从应用程序启动到采样时 gc 用的总时间(s)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.6. jstat -gcnew <pid>:年轻代对象的信息,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>S0C</td>\n<td>年轻代中第一个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>S1C</td>\n<td>年轻代中第二个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>S0U</td>\n<td>年轻代中第一个 survivor(幸存区)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>S1U</td>\n<td>年轻代中第二个 survivor(幸存区)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>TT</td>\n<td>持有次数限制</td>\n</tr>\n<tr>\n<td>MTT</td>\n<td>最大持有次数限制</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>年轻代中 Eden(伊甸园)的容量(字节)</td>\n</tr>\n<tr>\n<td>EU</td>\n<td>年轻代中 Eden(伊甸园)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>YGC</td>\n<td>从应用程序启动到采样时年轻代中 gc 次数</td>\n</tr>\n<tr>\n<td>YGCT</td>\n<td>从应用程序启动到采样时年轻代中 gc 所用时间(s)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.7. jstat -gcnewcapacity <pid>: 年轻代对象的信息及其占用量,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NGCMN</td>\n<td>年轻代(young)中初始化(最小)的大小(字节)</td>\n</tr>\n<tr>\n<td>NGCMX</td>\n<td>年轻代(young)的最大容量(字节)</td>\n</tr>\n<tr>\n<td>NGC</td>\n<td>年轻代(young)中当前的容量(字节)</td>\n</tr>\n<tr>\n<td>S0CMX</td>\n<td>年轻代中第一个 survivor(幸存区)的最大容量(字节)</td>\n</tr>\n<tr>\n<td>S0C</td>\n<td>年轻代中第一个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>S1CMX</td>\n<td>年轻代中第二个 survivor(幸存区)的最大容量(字节)</td>\n</tr>\n<tr>\n<td>S1C</td>\n<td>年轻代中第二个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>ECMX</td>\n<td>年轻代中 Eden(伊甸园)的最大容量(字节)</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>年轻代中 Eden(伊甸园)的容量(字节)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.8. jstat -gcold <pid>:old 代对象的信息,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PC</td>\n<td>Perm(持久代)的容量(字节)</td>\n</tr>\n<tr>\n<td>PU</td>\n<td>Perm(持久代)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>OC</td>\n<td>Old 代的容量(字节)</td>\n</tr>\n<tr>\n<td>OU</td>\n<td>Old 代目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>YGC</td>\n<td>从应用程序启动到采样时年轻代中 gc 次数</td>\n</tr>\n<tr>\n<td>FGC</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 次数</td>\n</tr>\n<tr>\n<td>FGCT</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)</td>\n</tr>\n<tr>\n<td>GCT</td>\n<td>从应用程序启动到采样时 gc 用的总时间(s)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.9.stat -gcoldcapacity <pid>: old 代对象的信息及其占用量</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OGCMN</td>\n<td>old 代中初始化(最小)的大小(字节)</td>\n</tr>\n<tr>\n<td>OGCMX</td>\n<td>old 代的最大容量(字节)</td>\n</tr>\n<tr>\n<td>OGC</td>\n<td>old 代当前新生成的容量(字节)</td>\n</tr>\n<tr>\n<td>OC</td>\n<td>Old 代的容量(字节)</td>\n</tr>\n<tr>\n<td>YGC</td>\n<td>从应用程序启动到采样时年轻代中 gc 次数</td>\n</tr>\n<tr>\n<td>FGC</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 次数</td>\n</tr>\n<tr>\n<td>FGCT</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)</td>\n</tr>\n<tr>\n<td>GCT</td>\n<td>从应用程序启动到采样时 gc 用的总时间(s)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.10. jstat -gcpermcapacity<pid>: perm 对象的信息及其占用量,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PGCMN</td>\n<td>perm 代中初始化(最小)的大小(字节)</td>\n</tr>\n<tr>\n<td>PGCMX</td>\n<td>perm 代的最大容量(字节)</td>\n</tr>\n<tr>\n<td>PGC</td>\n<td>perm 代当前新生成的容量(字节)</td>\n</tr>\n<tr>\n<td>PC</td>\n<td>Perm(持久代)的容量(字节)</td>\n</tr>\n<tr>\n<td>YGC</td>\n<td>从应用程序启动到采样时年轻代中 gc 次数</td>\n</tr>\n<tr>\n<td>FGC</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 次数</td>\n</tr>\n<tr>\n<td>FGCT</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)</td>\n</tr>\n<tr>\n<td>GCT</td>\n<td>从应用程序启动到采样时 gc 用的总时间(s)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.11. jstat -printcompilation <pid>:当前 VM 执行的信息,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Compiled</td>\n<td>编译任务的数目</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>方法生成的字节码的大小</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>编译类型</td>\n</tr>\n<tr>\n<td>Method</td>\n<td>类名和方法名用来标识编译的方法,类名使用/做为一个命名空间分隔符,方法名是给定类中的方法,上述格式是由-XX:+PrintComplation 选项进行设置的</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-3-实例\"><a href=\"#3-3-实例\" class=\"headerlink\" title=\"3.3.实例:\"></a>3.3.实例:</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jstat -gcutil <span class=\"number\">16885</span> <span class=\"number\">1000</span></span><br><span class=\"line\">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class=\"line\">  <span class=\"number\">0.00</span>  <span class=\"number\">93.51</span>  <span class=\"number\">54.24</span>  <span class=\"number\">10.36</span>  <span class=\"number\">98.25</span>  <span class=\"number\">96.86</span>    <span class=\"number\">205</span>   <span class=\"number\">16.720</span>     <span class=\"number\">3</span>    <span class=\"number\">1.041</span>   <span class=\"number\">17.760</span></span><br><span class=\"line\">  <span class=\"number\">0.00</span>  <span class=\"number\">93.51</span>  <span class=\"number\">54.24</span>  <span class=\"number\">10.36</span>  <span class=\"number\">98.25</span>  <span class=\"number\">96.86</span>    <span class=\"number\">205</span>   <span class=\"number\">16.720</span>     <span class=\"number\">3</span>    <span class=\"number\">1.041</span>   <span class=\"number\">17.760</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jstat -<span class=\"class\"><span class=\"keyword\">class</span> 16885 1000</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Loaded</span>  <span class=\"title\">Bytes</span>  <span class=\"title\">Unloaded</span>  <span class=\"title\">Bytes</span>     <span class=\"title\">Time</span></span></span><br><span class=\"line\"><span class=\"class\"> 10051 19327.1       32    44.2      27.15</span></span><br><span class=\"line\"><span class=\"class\"> 10051 19327.1       32    44.2      27.15</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-jinfo\"><a href=\"#4-jinfo\" class=\"headerlink\" title=\"4.jinfo\"></a>4.jinfo</h2><h3 id=\"4-1-简介\"><a href=\"#4-1-简介\" class=\"headerlink\" title=\"4.1.简介\"></a>4.1.简介</h3><p>jinfo(Java Configuration Information)，主要用于查看指定Java进程(或核心文件、远程调试服务器)的Java配置信息。<br>命令格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jinfo [options] pid</span><br><span class=\"line\">jinfo [options] executable core</span><br><span class=\"line\">jinfo [options] [server-id@]remote-hostname-or-IP</span><br></pre></td></tr></table></figure>\n\n<p>参数详解:<br>参数 | 解释<br>—-| —-<br> pid  | 进程号<br> executable | 产生core dump的java executable<br> core  | core file<br> remote-hostname-or-IP  | 主机名或ip<br> server-id | 远程主机上的debug server的唯一id</p>\n<p>options 参数详解:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>no option</td>\n<td>打印命令行参数和系统属性</td>\n</tr>\n<tr>\n<td>-flags</td>\n<td>打印命令行参数</td>\n</tr>\n<tr>\n<td>-sysprops</td>\n<td>打印系统属性</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>帮助</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-2-实例\"><a href=\"#4-2-实例\" class=\"headerlink\" title=\"4.2.实例\"></a>4.2.实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jinfo <span class=\"number\">16885</span></span><br><span class=\"line\">Attaching to process ID <span class=\"number\">16885</span>, please wait...</span><br><span class=\"line\">Debugger attached successfully.</span><br><span class=\"line\">Server compiler detected.</span><br><span class=\"line\">JVM version is <span class=\"number\">25.65</span>-b01</span><br><span class=\"line\">Java System Properties:</span><br><span class=\"line\">java.runtime.name = Java(TM) SE Runtime Environment</span><br><span class=\"line\">java.vm.version = <span class=\"number\">25.65</span>-b01</span><br><span class=\"line\">sun.boot.library.path = /usr/local/jdk8u65/jre/lib/amd64</span><br><span class=\"line\">java.vendor.url = http:<span class=\"comment\">//java.oracle.com/</span></span><br><span class=\"line\">java.vm.vendor = Oracle Corporation</span><br><span class=\"line\">path.separator = :</span><br><span class=\"line\">file.encoding.pkg = sun.io</span><br><span class=\"line\">java.vm.name = <span class=\"function\">Java <span class=\"title\">HotSpot</span><span class=\"params\">(TM)</span> 64-Bit Server VM</span></span><br><span class=\"line\"><span class=\"function\">.....</span></span><br><span class=\"line\"><span class=\"function\">VM Flags:</span></span><br><span class=\"line\"><span class=\"function\">Non-<span class=\"keyword\">default</span> VM flags: -XX:CICompilerCount</span>=<span class=\"number\">2</span> -XX:InitialHeapSize=<span class=\"number\">1073741824</span> -XX:MaxHeapSize=<span class=\"number\">1073741824</span> -XX:MaxNewSize=<span class=\"number\">357564416</span> -XX:MinHeapDeltaBytes=<span class=\"number\">524288</span> -XX:NewSize=<span class=\"number\">357564416</span> -XX:OldSize=<span class=\"number\">716177408</span> -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC</span><br><span class=\"line\">Command line:  -Duser.dir=/home/urcs/urcs-as-im -Xmx1024m -Xms1024m</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jinfo -flags <span class=\"number\">16885</span></span><br><span class=\"line\">Attaching to process ID <span class=\"number\">16885</span>, please wait...</span><br><span class=\"line\">Debugger attached successfully.</span><br><span class=\"line\">Server compiler detected.</span><br><span class=\"line\">JVM version is <span class=\"number\">25.65</span>-b01</span><br><span class=\"line\">Non-<span class=\"keyword\">default</span> VM flags: -XX:CICompilerCount=<span class=\"number\">2</span> -XX:InitialHeapSize=<span class=\"number\">1073741824</span> -XX:MaxHeapSize=<span class=\"number\">1073741824</span> -XX:MaxNewSize=<span class=\"number\">357564416</span> -XX:MinHeapDeltaBytes=<span class=\"number\">524288</span> -XX:NewSize=<span class=\"number\">357564416</span> -XX:OldSize=<span class=\"number\">716177408</span> -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC</span><br><span class=\"line\">Command line:  -Duser.dir=/home/urcs/urcs-as-im -Xmx1024m -Xms1024m</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-jmap\"><a href=\"#5-jmap\" class=\"headerlink\" title=\"5.jmap\"></a>5.jmap</h2><h3 id=\"5-1-简介\"><a href=\"#5-1-简介\" class=\"headerlink\" title=\"5.1.简介\"></a>5.1.简介</h3><p>jps是jdk提供的查看当前java进程的工具，简单看作为JavaVirtual Machine Process Status Tool。<br>命令格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap [options] pid</span><br><span class=\"line\">jmap [options] executable core</span><br><span class=\"line\">jmap [options] [server-id@]remote-hostname-or-IP</span><br></pre></td></tr></table></figure>\n<p>参数详解:<br>参数 | 解释<br>—-| —-<br> pid  | 进程号<br> executable | 产生core dump的java executable<br> core  | core file<br> remote-hostname-or-IP  | 主机名或ip<br> server-id | 远程主机上的debug server的唯一id</p>\n<p>options 参数详解:<br>参数 | 解释<br>—-| —-<br>-dump:[live,]format=b,file=<filename> | 使用hprof二进制形式,输出jvm的heap内容到文件=. live子选项是可选的，假如指定live选项,那么只输出活的对象到文件.<br>-finalizerinfo | 打印正等候回收的对象的信息.<br>-heap  | 打印heap的概要信息，GC使用的算法，heap的配置及wise heap的使用情况.<br>-histo[:live] | 打印每个class的实例数目,内存占用,类全名信息. VM的内部类名字开头会加上前缀”*”. 如果live子参数加上后,只统计活的对象数量.<br>-permstat | 打印classload和jvm heap长久层的信息. 包含每个classloader的名字,活泼性,地址,父classloader和加载的class数量. 另外,内部String的数量和占用内存数也会打印出来.<br>-F | 强迫.在pid没有相应的时候使用-dump或者-histo参数. 在这个模式下,live子参数无效.<br>-h | -help 打印辅助信息<br>-J | 传递参数给jmap启动的jvm.</p>\n<h3 id=\"5-2-实例\"><a href=\"#5-2-实例\" class=\"headerlink\" title=\"5.2.实例\"></a>5.2.实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jmap -dump:live,format=b,file=/tmp/heap.dump <span class=\"number\">16885</span></span><br><span class=\"line\">Dumping heap to /tmp/heap.dump ...</span><br><span class=\"line\">Heap dump file created</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-jstack\"><a href=\"#6-jstack\" class=\"headerlink\" title=\"6.jstack\"></a>6.jstack</h2><h3 id=\"6-1-简介\"><a href=\"#6-1-简介\" class=\"headerlink\" title=\"6.1.简介\"></a>6.1.简介</h3><p>jstack（ Stack Trace for Java） 命令 用于 生成 虚拟 机 当前 时刻 的 线程 快照（ 一般 称为 threaddump 或 javacore 文件）。 线程 快照 就是 当前 虚拟 机内 每一 条 线程 正在 执行 的 方法 堆栈 的 集合， 生成 线程 快照 的 主要 目的 是 定位 线程 出现 长时间 停顿 的 原因， 如 线程间死锁,死 循环,请求 外部 资源 导致 的 长时间 等待 等 都是 导致 线程 长时间 停顿 的 常见 原因。</p>\n<p>命令格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstack [options] pid</span><br><span class=\"line\">jstack [options] executable core</span><br><span class=\"line\">jstack [options] [server-id@]remote-hostname-or-IP</span><br></pre></td></tr></table></figure>\n\n<p>参数详解:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pid</td>\n<td>进程号</td>\n</tr>\n<tr>\n<td>executable</td>\n<td>产生 core dump 的 java executable</td>\n</tr>\n<tr>\n<td>core</td>\n<td>core file</td>\n</tr>\n<tr>\n<td>remote-hostname-or-IP</td>\n<td>主机名或 ip</td>\n</tr>\n<tr>\n<td>server-id</td>\n<td>远程主机上的 debug server 的唯一 id</td>\n</tr>\n</tbody></table>\n<p>options 参数详解:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-F</td>\n<td>当 jstack [-l] pid 没有相应的时候强制打印栈信息</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>长列表. 打印关于锁的附加信息,例如属于 java.util.concurrent 的 ownable synchronizers 列表.</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>打印 java 和 native c/c++框架的所有栈信息.</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>-help 打印帮助信息</td>\n</tr>\n</tbody></table>\n<h3 id=\"6-2-实例\"><a href=\"#6-2-实例\" class=\"headerlink\" title=\"6.2.实例\"></a>6.2.实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jstack <span class=\"number\">16885</span> &gt; /tmp/stack16885<span class=\"number\">.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">查看文件显示：</span><br><span class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">29</span> <span class=\"number\">16</span>:<span class=\"number\">20</span>:<span class=\"number\">51</span></span><br><span class=\"line\"><span class=\"function\">Full thread dump Java <span class=\"title\">HotSpot</span><span class=\"params\">(TM)</span> 64-Bit Server <span class=\"title\">VM</span> <span class=\"params\">(<span class=\"number\">25.65</span>-b01 mixed mode)</span>:</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">&quot;HikariCP connection <span class=\"title\">filler</span> <span class=\"params\">(pool HikariPool-<span class=\"number\">11</span>)</span>&quot; #26011 daemon prio</span>=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x0000000000f46000</span> nid=<span class=\"number\">0x2bde</span> waiting on condition [<span class=\"number\">0x00007f334e8b4000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: TIMED_WAITING (parking)</span><br><span class=\"line\">        at sun.misc.Unsafe.park(Native Method)</span><br><span class=\"line\">        - parking to wait <span class=\"keyword\">for</span>  &lt;<span class=\"number\">0x00000000c25016e8</span>&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)</span><br><span class=\"line\">        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:<span class=\"number\">215</span>)</span><br><span class=\"line\">        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:<span class=\"number\">2078</span>)</span><br><span class=\"line\">        at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:<span class=\"number\">467</span>)</span><br><span class=\"line\">        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:<span class=\"number\">1066</span>)</span><br><span class=\"line\">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class=\"number\">1127</span>)</span><br><span class=\"line\">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class=\"number\">617</span>)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</span><br><span class=\"line\">............</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-jhat\"><a href=\"#7-jhat\" class=\"headerlink\" title=\"7.jhat\"></a>7.jhat</h2><h3 id=\"7-1-简介\"><a href=\"#7-1-简介\" class=\"headerlink\" title=\"7.1.简介\"></a>7.1.简介</h3><p>提供 jhat（ JVM Heap Analysis Tool） 命令 与 jmap 搭配 使用， 来 分析 jmap 生成 的 堆 转储 快照。<br>命令格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　jhat -J-Xmx512m &lt;heap dump file&gt;</span><br></pre></td></tr></table></figure>\n<p>备注:<br>jhat 内置 了 一个 微型 的 HTTP/ HTML 服务器， 生成 dump 文件 的 分析 结果 后， 可以 在 浏览器 中 查看。 不过 实事求是 地说， 在 实际 工作中， 除非 笔者 手上 真的 没有 别的 工具 可用， 否则 一般 都 不会 去 直接 使用 jhat 命令 来 分析 dump 文件， 主要原因 有 二： 一是 一般 不会 在 部署 应用 程序 的 服务器 上 直接 分析 dump 文件， 即使 可以 这样做， 也会 尽量 将dump 文件 拷贝 到 其他 机器[ 4] 上进 行 分析， 因为 分析 工作 是一 个 耗时 而且 消耗 硬件 资源 的 过程， 既然 都要 在 其他 机器 上 进行， 就 没 必要 受到 命令行 工具 的 限制 了。 另外 一个 原因 是 jhat 的 分析 功能 相对来说 比较 简陋， 后文 将会 介绍 到 的 VisualVM</p>\n<h3 id=\"7-2-实例\"><a href=\"#7-2-实例\" class=\"headerlink\" title=\"7.2.实例:\"></a>7.2.实例:</h3><p>1、产生dump文件 c:&gt;jmap -dump:file=f:\\yown\\dump.bin   16912<br>Dumping heap to F:\\apps\\dump.txt …<br>Heap dump file created</p>\n<p>2、生成站点分析报告，便于网络访问 c:&gt;jhat -J-Xmx512m -port 88f:\\yown\\dump.bin</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reading from f:\\apps\\dump.bin...</span><br><span class=\"line\">Dump file created Thu Jul 26 16:31:36 CST 2012</span><br><span class=\"line\">Snapshot read, resolving...</span><br><span class=\"line\">Resolving 2194971 objects...</span><br><span class=\"line\">Chasing references, expect 438 dots.............................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">.........................................................................</span><br><span class=\"line\">Eliminating duplicate references................................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">......................................................................</span><br><span class=\"line\">Snapshot resolved.</span><br><span class=\"line\">Started HTTP server on port 88</span><br><span class=\"line\">Server is ready. 3.访问 http://localhost:88/ 这里记录了进程中所有类及实例个数</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-jvisualvm\"><a href=\"#8-jvisualvm\" class=\"headerlink\" title=\"8.jvisualvm\"></a>8.jvisualvm</h2><h3 id=\"8-1-简介\"><a href=\"#8-1-简介\" class=\"headerlink\" title=\"8.1.简介:\"></a>8.1.简介:</h3><p>VisualVM（ All- in- One Java Troubleshooting Tool） 是 到 目前 为止， 随 JDK 发布 的 功能 最强 大的 运行 监视 和 故障 处理 程序， 并且 可以 预见 在 未来 一段时间 内 都是 官方 主力 发展 的 虚拟 机 故障 处理 工具。 官方 在 VisualVM 的 软件 说明 中写 上了“ All- in- One” 的 描述 字样， 预示 着 它 除了 运行 监视、 故障 处理 外， 还 提供 了 很多 其他 方面 的 功能。VisualVM 基于 NetBeans 平台 开发， 因此 它 一 开始 就 具备 了 插件 扩展 功能 的 特性， 通过 插件 扩展 支持， VisualVM 可以 做到：<br>·显示 虚拟 机 进程 及 进程 的 配置 和 环境 信息（ jps、 jinfo）<br>·监视 应用 程序 的 CPU、 GC、 堆、 方法 区 及 线程 的 信息（ jstat、 jstack）。<br>·dump 及 分析 堆 转储 快照（ jmap、 jhat）<br>·方法 级 的 程序 运行 性能 分析， 找出 被 调用 最多、 运行 时间 最长 的 方法<br>·离 线程 序 快照： 收集 程序 的 运行时 配置、 线程 dump、 内存 dump 等 信息 建立 一个 快照， 可以 将 快照 发送 开发者 处 进行 Bug 反馈。<br>·其他 plugins 的 无限 的 可能性</p>\n<h3 id=\"8-2-界面展示如下图\"><a href=\"#8-2-界面展示如下图\" class=\"headerlink\" title=\"8.2.界面展示如下图\"></a>8.2.界面展示如下图</h3><p><img src=\"http://img.blog.csdn.net/20170729163459058?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170729163624195?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"9-开启Java服务远程监控\"><a href=\"#9-开启Java服务远程监控\" class=\"headerlink\" title=\"9.开启Java服务远程监控\"></a>9.开启Java服务远程监控</h2><h3 id=\"9-1-启动脚本中添加如下参数\"><a href=\"#9-1-启动脚本中添加如下参数\" class=\"headerlink\" title=\"9.1.启动脚本中添加如下参数\"></a>9.1.启动脚本中添加如下参数</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_ARGS[<span class=\"number\">2</span>]=<span class=\"string\">&quot;-Dcom.sun.management.jmxremote.port=8999 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=10.10.220.101&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"9-2-通过jvisualvm可以监控远程java服务，如下：\"><a href=\"#9-2-通过jvisualvm可以监控远程java服务，如下：\" class=\"headerlink\" title=\"9.2.通过jvisualvm可以监控远程java服务，如下：\"></a>9.2.通过jvisualvm可以监控远程java服务，如下：</h3><p><img src=\"http://img.blog.csdn.net/20170729163143819?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JVM-性能监控及故障分析工具\"><a href=\"#JVM-性能监控及故障分析工具\" class=\"headerlink\" title=\"JVM 性能监控及故障分析工具\"></a>JVM 性能监控及故障分析工具</h1><h2 id=\"1-概要\"><a href=\"#1-概要\" class=\"headerlink\" title=\"1.概要\"></a>1.概要</h2><p>JDK官方提供了不少好用的JAVA故障处理工具,JDK的命令行工具在JDK的bin目录下供用户使用。</p>\n<h2 id=\"２-jps\"><a href=\"#２-jps\" class=\"headerlink\" title=\"２.jps\"></a>２.jps</h2><h3 id=\"２-1-简介\"><a href=\"#２-1-简介\" class=\"headerlink\" title=\"２.1.简介\"></a>２.1.简介</h3><p>jps是jdk提供的查看当前java进程的工具，简单看作为JavaVirtual Machine Process Status Tool。<br>命令格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jps [options] [hostid] </span><br></pre></td></tr></table></figure>\n<p>options 参数详解:<br>参数 | 解释<br>—-| —-<br> -q | 仅输出VM标识符，不包括classname,jar name,arguments in main method<br> -m | 输出main method的参数<br> -l | 输出完全的包名，应用主类名，jar的完全路径名<br> -v | 输出jvm参数<br> -V | 输出通过flag文件传递到JVM中的参数(.hotspotrc文件或-XX:Flags=所指定的文件<br> -J | 传递参数到vm,例如:-J-Xms512m<br>hostid 参数解释:<br>[protocol:][[//]hostname][:port][/servername]</p>\n<h3 id=\"２-２-实例\"><a href=\"#２-２-实例\" class=\"headerlink\" title=\"２.２.实例\"></a>２.２.实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jps</span><br><span class=\"line\"><span class=\"number\">3201</span> Jps</span><br><span class=\"line\"><span class=\"number\">20819</span> AuthBootstrap</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jps -lv</span><br><span class=\"line\"><span class=\"number\">20819</span> com.feinno.urcs.auth.main.AuthBootstrap -Duser.dir=/home/urcs/urcs-as-authentication -Xmx1024m -Xms1024m</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jps -lvm <span class=\"number\">10.10</span><span class=\"number\">.220</span><span class=\"number\">.101</span></span><br><span class=\"line\">RMI Registry not available at <span class=\"number\">10.10</span><span class=\"number\">.220</span><span class=\"number\">.101</span>:<span class=\"number\">1099</span></span><br><span class=\"line\">Connection refused to host: <span class=\"number\">10.10</span><span class=\"number\">.220</span><span class=\"number\">.101</span>; nested exception is:java.net.ConnectException: Connection refused。</span><br><span class=\"line\">需要在远程机器上开启：jstatd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-jstat\"><a href=\"#3-jstat\" class=\"headerlink\" title=\"3.jstat\"></a>3.jstat</h2><h3 id=\"3-1-简介\"><a href=\"#3-1-简介\" class=\"headerlink\" title=\"3.1.简介\"></a>3.1.简介</h3><p>Jstat是JDK自带的一个轻量级小工具。全称“Java Virtual Machine statistics monitoring tool”，它位于Java的bin目录下，主要利用JVM内建的指令对Java应用程序的资源和性能进行实时的命令行的监控，包括了对Heap size和垃圾回收状况的监控。可见，Jstat是轻量级的、专门针对JVM的工具。<br>命令格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstat [options]</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-options-参数详解\"><a href=\"#3-2-options-参数详解\" class=\"headerlink\" title=\"3.2.options 参数详解:\"></a>3.2.options 参数详解:</h3><ul>\n<li>3.2.1. jstat -class <pid> : 显示加载 class 的数量,及所占空间等信息,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Loaded</td>\n<td>装载的类的数量</td>\n</tr>\n<tr>\n<td>Bytes</td>\n<td>装载类所占用的字节数</td>\n</tr>\n<tr>\n<td>Unloaded</td>\n<td>卸载类的数量</td>\n</tr>\n<tr>\n<td>Bytes</td>\n<td>卸载类的字节数</td>\n</tr>\n<tr>\n<td>Time</td>\n<td>装载和卸载类所花费的时间</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.2.jstat -compiler <pid>:显示 VM 实时编译的数量等信息,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Compiled</td>\n<td>编译任务执行数量</td>\n</tr>\n<tr>\n<td>Failed</td>\n<td>编译任务执行失败数量</td>\n</tr>\n<tr>\n<td>Invalid</td>\n<td>编译任务执行失效数量</td>\n</tr>\n<tr>\n<td>Time</td>\n<td>编译任务消耗时间</td>\n</tr>\n<tr>\n<td>FailedType</td>\n<td>最后一个编译失败任务的类型</td>\n</tr>\n<tr>\n<td>FailedMethod</td>\n<td>最后一个编译失败任务所在的类及方法</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.3.jstat -gc <pid>: 可以显示 gc 的信息,查看 gc 的次数,及时间,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>S0C</td>\n<td>年轻代中第一个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>S1C</td>\n<td>年轻代中第二个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>S0U</td>\n<td>年轻代中第一个 survivor(幸存区)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>S1U</td>\n<td>年轻代中第二个 survivor(幸存区)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>年轻代中 Eden(伊甸园)的容量(字节)</td>\n</tr>\n<tr>\n<td>EU</td>\n<td>年轻代中 Eden(伊甸园)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>OC</td>\n<td>Old 代的容量(字节)</td>\n</tr>\n<tr>\n<td>OU</td>\n<td>Old 代目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>PC</td>\n<td>Perm(持久代)的容量(字节)</td>\n</tr>\n<tr>\n<td>PU</td>\n<td>Perm(持久代)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>YGC</td>\n<td>从应用程序启动到采样时年轻代中 gc 次数</td>\n</tr>\n<tr>\n<td>YGCT</td>\n<td>从应用程序启动到采样时年轻代中 gc 所用时间(s)</td>\n</tr>\n<tr>\n<td>FGC</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 次数</td>\n</tr>\n<tr>\n<td>FGCT</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)</td>\n</tr>\n<tr>\n<td>GCT</td>\n<td>从应用程序启动到采样时 gc 用的总时间(s)</td>\n</tr>\n</tbody></table>\n<ul>\n<li> 3.2.4. jstat -gccapacity <pid>:可以显示,VM 内存中三代(young,old,perm)对象的使用和占用大小</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NGCMN</td>\n<td>年轻代(young)中初始化(最小)的大小(字节)</td>\n</tr>\n<tr>\n<td>NGCMX</td>\n<td>年轻代(young)的最大容量(字节)</td>\n</tr>\n<tr>\n<td>NGC</td>\n<td>年轻代(young)中当前的容量(字节)</td>\n</tr>\n<tr>\n<td>S0C</td>\n<td>年轻代中第一个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>S1C</td>\n<td>年轻代中第二个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>年轻代中 Eden(伊甸园)的容量(字节)</td>\n</tr>\n<tr>\n<td>OGCMN</td>\n<td>old 代中初始化(最小)的大小(字节)</td>\n</tr>\n<tr>\n<td>OGCMX</td>\n<td>old 代的最大容量(字节)</td>\n</tr>\n<tr>\n<td>OGC</td>\n<td>old 代当前新生成的容量(字节)</td>\n</tr>\n<tr>\n<td>OC</td>\n<td>Old 代的容量(字节)</td>\n</tr>\n<tr>\n<td>PGCMN</td>\n<td>perm 代中初始化(最小)的大小(字节)</td>\n</tr>\n<tr>\n<td>PGCMX</td>\n<td>perm 代的最大容量(字节)</td>\n</tr>\n<tr>\n<td>PGC</td>\n<td>perm 代当前新生成的容量(字节)</td>\n</tr>\n<tr>\n<td>PC</td>\n<td>Perm(持久代)的容量(字节)</td>\n</tr>\n<tr>\n<td>YGC</td>\n<td>从应用程序启动到采样时年轻代中 gc 次数</td>\n</tr>\n<tr>\n<td>FGC</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 次数</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.5.jstat -gcutil <pid>:统计 gc 信息</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>S0</td>\n<td>年轻代中第一个 survivor(幸存区)已使用的占当前容量百分比</td>\n</tr>\n<tr>\n<td>S1</td>\n<td>年轻代中第二个 survivor(幸存区)已使用的占当前容量百分比</td>\n</tr>\n<tr>\n<td>E</td>\n<td>年轻代中 Eden(伊甸园)已使用的占当前容量百分比</td>\n</tr>\n<tr>\n<td>O</td>\n<td>old 代已使用的占当前容量百分比</td>\n</tr>\n<tr>\n<td>P</td>\n<td>perm 代已使用的占当前容量百分比</td>\n</tr>\n<tr>\n<td>YGC</td>\n<td>从应用程序启动到采样时年轻代中 gc 次数</td>\n</tr>\n<tr>\n<td>YGCT</td>\n<td>从应用程序启动到采样时年轻代中 gc 所用时间(s)</td>\n</tr>\n<tr>\n<td>FGC</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 次数</td>\n</tr>\n<tr>\n<td>FGCT</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)</td>\n</tr>\n<tr>\n<td>GCT</td>\n<td>从应用程序启动到采样时 gc 用的总时间(s)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.6. jstat -gcnew <pid>:年轻代对象的信息,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>S0C</td>\n<td>年轻代中第一个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>S1C</td>\n<td>年轻代中第二个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>S0U</td>\n<td>年轻代中第一个 survivor(幸存区)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>S1U</td>\n<td>年轻代中第二个 survivor(幸存区)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>TT</td>\n<td>持有次数限制</td>\n</tr>\n<tr>\n<td>MTT</td>\n<td>最大持有次数限制</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>年轻代中 Eden(伊甸园)的容量(字节)</td>\n</tr>\n<tr>\n<td>EU</td>\n<td>年轻代中 Eden(伊甸园)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>YGC</td>\n<td>从应用程序启动到采样时年轻代中 gc 次数</td>\n</tr>\n<tr>\n<td>YGCT</td>\n<td>从应用程序启动到采样时年轻代中 gc 所用时间(s)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.7. jstat -gcnewcapacity <pid>: 年轻代对象的信息及其占用量,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NGCMN</td>\n<td>年轻代(young)中初始化(最小)的大小(字节)</td>\n</tr>\n<tr>\n<td>NGCMX</td>\n<td>年轻代(young)的最大容量(字节)</td>\n</tr>\n<tr>\n<td>NGC</td>\n<td>年轻代(young)中当前的容量(字节)</td>\n</tr>\n<tr>\n<td>S0CMX</td>\n<td>年轻代中第一个 survivor(幸存区)的最大容量(字节)</td>\n</tr>\n<tr>\n<td>S0C</td>\n<td>年轻代中第一个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>S1CMX</td>\n<td>年轻代中第二个 survivor(幸存区)的最大容量(字节)</td>\n</tr>\n<tr>\n<td>S1C</td>\n<td>年轻代中第二个 survivor(幸存区)的容量(字节)</td>\n</tr>\n<tr>\n<td>ECMX</td>\n<td>年轻代中 Eden(伊甸园)的最大容量(字节)</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>年轻代中 Eden(伊甸园)的容量(字节)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.8. jstat -gcold <pid>:old 代对象的信息,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PC</td>\n<td>Perm(持久代)的容量(字节)</td>\n</tr>\n<tr>\n<td>PU</td>\n<td>Perm(持久代)目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>OC</td>\n<td>Old 代的容量(字节)</td>\n</tr>\n<tr>\n<td>OU</td>\n<td>Old 代目前已使用空间(字节)</td>\n</tr>\n<tr>\n<td>YGC</td>\n<td>从应用程序启动到采样时年轻代中 gc 次数</td>\n</tr>\n<tr>\n<td>FGC</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 次数</td>\n</tr>\n<tr>\n<td>FGCT</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)</td>\n</tr>\n<tr>\n<td>GCT</td>\n<td>从应用程序启动到采样时 gc 用的总时间(s)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.9.stat -gcoldcapacity <pid>: old 代对象的信息及其占用量</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OGCMN</td>\n<td>old 代中初始化(最小)的大小(字节)</td>\n</tr>\n<tr>\n<td>OGCMX</td>\n<td>old 代的最大容量(字节)</td>\n</tr>\n<tr>\n<td>OGC</td>\n<td>old 代当前新生成的容量(字节)</td>\n</tr>\n<tr>\n<td>OC</td>\n<td>Old 代的容量(字节)</td>\n</tr>\n<tr>\n<td>YGC</td>\n<td>从应用程序启动到采样时年轻代中 gc 次数</td>\n</tr>\n<tr>\n<td>FGC</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 次数</td>\n</tr>\n<tr>\n<td>FGCT</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)</td>\n</tr>\n<tr>\n<td>GCT</td>\n<td>从应用程序启动到采样时 gc 用的总时间(s)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.10. jstat -gcpermcapacity<pid>: perm 对象的信息及其占用量,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PGCMN</td>\n<td>perm 代中初始化(最小)的大小(字节)</td>\n</tr>\n<tr>\n<td>PGCMX</td>\n<td>perm 代的最大容量(字节)</td>\n</tr>\n<tr>\n<td>PGC</td>\n<td>perm 代当前新生成的容量(字节)</td>\n</tr>\n<tr>\n<td>PC</td>\n<td>Perm(持久代)的容量(字节)</td>\n</tr>\n<tr>\n<td>YGC</td>\n<td>从应用程序启动到采样时年轻代中 gc 次数</td>\n</tr>\n<tr>\n<td>FGC</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 次数</td>\n</tr>\n<tr>\n<td>FGCT</td>\n<td>从应用程序启动到采样时 old 代(全 gc)gc 所用时间(s)</td>\n</tr>\n<tr>\n<td>GCT</td>\n<td>从应用程序启动到采样时 gc 用的总时间(s)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3.2.11. jstat -printcompilation <pid>:当前 VM 执行的信息,</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>显示列名</th>\n<th>具体描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Compiled</td>\n<td>编译任务的数目</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>方法生成的字节码的大小</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>编译类型</td>\n</tr>\n<tr>\n<td>Method</td>\n<td>类名和方法名用来标识编译的方法,类名使用/做为一个命名空间分隔符,方法名是给定类中的方法,上述格式是由-XX:+PrintComplation 选项进行设置的</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-3-实例\"><a href=\"#3-3-实例\" class=\"headerlink\" title=\"3.3.实例:\"></a>3.3.实例:</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jstat -gcutil <span class=\"number\">16885</span> <span class=\"number\">1000</span></span><br><span class=\"line\">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class=\"line\">  <span class=\"number\">0.00</span>  <span class=\"number\">93.51</span>  <span class=\"number\">54.24</span>  <span class=\"number\">10.36</span>  <span class=\"number\">98.25</span>  <span class=\"number\">96.86</span>    <span class=\"number\">205</span>   <span class=\"number\">16.720</span>     <span class=\"number\">3</span>    <span class=\"number\">1.041</span>   <span class=\"number\">17.760</span></span><br><span class=\"line\">  <span class=\"number\">0.00</span>  <span class=\"number\">93.51</span>  <span class=\"number\">54.24</span>  <span class=\"number\">10.36</span>  <span class=\"number\">98.25</span>  <span class=\"number\">96.86</span>    <span class=\"number\">205</span>   <span class=\"number\">16.720</span>     <span class=\"number\">3</span>    <span class=\"number\">1.041</span>   <span class=\"number\">17.760</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jstat -<span class=\"class\"><span class=\"keyword\">class</span> 16885 1000</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Loaded</span>  <span class=\"title\">Bytes</span>  <span class=\"title\">Unloaded</span>  <span class=\"title\">Bytes</span>     <span class=\"title\">Time</span></span></span><br><span class=\"line\"><span class=\"class\"> 10051 19327.1       32    44.2      27.15</span></span><br><span class=\"line\"><span class=\"class\"> 10051 19327.1       32    44.2      27.15</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-jinfo\"><a href=\"#4-jinfo\" class=\"headerlink\" title=\"4.jinfo\"></a>4.jinfo</h2><h3 id=\"4-1-简介\"><a href=\"#4-1-简介\" class=\"headerlink\" title=\"4.1.简介\"></a>4.1.简介</h3><p>jinfo(Java Configuration Information)，主要用于查看指定Java进程(或核心文件、远程调试服务器)的Java配置信息。<br>命令格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jinfo [options] pid</span><br><span class=\"line\">jinfo [options] executable core</span><br><span class=\"line\">jinfo [options] [server-id@]remote-hostname-or-IP</span><br></pre></td></tr></table></figure>\n\n<p>参数详解:<br>参数 | 解释<br>—-| —-<br> pid  | 进程号<br> executable | 产生core dump的java executable<br> core  | core file<br> remote-hostname-or-IP  | 主机名或ip<br> server-id | 远程主机上的debug server的唯一id</p>\n<p>options 参数详解:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>no option</td>\n<td>打印命令行参数和系统属性</td>\n</tr>\n<tr>\n<td>-flags</td>\n<td>打印命令行参数</td>\n</tr>\n<tr>\n<td>-sysprops</td>\n<td>打印系统属性</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>帮助</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-2-实例\"><a href=\"#4-2-实例\" class=\"headerlink\" title=\"4.2.实例\"></a>4.2.实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jinfo <span class=\"number\">16885</span></span><br><span class=\"line\">Attaching to process ID <span class=\"number\">16885</span>, please wait...</span><br><span class=\"line\">Debugger attached successfully.</span><br><span class=\"line\">Server compiler detected.</span><br><span class=\"line\">JVM version is <span class=\"number\">25.65</span>-b01</span><br><span class=\"line\">Java System Properties:</span><br><span class=\"line\">java.runtime.name = Java(TM) SE Runtime Environment</span><br><span class=\"line\">java.vm.version = <span class=\"number\">25.65</span>-b01</span><br><span class=\"line\">sun.boot.library.path = /usr/local/jdk8u65/jre/lib/amd64</span><br><span class=\"line\">java.vendor.url = http:<span class=\"comment\">//java.oracle.com/</span></span><br><span class=\"line\">java.vm.vendor = Oracle Corporation</span><br><span class=\"line\">path.separator = :</span><br><span class=\"line\">file.encoding.pkg = sun.io</span><br><span class=\"line\">java.vm.name = <span class=\"function\">Java <span class=\"title\">HotSpot</span><span class=\"params\">(TM)</span> 64-Bit Server VM</span></span><br><span class=\"line\"><span class=\"function\">.....</span></span><br><span class=\"line\"><span class=\"function\">VM Flags:</span></span><br><span class=\"line\"><span class=\"function\">Non-<span class=\"keyword\">default</span> VM flags: -XX:CICompilerCount</span>=<span class=\"number\">2</span> -XX:InitialHeapSize=<span class=\"number\">1073741824</span> -XX:MaxHeapSize=<span class=\"number\">1073741824</span> -XX:MaxNewSize=<span class=\"number\">357564416</span> -XX:MinHeapDeltaBytes=<span class=\"number\">524288</span> -XX:NewSize=<span class=\"number\">357564416</span> -XX:OldSize=<span class=\"number\">716177408</span> -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC</span><br><span class=\"line\">Command line:  -Duser.dir=/home/urcs/urcs-as-im -Xmx1024m -Xms1024m</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jinfo -flags <span class=\"number\">16885</span></span><br><span class=\"line\">Attaching to process ID <span class=\"number\">16885</span>, please wait...</span><br><span class=\"line\">Debugger attached successfully.</span><br><span class=\"line\">Server compiler detected.</span><br><span class=\"line\">JVM version is <span class=\"number\">25.65</span>-b01</span><br><span class=\"line\">Non-<span class=\"keyword\">default</span> VM flags: -XX:CICompilerCount=<span class=\"number\">2</span> -XX:InitialHeapSize=<span class=\"number\">1073741824</span> -XX:MaxHeapSize=<span class=\"number\">1073741824</span> -XX:MaxNewSize=<span class=\"number\">357564416</span> -XX:MinHeapDeltaBytes=<span class=\"number\">524288</span> -XX:NewSize=<span class=\"number\">357564416</span> -XX:OldSize=<span class=\"number\">716177408</span> -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC</span><br><span class=\"line\">Command line:  -Duser.dir=/home/urcs/urcs-as-im -Xmx1024m -Xms1024m</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-jmap\"><a href=\"#5-jmap\" class=\"headerlink\" title=\"5.jmap\"></a>5.jmap</h2><h3 id=\"5-1-简介\"><a href=\"#5-1-简介\" class=\"headerlink\" title=\"5.1.简介\"></a>5.1.简介</h3><p>jps是jdk提供的查看当前java进程的工具，简单看作为JavaVirtual Machine Process Status Tool。<br>命令格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap [options] pid</span><br><span class=\"line\">jmap [options] executable core</span><br><span class=\"line\">jmap [options] [server-id@]remote-hostname-or-IP</span><br></pre></td></tr></table></figure>\n<p>参数详解:<br>参数 | 解释<br>—-| —-<br> pid  | 进程号<br> executable | 产生core dump的java executable<br> core  | core file<br> remote-hostname-or-IP  | 主机名或ip<br> server-id | 远程主机上的debug server的唯一id</p>\n<p>options 参数详解:<br>参数 | 解释<br>—-| —-<br>-dump:[live,]format=b,file=<filename> | 使用hprof二进制形式,输出jvm的heap内容到文件=. live子选项是可选的，假如指定live选项,那么只输出活的对象到文件.<br>-finalizerinfo | 打印正等候回收的对象的信息.<br>-heap  | 打印heap的概要信息，GC使用的算法，heap的配置及wise heap的使用情况.<br>-histo[:live] | 打印每个class的实例数目,内存占用,类全名信息. VM的内部类名字开头会加上前缀”*”. 如果live子参数加上后,只统计活的对象数量.<br>-permstat | 打印classload和jvm heap长久层的信息. 包含每个classloader的名字,活泼性,地址,父classloader和加载的class数量. 另外,内部String的数量和占用内存数也会打印出来.<br>-F | 强迫.在pid没有相应的时候使用-dump或者-histo参数. 在这个模式下,live子参数无效.<br>-h | -help 打印辅助信息<br>-J | 传递参数给jmap启动的jvm.</p>\n<h3 id=\"5-2-实例\"><a href=\"#5-2-实例\" class=\"headerlink\" title=\"5.2.实例\"></a>5.2.实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jmap -dump:live,format=b,file=/tmp/heap.dump <span class=\"number\">16885</span></span><br><span class=\"line\">Dumping heap to /tmp/heap.dump ...</span><br><span class=\"line\">Heap dump file created</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-jstack\"><a href=\"#6-jstack\" class=\"headerlink\" title=\"6.jstack\"></a>6.jstack</h2><h3 id=\"6-1-简介\"><a href=\"#6-1-简介\" class=\"headerlink\" title=\"6.1.简介\"></a>6.1.简介</h3><p>jstack（ Stack Trace for Java） 命令 用于 生成 虚拟 机 当前 时刻 的 线程 快照（ 一般 称为 threaddump 或 javacore 文件）。 线程 快照 就是 当前 虚拟 机内 每一 条 线程 正在 执行 的 方法 堆栈 的 集合， 生成 线程 快照 的 主要 目的 是 定位 线程 出现 长时间 停顿 的 原因， 如 线程间死锁,死 循环,请求 外部 资源 导致 的 长时间 等待 等 都是 导致 线程 长时间 停顿 的 常见 原因。</p>\n<p>命令格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstack [options] pid</span><br><span class=\"line\">jstack [options] executable core</span><br><span class=\"line\">jstack [options] [server-id@]remote-hostname-or-IP</span><br></pre></td></tr></table></figure>\n\n<p>参数详解:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pid</td>\n<td>进程号</td>\n</tr>\n<tr>\n<td>executable</td>\n<td>产生 core dump 的 java executable</td>\n</tr>\n<tr>\n<td>core</td>\n<td>core file</td>\n</tr>\n<tr>\n<td>remote-hostname-or-IP</td>\n<td>主机名或 ip</td>\n</tr>\n<tr>\n<td>server-id</td>\n<td>远程主机上的 debug server 的唯一 id</td>\n</tr>\n</tbody></table>\n<p>options 参数详解:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-F</td>\n<td>当 jstack [-l] pid 没有相应的时候强制打印栈信息</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>长列表. 打印关于锁的附加信息,例如属于 java.util.concurrent 的 ownable synchronizers 列表.</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>打印 java 和 native c/c++框架的所有栈信息.</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>-help 打印帮助信息</td>\n</tr>\n</tbody></table>\n<h3 id=\"6-2-实例\"><a href=\"#6-2-实例\" class=\"headerlink\" title=\"6.2.实例\"></a>6.2.实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[java<span class=\"meta\">@RCS</span>-AS-<span class=\"number\">01</span> root]$ jstack <span class=\"number\">16885</span> &gt; /tmp/stack16885<span class=\"number\">.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">查看文件显示：</span><br><span class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">29</span> <span class=\"number\">16</span>:<span class=\"number\">20</span>:<span class=\"number\">51</span></span><br><span class=\"line\"><span class=\"function\">Full thread dump Java <span class=\"title\">HotSpot</span><span class=\"params\">(TM)</span> 64-Bit Server <span class=\"title\">VM</span> <span class=\"params\">(<span class=\"number\">25.65</span>-b01 mixed mode)</span>:</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">&quot;HikariCP connection <span class=\"title\">filler</span> <span class=\"params\">(pool HikariPool-<span class=\"number\">11</span>)</span>&quot; #26011 daemon prio</span>=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x0000000000f46000</span> nid=<span class=\"number\">0x2bde</span> waiting on condition [<span class=\"number\">0x00007f334e8b4000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: TIMED_WAITING (parking)</span><br><span class=\"line\">        at sun.misc.Unsafe.park(Native Method)</span><br><span class=\"line\">        - parking to wait <span class=\"keyword\">for</span>  &lt;<span class=\"number\">0x00000000c25016e8</span>&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)</span><br><span class=\"line\">        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:<span class=\"number\">215</span>)</span><br><span class=\"line\">        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:<span class=\"number\">2078</span>)</span><br><span class=\"line\">        at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:<span class=\"number\">467</span>)</span><br><span class=\"line\">        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:<span class=\"number\">1066</span>)</span><br><span class=\"line\">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class=\"number\">1127</span>)</span><br><span class=\"line\">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class=\"number\">617</span>)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</span><br><span class=\"line\">............</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-jhat\"><a href=\"#7-jhat\" class=\"headerlink\" title=\"7.jhat\"></a>7.jhat</h2><h3 id=\"7-1-简介\"><a href=\"#7-1-简介\" class=\"headerlink\" title=\"7.1.简介\"></a>7.1.简介</h3><p>提供 jhat（ JVM Heap Analysis Tool） 命令 与 jmap 搭配 使用， 来 分析 jmap 生成 的 堆 转储 快照。<br>命令格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　jhat -J-Xmx512m &lt;heap dump file&gt;</span><br></pre></td></tr></table></figure>\n<p>备注:<br>jhat 内置 了 一个 微型 的 HTTP/ HTML 服务器， 生成 dump 文件 的 分析 结果 后， 可以 在 浏览器 中 查看。 不过 实事求是 地说， 在 实际 工作中， 除非 笔者 手上 真的 没有 别的 工具 可用， 否则 一般 都 不会 去 直接 使用 jhat 命令 来 分析 dump 文件， 主要原因 有 二： 一是 一般 不会 在 部署 应用 程序 的 服务器 上 直接 分析 dump 文件， 即使 可以 这样做， 也会 尽量 将dump 文件 拷贝 到 其他 机器[ 4] 上进 行 分析， 因为 分析 工作 是一 个 耗时 而且 消耗 硬件 资源 的 过程， 既然 都要 在 其他 机器 上 进行， 就 没 必要 受到 命令行 工具 的 限制 了。 另外 一个 原因 是 jhat 的 分析 功能 相对来说 比较 简陋， 后文 将会 介绍 到 的 VisualVM</p>\n<h3 id=\"7-2-实例\"><a href=\"#7-2-实例\" class=\"headerlink\" title=\"7.2.实例:\"></a>7.2.实例:</h3><p>1、产生dump文件 c:&gt;jmap -dump:file=f:\\yown\\dump.bin   16912<br>Dumping heap to F:\\apps\\dump.txt …<br>Heap dump file created</p>\n<p>2、生成站点分析报告，便于网络访问 c:&gt;jhat -J-Xmx512m -port 88f:\\yown\\dump.bin</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reading from f:\\apps\\dump.bin...</span><br><span class=\"line\">Dump file created Thu Jul 26 16:31:36 CST 2012</span><br><span class=\"line\">Snapshot read, resolving...</span><br><span class=\"line\">Resolving 2194971 objects...</span><br><span class=\"line\">Chasing references, expect 438 dots.............................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">.........................................................................</span><br><span class=\"line\">Eliminating duplicate references................................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">................................................................................</span><br><span class=\"line\">......................................................................</span><br><span class=\"line\">Snapshot resolved.</span><br><span class=\"line\">Started HTTP server on port 88</span><br><span class=\"line\">Server is ready. 3.访问 http://localhost:88/ 这里记录了进程中所有类及实例个数</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-jvisualvm\"><a href=\"#8-jvisualvm\" class=\"headerlink\" title=\"8.jvisualvm\"></a>8.jvisualvm</h2><h3 id=\"8-1-简介\"><a href=\"#8-1-简介\" class=\"headerlink\" title=\"8.1.简介:\"></a>8.1.简介:</h3><p>VisualVM（ All- in- One Java Troubleshooting Tool） 是 到 目前 为止， 随 JDK 发布 的 功能 最强 大的 运行 监视 和 故障 处理 程序， 并且 可以 预见 在 未来 一段时间 内 都是 官方 主力 发展 的 虚拟 机 故障 处理 工具。 官方 在 VisualVM 的 软件 说明 中写 上了“ All- in- One” 的 描述 字样， 预示 着 它 除了 运行 监视、 故障 处理 外， 还 提供 了 很多 其他 方面 的 功能。VisualVM 基于 NetBeans 平台 开发， 因此 它 一 开始 就 具备 了 插件 扩展 功能 的 特性， 通过 插件 扩展 支持， VisualVM 可以 做到：<br>·显示 虚拟 机 进程 及 进程 的 配置 和 环境 信息（ jps、 jinfo）<br>·监视 应用 程序 的 CPU、 GC、 堆、 方法 区 及 线程 的 信息（ jstat、 jstack）。<br>·dump 及 分析 堆 转储 快照（ jmap、 jhat）<br>·方法 级 的 程序 运行 性能 分析， 找出 被 调用 最多、 运行 时间 最长 的 方法<br>·离 线程 序 快照： 收集 程序 的 运行时 配置、 线程 dump、 内存 dump 等 信息 建立 一个 快照， 可以 将 快照 发送 开发者 处 进行 Bug 反馈。<br>·其他 plugins 的 无限 的 可能性</p>\n<h3 id=\"8-2-界面展示如下图\"><a href=\"#8-2-界面展示如下图\" class=\"headerlink\" title=\"8.2.界面展示如下图\"></a>8.2.界面展示如下图</h3><p><img src=\"http://img.blog.csdn.net/20170729163459058?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170729163624195?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"9-开启Java服务远程监控\"><a href=\"#9-开启Java服务远程监控\" class=\"headerlink\" title=\"9.开启Java服务远程监控\"></a>9.开启Java服务远程监控</h2><h3 id=\"9-1-启动脚本中添加如下参数\"><a href=\"#9-1-启动脚本中添加如下参数\" class=\"headerlink\" title=\"9.1.启动脚本中添加如下参数\"></a>9.1.启动脚本中添加如下参数</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_ARGS[<span class=\"number\">2</span>]=<span class=\"string\">&quot;-Dcom.sun.management.jmxremote.port=8999 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=10.10.220.101&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"9-2-通过jvisualvm可以监控远程java服务，如下：\"><a href=\"#9-2-通过jvisualvm可以监控远程java服务，如下：\" class=\"headerlink\" title=\"9.2.通过jvisualvm可以监控远程java服务，如下：\"></a>9.2.通过jvisualvm可以监控远程java服务，如下：</h3><p><img src=\"http://img.blog.csdn.net/20170729163143819?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY253dWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n"},{"title":"JVM性能调优的6大步骤-关键调优参数详解","_content":"\n\n## 一、JVM 内存调优\n\n对 JVM 内存的系统级的调优主要的目的是减少 GC 的频率和 Full GC 的次数。\n![](https://pic2.zhimg.com/80/v2-c256a1d88bd0a626a4583778d2c13bc9_720w.jpg)\n\n### 1.Full GC\n\n会对整个堆进行整理，包括 Young、Tenured 和 Perm。Full GC 因为需要对整个堆进行回收，所以比较慢，因此应该尽可能减少 Full GC 的次数。\n\n### 2.导致 Full GC 的原因\n\n1)年老代（Tenured）被写满\n\n调优时尽量让对象在新生代 GC 时被回收、让对象在新生代多存活一段时间和不要创建过大的对象及数组避免直接在旧生代创建对象 。\n\n2)持久代 Pemanet Generation 空间不足\n\n增大 Perm Gen 空间，避免太多静态对象 ， 控制好新生代和旧生代的比例\n\n3)System.gc()被显示调用\n\n垃圾回收不要手动触发，尽量依靠 JVM 自身的机制\n\n在对 JVM 调优的过程中，很大一部分工作就是对于 FullGC 的调节，下面详细介绍对应 JVM 调优的方法和步骤。\n\n## 二、JVM 性能调优方法和步骤\n\n![](https://pic1.zhimg.com/80/v2-5e1966122f124e4034a4c4f281cf7458_720w.jpg)\n\n### 1.监控 GC 的状态\n\n使用各种 JVM 工具，查看当前日志，分析当前 JVM 参数设置，并且分析当前堆内存快照和 gc 日志，根据实际的各区域内存划分和 GC 执行时间，觉得是否进行优化。\n\n举一个例子： 系统崩溃前的一些现象：\n\n每次垃圾回收的时间越来越长，由之前的 10ms 延长到 50ms 左右，FullGC 的时间也有之前的 0.5s 延长到 4、5s FullGC 的次数越来越多，最频繁时隔不到 1 分钟就进行一次 FullGC\n年老代的内存越来越大并且每次 FullGC 后年老代没有内存被释放 之后系统会无法响应新的请求，逐渐到达 OutOfMemoryError 的临界值，这个时候就需要分析 JVM 内存快照 dump。\n\n### 2.生成堆的 dump 文件\n\n通过 JMX 的 MBean 生成当前的 Heap 信息，大小为一个 3G（整个堆的大小）的 hprof 文件，如果没有启动 JMX 可以通过 Java 的 jmap 命令来生成该文件。\n\n### 3.分析 dump 文件\n\n打开这个 3G 的堆信息文件，显然一般的 Window 系统没有这么大的内存，必须借助高配置的 Linux，几种工具打开该文件：\n\nVisual VM IBM HeapAnalyzer JDK 自带的 Hprof 工具 Mat(Eclipse 专门的静态内存分析工具)推荐使用 备注：文件太大，建议使用 Eclipse 专门的静态内存分析工具 Mat 打开分析。\n\n### 4.分析结果，判断是否需要优化\n\n如果各项参数设置合理，系统没有超时日志出现，GC 频率不高，GC 耗时不高，那么没有必要进行 GC 优化，如果 GC 时间超过 1-3 秒，或者频繁 GC，则必须优化。\n\n注：如果满足下面的指标，则一般不需要进行 GC：\n\nMinor GC 执行时间不到 50ms； Minor GC 执行不频繁，约 10 秒一次； Full GC 执行时间不到 1s； Full GC 执行频率不算频繁，不低于 10 分钟 1 次；\n\n### 5.调整 GC 类型和内存分配\n\n如果内存分配过大或过小，或者采用的 GC 收集器比较慢，则应该优先调整这些参数，并且先找 1 台或几台机器进行 beta，然后比较优化过的机器和没有优化的机器的性能对比，并有针对性的做出最后选择。\n\n### 6.不断的分析和调整\n\n通过不断的试验和试错，分析并找到最合适的参数，如果找到了最合适的参数，则将这些参数应用到所有服务器。\n\ncms 参数优化步流程\n![](https://pic3.zhimg.com/80/v2-1acebd36d4d6777d87e594c1572c11ba_720w.jpg)\n下面我再继续介绍下 JVM 的关键参数配置(仅用于参考)。\n\n## JVM 调优参数参考\n\n### 1.针对 JVM 堆的设置，一般可以通过-Xms -Xmx 限定其最小、最大值，为了防止垃圾收集器在最小、最大之间收缩堆而产生额外的时间，通常把最大、最小设置为相同的值;\n\n### 2.年轻代和年老代将根据默认的比例（1：2）分配堆内存， 可以通过调整二者之间的比率 NewRadio 来调整二者之间的大小，也可以针对回收代。\n\n比如年轻代，通过 -XX:newSize -XX:MaxNewSize 来设置其绝对大小。同样，为了防止年轻代的堆收缩，我们通常会把-XX:newSize -XX:MaxNewSize 设置为同样大小。\n\n### 3.年轻代和年老代设置多大才算合理\n\n1）更大的年轻代必然导致更小的年老代，大的年轻代会延长普通 GC 的周期，但会增加每次 GC 的时间；小的年老代会导致更频繁的 Full GC\n2）更小的年轻代必然导致更大年老代，小的年轻代会导致普通 GC 很频繁，但每次的 GC 时间会更短；大的年老代会减少 Full GC 的频率 如何选择应该依赖应用程序对象生命周期的分布情况：\n如果应用存在大量的临时对象，应该选择更大的年轻代；如果存在相对较多的持久对象，年老代应该适当增大。 但很多应用都没有这样明显的特性。 在抉择时应该根 据以下两点：\n\n- （1）本着 Full GC 尽量少的原则，让年老代尽量缓存常用对象，JVM 的默认比例 1：2 也是这个道理 。\n\n- （2）通过观察应用一段时间，看其他在峰值时年老代会占多少内存，在不影响 Full GC 的前提下，根据实际情况加大年轻代，比如可以把比例控制在 1：1。 但应该给年老代至少预留 1/3 的增长空间。\n\n### 4.在配置较好的机器上（比如多核、大内存），可以为年老代选择并行收集算法： -XX:+UseParallelOldGC 。\n\n### 5.线程堆栈的设置：每个线程默认会开启 1M 的堆栈，用于存放栈帧、调用参数、局部变量等，对大多数应用而言这个默认值太了，一般 256K 就足用。\n\n理论上，在内存不变的情况下，减少每个线程的堆栈，可以产生更多的线程，但这实际上还受限于操作系统。\n\n觉得不错请点赞支持下。\n\n----end----\n\nJVM 相关技术干货推荐：\n\n- 深入详解 JVM 内存模型与 JVM 参数详细配置\n- 7 种 JVM 垃圾收集器特点，优劣势、及使用场景\n- JVM 的 4 种垃圾回收算法、垃圾回收机制与总结\n- 深入剖析 JVM：G1 收集器+回收流程+推荐用例\n\n## 参考：\n\nhttps://zhuanlan.zhihu.com/p/58897189\n","source":"_posts/language/jvm/JVM性能调优的6大步骤-关键调优参数详解.md","raw":"---\ntitle: JVM性能调优的6大步骤-关键调优参数详解\ncategories:\n- java\ntag:\n- JVM\n---\n\n\n## 一、JVM 内存调优\n\n对 JVM 内存的系统级的调优主要的目的是减少 GC 的频率和 Full GC 的次数。\n![](https://pic2.zhimg.com/80/v2-c256a1d88bd0a626a4583778d2c13bc9_720w.jpg)\n\n### 1.Full GC\n\n会对整个堆进行整理，包括 Young、Tenured 和 Perm。Full GC 因为需要对整个堆进行回收，所以比较慢，因此应该尽可能减少 Full GC 的次数。\n\n### 2.导致 Full GC 的原因\n\n1)年老代（Tenured）被写满\n\n调优时尽量让对象在新生代 GC 时被回收、让对象在新生代多存活一段时间和不要创建过大的对象及数组避免直接在旧生代创建对象 。\n\n2)持久代 Pemanet Generation 空间不足\n\n增大 Perm Gen 空间，避免太多静态对象 ， 控制好新生代和旧生代的比例\n\n3)System.gc()被显示调用\n\n垃圾回收不要手动触发，尽量依靠 JVM 自身的机制\n\n在对 JVM 调优的过程中，很大一部分工作就是对于 FullGC 的调节，下面详细介绍对应 JVM 调优的方法和步骤。\n\n## 二、JVM 性能调优方法和步骤\n\n![](https://pic1.zhimg.com/80/v2-5e1966122f124e4034a4c4f281cf7458_720w.jpg)\n\n### 1.监控 GC 的状态\n\n使用各种 JVM 工具，查看当前日志，分析当前 JVM 参数设置，并且分析当前堆内存快照和 gc 日志，根据实际的各区域内存划分和 GC 执行时间，觉得是否进行优化。\n\n举一个例子： 系统崩溃前的一些现象：\n\n每次垃圾回收的时间越来越长，由之前的 10ms 延长到 50ms 左右，FullGC 的时间也有之前的 0.5s 延长到 4、5s FullGC 的次数越来越多，最频繁时隔不到 1 分钟就进行一次 FullGC\n年老代的内存越来越大并且每次 FullGC 后年老代没有内存被释放 之后系统会无法响应新的请求，逐渐到达 OutOfMemoryError 的临界值，这个时候就需要分析 JVM 内存快照 dump。\n\n### 2.生成堆的 dump 文件\n\n通过 JMX 的 MBean 生成当前的 Heap 信息，大小为一个 3G（整个堆的大小）的 hprof 文件，如果没有启动 JMX 可以通过 Java 的 jmap 命令来生成该文件。\n\n### 3.分析 dump 文件\n\n打开这个 3G 的堆信息文件，显然一般的 Window 系统没有这么大的内存，必须借助高配置的 Linux，几种工具打开该文件：\n\nVisual VM IBM HeapAnalyzer JDK 自带的 Hprof 工具 Mat(Eclipse 专门的静态内存分析工具)推荐使用 备注：文件太大，建议使用 Eclipse 专门的静态内存分析工具 Mat 打开分析。\n\n### 4.分析结果，判断是否需要优化\n\n如果各项参数设置合理，系统没有超时日志出现，GC 频率不高，GC 耗时不高，那么没有必要进行 GC 优化，如果 GC 时间超过 1-3 秒，或者频繁 GC，则必须优化。\n\n注：如果满足下面的指标，则一般不需要进行 GC：\n\nMinor GC 执行时间不到 50ms； Minor GC 执行不频繁，约 10 秒一次； Full GC 执行时间不到 1s； Full GC 执行频率不算频繁，不低于 10 分钟 1 次；\n\n### 5.调整 GC 类型和内存分配\n\n如果内存分配过大或过小，或者采用的 GC 收集器比较慢，则应该优先调整这些参数，并且先找 1 台或几台机器进行 beta，然后比较优化过的机器和没有优化的机器的性能对比，并有针对性的做出最后选择。\n\n### 6.不断的分析和调整\n\n通过不断的试验和试错，分析并找到最合适的参数，如果找到了最合适的参数，则将这些参数应用到所有服务器。\n\ncms 参数优化步流程\n![](https://pic3.zhimg.com/80/v2-1acebd36d4d6777d87e594c1572c11ba_720w.jpg)\n下面我再继续介绍下 JVM 的关键参数配置(仅用于参考)。\n\n## JVM 调优参数参考\n\n### 1.针对 JVM 堆的设置，一般可以通过-Xms -Xmx 限定其最小、最大值，为了防止垃圾收集器在最小、最大之间收缩堆而产生额外的时间，通常把最大、最小设置为相同的值;\n\n### 2.年轻代和年老代将根据默认的比例（1：2）分配堆内存， 可以通过调整二者之间的比率 NewRadio 来调整二者之间的大小，也可以针对回收代。\n\n比如年轻代，通过 -XX:newSize -XX:MaxNewSize 来设置其绝对大小。同样，为了防止年轻代的堆收缩，我们通常会把-XX:newSize -XX:MaxNewSize 设置为同样大小。\n\n### 3.年轻代和年老代设置多大才算合理\n\n1）更大的年轻代必然导致更小的年老代，大的年轻代会延长普通 GC 的周期，但会增加每次 GC 的时间；小的年老代会导致更频繁的 Full GC\n2）更小的年轻代必然导致更大年老代，小的年轻代会导致普通 GC 很频繁，但每次的 GC 时间会更短；大的年老代会减少 Full GC 的频率 如何选择应该依赖应用程序对象生命周期的分布情况：\n如果应用存在大量的临时对象，应该选择更大的年轻代；如果存在相对较多的持久对象，年老代应该适当增大。 但很多应用都没有这样明显的特性。 在抉择时应该根 据以下两点：\n\n- （1）本着 Full GC 尽量少的原则，让年老代尽量缓存常用对象，JVM 的默认比例 1：2 也是这个道理 。\n\n- （2）通过观察应用一段时间，看其他在峰值时年老代会占多少内存，在不影响 Full GC 的前提下，根据实际情况加大年轻代，比如可以把比例控制在 1：1。 但应该给年老代至少预留 1/3 的增长空间。\n\n### 4.在配置较好的机器上（比如多核、大内存），可以为年老代选择并行收集算法： -XX:+UseParallelOldGC 。\n\n### 5.线程堆栈的设置：每个线程默认会开启 1M 的堆栈，用于存放栈帧、调用参数、局部变量等，对大多数应用而言这个默认值太了，一般 256K 就足用。\n\n理论上，在内存不变的情况下，减少每个线程的堆栈，可以产生更多的线程，但这实际上还受限于操作系统。\n\n觉得不错请点赞支持下。\n\n----end----\n\nJVM 相关技术干货推荐：\n\n- 深入详解 JVM 内存模型与 JVM 参数详细配置\n- 7 种 JVM 垃圾收集器特点，优劣势、及使用场景\n- JVM 的 4 种垃圾回收算法、垃圾回收机制与总结\n- 深入剖析 JVM：G1 收集器+回收流程+推荐用例\n\n## 参考：\n\nhttps://zhuanlan.zhihu.com/p/58897189\n","slug":"language/jvm/JVM性能调优的6大步骤-关键调优参数详解","published":1,"date":"2021-07-31T11:10:47.909Z","updated":"2021-07-31T11:10:47.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyip002eu6ukbjxy4ktn","content":"<h2 id=\"一、JVM-内存调优\"><a href=\"#一、JVM-内存调优\" class=\"headerlink\" title=\"一、JVM 内存调优\"></a>一、JVM 内存调优</h2><p>对 JVM 内存的系统级的调优主要的目的是减少 GC 的频率和 Full GC 的次数。<br><img src=\"https://pic2.zhimg.com/80/v2-c256a1d88bd0a626a4583778d2c13bc9_720w.jpg\"></p>\n<h3 id=\"1-Full-GC\"><a href=\"#1-Full-GC\" class=\"headerlink\" title=\"1.Full GC\"></a>1.Full GC</h3><p>会对整个堆进行整理，包括 Young、Tenured 和 Perm。Full GC 因为需要对整个堆进行回收，所以比较慢，因此应该尽可能减少 Full GC 的次数。</p>\n<h3 id=\"2-导致-Full-GC-的原因\"><a href=\"#2-导致-Full-GC-的原因\" class=\"headerlink\" title=\"2.导致 Full GC 的原因\"></a>2.导致 Full GC 的原因</h3><p>1)年老代（Tenured）被写满</p>\n<p>调优时尽量让对象在新生代 GC 时被回收、让对象在新生代多存活一段时间和不要创建过大的对象及数组避免直接在旧生代创建对象 。</p>\n<p>2)持久代 Pemanet Generation 空间不足</p>\n<p>增大 Perm Gen 空间，避免太多静态对象 ， 控制好新生代和旧生代的比例</p>\n<p>3)System.gc()被显示调用</p>\n<p>垃圾回收不要手动触发，尽量依靠 JVM 自身的机制</p>\n<p>在对 JVM 调优的过程中，很大一部分工作就是对于 FullGC 的调节，下面详细介绍对应 JVM 调优的方法和步骤。</p>\n<h2 id=\"二、JVM-性能调优方法和步骤\"><a href=\"#二、JVM-性能调优方法和步骤\" class=\"headerlink\" title=\"二、JVM 性能调优方法和步骤\"></a>二、JVM 性能调优方法和步骤</h2><p><img src=\"https://pic1.zhimg.com/80/v2-5e1966122f124e4034a4c4f281cf7458_720w.jpg\"></p>\n<h3 id=\"1-监控-GC-的状态\"><a href=\"#1-监控-GC-的状态\" class=\"headerlink\" title=\"1.监控 GC 的状态\"></a>1.监控 GC 的状态</h3><p>使用各种 JVM 工具，查看当前日志，分析当前 JVM 参数设置，并且分析当前堆内存快照和 gc 日志，根据实际的各区域内存划分和 GC 执行时间，觉得是否进行优化。</p>\n<p>举一个例子： 系统崩溃前的一些现象：</p>\n<p>每次垃圾回收的时间越来越长，由之前的 10ms 延长到 50ms 左右，FullGC 的时间也有之前的 0.5s 延长到 4、5s FullGC 的次数越来越多，最频繁时隔不到 1 分钟就进行一次 FullGC<br>年老代的内存越来越大并且每次 FullGC 后年老代没有内存被释放 之后系统会无法响应新的请求，逐渐到达 OutOfMemoryError 的临界值，这个时候就需要分析 JVM 内存快照 dump。</p>\n<h3 id=\"2-生成堆的-dump-文件\"><a href=\"#2-生成堆的-dump-文件\" class=\"headerlink\" title=\"2.生成堆的 dump 文件\"></a>2.生成堆的 dump 文件</h3><p>通过 JMX 的 MBean 生成当前的 Heap 信息，大小为一个 3G（整个堆的大小）的 hprof 文件，如果没有启动 JMX 可以通过 Java 的 jmap 命令来生成该文件。</p>\n<h3 id=\"3-分析-dump-文件\"><a href=\"#3-分析-dump-文件\" class=\"headerlink\" title=\"3.分析 dump 文件\"></a>3.分析 dump 文件</h3><p>打开这个 3G 的堆信息文件，显然一般的 Window 系统没有这么大的内存，必须借助高配置的 Linux，几种工具打开该文件：</p>\n<p>Visual VM IBM HeapAnalyzer JDK 自带的 Hprof 工具 Mat(Eclipse 专门的静态内存分析工具)推荐使用 备注：文件太大，建议使用 Eclipse 专门的静态内存分析工具 Mat 打开分析。</p>\n<h3 id=\"4-分析结果，判断是否需要优化\"><a href=\"#4-分析结果，判断是否需要优化\" class=\"headerlink\" title=\"4.分析结果，判断是否需要优化\"></a>4.分析结果，判断是否需要优化</h3><p>如果各项参数设置合理，系统没有超时日志出现，GC 频率不高，GC 耗时不高，那么没有必要进行 GC 优化，如果 GC 时间超过 1-3 秒，或者频繁 GC，则必须优化。</p>\n<p>注：如果满足下面的指标，则一般不需要进行 GC：</p>\n<p>Minor GC 执行时间不到 50ms； Minor GC 执行不频繁，约 10 秒一次； Full GC 执行时间不到 1s； Full GC 执行频率不算频繁，不低于 10 分钟 1 次；</p>\n<h3 id=\"5-调整-GC-类型和内存分配\"><a href=\"#5-调整-GC-类型和内存分配\" class=\"headerlink\" title=\"5.调整 GC 类型和内存分配\"></a>5.调整 GC 类型和内存分配</h3><p>如果内存分配过大或过小，或者采用的 GC 收集器比较慢，则应该优先调整这些参数，并且先找 1 台或几台机器进行 beta，然后比较优化过的机器和没有优化的机器的性能对比，并有针对性的做出最后选择。</p>\n<h3 id=\"6-不断的分析和调整\"><a href=\"#6-不断的分析和调整\" class=\"headerlink\" title=\"6.不断的分析和调整\"></a>6.不断的分析和调整</h3><p>通过不断的试验和试错，分析并找到最合适的参数，如果找到了最合适的参数，则将这些参数应用到所有服务器。</p>\n<p>cms 参数优化步流程<br><img src=\"https://pic3.zhimg.com/80/v2-1acebd36d4d6777d87e594c1572c11ba_720w.jpg\"><br>下面我再继续介绍下 JVM 的关键参数配置(仅用于参考)。</p>\n<h2 id=\"JVM-调优参数参考\"><a href=\"#JVM-调优参数参考\" class=\"headerlink\" title=\"JVM 调优参数参考\"></a>JVM 调优参数参考</h2><h3 id=\"1-针对-JVM-堆的设置，一般可以通过-Xms-Xmx-限定其最小、最大值，为了防止垃圾收集器在最小、最大之间收缩堆而产生额外的时间，通常把最大、最小设置为相同的值\"><a href=\"#1-针对-JVM-堆的设置，一般可以通过-Xms-Xmx-限定其最小、最大值，为了防止垃圾收集器在最小、最大之间收缩堆而产生额外的时间，通常把最大、最小设置为相同的值\" class=\"headerlink\" title=\"1.针对 JVM 堆的设置，一般可以通过-Xms -Xmx 限定其最小、最大值，为了防止垃圾收集器在最小、最大之间收缩堆而产生额外的时间，通常把最大、最小设置为相同的值;\"></a>1.针对 JVM 堆的设置，一般可以通过-Xms -Xmx 限定其最小、最大值，为了防止垃圾收集器在最小、最大之间收缩堆而产生额外的时间，通常把最大、最小设置为相同的值;</h3><h3 id=\"2-年轻代和年老代将根据默认的比例（1：2）分配堆内存，-可以通过调整二者之间的比率-NewRadio-来调整二者之间的大小，也可以针对回收代。\"><a href=\"#2-年轻代和年老代将根据默认的比例（1：2）分配堆内存，-可以通过调整二者之间的比率-NewRadio-来调整二者之间的大小，也可以针对回收代。\" class=\"headerlink\" title=\"2.年轻代和年老代将根据默认的比例（1：2）分配堆内存， 可以通过调整二者之间的比率 NewRadio 来调整二者之间的大小，也可以针对回收代。\"></a>2.年轻代和年老代将根据默认的比例（1：2）分配堆内存， 可以通过调整二者之间的比率 NewRadio 来调整二者之间的大小，也可以针对回收代。</h3><p>比如年轻代，通过 -XX:newSize -XX:MaxNewSize 来设置其绝对大小。同样，为了防止年轻代的堆收缩，我们通常会把-XX:newSize -XX:MaxNewSize 设置为同样大小。</p>\n<h3 id=\"3-年轻代和年老代设置多大才算合理\"><a href=\"#3-年轻代和年老代设置多大才算合理\" class=\"headerlink\" title=\"3.年轻代和年老代设置多大才算合理\"></a>3.年轻代和年老代设置多大才算合理</h3><p>1）更大的年轻代必然导致更小的年老代，大的年轻代会延长普通 GC 的周期，但会增加每次 GC 的时间；小的年老代会导致更频繁的 Full GC<br>2）更小的年轻代必然导致更大年老代，小的年轻代会导致普通 GC 很频繁，但每次的 GC 时间会更短；大的年老代会减少 Full GC 的频率 如何选择应该依赖应用程序对象生命周期的分布情况：<br>如果应用存在大量的临时对象，应该选择更大的年轻代；如果存在相对较多的持久对象，年老代应该适当增大。 但很多应用都没有这样明显的特性。 在抉择时应该根 据以下两点：</p>\n<ul>\n<li><p>（1）本着 Full GC 尽量少的原则，让年老代尽量缓存常用对象，JVM 的默认比例 1：2 也是这个道理 。</p>\n</li>\n<li><p>（2）通过观察应用一段时间，看其他在峰值时年老代会占多少内存，在不影响 Full GC 的前提下，根据实际情况加大年轻代，比如可以把比例控制在 1：1。 但应该给年老代至少预留 1/3 的增长空间。</p>\n</li>\n</ul>\n<h3 id=\"4-在配置较好的机器上（比如多核、大内存），可以为年老代选择并行收集算法：-XX-UseParallelOldGC-。\"><a href=\"#4-在配置较好的机器上（比如多核、大内存），可以为年老代选择并行收集算法：-XX-UseParallelOldGC-。\" class=\"headerlink\" title=\"4.在配置较好的机器上（比如多核、大内存），可以为年老代选择并行收集算法： -XX:+UseParallelOldGC 。\"></a>4.在配置较好的机器上（比如多核、大内存），可以为年老代选择并行收集算法： -XX:+UseParallelOldGC 。</h3><h3 id=\"5-线程堆栈的设置：每个线程默认会开启-1M-的堆栈，用于存放栈帧、调用参数、局部变量等，对大多数应用而言这个默认值太了，一般-256K-就足用。\"><a href=\"#5-线程堆栈的设置：每个线程默认会开启-1M-的堆栈，用于存放栈帧、调用参数、局部变量等，对大多数应用而言这个默认值太了，一般-256K-就足用。\" class=\"headerlink\" title=\"5.线程堆栈的设置：每个线程默认会开启 1M 的堆栈，用于存放栈帧、调用参数、局部变量等，对大多数应用而言这个默认值太了，一般 256K 就足用。\"></a>5.线程堆栈的设置：每个线程默认会开启 1M 的堆栈，用于存放栈帧、调用参数、局部变量等，对大多数应用而言这个默认值太了，一般 256K 就足用。</h3><p>理论上，在内存不变的情况下，减少每个线程的堆栈，可以产生更多的线程，但这实际上还受限于操作系统。</p>\n<p>觉得不错请点赞支持下。</p>\n<p>—-end—-</p>\n<p>JVM 相关技术干货推荐：</p>\n<ul>\n<li>深入详解 JVM 内存模型与 JVM 参数详细配置</li>\n<li>7 种 JVM 垃圾收集器特点，优劣势、及使用场景</li>\n<li>JVM 的 4 种垃圾回收算法、垃圾回收机制与总结</li>\n<li>深入剖析 JVM：G1 收集器+回收流程+推荐用例</li>\n</ul>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><p><a href=\"https://zhuanlan.zhihu.com/p/58897189\">https://zhuanlan.zhihu.com/p/58897189</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、JVM-内存调优\"><a href=\"#一、JVM-内存调优\" class=\"headerlink\" title=\"一、JVM 内存调优\"></a>一、JVM 内存调优</h2><p>对 JVM 内存的系统级的调优主要的目的是减少 GC 的频率和 Full GC 的次数。<br><img src=\"https://pic2.zhimg.com/80/v2-c256a1d88bd0a626a4583778d2c13bc9_720w.jpg\"></p>\n<h3 id=\"1-Full-GC\"><a href=\"#1-Full-GC\" class=\"headerlink\" title=\"1.Full GC\"></a>1.Full GC</h3><p>会对整个堆进行整理，包括 Young、Tenured 和 Perm。Full GC 因为需要对整个堆进行回收，所以比较慢，因此应该尽可能减少 Full GC 的次数。</p>\n<h3 id=\"2-导致-Full-GC-的原因\"><a href=\"#2-导致-Full-GC-的原因\" class=\"headerlink\" title=\"2.导致 Full GC 的原因\"></a>2.导致 Full GC 的原因</h3><p>1)年老代（Tenured）被写满</p>\n<p>调优时尽量让对象在新生代 GC 时被回收、让对象在新生代多存活一段时间和不要创建过大的对象及数组避免直接在旧生代创建对象 。</p>\n<p>2)持久代 Pemanet Generation 空间不足</p>\n<p>增大 Perm Gen 空间，避免太多静态对象 ， 控制好新生代和旧生代的比例</p>\n<p>3)System.gc()被显示调用</p>\n<p>垃圾回收不要手动触发，尽量依靠 JVM 自身的机制</p>\n<p>在对 JVM 调优的过程中，很大一部分工作就是对于 FullGC 的调节，下面详细介绍对应 JVM 调优的方法和步骤。</p>\n<h2 id=\"二、JVM-性能调优方法和步骤\"><a href=\"#二、JVM-性能调优方法和步骤\" class=\"headerlink\" title=\"二、JVM 性能调优方法和步骤\"></a>二、JVM 性能调优方法和步骤</h2><p><img src=\"https://pic1.zhimg.com/80/v2-5e1966122f124e4034a4c4f281cf7458_720w.jpg\"></p>\n<h3 id=\"1-监控-GC-的状态\"><a href=\"#1-监控-GC-的状态\" class=\"headerlink\" title=\"1.监控 GC 的状态\"></a>1.监控 GC 的状态</h3><p>使用各种 JVM 工具，查看当前日志，分析当前 JVM 参数设置，并且分析当前堆内存快照和 gc 日志，根据实际的各区域内存划分和 GC 执行时间，觉得是否进行优化。</p>\n<p>举一个例子： 系统崩溃前的一些现象：</p>\n<p>每次垃圾回收的时间越来越长，由之前的 10ms 延长到 50ms 左右，FullGC 的时间也有之前的 0.5s 延长到 4、5s FullGC 的次数越来越多，最频繁时隔不到 1 分钟就进行一次 FullGC<br>年老代的内存越来越大并且每次 FullGC 后年老代没有内存被释放 之后系统会无法响应新的请求，逐渐到达 OutOfMemoryError 的临界值，这个时候就需要分析 JVM 内存快照 dump。</p>\n<h3 id=\"2-生成堆的-dump-文件\"><a href=\"#2-生成堆的-dump-文件\" class=\"headerlink\" title=\"2.生成堆的 dump 文件\"></a>2.生成堆的 dump 文件</h3><p>通过 JMX 的 MBean 生成当前的 Heap 信息，大小为一个 3G（整个堆的大小）的 hprof 文件，如果没有启动 JMX 可以通过 Java 的 jmap 命令来生成该文件。</p>\n<h3 id=\"3-分析-dump-文件\"><a href=\"#3-分析-dump-文件\" class=\"headerlink\" title=\"3.分析 dump 文件\"></a>3.分析 dump 文件</h3><p>打开这个 3G 的堆信息文件，显然一般的 Window 系统没有这么大的内存，必须借助高配置的 Linux，几种工具打开该文件：</p>\n<p>Visual VM IBM HeapAnalyzer JDK 自带的 Hprof 工具 Mat(Eclipse 专门的静态内存分析工具)推荐使用 备注：文件太大，建议使用 Eclipse 专门的静态内存分析工具 Mat 打开分析。</p>\n<h3 id=\"4-分析结果，判断是否需要优化\"><a href=\"#4-分析结果，判断是否需要优化\" class=\"headerlink\" title=\"4.分析结果，判断是否需要优化\"></a>4.分析结果，判断是否需要优化</h3><p>如果各项参数设置合理，系统没有超时日志出现，GC 频率不高，GC 耗时不高，那么没有必要进行 GC 优化，如果 GC 时间超过 1-3 秒，或者频繁 GC，则必须优化。</p>\n<p>注：如果满足下面的指标，则一般不需要进行 GC：</p>\n<p>Minor GC 执行时间不到 50ms； Minor GC 执行不频繁，约 10 秒一次； Full GC 执行时间不到 1s； Full GC 执行频率不算频繁，不低于 10 分钟 1 次；</p>\n<h3 id=\"5-调整-GC-类型和内存分配\"><a href=\"#5-调整-GC-类型和内存分配\" class=\"headerlink\" title=\"5.调整 GC 类型和内存分配\"></a>5.调整 GC 类型和内存分配</h3><p>如果内存分配过大或过小，或者采用的 GC 收集器比较慢，则应该优先调整这些参数，并且先找 1 台或几台机器进行 beta，然后比较优化过的机器和没有优化的机器的性能对比，并有针对性的做出最后选择。</p>\n<h3 id=\"6-不断的分析和调整\"><a href=\"#6-不断的分析和调整\" class=\"headerlink\" title=\"6.不断的分析和调整\"></a>6.不断的分析和调整</h3><p>通过不断的试验和试错，分析并找到最合适的参数，如果找到了最合适的参数，则将这些参数应用到所有服务器。</p>\n<p>cms 参数优化步流程<br><img src=\"https://pic3.zhimg.com/80/v2-1acebd36d4d6777d87e594c1572c11ba_720w.jpg\"><br>下面我再继续介绍下 JVM 的关键参数配置(仅用于参考)。</p>\n<h2 id=\"JVM-调优参数参考\"><a href=\"#JVM-调优参数参考\" class=\"headerlink\" title=\"JVM 调优参数参考\"></a>JVM 调优参数参考</h2><h3 id=\"1-针对-JVM-堆的设置，一般可以通过-Xms-Xmx-限定其最小、最大值，为了防止垃圾收集器在最小、最大之间收缩堆而产生额外的时间，通常把最大、最小设置为相同的值\"><a href=\"#1-针对-JVM-堆的设置，一般可以通过-Xms-Xmx-限定其最小、最大值，为了防止垃圾收集器在最小、最大之间收缩堆而产生额外的时间，通常把最大、最小设置为相同的值\" class=\"headerlink\" title=\"1.针对 JVM 堆的设置，一般可以通过-Xms -Xmx 限定其最小、最大值，为了防止垃圾收集器在最小、最大之间收缩堆而产生额外的时间，通常把最大、最小设置为相同的值;\"></a>1.针对 JVM 堆的设置，一般可以通过-Xms -Xmx 限定其最小、最大值，为了防止垃圾收集器在最小、最大之间收缩堆而产生额外的时间，通常把最大、最小设置为相同的值;</h3><h3 id=\"2-年轻代和年老代将根据默认的比例（1：2）分配堆内存，-可以通过调整二者之间的比率-NewRadio-来调整二者之间的大小，也可以针对回收代。\"><a href=\"#2-年轻代和年老代将根据默认的比例（1：2）分配堆内存，-可以通过调整二者之间的比率-NewRadio-来调整二者之间的大小，也可以针对回收代。\" class=\"headerlink\" title=\"2.年轻代和年老代将根据默认的比例（1：2）分配堆内存， 可以通过调整二者之间的比率 NewRadio 来调整二者之间的大小，也可以针对回收代。\"></a>2.年轻代和年老代将根据默认的比例（1：2）分配堆内存， 可以通过调整二者之间的比率 NewRadio 来调整二者之间的大小，也可以针对回收代。</h3><p>比如年轻代，通过 -XX:newSize -XX:MaxNewSize 来设置其绝对大小。同样，为了防止年轻代的堆收缩，我们通常会把-XX:newSize -XX:MaxNewSize 设置为同样大小。</p>\n<h3 id=\"3-年轻代和年老代设置多大才算合理\"><a href=\"#3-年轻代和年老代设置多大才算合理\" class=\"headerlink\" title=\"3.年轻代和年老代设置多大才算合理\"></a>3.年轻代和年老代设置多大才算合理</h3><p>1）更大的年轻代必然导致更小的年老代，大的年轻代会延长普通 GC 的周期，但会增加每次 GC 的时间；小的年老代会导致更频繁的 Full GC<br>2）更小的年轻代必然导致更大年老代，小的年轻代会导致普通 GC 很频繁，但每次的 GC 时间会更短；大的年老代会减少 Full GC 的频率 如何选择应该依赖应用程序对象生命周期的分布情况：<br>如果应用存在大量的临时对象，应该选择更大的年轻代；如果存在相对较多的持久对象，年老代应该适当增大。 但很多应用都没有这样明显的特性。 在抉择时应该根 据以下两点：</p>\n<ul>\n<li><p>（1）本着 Full GC 尽量少的原则，让年老代尽量缓存常用对象，JVM 的默认比例 1：2 也是这个道理 。</p>\n</li>\n<li><p>（2）通过观察应用一段时间，看其他在峰值时年老代会占多少内存，在不影响 Full GC 的前提下，根据实际情况加大年轻代，比如可以把比例控制在 1：1。 但应该给年老代至少预留 1/3 的增长空间。</p>\n</li>\n</ul>\n<h3 id=\"4-在配置较好的机器上（比如多核、大内存），可以为年老代选择并行收集算法：-XX-UseParallelOldGC-。\"><a href=\"#4-在配置较好的机器上（比如多核、大内存），可以为年老代选择并行收集算法：-XX-UseParallelOldGC-。\" class=\"headerlink\" title=\"4.在配置较好的机器上（比如多核、大内存），可以为年老代选择并行收集算法： -XX:+UseParallelOldGC 。\"></a>4.在配置较好的机器上（比如多核、大内存），可以为年老代选择并行收集算法： -XX:+UseParallelOldGC 。</h3><h3 id=\"5-线程堆栈的设置：每个线程默认会开启-1M-的堆栈，用于存放栈帧、调用参数、局部变量等，对大多数应用而言这个默认值太了，一般-256K-就足用。\"><a href=\"#5-线程堆栈的设置：每个线程默认会开启-1M-的堆栈，用于存放栈帧、调用参数、局部变量等，对大多数应用而言这个默认值太了，一般-256K-就足用。\" class=\"headerlink\" title=\"5.线程堆栈的设置：每个线程默认会开启 1M 的堆栈，用于存放栈帧、调用参数、局部变量等，对大多数应用而言这个默认值太了，一般 256K 就足用。\"></a>5.线程堆栈的设置：每个线程默认会开启 1M 的堆栈，用于存放栈帧、调用参数、局部变量等，对大多数应用而言这个默认值太了，一般 256K 就足用。</h3><p>理论上，在内存不变的情况下，减少每个线程的堆栈，可以产生更多的线程，但这实际上还受限于操作系统。</p>\n<p>觉得不错请点赞支持下。</p>\n<p>—-end—-</p>\n<p>JVM 相关技术干货推荐：</p>\n<ul>\n<li>深入详解 JVM 内存模型与 JVM 参数详细配置</li>\n<li>7 种 JVM 垃圾收集器特点，优劣势、及使用场景</li>\n<li>JVM 的 4 种垃圾回收算法、垃圾回收机制与总结</li>\n<li>深入剖析 JVM：G1 收集器+回收流程+推荐用例</li>\n</ul>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><p><a href=\"https://zhuanlan.zhihu.com/p/58897189\">https://zhuanlan.zhihu.com/p/58897189</a></p>\n"},{"title":"JVM类加载机制","_content":"\n# 类加载机制\n\n### 1. 类的加载过程\n\n类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载（Loading）、验证（Verification）、准备(Preparation)、解析(Resolution)、初始化(Initialization)、使用(Using)和卸载(Unloading)7 个阶段。其中准备、验证、解析 3 个部分统称为连接（Linking）。如图所示:\n\n```\ngraph LR\n加载-->验证\n验证-->准备\n准备-->解析\n解析-->初始化\n初始化-->使用\n使用-->卸载\n```\n\n加载、验证、准备、初始化和卸载这 5 个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始，而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 语言的运行时绑定（也称为动态绑定或晚期绑定）。以下陈述的内容都已 HotSpot 为基准。\n\n#### 1.1 加载\n\n虚拟机在加载阶段需要完成三件事:\n\n1. 通过一个类的全限定名来获取定义此类的二进制字节流，如 Class 文件,网络,动态生成,数据库等\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\n3. 在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口\n   加载阶段和连接阶段（Linking）的部分内容（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的内容，这两个阶段的开始时间仍然保持着固定的先后顺序。\n\n#### 1.2 验证\n\n验证是连接阶段的第一步，这一阶段的目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全，验证阶段大致会完成 4 个阶段的检验动作：\n\n1. 文件格式验证：验证字节流是否符合 Class 文件格式的规范；例如：是否以魔术 0xCAFEBABE 开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。\n2. 元数据验证：对字节码描述的信息进行语义分析（注意：对比 javac 编译阶段的语义分析），以保证其描述的信息符合 Java 语言规范的要求；例如：这个类是否有父类，除了 java.lang.Object 之外。\n3. 字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。\n4. 符号引用验证：确保解析动作能正确执行。\n   验证阶段可能抛出一个 java.lang.IncompatibleClassChangeError 异常的子类，如 java.lang.IllegalAccessError、 java. lang. NoSuchFieldError、\n   验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用-Xverifynone 参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。\n\n#### 1.3 准备\n\n准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。这时候进行内存分配的仅包括类变量（被 static 修饰的变量），而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在堆中。其次，这里所说的初始值“通常情况”下是数据类型的零值.\n\n如下定义:public static int value=123; 那变量 value 在准备阶段过后的初始值为 0 而不是 123.因为这时候尚未开始执行任何 java 方法，而把 value 赋值为 123 的 putstatic 指令是程序被编译后，存放于类构造器()方法之中，所以把 value 赋值为 123 的动作将在初始化阶段才会执行。\n\n如下定义：public static final int value=123; 即当类字段的字段属性是 ConstantValue 时，会在准备阶段初始化为指定的值，所以标注为 final 之后，value 的值在准备阶段初始化为 123 而非 0.\n\n#### 1.4 解析\n\n解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。解析针对如下 7 类符号引用进行：\n\n> 类或接口\n> 字段\n> 类方法\n> 接口方法\n> 方法类型\n> 方法句柄\n> 调用点限定符\n\n#### 1.5 初始化\n\n类初始化阶段是类加载过程的最后一步，才真正开始执行类中定义的 Java 程序代码（或者说是字节码）。前面的类加载过程中，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。\n\n在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，则是根据程序员通过程序制定的主观计划去初始化类变量和其他资源，或者可以从另外一个角度来表达：初始化阶段是执行类构造器<clinit>()方法的过程。我们放到后面再讲<clinit>()方法是怎么生成的，在这里，我们先看一下<clinit>()方法执行过程中可能会影响程序运行行为的一些特点和细节，这部分相对更贴近于普通的程序开发人员[7]：\n·<clinit>()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块中可以赋值，但是不能访问。\n·<clinit>()方法与类的构造函数（或者说实例构造器<clinit>()方法）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的<clinit>()方法执行之前，父类的<clinit>()方法已经执行完毕。因此在虚拟机中第一个被执行的<clinit>()方法的类肯定是 java.lang.Object。\n·由于父类的<clinit>()方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作，如下代码执行字段 B 的值将会是 2 而不是 1。\n<clinit>()方法执行顺序：\n\n```java\npackage sf.jvm.load;\n class Parent {\n    public static int A = 1;\n    static {\n        A = 2;\n    }\n     public int getA(){\n         return A;\n     }\n}\nclass Sub extends Parent {\n     public static int B = A;\n     public int getB(){\n         return B;\n     }\n     public static void main(String[] args) {\n         new Parent();\n        System.out.println(Sub.B);\n        System.out.println(new Sub().getB());\n    }\n}\n/**\n Compiled from \"Parent.java\"\n class sf.jvm.load.Parent {\n public static int A;\n sf.jvm.load.Parent();\n Code:\n 0: aload_0\n 1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n 4: return\n public int getA();\n Code:\n 0: getstatic     #2                  // Field A:I\n 3: ireturn\n static {};\n Code:\n 0: iconst_1\n 1: putstatic     #2                  // Field A:I\n 4: iconst_2\n 5: putstatic     #2                  // Field A:I\n 8: return\n }\n */\n```\n\n·<clinit>()方法对于类或接口来说并不是必须的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成<clinit>()方法。\n·接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成<clinit>()方法。但接口与类不同的是，执行接口的<clinit>()方法不需要先执行父接口的<clinit>()方法。只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也一样不会执行接口的<clinit>()方法。\n·虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确地加锁和同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，直到活动线程执行<clinit>()方法完毕。如果在一个类的<clinit>()方法中有耗时很长的操作，那就可能造成多个进程阻塞，在实际应用中这种阻塞往往是很隐蔽的。\n\n```java\npackage sf.jvm.load;\nclass DeadLoopClass {\n    static {\n        //如果不加上这个if语句，编译器将提示\"Initializerdoesnotcompletenormally\"并拒绝编译\n        if (true) {\n            System.out.println(Thread.currentThread() + \"initDeadLoopClass\");\n            while (true) {\n            }\n        }\n    }\n    public static void main(String[] args) {\n        Runnable script = new Runnable() {\n            public void run() {\n                System.out.println(Thread.currentThread() + \"start\");\n                DeadLoopClass dlc = new DeadLoopClass();\n                System.out.println(Thread.currentThread() + \"runover\");\n            }\n        };\n        Thread thread1 = new Thread(script);\n        Thread thread2 = new Thread(script);\n        thread1.start();\n        thread2.start();\n    }\n}\n/**\n *\n \"C:\\Program Files\\Java\\jdk1.8.0_91\\bin\\javap.exe\" -c sf.jvm.load.DeadLoopClass\n Compiled from \"DeadLoopClass.java\"\n class sf.jvm.load.DeadLoopClass {\n sf.jvm.load.DeadLoopClass();\n Code:\n 0: aload_0\n 1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n 4: return\n public static void main(java.lang.String[]);\n Code:\n 0: new           #2                  // class sf/jvm/load/DeadLoopClass$1\n 3: dup\n 4: invokespecial #3                  // Method sf/jvm/load/DeadLoopClass$1.\"<init>\":()V\n 7: astore_1\n 8: new           #4                  // class java/lang/Thread\n 11: dup\n 12: aload_1\n 13: invokespecial #5                  // Method java/lang/Thread.\"<init>\":(Ljava/lang/Runnable;)V\n 16: astore_2\n 17: new           #4                  // class java/lang/Thread\n 20: dup\n 21: aload_1\n 22: invokespecial #5                  // Method java/lang/Thread.\"<init>\":(Ljava/lang/Runnable;)V\n 25: astore_3\n 26: aload_2\n 27: invokevirtual #6                  // Method java/lang/Thread.start:()V\n 30: aload_3\n 31: invokevirtual #6                  // Method java/lang/Thread.start:()V\n 34: return\n static {};\n Code:\n 0: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;\n 3: new           #8                  // class java/lang/StringBuilder\n 6: dup\n 7: invokespecial #9                  // Method java/lang/StringBuilder.\"<init>\":()V\n 10: invokestatic  #10                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;\n 13: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n 16: ldc           #12                 // String initDeadLoopClass\n 18: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n 21: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n 24: invokevirtual #15                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n 27: goto          27\n }\n * */\n```\n\n运行结果如下:\n\n```java\nThread[main,5,main]initDeadLoopClass\n通过分析：一条线程正在死循环以模拟长时间操作，另外一条线程在阻塞等待.\n线程堆栈如下:\n2017-07-29 20:05:00\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.91-b14 mixed mode):\n\n\"Monitor Ctrl-Break\" #10 daemon prio=5 os_prio=0 tid=0x0000000018554800 nid=0x4920 runnable [0x00000000190de000]\n   java.lang.Thread.State: RUNNABLE\n        at java.net.DualStackPlainSocketImpl.accept0(Native Method)\n        at java.net.DualStackPlainSocketImpl.socketAccept(DualStackPlainSocketImpl.java:131)\n        at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409)\n        at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:199)\n        - locked <0x00000000d79d67c0> (a java.net.SocksSocketImpl)\n        at java.net.ServerSocket.implAccept(ServerSocket.java:545)\n        at java.net.ServerSocket.accept(ServerSocket.java:513)\n        at com.intellij.rt.execution.application.AppMain$1.run(AppMain.java:79)\n        at java.lang.Thread.run(Thread.java:745)\n\n\"Finalizer\" #3 daemon prio=8 os_prio=1 tid=0x00000000027d8800 nid=0x2d14 in Object.wait() [0x000000001837e000]\n   java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x00000000d7808ee0> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143)\n        - locked <0x00000000d7808ee0> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:164)\n        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)\n\n\"Reference Handler\" #2 daemon prio=10 os_prio=2 tid=0x00000000027d3000 nid=0x4914 in Object.wait() [0x000000001827f000]\n   java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x00000000d7806b50> (a java.lang.ref.Reference$Lock)\n        at java.lang.Object.wait(Object.java:502)\n        at java.lang.ref.Reference.tryHandlePending(Reference.java:191)\n        - locked <0x00000000d7806b50> (a java.lang.ref.Reference$Lock)\n        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)\n\"main\" #1 prio=5 os_prio=0 tid=0x000000000220e000 nid=0x450c runnable [0x00000000026de000]\n   java.lang.Thread.State: RUNNABLE\n        at sf.jvm.load.DeadLoopClass.<clinit>(DeadLoopClass.java:8)\n        at java.lang.Class.forName0(Native Method)\n        at java.lang.Class.forName(Class.java:264)\n        at com.intellij.rt.execution.application.AppMain.main(AppMain.java:123)\n\"VM Thread\" os_prio=2 tid=0x0000000016ff7000 nid=0x6d4 runnable\n\"GC task thread#0 (ParallelGC)\" os_prio=0 tid=0x00000000026f7800 nid=0x4890 runnable\n\"GC task thread#1 (ParallelGC)\" os_prio=0 tid=0x00000000026f9000 nid=0x4514 runnable\n\"VM Periodic Task Thread\" os_prio=2 tid=0x00000000184e1800 nid=0x4934 waiting on condition\nJNI global references: 15\n```\n\n### 2 类加载器\n\n#### 2.1 　类加载器概述\n\n虚拟机设计团队把类加载阶段中的“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作放到 Java 虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块被称为“类加载器”。\n类加载器可以说是 Java 语言的一项创新，也是 Java 语言流行的重要原因之一，它最初是为了满足 JavaApplet 的需求而被开发出来的。如今 JavaApplet 技术基本上已经死掉[1]，但类加载器却在类层次划分、OSGi、热部署、代码加密等领域大放异彩，成为了 Java 技术体系中一块重要的基石。\n类加载器（class loader）用来加载 Java 类到 Java 虚拟机中。一般来说，Java 虚拟机使用 Java 类的方式如下：Java 源程序（.java 文件）在经过 Java 编译器编译之后就被转换成 Java 字节代码（.class 文件）。类加载器负责读取 Java 字节代码，并转换成 java.lang.Class 类的一个实例。每个这样的实例用来表示一个 Java 类。通过此实例的 newInstance()方法就可以创建出该类的一个对象。实际的情况可能更加复杂，比如 Java 字节代码可能是通过工具动态生成的，也可能是通过网络下载的。\n\n#### 2.2 类加载器的结构\n\n```\ngraph BT\n启动类加载器-->扩展类加载器\n扩展类加载器-->应用类加载器\n应用类加载器-->自定义加载器1\n应用类加载器-->自定义加载器2\n```\n\nJava 虚拟机的角度讲，只存在两种不同的类加载器：一种是启动类加载器（BootstrapClassLoader），这个类加载器使用 C++语言实现[2]，是虚拟机自身的一部分；另外一种就是所有其他的类加载器，这些类加载器都由 Java 语言实现，独立于虚拟机外部，并且全都继承自抽象类 java.lang.ClassLoader。从 Java 开发人员的角度来看，类加载器就还可以划分得更细致一些，绝大部分 Java 程序都会使用到以下三种系统提供的类加载器：：\n引导类加载器（bootstrap class loader）：它用来加载 Java 的核心库，是用原生代码来实现的，并不继承自 java.lang.ClassLoader。\n扩展类加载器（extensions class loader）：它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。\n应用程序类加载器（application class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。\n除了系统提供的类加载器以外，开发人员可以通过继承 java.lang.ClassLoader 类的方式实现自己的类加载器，以满足一些特殊的需求。\n\n双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。\n\n破坏双亲委派模型\n双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前——即 JDK1.2 发布之前。由于双亲委派模型在 JDK1.2 之后才被引入的，而类加载器和抽象类 java.lang.ClassLoader 则在 JDK1.0 时代就已经存在，面对已经存在的用户自定义类加载器的实现代码，Java 设计者们引入双亲委派模型时不得不做出一些妥协。为了向前兼容，JDK1.2 之后的 java.lang.ClassLoader 添加了一个新的 protected 方法 findClass()，\n双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷所导致的，双亲委派很好地解决了各个类加载器的基础类的统一问题（越基础的类由越上层的加载器进行加载），基础类之所以被称为“基础”，是因为它们总是作为被用户代码调用的 API，但世事往往没有绝对的完美，如果基础类又要调用回用户的代码，那该怎么办了？这并非是不可能的事情，一个典型的例子便是 JNDI 服务，JNDI 现在已经是 Java 的标准服务，它的代码由启动类加载器去加载（在 JDK1.3 时代放进去的 rt.jar），但 JNDI 的目的就是对资源进行集中管理和查找，它需要调用由独立厂商实现并部署在应用程序的 ClassPath 下的 JNDI 接口提供者（SPI，ServiceProviderInterface）的代码，但启动类加载器不可能“认识”这些代码啊！那该怎么办？为了解决这个困境，Java 设计团队只好引入了一个不太优雅的设计：线程上下文类加载器（ThreadContextClassLoader）。这个类加载器可以通过 java.lang.Thread 类的 setContextClassLoaser()方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个；如果在应用程序的全局范围内都没有设置过，那么这个类加载器默认就是应用程序类加载器。有了线程上下文类加载器，就可以做一些“舞弊”的事情了，JNDI 服务使用这个线程上下文类加载器去加载所需要的 SPI 代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上就是打通了双亲委派模型的层次结构来逆向使用类加载器，已经违背了双亲委派模型的一般性原则，但这也是无可奈何的事情。Java 中所有涉及 SPI 的加载动作基本上都采用这种方式，例如 JNDI、JDBC、JCE、JAXB 和 JBI 等。\n双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的，这里所说的“动态性”指的是当前一些非常“热”门的名词：代码热替换（HotSwap）、模块热部署（HotDeployment）等，说白了就是希望应用程序能像我们的电脑外设那样，插上鼠标或 U 盘，不用重启机器就能立即使用，鼠标有问题或要升级就换个鼠标，不用停机也不用重启。对于个人电脑来说，重启一次其实没有什么大不了的，但对于一些生产系统来说，关机重启一次可能就要被列为生产事故，这种情况下热部署就对软件开发者，尤其是企业级软件开发者具有很大的吸引力。在 JSR-297[4]、JSR-277[5]规范从纸上标准变成真正可运行的程序之前，OSGi 是当前业界“事实上”的 Java 模块化标准，而 OSGi 实现模块化热部署的关键则是它自定义的类加载器机制的实现。每一个程序模块（OSGi 中称为 Bundle）都有一个自己的类加载器，当需要更换一个 Bundle 时，就把 Bundle 连同类加载器一起换掉以实现代码的热替换。\n在 OSGi 环境下，类加载器不再是双亲委派模型中的树状结构，而是进一步发展为网状结构，当收到类加载请求时，OSGi 将按照下面的顺序进行类搜索：\n\n> （1）将以 java.\\*开头的类，委派给父类加载器加载。\n> （2）否则，将委派列表名单内的类，委派给父类加载器加载。\n> （3）否则，将 Import 列表中的类，委派给 Export 这个类的 Bundle 的类加载器加载。\n> （4）否则，查找当前 Bundle 的 ClassPath，使用自己的类加载器加载。\n> （5）否则，查找类是否在自己的 FragmentBundle 中，如果在，则委派给 FragmentBundle 的类加载器加载。\n> （6）否则，查找 DynamicImport 列表的 Bundle，委派给对应 Bundle 的类加载器加载。\n> （7）否则，类查找失败。上面的查找顺序中只有开头两点仍然符合双亲委派规则，其余的类查找都是在平级的类加载器中进行的。\n\n虽然使用了“被破坏”这个词来形容上述不符合双亲委派模型原则的行为，但这里“被破坏”并不带有贬义的感情色彩。只要有足够意义和理由，突破已有的原则就可算作一种创新。正如 OSGi 中的类加载器并不符合传统的双亲委派的类加载器，并且业界对其为了实现热部署而带来的额外的高复杂度还存在不少争议，但在 Java 程序员中基本有一个共识：OSGi 中对类加载器的使用是很值得学习的，弄懂了 OSGi 的实现，自然就明白了类加载器的精粹。\n//TODO\nOSGI\n\n#### 2.3 自定义类加载器实例:\n\n##### 2.3.1 文件加载:\n\n```java\npackage sf.jvm.load.classloader;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.Method;\n\npublic class FileSystemClassLoader extends ClassLoader {\n\n  private String rootDir;\n\n  public FileSystemClassLoader(String rootDir) {\n      this.rootDir = rootDir;\n  }\n\n  protected Class<?> findClass(String name) throws ClassNotFoundException {\n      byte[] classData = getClassData(name);\n      if (classData == null) {\n          throw new ClassNotFoundException();\n      } else {\n          return defineClass(name, classData, 0, classData.length);\n      }\n  }\n\n  private byte[] getClassData(String className) {\n      String path = classNameToPath(className);\n      try {\n          InputStream ins = new FileInputStream(path);\n          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n          int bufferSize = 4096;\n          byte[] buffer = new byte[bufferSize];\n          int bytesNumRead = 0;\n          while ((bytesNumRead = ins.read(buffer)) != -1) {\n              baos.write(buffer, 0, bytesNumRead);\n          }\n          return baos.toByteArray();\n      } catch (IOException e) {\n          e.printStackTrace();\n      }\n      return null;\n  }\n\n  private String classNameToPath(String className) {\n      return rootDir + File.separatorChar + className.replace('.', File.separatorChar) + \".class\";\n  }\n\n  public static void main(String[] args) {\n      String classDataRootPath = \"D:\\\\Code\\\\Jcode\\\\notes\\\\java-jlp\\\\java-jvm\\\\target\\\\classes\";\n      FileSystemClassLoader fileSystemClassLoader1 = new FileSystemClassLoader(classDataRootPath);\n      FileSystemClassLoader fileSystemClassLoader2 = new FileSystemClassLoader(classDataRootPath);\n      String className = \"sf.jvm.load.simple.Sample\";\n      try {\n          Class<?> class1 = fileSystemClassLoader1.loadClass(className);\n          Object obj1 = class1.newInstance();\n          Class<?> class2 = fileSystemClassLoader1.loadClass(className);\n          Object obj2 = class2.newInstance();\n          Method setSampleMethod = class1.getMethod(\"setSample\", Object.class);\n          setSampleMethod.invoke(obj1, obj2);\n          Method setSampleMethod2 = class1.getMethod(\"compare\", Object.class);\n          setSampleMethod2.invoke(obj1, obj2);\n      } catch (Exception e) {\n          e.printStackTrace();\n      }\n  }\n}\n```\n\n##### 2.3.2 网络加载:\n\n```java\npackage sf.jvm.load.classloader;\n\nimport sf.jvm.load.api.ICalculator;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.net.URL;\n\npublic class NetworkClassLoader extends ClassLoader {\n\n  private String rootUrl;\n\n  public NetworkClassLoader(String rootUrl) {\n      this.rootUrl = rootUrl;\n  }\n\n  protected Class<?> findClass(String name) throws ClassNotFoundException {\n      byte[] classData = getClassData(name);\n      if (classData == null) {\n          throw new ClassNotFoundException();\n      } else {\n          return defineClass(name, classData, 0, classData.length);\n      }\n  }\n\n  private byte[] getClassData(String className) {\n      String path = classNameToPath(className);\n      try {\n          URL url = new URL(path);\n          InputStream ins = url.openStream();\n          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n          int bufferSize = 4096;\n          byte[] buffer = new byte[bufferSize];\n          int bytesNumRead = 0;\n          while ((bytesNumRead = ins.read(buffer)) != -1) {\n              baos.write(buffer, 0, bytesNumRead);\n          }\n          return baos.toByteArray();\n      } catch (Exception e) {\n          e.printStackTrace();\n      }\n      return null;\n  }\n\n  private String classNameToPath(String className) {\n      return rootUrl + \"/\" + className.replace('.', '/') + \".class\";\n  }\n\n  public static void main(String[] args) {\n      String url = \"http://localhost:8080/ClassloaderTest/classes\";\n      NetworkClassLoader ncl = new NetworkClassLoader(url);\n      String basicClassName = \"sf.jvm.load.simple.CalculatorBasic\";\n      String advancedClassName = \"sf.jvm.load.simple.CalculatorAdvanced\";\n      try {\n          Class<?> clazz = ncl.loadClass(basicClassName);\n          ICalculator calculator = (ICalculator) clazz.newInstance();\n          System.out.println(calculator.getVersion());\n          clazz = ncl.loadClass(advancedClassName);\n          calculator = (ICalculator) clazz.newInstance();\n          System.out.println(calculator.getVersion());\n      } catch (Exception e) {\n          e.printStackTrace();\n      }\n  }\n}\n```\n","source":"_posts/language/jvm/JVM类加载机制.md","raw":"---\ntitle: JVM类加载机制\ncategories:\n- java\ntag:\n- JVM\n---\n\n# 类加载机制\n\n### 1. 类的加载过程\n\n类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载（Loading）、验证（Verification）、准备(Preparation)、解析(Resolution)、初始化(Initialization)、使用(Using)和卸载(Unloading)7 个阶段。其中准备、验证、解析 3 个部分统称为连接（Linking）。如图所示:\n\n```\ngraph LR\n加载-->验证\n验证-->准备\n准备-->解析\n解析-->初始化\n初始化-->使用\n使用-->卸载\n```\n\n加载、验证、准备、初始化和卸载这 5 个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始，而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 语言的运行时绑定（也称为动态绑定或晚期绑定）。以下陈述的内容都已 HotSpot 为基准。\n\n#### 1.1 加载\n\n虚拟机在加载阶段需要完成三件事:\n\n1. 通过一个类的全限定名来获取定义此类的二进制字节流，如 Class 文件,网络,动态生成,数据库等\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\n3. 在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口\n   加载阶段和连接阶段（Linking）的部分内容（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的内容，这两个阶段的开始时间仍然保持着固定的先后顺序。\n\n#### 1.2 验证\n\n验证是连接阶段的第一步，这一阶段的目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全，验证阶段大致会完成 4 个阶段的检验动作：\n\n1. 文件格式验证：验证字节流是否符合 Class 文件格式的规范；例如：是否以魔术 0xCAFEBABE 开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。\n2. 元数据验证：对字节码描述的信息进行语义分析（注意：对比 javac 编译阶段的语义分析），以保证其描述的信息符合 Java 语言规范的要求；例如：这个类是否有父类，除了 java.lang.Object 之外。\n3. 字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。\n4. 符号引用验证：确保解析动作能正确执行。\n   验证阶段可能抛出一个 java.lang.IncompatibleClassChangeError 异常的子类，如 java.lang.IllegalAccessError、 java. lang. NoSuchFieldError、\n   验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用-Xverifynone 参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。\n\n#### 1.3 准备\n\n准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。这时候进行内存分配的仅包括类变量（被 static 修饰的变量），而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在堆中。其次，这里所说的初始值“通常情况”下是数据类型的零值.\n\n如下定义:public static int value=123; 那变量 value 在准备阶段过后的初始值为 0 而不是 123.因为这时候尚未开始执行任何 java 方法，而把 value 赋值为 123 的 putstatic 指令是程序被编译后，存放于类构造器()方法之中，所以把 value 赋值为 123 的动作将在初始化阶段才会执行。\n\n如下定义：public static final int value=123; 即当类字段的字段属性是 ConstantValue 时，会在准备阶段初始化为指定的值，所以标注为 final 之后，value 的值在准备阶段初始化为 123 而非 0.\n\n#### 1.4 解析\n\n解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。解析针对如下 7 类符号引用进行：\n\n> 类或接口\n> 字段\n> 类方法\n> 接口方法\n> 方法类型\n> 方法句柄\n> 调用点限定符\n\n#### 1.5 初始化\n\n类初始化阶段是类加载过程的最后一步，才真正开始执行类中定义的 Java 程序代码（或者说是字节码）。前面的类加载过程中，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。\n\n在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，则是根据程序员通过程序制定的主观计划去初始化类变量和其他资源，或者可以从另外一个角度来表达：初始化阶段是执行类构造器<clinit>()方法的过程。我们放到后面再讲<clinit>()方法是怎么生成的，在这里，我们先看一下<clinit>()方法执行过程中可能会影响程序运行行为的一些特点和细节，这部分相对更贴近于普通的程序开发人员[7]：\n·<clinit>()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块中可以赋值，但是不能访问。\n·<clinit>()方法与类的构造函数（或者说实例构造器<clinit>()方法）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的<clinit>()方法执行之前，父类的<clinit>()方法已经执行完毕。因此在虚拟机中第一个被执行的<clinit>()方法的类肯定是 java.lang.Object。\n·由于父类的<clinit>()方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作，如下代码执行字段 B 的值将会是 2 而不是 1。\n<clinit>()方法执行顺序：\n\n```java\npackage sf.jvm.load;\n class Parent {\n    public static int A = 1;\n    static {\n        A = 2;\n    }\n     public int getA(){\n         return A;\n     }\n}\nclass Sub extends Parent {\n     public static int B = A;\n     public int getB(){\n         return B;\n     }\n     public static void main(String[] args) {\n         new Parent();\n        System.out.println(Sub.B);\n        System.out.println(new Sub().getB());\n    }\n}\n/**\n Compiled from \"Parent.java\"\n class sf.jvm.load.Parent {\n public static int A;\n sf.jvm.load.Parent();\n Code:\n 0: aload_0\n 1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n 4: return\n public int getA();\n Code:\n 0: getstatic     #2                  // Field A:I\n 3: ireturn\n static {};\n Code:\n 0: iconst_1\n 1: putstatic     #2                  // Field A:I\n 4: iconst_2\n 5: putstatic     #2                  // Field A:I\n 8: return\n }\n */\n```\n\n·<clinit>()方法对于类或接口来说并不是必须的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成<clinit>()方法。\n·接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成<clinit>()方法。但接口与类不同的是，执行接口的<clinit>()方法不需要先执行父接口的<clinit>()方法。只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也一样不会执行接口的<clinit>()方法。\n·虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确地加锁和同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，直到活动线程执行<clinit>()方法完毕。如果在一个类的<clinit>()方法中有耗时很长的操作，那就可能造成多个进程阻塞，在实际应用中这种阻塞往往是很隐蔽的。\n\n```java\npackage sf.jvm.load;\nclass DeadLoopClass {\n    static {\n        //如果不加上这个if语句，编译器将提示\"Initializerdoesnotcompletenormally\"并拒绝编译\n        if (true) {\n            System.out.println(Thread.currentThread() + \"initDeadLoopClass\");\n            while (true) {\n            }\n        }\n    }\n    public static void main(String[] args) {\n        Runnable script = new Runnable() {\n            public void run() {\n                System.out.println(Thread.currentThread() + \"start\");\n                DeadLoopClass dlc = new DeadLoopClass();\n                System.out.println(Thread.currentThread() + \"runover\");\n            }\n        };\n        Thread thread1 = new Thread(script);\n        Thread thread2 = new Thread(script);\n        thread1.start();\n        thread2.start();\n    }\n}\n/**\n *\n \"C:\\Program Files\\Java\\jdk1.8.0_91\\bin\\javap.exe\" -c sf.jvm.load.DeadLoopClass\n Compiled from \"DeadLoopClass.java\"\n class sf.jvm.load.DeadLoopClass {\n sf.jvm.load.DeadLoopClass();\n Code:\n 0: aload_0\n 1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n 4: return\n public static void main(java.lang.String[]);\n Code:\n 0: new           #2                  // class sf/jvm/load/DeadLoopClass$1\n 3: dup\n 4: invokespecial #3                  // Method sf/jvm/load/DeadLoopClass$1.\"<init>\":()V\n 7: astore_1\n 8: new           #4                  // class java/lang/Thread\n 11: dup\n 12: aload_1\n 13: invokespecial #5                  // Method java/lang/Thread.\"<init>\":(Ljava/lang/Runnable;)V\n 16: astore_2\n 17: new           #4                  // class java/lang/Thread\n 20: dup\n 21: aload_1\n 22: invokespecial #5                  // Method java/lang/Thread.\"<init>\":(Ljava/lang/Runnable;)V\n 25: astore_3\n 26: aload_2\n 27: invokevirtual #6                  // Method java/lang/Thread.start:()V\n 30: aload_3\n 31: invokevirtual #6                  // Method java/lang/Thread.start:()V\n 34: return\n static {};\n Code:\n 0: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;\n 3: new           #8                  // class java/lang/StringBuilder\n 6: dup\n 7: invokespecial #9                  // Method java/lang/StringBuilder.\"<init>\":()V\n 10: invokestatic  #10                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;\n 13: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n 16: ldc           #12                 // String initDeadLoopClass\n 18: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n 21: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n 24: invokevirtual #15                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n 27: goto          27\n }\n * */\n```\n\n运行结果如下:\n\n```java\nThread[main,5,main]initDeadLoopClass\n通过分析：一条线程正在死循环以模拟长时间操作，另外一条线程在阻塞等待.\n线程堆栈如下:\n2017-07-29 20:05:00\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.91-b14 mixed mode):\n\n\"Monitor Ctrl-Break\" #10 daemon prio=5 os_prio=0 tid=0x0000000018554800 nid=0x4920 runnable [0x00000000190de000]\n   java.lang.Thread.State: RUNNABLE\n        at java.net.DualStackPlainSocketImpl.accept0(Native Method)\n        at java.net.DualStackPlainSocketImpl.socketAccept(DualStackPlainSocketImpl.java:131)\n        at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409)\n        at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:199)\n        - locked <0x00000000d79d67c0> (a java.net.SocksSocketImpl)\n        at java.net.ServerSocket.implAccept(ServerSocket.java:545)\n        at java.net.ServerSocket.accept(ServerSocket.java:513)\n        at com.intellij.rt.execution.application.AppMain$1.run(AppMain.java:79)\n        at java.lang.Thread.run(Thread.java:745)\n\n\"Finalizer\" #3 daemon prio=8 os_prio=1 tid=0x00000000027d8800 nid=0x2d14 in Object.wait() [0x000000001837e000]\n   java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x00000000d7808ee0> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143)\n        - locked <0x00000000d7808ee0> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:164)\n        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)\n\n\"Reference Handler\" #2 daemon prio=10 os_prio=2 tid=0x00000000027d3000 nid=0x4914 in Object.wait() [0x000000001827f000]\n   java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x00000000d7806b50> (a java.lang.ref.Reference$Lock)\n        at java.lang.Object.wait(Object.java:502)\n        at java.lang.ref.Reference.tryHandlePending(Reference.java:191)\n        - locked <0x00000000d7806b50> (a java.lang.ref.Reference$Lock)\n        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)\n\"main\" #1 prio=5 os_prio=0 tid=0x000000000220e000 nid=0x450c runnable [0x00000000026de000]\n   java.lang.Thread.State: RUNNABLE\n        at sf.jvm.load.DeadLoopClass.<clinit>(DeadLoopClass.java:8)\n        at java.lang.Class.forName0(Native Method)\n        at java.lang.Class.forName(Class.java:264)\n        at com.intellij.rt.execution.application.AppMain.main(AppMain.java:123)\n\"VM Thread\" os_prio=2 tid=0x0000000016ff7000 nid=0x6d4 runnable\n\"GC task thread#0 (ParallelGC)\" os_prio=0 tid=0x00000000026f7800 nid=0x4890 runnable\n\"GC task thread#1 (ParallelGC)\" os_prio=0 tid=0x00000000026f9000 nid=0x4514 runnable\n\"VM Periodic Task Thread\" os_prio=2 tid=0x00000000184e1800 nid=0x4934 waiting on condition\nJNI global references: 15\n```\n\n### 2 类加载器\n\n#### 2.1 　类加载器概述\n\n虚拟机设计团队把类加载阶段中的“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作放到 Java 虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块被称为“类加载器”。\n类加载器可以说是 Java 语言的一项创新，也是 Java 语言流行的重要原因之一，它最初是为了满足 JavaApplet 的需求而被开发出来的。如今 JavaApplet 技术基本上已经死掉[1]，但类加载器却在类层次划分、OSGi、热部署、代码加密等领域大放异彩，成为了 Java 技术体系中一块重要的基石。\n类加载器（class loader）用来加载 Java 类到 Java 虚拟机中。一般来说，Java 虚拟机使用 Java 类的方式如下：Java 源程序（.java 文件）在经过 Java 编译器编译之后就被转换成 Java 字节代码（.class 文件）。类加载器负责读取 Java 字节代码，并转换成 java.lang.Class 类的一个实例。每个这样的实例用来表示一个 Java 类。通过此实例的 newInstance()方法就可以创建出该类的一个对象。实际的情况可能更加复杂，比如 Java 字节代码可能是通过工具动态生成的，也可能是通过网络下载的。\n\n#### 2.2 类加载器的结构\n\n```\ngraph BT\n启动类加载器-->扩展类加载器\n扩展类加载器-->应用类加载器\n应用类加载器-->自定义加载器1\n应用类加载器-->自定义加载器2\n```\n\nJava 虚拟机的角度讲，只存在两种不同的类加载器：一种是启动类加载器（BootstrapClassLoader），这个类加载器使用 C++语言实现[2]，是虚拟机自身的一部分；另外一种就是所有其他的类加载器，这些类加载器都由 Java 语言实现，独立于虚拟机外部，并且全都继承自抽象类 java.lang.ClassLoader。从 Java 开发人员的角度来看，类加载器就还可以划分得更细致一些，绝大部分 Java 程序都会使用到以下三种系统提供的类加载器：：\n引导类加载器（bootstrap class loader）：它用来加载 Java 的核心库，是用原生代码来实现的，并不继承自 java.lang.ClassLoader。\n扩展类加载器（extensions class loader）：它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。\n应用程序类加载器（application class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。\n除了系统提供的类加载器以外，开发人员可以通过继承 java.lang.ClassLoader 类的方式实现自己的类加载器，以满足一些特殊的需求。\n\n双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。\n\n破坏双亲委派模型\n双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前——即 JDK1.2 发布之前。由于双亲委派模型在 JDK1.2 之后才被引入的，而类加载器和抽象类 java.lang.ClassLoader 则在 JDK1.0 时代就已经存在，面对已经存在的用户自定义类加载器的实现代码，Java 设计者们引入双亲委派模型时不得不做出一些妥协。为了向前兼容，JDK1.2 之后的 java.lang.ClassLoader 添加了一个新的 protected 方法 findClass()，\n双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷所导致的，双亲委派很好地解决了各个类加载器的基础类的统一问题（越基础的类由越上层的加载器进行加载），基础类之所以被称为“基础”，是因为它们总是作为被用户代码调用的 API，但世事往往没有绝对的完美，如果基础类又要调用回用户的代码，那该怎么办了？这并非是不可能的事情，一个典型的例子便是 JNDI 服务，JNDI 现在已经是 Java 的标准服务，它的代码由启动类加载器去加载（在 JDK1.3 时代放进去的 rt.jar），但 JNDI 的目的就是对资源进行集中管理和查找，它需要调用由独立厂商实现并部署在应用程序的 ClassPath 下的 JNDI 接口提供者（SPI，ServiceProviderInterface）的代码，但启动类加载器不可能“认识”这些代码啊！那该怎么办？为了解决这个困境，Java 设计团队只好引入了一个不太优雅的设计：线程上下文类加载器（ThreadContextClassLoader）。这个类加载器可以通过 java.lang.Thread 类的 setContextClassLoaser()方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个；如果在应用程序的全局范围内都没有设置过，那么这个类加载器默认就是应用程序类加载器。有了线程上下文类加载器，就可以做一些“舞弊”的事情了，JNDI 服务使用这个线程上下文类加载器去加载所需要的 SPI 代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上就是打通了双亲委派模型的层次结构来逆向使用类加载器，已经违背了双亲委派模型的一般性原则，但这也是无可奈何的事情。Java 中所有涉及 SPI 的加载动作基本上都采用这种方式，例如 JNDI、JDBC、JCE、JAXB 和 JBI 等。\n双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的，这里所说的“动态性”指的是当前一些非常“热”门的名词：代码热替换（HotSwap）、模块热部署（HotDeployment）等，说白了就是希望应用程序能像我们的电脑外设那样，插上鼠标或 U 盘，不用重启机器就能立即使用，鼠标有问题或要升级就换个鼠标，不用停机也不用重启。对于个人电脑来说，重启一次其实没有什么大不了的，但对于一些生产系统来说，关机重启一次可能就要被列为生产事故，这种情况下热部署就对软件开发者，尤其是企业级软件开发者具有很大的吸引力。在 JSR-297[4]、JSR-277[5]规范从纸上标准变成真正可运行的程序之前，OSGi 是当前业界“事实上”的 Java 模块化标准，而 OSGi 实现模块化热部署的关键则是它自定义的类加载器机制的实现。每一个程序模块（OSGi 中称为 Bundle）都有一个自己的类加载器，当需要更换一个 Bundle 时，就把 Bundle 连同类加载器一起换掉以实现代码的热替换。\n在 OSGi 环境下，类加载器不再是双亲委派模型中的树状结构，而是进一步发展为网状结构，当收到类加载请求时，OSGi 将按照下面的顺序进行类搜索：\n\n> （1）将以 java.\\*开头的类，委派给父类加载器加载。\n> （2）否则，将委派列表名单内的类，委派给父类加载器加载。\n> （3）否则，将 Import 列表中的类，委派给 Export 这个类的 Bundle 的类加载器加载。\n> （4）否则，查找当前 Bundle 的 ClassPath，使用自己的类加载器加载。\n> （5）否则，查找类是否在自己的 FragmentBundle 中，如果在，则委派给 FragmentBundle 的类加载器加载。\n> （6）否则，查找 DynamicImport 列表的 Bundle，委派给对应 Bundle 的类加载器加载。\n> （7）否则，类查找失败。上面的查找顺序中只有开头两点仍然符合双亲委派规则，其余的类查找都是在平级的类加载器中进行的。\n\n虽然使用了“被破坏”这个词来形容上述不符合双亲委派模型原则的行为，但这里“被破坏”并不带有贬义的感情色彩。只要有足够意义和理由，突破已有的原则就可算作一种创新。正如 OSGi 中的类加载器并不符合传统的双亲委派的类加载器，并且业界对其为了实现热部署而带来的额外的高复杂度还存在不少争议，但在 Java 程序员中基本有一个共识：OSGi 中对类加载器的使用是很值得学习的，弄懂了 OSGi 的实现，自然就明白了类加载器的精粹。\n//TODO\nOSGI\n\n#### 2.3 自定义类加载器实例:\n\n##### 2.3.1 文件加载:\n\n```java\npackage sf.jvm.load.classloader;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.Method;\n\npublic class FileSystemClassLoader extends ClassLoader {\n\n  private String rootDir;\n\n  public FileSystemClassLoader(String rootDir) {\n      this.rootDir = rootDir;\n  }\n\n  protected Class<?> findClass(String name) throws ClassNotFoundException {\n      byte[] classData = getClassData(name);\n      if (classData == null) {\n          throw new ClassNotFoundException();\n      } else {\n          return defineClass(name, classData, 0, classData.length);\n      }\n  }\n\n  private byte[] getClassData(String className) {\n      String path = classNameToPath(className);\n      try {\n          InputStream ins = new FileInputStream(path);\n          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n          int bufferSize = 4096;\n          byte[] buffer = new byte[bufferSize];\n          int bytesNumRead = 0;\n          while ((bytesNumRead = ins.read(buffer)) != -1) {\n              baos.write(buffer, 0, bytesNumRead);\n          }\n          return baos.toByteArray();\n      } catch (IOException e) {\n          e.printStackTrace();\n      }\n      return null;\n  }\n\n  private String classNameToPath(String className) {\n      return rootDir + File.separatorChar + className.replace('.', File.separatorChar) + \".class\";\n  }\n\n  public static void main(String[] args) {\n      String classDataRootPath = \"D:\\\\Code\\\\Jcode\\\\notes\\\\java-jlp\\\\java-jvm\\\\target\\\\classes\";\n      FileSystemClassLoader fileSystemClassLoader1 = new FileSystemClassLoader(classDataRootPath);\n      FileSystemClassLoader fileSystemClassLoader2 = new FileSystemClassLoader(classDataRootPath);\n      String className = \"sf.jvm.load.simple.Sample\";\n      try {\n          Class<?> class1 = fileSystemClassLoader1.loadClass(className);\n          Object obj1 = class1.newInstance();\n          Class<?> class2 = fileSystemClassLoader1.loadClass(className);\n          Object obj2 = class2.newInstance();\n          Method setSampleMethod = class1.getMethod(\"setSample\", Object.class);\n          setSampleMethod.invoke(obj1, obj2);\n          Method setSampleMethod2 = class1.getMethod(\"compare\", Object.class);\n          setSampleMethod2.invoke(obj1, obj2);\n      } catch (Exception e) {\n          e.printStackTrace();\n      }\n  }\n}\n```\n\n##### 2.3.2 网络加载:\n\n```java\npackage sf.jvm.load.classloader;\n\nimport sf.jvm.load.api.ICalculator;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.net.URL;\n\npublic class NetworkClassLoader extends ClassLoader {\n\n  private String rootUrl;\n\n  public NetworkClassLoader(String rootUrl) {\n      this.rootUrl = rootUrl;\n  }\n\n  protected Class<?> findClass(String name) throws ClassNotFoundException {\n      byte[] classData = getClassData(name);\n      if (classData == null) {\n          throw new ClassNotFoundException();\n      } else {\n          return defineClass(name, classData, 0, classData.length);\n      }\n  }\n\n  private byte[] getClassData(String className) {\n      String path = classNameToPath(className);\n      try {\n          URL url = new URL(path);\n          InputStream ins = url.openStream();\n          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n          int bufferSize = 4096;\n          byte[] buffer = new byte[bufferSize];\n          int bytesNumRead = 0;\n          while ((bytesNumRead = ins.read(buffer)) != -1) {\n              baos.write(buffer, 0, bytesNumRead);\n          }\n          return baos.toByteArray();\n      } catch (Exception e) {\n          e.printStackTrace();\n      }\n      return null;\n  }\n\n  private String classNameToPath(String className) {\n      return rootUrl + \"/\" + className.replace('.', '/') + \".class\";\n  }\n\n  public static void main(String[] args) {\n      String url = \"http://localhost:8080/ClassloaderTest/classes\";\n      NetworkClassLoader ncl = new NetworkClassLoader(url);\n      String basicClassName = \"sf.jvm.load.simple.CalculatorBasic\";\n      String advancedClassName = \"sf.jvm.load.simple.CalculatorAdvanced\";\n      try {\n          Class<?> clazz = ncl.loadClass(basicClassName);\n          ICalculator calculator = (ICalculator) clazz.newInstance();\n          System.out.println(calculator.getVersion());\n          clazz = ncl.loadClass(advancedClassName);\n          calculator = (ICalculator) clazz.newInstance();\n          System.out.println(calculator.getVersion());\n      } catch (Exception e) {\n          e.printStackTrace();\n      }\n  }\n}\n```\n","slug":"language/jvm/JVM类加载机制","published":1,"date":"2021-07-31T11:10:47.917Z","updated":"2021-07-31T11:10:47.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyiq002hu6uk6kim80i3","content":"<h1 id=\"类加载机制\"><a href=\"#类加载机制\" class=\"headerlink\" title=\"类加载机制\"></a>类加载机制</h1><h3 id=\"1-类的加载过程\"><a href=\"#1-类的加载过程\" class=\"headerlink\" title=\"1. 类的加载过程\"></a>1. 类的加载过程</h3><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载（Loading）、验证（Verification）、准备(Preparation)、解析(Resolution)、初始化(Initialization)、使用(Using)和卸载(Unloading)7 个阶段。其中准备、验证、解析 3 个部分统称为连接（Linking）。如图所示:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">加载--&gt;验证</span><br><span class=\"line\">验证--&gt;准备</span><br><span class=\"line\">准备--&gt;解析</span><br><span class=\"line\">解析--&gt;初始化</span><br><span class=\"line\">初始化--&gt;使用</span><br><span class=\"line\">使用--&gt;卸载</span><br></pre></td></tr></table></figure>\n\n<p>加载、验证、准备、初始化和卸载这 5 个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始，而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 语言的运行时绑定（也称为动态绑定或晚期绑定）。以下陈述的内容都已 HotSpot 为基准。</p>\n<h4 id=\"1-1-加载\"><a href=\"#1-1-加载\" class=\"headerlink\" title=\"1.1 加载\"></a>1.1 加载</h4><p>虚拟机在加载阶段需要完成三件事:</p>\n<ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流，如 Class 文件,网络,动态生成,数据库等</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>\n<li>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口<br>加载阶段和连接阶段（Linking）的部分内容（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的内容，这两个阶段的开始时间仍然保持着固定的先后顺序。</li>\n</ol>\n<h4 id=\"1-2-验证\"><a href=\"#1-2-验证\" class=\"headerlink\" title=\"1.2 验证\"></a>1.2 验证</h4><p>验证是连接阶段的第一步，这一阶段的目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全，验证阶段大致会完成 4 个阶段的检验动作：</p>\n<ol>\n<li>文件格式验证：验证字节流是否符合 Class 文件格式的规范；例如：是否以魔术 0xCAFEBABE 开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。</li>\n<li>元数据验证：对字节码描述的信息进行语义分析（注意：对比 javac 编译阶段的语义分析），以保证其描述的信息符合 Java 语言规范的要求；例如：这个类是否有父类，除了 java.lang.Object 之外。</li>\n<li>字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</li>\n<li>符号引用验证：确保解析动作能正确执行。<br>验证阶段可能抛出一个 java.lang.IncompatibleClassChangeError 异常的子类，如 java.lang.IllegalAccessError、 java. lang. NoSuchFieldError、<br>验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用-Xverifynone 参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</li>\n</ol>\n<h4 id=\"1-3-准备\"><a href=\"#1-3-准备\" class=\"headerlink\" title=\"1.3 准备\"></a>1.3 准备</h4><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。这时候进行内存分配的仅包括类变量（被 static 修饰的变量），而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在堆中。其次，这里所说的初始值“通常情况”下是数据类型的零值.</p>\n<p>如下定义:public static int value=123; 那变量 value 在准备阶段过后的初始值为 0 而不是 123.因为这时候尚未开始执行任何 java 方法，而把 value 赋值为 123 的 putstatic 指令是程序被编译后，存放于类构造器()方法之中，所以把 value 赋值为 123 的动作将在初始化阶段才会执行。</p>\n<p>如下定义：public static final int value=123; 即当类字段的字段属性是 ConstantValue 时，会在准备阶段初始化为指定的值，所以标注为 final 之后，value 的值在准备阶段初始化为 123 而非 0.</p>\n<h4 id=\"1-4-解析\"><a href=\"#1-4-解析\" class=\"headerlink\" title=\"1.4 解析\"></a>1.4 解析</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。解析针对如下 7 类符号引用进行：</p>\n<blockquote>\n<p>类或接口<br>字段<br>类方法<br>接口方法<br>方法类型<br>方法句柄<br>调用点限定符</p>\n</blockquote>\n<h4 id=\"1-5-初始化\"><a href=\"#1-5-初始化\" class=\"headerlink\" title=\"1.5 初始化\"></a>1.5 初始化</h4><p>类初始化阶段是类加载过程的最后一步，才真正开始执行类中定义的 Java 程序代码（或者说是字节码）。前面的类加载过程中，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。</p>\n<p>在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，则是根据程序员通过程序制定的主观计划去初始化类变量和其他资源，或者可以从另外一个角度来表达：初始化阶段是执行类构造器<clinit>()方法的过程。我们放到后面再讲<clinit>()方法是怎么生成的，在这里，我们先看一下<clinit>()方法执行过程中可能会影响程序运行行为的一些特点和细节，这部分相对更贴近于普通的程序开发人员[7]：<br>·<clinit>()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块中可以赋值，但是不能访问。<br>·<clinit>()方法与类的构造函数（或者说实例构造器<clinit>()方法）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的<clinit>()方法执行之前，父类的<clinit>()方法已经执行完毕。因此在虚拟机中第一个被执行的<clinit>()方法的类肯定是 java.lang.Object。<br>·由于父类的<clinit>()方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作，如下代码执行字段 B 的值将会是 2 而不是 1。<br><clinit>()方法执行顺序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> sf.jvm.load;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> A = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        A = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sub</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> B = A;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getB</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> B;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">        System.out.println(Sub.B);</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Sub().getB());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> Compiled from &quot;Parent.java&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> class sf.jvm.load.Parent &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> public static int A;</span></span><br><span class=\"line\"><span class=\"comment\"> sf.jvm.load.Parent();</span></span><br><span class=\"line\"><span class=\"comment\"> Code:</span></span><br><span class=\"line\"><span class=\"comment\"> 0: aload_0</span></span><br><span class=\"line\"><span class=\"comment\"> 1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\"><span class=\"comment\"> 4: return</span></span><br><span class=\"line\"><span class=\"comment\"> public int getA();</span></span><br><span class=\"line\"><span class=\"comment\"> Code:</span></span><br><span class=\"line\"><span class=\"comment\"> 0: getstatic     #2                  // Field A:I</span></span><br><span class=\"line\"><span class=\"comment\"> 3: ireturn</span></span><br><span class=\"line\"><span class=\"comment\"> static &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> Code:</span></span><br><span class=\"line\"><span class=\"comment\"> 0: iconst_1</span></span><br><span class=\"line\"><span class=\"comment\"> 1: putstatic     #2                  // Field A:I</span></span><br><span class=\"line\"><span class=\"comment\"> 4: iconst_2</span></span><br><span class=\"line\"><span class=\"comment\"> 5: putstatic     #2                  // Field A:I</span></span><br><span class=\"line\"><span class=\"comment\"> 8: return</span></span><br><span class=\"line\"><span class=\"comment\"> &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<p>·<clinit>()方法对于类或接口来说并不是必须的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成<clinit>()方法。<br>·接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成<clinit>()方法。但接口与类不同的是，执行接口的<clinit>()方法不需要先执行父接口的<clinit>()方法。只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也一样不会执行接口的<clinit>()方法。<br>·虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确地加锁和同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，直到活动线程执行<clinit>()方法完毕。如果在一个类的<clinit>()方法中有耗时很长的操作，那就可能造成多个进程阻塞，在实际应用中这种阻塞往往是很隐蔽的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> sf.jvm.load;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeadLoopClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果不加上这个if语句，编译器将提示&quot;Initializerdoesnotcompletenormally&quot;并拒绝编译</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread() + <span class=\"string\">&quot;initDeadLoopClass&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Runnable script = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread() + <span class=\"string\">&quot;start&quot;</span>);</span><br><span class=\"line\">                DeadLoopClass dlc = <span class=\"keyword\">new</span> DeadLoopClass();</span><br><span class=\"line\">                System.out.println(Thread.currentThread() + <span class=\"string\">&quot;runover&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(script);</span><br><span class=\"line\">        Thread thread2 = <span class=\"keyword\">new</span> Thread(script);</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> &quot;C:\\Program Files\\Java\\jdk1.8.0_91\\bin\\javap.exe&quot; -c sf.jvm.load.DeadLoopClass</span></span><br><span class=\"line\"><span class=\"comment\"> Compiled from &quot;DeadLoopClass.java&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> class sf.jvm.load.DeadLoopClass &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> sf.jvm.load.DeadLoopClass();</span></span><br><span class=\"line\"><span class=\"comment\"> Code:</span></span><br><span class=\"line\"><span class=\"comment\"> 0: aload_0</span></span><br><span class=\"line\"><span class=\"comment\"> 1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\"><span class=\"comment\"> 4: return</span></span><br><span class=\"line\"><span class=\"comment\"> public static void main(java.lang.String[]);</span></span><br><span class=\"line\"><span class=\"comment\"> Code:</span></span><br><span class=\"line\"><span class=\"comment\"> 0: new           #2                  // class sf/jvm/load/DeadLoopClass$1</span></span><br><span class=\"line\"><span class=\"comment\"> 3: dup</span></span><br><span class=\"line\"><span class=\"comment\"> 4: invokespecial #3                  // Method sf/jvm/load/DeadLoopClass$1.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\"><span class=\"comment\"> 7: astore_1</span></span><br><span class=\"line\"><span class=\"comment\"> 8: new           #4                  // class java/lang/Thread</span></span><br><span class=\"line\"><span class=\"comment\"> 11: dup</span></span><br><span class=\"line\"><span class=\"comment\"> 12: aload_1</span></span><br><span class=\"line\"><span class=\"comment\"> 13: invokespecial #5                  // Method java/lang/Thread.&quot;&lt;init&gt;&quot;:(Ljava/lang/Runnable;)V</span></span><br><span class=\"line\"><span class=\"comment\"> 16: astore_2</span></span><br><span class=\"line\"><span class=\"comment\"> 17: new           #4                  // class java/lang/Thread</span></span><br><span class=\"line\"><span class=\"comment\"> 20: dup</span></span><br><span class=\"line\"><span class=\"comment\"> 21: aload_1</span></span><br><span class=\"line\"><span class=\"comment\"> 22: invokespecial #5                  // Method java/lang/Thread.&quot;&lt;init&gt;&quot;:(Ljava/lang/Runnable;)V</span></span><br><span class=\"line\"><span class=\"comment\"> 25: astore_3</span></span><br><span class=\"line\"><span class=\"comment\"> 26: aload_2</span></span><br><span class=\"line\"><span class=\"comment\"> 27: invokevirtual #6                  // Method java/lang/Thread.start:()V</span></span><br><span class=\"line\"><span class=\"comment\"> 30: aload_3</span></span><br><span class=\"line\"><span class=\"comment\"> 31: invokevirtual #6                  // Method java/lang/Thread.start:()V</span></span><br><span class=\"line\"><span class=\"comment\"> 34: return</span></span><br><span class=\"line\"><span class=\"comment\"> static &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> Code:</span></span><br><span class=\"line\"><span class=\"comment\"> 0: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class=\"line\"><span class=\"comment\"> 3: new           #8                  // class java/lang/StringBuilder</span></span><br><span class=\"line\"><span class=\"comment\"> 6: dup</span></span><br><span class=\"line\"><span class=\"comment\"> 7: invokespecial #9                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\"><span class=\"comment\"> 10: invokestatic  #10                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;</span></span><br><span class=\"line\"><span class=\"comment\"> 13: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;</span></span><br><span class=\"line\"><span class=\"comment\"> 16: ldc           #12                 // String initDeadLoopClass</span></span><br><span class=\"line\"><span class=\"comment\"> 18: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class=\"line\"><span class=\"comment\"> 21: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class=\"line\"><span class=\"comment\"> 24: invokevirtual #15                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class=\"line\"><span class=\"comment\"> 27: goto          27</span></span><br><span class=\"line\"><span class=\"comment\"> &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread[main,<span class=\"number\">5</span>,main]initDeadLoopClass</span><br><span class=\"line\">通过分析：一条线程正在死循环以模拟长时间操作，另外一条线程在阻塞等待.</span><br><span class=\"line\">线程堆栈如下:</span><br><span class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">29</span> <span class=\"number\">20</span>:<span class=\"number\">05</span>:<span class=\"number\">00</span></span><br><span class=\"line\"><span class=\"function\">Full thread dump Java <span class=\"title\">HotSpot</span><span class=\"params\">(TM)</span> 64-Bit Server <span class=\"title\">VM</span> <span class=\"params\">(<span class=\"number\">25.91</span>-b14 mixed mode)</span>:</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">&quot;Monitor Ctrl-Break&quot; #10 daemon prio</span>=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x0000000018554800</span> nid=<span class=\"number\">0x4920</span> runnable [<span class=\"number\">0x00000000190de000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">        at java.net.DualStackPlainSocketImpl.accept0(Native Method)</span><br><span class=\"line\">        at java.net.DualStackPlainSocketImpl.socketAccept(DualStackPlainSocketImpl.java:<span class=\"number\">131</span>)</span><br><span class=\"line\">        at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:<span class=\"number\">409</span>)</span><br><span class=\"line\">        at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:<span class=\"number\">199</span>)</span><br><span class=\"line\">        - locked &lt;<span class=\"number\">0x00000000d79d67c0</span>&gt; (a java.net.SocksSocketImpl)</span><br><span class=\"line\">        at java.net.ServerSocket.implAccept(ServerSocket.java:<span class=\"number\">545</span>)</span><br><span class=\"line\">        at java.net.ServerSocket.accept(ServerSocket.java:<span class=\"number\">513</span>)</span><br><span class=\"line\">        at com.intellij.rt.execution.application.AppMain$<span class=\"number\">1.</span>run(AppMain.java:<span class=\"number\">79</span>)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Finalizer&quot;</span> #<span class=\"number\">3</span> daemon prio=<span class=\"number\">8</span> os_prio=<span class=\"number\">1</span> tid=<span class=\"number\">0x00000000027d8800</span> nid=<span class=\"number\">0x2d14</span> in Object.wait() [<span class=\"number\">0x000000001837e000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">        at java.lang.Object.wait(Native Method)</span><br><span class=\"line\">        - waiting on &lt;<span class=\"number\">0x00000000d7808ee0</span>&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class=\"line\">        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:<span class=\"number\">143</span>)</span><br><span class=\"line\">        - locked &lt;<span class=\"number\">0x00000000d7808ee0</span>&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class=\"line\">        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:<span class=\"number\">164</span>)</span><br><span class=\"line\">        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:<span class=\"number\">209</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Reference Handler&quot;</span> #<span class=\"number\">2</span> daemon prio=<span class=\"number\">10</span> os_prio=<span class=\"number\">2</span> tid=<span class=\"number\">0x00000000027d3000</span> nid=<span class=\"number\">0x4914</span> in Object.wait() [<span class=\"number\">0x000000001827f000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">        at java.lang.Object.wait(Native Method)</span><br><span class=\"line\">        - waiting on &lt;<span class=\"number\">0x00000000d7806b50</span>&gt; (a java.lang.ref.Reference$Lock)</span><br><span class=\"line\">        at java.lang.Object.wait(Object.java:<span class=\"number\">502</span>)</span><br><span class=\"line\">        at java.lang.ref.Reference.tryHandlePending(Reference.java:<span class=\"number\">191</span>)</span><br><span class=\"line\">        - locked &lt;<span class=\"number\">0x00000000d7806b50</span>&gt; (a java.lang.ref.Reference$Lock)</span><br><span class=\"line\">        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:<span class=\"number\">153</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;main&quot;</span> #<span class=\"number\">1</span> prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x000000000220e000</span> nid=<span class=\"number\">0x450c</span> runnable [<span class=\"number\">0x00000000026de000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">        at sf.jvm.load.DeadLoopClass.&lt;clinit&gt;(DeadLoopClass.java:<span class=\"number\">8</span>)</span><br><span class=\"line\">        at java.lang.Class.forName0(Native Method)</span><br><span class=\"line\">        at java.lang.Class.forName(Class.java:<span class=\"number\">264</span>)</span><br><span class=\"line\">        at com.intellij.rt.execution.application.AppMain.main(AppMain.java:<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;VM Thread&quot;</span> os_prio=<span class=\"number\">2</span> tid=<span class=\"number\">0x0000000016ff7000</span> nid=<span class=\"number\">0x6d4</span> runnable</span><br><span class=\"line\"><span class=\"string\">&quot;GC task thread#0 (ParallelGC)&quot;</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00000000026f7800</span> nid=<span class=\"number\">0x4890</span> runnable</span><br><span class=\"line\"><span class=\"string\">&quot;GC task thread#1 (ParallelGC)&quot;</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00000000026f9000</span> nid=<span class=\"number\">0x4514</span> runnable</span><br><span class=\"line\"><span class=\"string\">&quot;VM Periodic Task Thread&quot;</span> os_prio=<span class=\"number\">2</span> tid=<span class=\"number\">0x00000000184e1800</span> nid=<span class=\"number\">0x4934</span> waiting on condition</span><br><span class=\"line\">JNI global references: <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-类加载器\"><a href=\"#2-类加载器\" class=\"headerlink\" title=\"2 类加载器\"></a>2 类加载器</h3><h4 id=\"2-1-类加载器概述\"><a href=\"#2-1-类加载器概述\" class=\"headerlink\" title=\"2.1 　类加载器概述\"></a>2.1 　类加载器概述</h4><p>虚拟机设计团队把类加载阶段中的“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作放到 Java 虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块被称为“类加载器”。<br>类加载器可以说是 Java 语言的一项创新，也是 Java 语言流行的重要原因之一，它最初是为了满足 JavaApplet 的需求而被开发出来的。如今 JavaApplet 技术基本上已经死掉[1]，但类加载器却在类层次划分、OSGi、热部署、代码加密等领域大放异彩，成为了 Java 技术体系中一块重要的基石。<br>类加载器（class loader）用来加载 Java 类到 Java 虚拟机中。一般来说，Java 虚拟机使用 Java 类的方式如下：Java 源程序（.java 文件）在经过 Java 编译器编译之后就被转换成 Java 字节代码（.class 文件）。类加载器负责读取 Java 字节代码，并转换成 java.lang.Class 类的一个实例。每个这样的实例用来表示一个 Java 类。通过此实例的 newInstance()方法就可以创建出该类的一个对象。实际的情况可能更加复杂，比如 Java 字节代码可能是通过工具动态生成的，也可能是通过网络下载的。</p>\n<h4 id=\"2-2-类加载器的结构\"><a href=\"#2-2-类加载器的结构\" class=\"headerlink\" title=\"2.2 类加载器的结构\"></a>2.2 类加载器的结构</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph BT</span><br><span class=\"line\">启动类加载器--&gt;扩展类加载器</span><br><span class=\"line\">扩展类加载器--&gt;应用类加载器</span><br><span class=\"line\">应用类加载器--&gt;自定义加载器1</span><br><span class=\"line\">应用类加载器--&gt;自定义加载器2</span><br></pre></td></tr></table></figure>\n\n<p>Java 虚拟机的角度讲，只存在两种不同的类加载器：一种是启动类加载器（BootstrapClassLoader），这个类加载器使用 C++语言实现[2]，是虚拟机自身的一部分；另外一种就是所有其他的类加载器，这些类加载器都由 Java 语言实现，独立于虚拟机外部，并且全都继承自抽象类 java.lang.ClassLoader。从 Java 开发人员的角度来看，类加载器就还可以划分得更细致一些，绝大部分 Java 程序都会使用到以下三种系统提供的类加载器：：<br>引导类加载器（bootstrap class loader）：它用来加载 Java 的核心库，是用原生代码来实现的，并不继承自 java.lang.ClassLoader。<br>扩展类加载器（extensions class loader）：它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。<br>应用程序类加载器（application class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。<br>除了系统提供的类加载器以外，开发人员可以通过继承 java.lang.ClassLoader 类的方式实现自己的类加载器，以满足一些特殊的需求。</p>\n<p>双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p>\n<p>破坏双亲委派模型<br>双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前——即 JDK1.2 发布之前。由于双亲委派模型在 JDK1.2 之后才被引入的，而类加载器和抽象类 java.lang.ClassLoader 则在 JDK1.0 时代就已经存在，面对已经存在的用户自定义类加载器的实现代码，Java 设计者们引入双亲委派模型时不得不做出一些妥协。为了向前兼容，JDK1.2 之后的 java.lang.ClassLoader 添加了一个新的 protected 方法 findClass()，<br>双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷所导致的，双亲委派很好地解决了各个类加载器的基础类的统一问题（越基础的类由越上层的加载器进行加载），基础类之所以被称为“基础”，是因为它们总是作为被用户代码调用的 API，但世事往往没有绝对的完美，如果基础类又要调用回用户的代码，那该怎么办了？这并非是不可能的事情，一个典型的例子便是 JNDI 服务，JNDI 现在已经是 Java 的标准服务，它的代码由启动类加载器去加载（在 JDK1.3 时代放进去的 rt.jar），但 JNDI 的目的就是对资源进行集中管理和查找，它需要调用由独立厂商实现并部署在应用程序的 ClassPath 下的 JNDI 接口提供者（SPI，ServiceProviderInterface）的代码，但启动类加载器不可能“认识”这些代码啊！那该怎么办？为了解决这个困境，Java 设计团队只好引入了一个不太优雅的设计：线程上下文类加载器（ThreadContextClassLoader）。这个类加载器可以通过 java.lang.Thread 类的 setContextClassLoaser()方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个；如果在应用程序的全局范围内都没有设置过，那么这个类加载器默认就是应用程序类加载器。有了线程上下文类加载器，就可以做一些“舞弊”的事情了，JNDI 服务使用这个线程上下文类加载器去加载所需要的 SPI 代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上就是打通了双亲委派模型的层次结构来逆向使用类加载器，已经违背了双亲委派模型的一般性原则，但这也是无可奈何的事情。Java 中所有涉及 SPI 的加载动作基本上都采用这种方式，例如 JNDI、JDBC、JCE、JAXB 和 JBI 等。<br>双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的，这里所说的“动态性”指的是当前一些非常“热”门的名词：代码热替换（HotSwap）、模块热部署（HotDeployment）等，说白了就是希望应用程序能像我们的电脑外设那样，插上鼠标或 U 盘，不用重启机器就能立即使用，鼠标有问题或要升级就换个鼠标，不用停机也不用重启。对于个人电脑来说，重启一次其实没有什么大不了的，但对于一些生产系统来说，关机重启一次可能就要被列为生产事故，这种情况下热部署就对软件开发者，尤其是企业级软件开发者具有很大的吸引力。在 JSR-297[4]、JSR-277[5]规范从纸上标准变成真正可运行的程序之前，OSGi 是当前业界“事实上”的 Java 模块化标准，而 OSGi 实现模块化热部署的关键则是它自定义的类加载器机制的实现。每一个程序模块（OSGi 中称为 Bundle）都有一个自己的类加载器，当需要更换一个 Bundle 时，就把 Bundle 连同类加载器一起换掉以实现代码的热替换。<br>在 OSGi 环境下，类加载器不再是双亲委派模型中的树状结构，而是进一步发展为网状结构，当收到类加载请求时，OSGi 将按照下面的顺序进行类搜索：</p>\n<blockquote>\n<p>（1）将以 java.*开头的类，委派给父类加载器加载。<br>（2）否则，将委派列表名单内的类，委派给父类加载器加载。<br>（3）否则，将 Import 列表中的类，委派给 Export 这个类的 Bundle 的类加载器加载。<br>（4）否则，查找当前 Bundle 的 ClassPath，使用自己的类加载器加载。<br>（5）否则，查找类是否在自己的 FragmentBundle 中，如果在，则委派给 FragmentBundle 的类加载器加载。<br>（6）否则，查找 DynamicImport 列表的 Bundle，委派给对应 Bundle 的类加载器加载。<br>（7）否则，类查找失败。上面的查找顺序中只有开头两点仍然符合双亲委派规则，其余的类查找都是在平级的类加载器中进行的。</p>\n</blockquote>\n<p>虽然使用了“被破坏”这个词来形容上述不符合双亲委派模型原则的行为，但这里“被破坏”并不带有贬义的感情色彩。只要有足够意义和理由，突破已有的原则就可算作一种创新。正如 OSGi 中的类加载器并不符合传统的双亲委派的类加载器，并且业界对其为了实现热部署而带来的额外的高复杂度还存在不少争议，但在 Java 程序员中基本有一个共识：OSGi 中对类加载器的使用是很值得学习的，弄懂了 OSGi 的实现，自然就明白了类加载器的精粹。<br>//TODO<br>OSGI</p>\n<h4 id=\"2-3-自定义类加载器实例\"><a href=\"#2-3-自定义类加载器实例\" class=\"headerlink\" title=\"2.3 自定义类加载器实例:\"></a>2.3 自定义类加载器实例:</h4><h5 id=\"2-3-1-文件加载\"><a href=\"#2-3-1-文件加载\" class=\"headerlink\" title=\"2.3.1 文件加载:\"></a>2.3.1 文件加载:</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> sf.jvm.load.classloader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystemClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassLoader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String rootDir;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FileSystemClassLoader</span><span class=\"params\">(String rootDir)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.rootDir = rootDir;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">      <span class=\"keyword\">byte</span>[] classData = getClassData(name);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (classData == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassNotFoundException();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> defineClass(name, classData, <span class=\"number\">0</span>, classData.length);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] getClassData(String className) &#123;</span><br><span class=\"line\">      String path = classNameToPath(className);</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          InputStream ins = <span class=\"keyword\">new</span> FileInputStream(path);</span><br><span class=\"line\">          ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">          <span class=\"keyword\">int</span> bufferSize = <span class=\"number\">4096</span>;</span><br><span class=\"line\">          <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[bufferSize];</span><br><span class=\"line\">          <span class=\"keyword\">int</span> bytesNumRead = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> ((bytesNumRead = ins.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">              baos.write(buffer, <span class=\"number\">0</span>, bytesNumRead);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> baos.toByteArray();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">classNameToPath</span><span class=\"params\">(String className)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> rootDir + File.separatorChar + className.replace(<span class=\"string\">&#x27;.&#x27;</span>, File.separatorChar) + <span class=\"string\">&quot;.class&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      String classDataRootPath = <span class=\"string\">&quot;D:\\\\Code\\\\Jcode\\\\notes\\\\java-jlp\\\\java-jvm\\\\target\\\\classes&quot;</span>;</span><br><span class=\"line\">      FileSystemClassLoader fileSystemClassLoader1 = <span class=\"keyword\">new</span> FileSystemClassLoader(classDataRootPath);</span><br><span class=\"line\">      FileSystemClassLoader fileSystemClassLoader2 = <span class=\"keyword\">new</span> FileSystemClassLoader(classDataRootPath);</span><br><span class=\"line\">      String className = <span class=\"string\">&quot;sf.jvm.load.simple.Sample&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          Class&lt;?&gt; class1 = fileSystemClassLoader1.loadClass(className);</span><br><span class=\"line\">          Object obj1 = class1.newInstance();</span><br><span class=\"line\">          Class&lt;?&gt; class2 = fileSystemClassLoader1.loadClass(className);</span><br><span class=\"line\">          Object obj2 = class2.newInstance();</span><br><span class=\"line\">          Method setSampleMethod = class1.getMethod(<span class=\"string\">&quot;setSample&quot;</span>, Object.class);</span><br><span class=\"line\">          setSampleMethod.invoke(obj1, obj2);</span><br><span class=\"line\">          Method setSampleMethod2 = class1.getMethod(<span class=\"string\">&quot;compare&quot;</span>, Object.class);</span><br><span class=\"line\">          setSampleMethod2.invoke(obj1, obj2);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-2-网络加载\"><a href=\"#2-3-2-网络加载\" class=\"headerlink\" title=\"2.3.2 网络加载:\"></a>2.3.2 网络加载:</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> sf.jvm.load.classloader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sf.jvm.load.api.ICalculator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassLoader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String rootUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NetworkClassLoader</span><span class=\"params\">(String rootUrl)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.rootUrl = rootUrl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">      <span class=\"keyword\">byte</span>[] classData = getClassData(name);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (classData == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassNotFoundException();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> defineClass(name, classData, <span class=\"number\">0</span>, classData.length);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] getClassData(String className) &#123;</span><br><span class=\"line\">      String path = classNameToPath(className);</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          URL url = <span class=\"keyword\">new</span> URL(path);</span><br><span class=\"line\">          InputStream ins = url.openStream();</span><br><span class=\"line\">          ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">          <span class=\"keyword\">int</span> bufferSize = <span class=\"number\">4096</span>;</span><br><span class=\"line\">          <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[bufferSize];</span><br><span class=\"line\">          <span class=\"keyword\">int</span> bytesNumRead = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> ((bytesNumRead = ins.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">              baos.write(buffer, <span class=\"number\">0</span>, bytesNumRead);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> baos.toByteArray();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">classNameToPath</span><span class=\"params\">(String className)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> rootUrl + <span class=\"string\">&quot;/&quot;</span> + className.replace(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>) + <span class=\"string\">&quot;.class&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      String url = <span class=\"string\">&quot;http://localhost:8080/ClassloaderTest/classes&quot;</span>;</span><br><span class=\"line\">      NetworkClassLoader ncl = <span class=\"keyword\">new</span> NetworkClassLoader(url);</span><br><span class=\"line\">      String basicClassName = <span class=\"string\">&quot;sf.jvm.load.simple.CalculatorBasic&quot;</span>;</span><br><span class=\"line\">      String advancedClassName = <span class=\"string\">&quot;sf.jvm.load.simple.CalculatorAdvanced&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          Class&lt;?&gt; clazz = ncl.loadClass(basicClassName);</span><br><span class=\"line\">          ICalculator calculator = (ICalculator) clazz.newInstance();</span><br><span class=\"line\">          System.out.println(calculator.getVersion());</span><br><span class=\"line\">          clazz = ncl.loadClass(advancedClassName);</span><br><span class=\"line\">          calculator = (ICalculator) clazz.newInstance();</span><br><span class=\"line\">          System.out.println(calculator.getVersion());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"类加载机制\"><a href=\"#类加载机制\" class=\"headerlink\" title=\"类加载机制\"></a>类加载机制</h1><h3 id=\"1-类的加载过程\"><a href=\"#1-类的加载过程\" class=\"headerlink\" title=\"1. 类的加载过程\"></a>1. 类的加载过程</h3><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载（Loading）、验证（Verification）、准备(Preparation)、解析(Resolution)、初始化(Initialization)、使用(Using)和卸载(Unloading)7 个阶段。其中准备、验证、解析 3 个部分统称为连接（Linking）。如图所示:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">加载--&gt;验证</span><br><span class=\"line\">验证--&gt;准备</span><br><span class=\"line\">准备--&gt;解析</span><br><span class=\"line\">解析--&gt;初始化</span><br><span class=\"line\">初始化--&gt;使用</span><br><span class=\"line\">使用--&gt;卸载</span><br></pre></td></tr></table></figure>\n\n<p>加载、验证、准备、初始化和卸载这 5 个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始，而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 语言的运行时绑定（也称为动态绑定或晚期绑定）。以下陈述的内容都已 HotSpot 为基准。</p>\n<h4 id=\"1-1-加载\"><a href=\"#1-1-加载\" class=\"headerlink\" title=\"1.1 加载\"></a>1.1 加载</h4><p>虚拟机在加载阶段需要完成三件事:</p>\n<ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流，如 Class 文件,网络,动态生成,数据库等</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>\n<li>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口<br>加载阶段和连接阶段（Linking）的部分内容（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的内容，这两个阶段的开始时间仍然保持着固定的先后顺序。</li>\n</ol>\n<h4 id=\"1-2-验证\"><a href=\"#1-2-验证\" class=\"headerlink\" title=\"1.2 验证\"></a>1.2 验证</h4><p>验证是连接阶段的第一步，这一阶段的目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全，验证阶段大致会完成 4 个阶段的检验动作：</p>\n<ol>\n<li>文件格式验证：验证字节流是否符合 Class 文件格式的规范；例如：是否以魔术 0xCAFEBABE 开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。</li>\n<li>元数据验证：对字节码描述的信息进行语义分析（注意：对比 javac 编译阶段的语义分析），以保证其描述的信息符合 Java 语言规范的要求；例如：这个类是否有父类，除了 java.lang.Object 之外。</li>\n<li>字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</li>\n<li>符号引用验证：确保解析动作能正确执行。<br>验证阶段可能抛出一个 java.lang.IncompatibleClassChangeError 异常的子类，如 java.lang.IllegalAccessError、 java. lang. NoSuchFieldError、<br>验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用-Xverifynone 参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</li>\n</ol>\n<h4 id=\"1-3-准备\"><a href=\"#1-3-准备\" class=\"headerlink\" title=\"1.3 准备\"></a>1.3 准备</h4><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。这时候进行内存分配的仅包括类变量（被 static 修饰的变量），而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在堆中。其次，这里所说的初始值“通常情况”下是数据类型的零值.</p>\n<p>如下定义:public static int value=123; 那变量 value 在准备阶段过后的初始值为 0 而不是 123.因为这时候尚未开始执行任何 java 方法，而把 value 赋值为 123 的 putstatic 指令是程序被编译后，存放于类构造器()方法之中，所以把 value 赋值为 123 的动作将在初始化阶段才会执行。</p>\n<p>如下定义：public static final int value=123; 即当类字段的字段属性是 ConstantValue 时，会在准备阶段初始化为指定的值，所以标注为 final 之后，value 的值在准备阶段初始化为 123 而非 0.</p>\n<h4 id=\"1-4-解析\"><a href=\"#1-4-解析\" class=\"headerlink\" title=\"1.4 解析\"></a>1.4 解析</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。解析针对如下 7 类符号引用进行：</p>\n<blockquote>\n<p>类或接口<br>字段<br>类方法<br>接口方法<br>方法类型<br>方法句柄<br>调用点限定符</p>\n</blockquote>\n<h4 id=\"1-5-初始化\"><a href=\"#1-5-初始化\" class=\"headerlink\" title=\"1.5 初始化\"></a>1.5 初始化</h4><p>类初始化阶段是类加载过程的最后一步，才真正开始执行类中定义的 Java 程序代码（或者说是字节码）。前面的类加载过程中，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。</p>\n<p>在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，则是根据程序员通过程序制定的主观计划去初始化类变量和其他资源，或者可以从另外一个角度来表达：初始化阶段是执行类构造器<clinit>()方法的过程。我们放到后面再讲<clinit>()方法是怎么生成的，在这里，我们先看一下<clinit>()方法执行过程中可能会影响程序运行行为的一些特点和细节，这部分相对更贴近于普通的程序开发人员[7]：<br>·<clinit>()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块中可以赋值，但是不能访问。<br>·<clinit>()方法与类的构造函数（或者说实例构造器<clinit>()方法）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的<clinit>()方法执行之前，父类的<clinit>()方法已经执行完毕。因此在虚拟机中第一个被执行的<clinit>()方法的类肯定是 java.lang.Object。<br>·由于父类的<clinit>()方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作，如下代码执行字段 B 的值将会是 2 而不是 1。<br><clinit>()方法执行顺序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> sf.jvm.load;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> A = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        A = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sub</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> B = A;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getB</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> B;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">        System.out.println(Sub.B);</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Sub().getB());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> Compiled from &quot;Parent.java&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> class sf.jvm.load.Parent &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> public static int A;</span></span><br><span class=\"line\"><span class=\"comment\"> sf.jvm.load.Parent();</span></span><br><span class=\"line\"><span class=\"comment\"> Code:</span></span><br><span class=\"line\"><span class=\"comment\"> 0: aload_0</span></span><br><span class=\"line\"><span class=\"comment\"> 1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\"><span class=\"comment\"> 4: return</span></span><br><span class=\"line\"><span class=\"comment\"> public int getA();</span></span><br><span class=\"line\"><span class=\"comment\"> Code:</span></span><br><span class=\"line\"><span class=\"comment\"> 0: getstatic     #2                  // Field A:I</span></span><br><span class=\"line\"><span class=\"comment\"> 3: ireturn</span></span><br><span class=\"line\"><span class=\"comment\"> static &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> Code:</span></span><br><span class=\"line\"><span class=\"comment\"> 0: iconst_1</span></span><br><span class=\"line\"><span class=\"comment\"> 1: putstatic     #2                  // Field A:I</span></span><br><span class=\"line\"><span class=\"comment\"> 4: iconst_2</span></span><br><span class=\"line\"><span class=\"comment\"> 5: putstatic     #2                  // Field A:I</span></span><br><span class=\"line\"><span class=\"comment\"> 8: return</span></span><br><span class=\"line\"><span class=\"comment\"> &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<p>·<clinit>()方法对于类或接口来说并不是必须的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成<clinit>()方法。<br>·接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成<clinit>()方法。但接口与类不同的是，执行接口的<clinit>()方法不需要先执行父接口的<clinit>()方法。只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也一样不会执行接口的<clinit>()方法。<br>·虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确地加锁和同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，直到活动线程执行<clinit>()方法完毕。如果在一个类的<clinit>()方法中有耗时很长的操作，那就可能造成多个进程阻塞，在实际应用中这种阻塞往往是很隐蔽的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> sf.jvm.load;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeadLoopClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果不加上这个if语句，编译器将提示&quot;Initializerdoesnotcompletenormally&quot;并拒绝编译</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread() + <span class=\"string\">&quot;initDeadLoopClass&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Runnable script = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread() + <span class=\"string\">&quot;start&quot;</span>);</span><br><span class=\"line\">                DeadLoopClass dlc = <span class=\"keyword\">new</span> DeadLoopClass();</span><br><span class=\"line\">                System.out.println(Thread.currentThread() + <span class=\"string\">&quot;runover&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(script);</span><br><span class=\"line\">        Thread thread2 = <span class=\"keyword\">new</span> Thread(script);</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> &quot;C:\\Program Files\\Java\\jdk1.8.0_91\\bin\\javap.exe&quot; -c sf.jvm.load.DeadLoopClass</span></span><br><span class=\"line\"><span class=\"comment\"> Compiled from &quot;DeadLoopClass.java&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> class sf.jvm.load.DeadLoopClass &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> sf.jvm.load.DeadLoopClass();</span></span><br><span class=\"line\"><span class=\"comment\"> Code:</span></span><br><span class=\"line\"><span class=\"comment\"> 0: aload_0</span></span><br><span class=\"line\"><span class=\"comment\"> 1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\"><span class=\"comment\"> 4: return</span></span><br><span class=\"line\"><span class=\"comment\"> public static void main(java.lang.String[]);</span></span><br><span class=\"line\"><span class=\"comment\"> Code:</span></span><br><span class=\"line\"><span class=\"comment\"> 0: new           #2                  // class sf/jvm/load/DeadLoopClass$1</span></span><br><span class=\"line\"><span class=\"comment\"> 3: dup</span></span><br><span class=\"line\"><span class=\"comment\"> 4: invokespecial #3                  // Method sf/jvm/load/DeadLoopClass$1.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\"><span class=\"comment\"> 7: astore_1</span></span><br><span class=\"line\"><span class=\"comment\"> 8: new           #4                  // class java/lang/Thread</span></span><br><span class=\"line\"><span class=\"comment\"> 11: dup</span></span><br><span class=\"line\"><span class=\"comment\"> 12: aload_1</span></span><br><span class=\"line\"><span class=\"comment\"> 13: invokespecial #5                  // Method java/lang/Thread.&quot;&lt;init&gt;&quot;:(Ljava/lang/Runnable;)V</span></span><br><span class=\"line\"><span class=\"comment\"> 16: astore_2</span></span><br><span class=\"line\"><span class=\"comment\"> 17: new           #4                  // class java/lang/Thread</span></span><br><span class=\"line\"><span class=\"comment\"> 20: dup</span></span><br><span class=\"line\"><span class=\"comment\"> 21: aload_1</span></span><br><span class=\"line\"><span class=\"comment\"> 22: invokespecial #5                  // Method java/lang/Thread.&quot;&lt;init&gt;&quot;:(Ljava/lang/Runnable;)V</span></span><br><span class=\"line\"><span class=\"comment\"> 25: astore_3</span></span><br><span class=\"line\"><span class=\"comment\"> 26: aload_2</span></span><br><span class=\"line\"><span class=\"comment\"> 27: invokevirtual #6                  // Method java/lang/Thread.start:()V</span></span><br><span class=\"line\"><span class=\"comment\"> 30: aload_3</span></span><br><span class=\"line\"><span class=\"comment\"> 31: invokevirtual #6                  // Method java/lang/Thread.start:()V</span></span><br><span class=\"line\"><span class=\"comment\"> 34: return</span></span><br><span class=\"line\"><span class=\"comment\"> static &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> Code:</span></span><br><span class=\"line\"><span class=\"comment\"> 0: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class=\"line\"><span class=\"comment\"> 3: new           #8                  // class java/lang/StringBuilder</span></span><br><span class=\"line\"><span class=\"comment\"> 6: dup</span></span><br><span class=\"line\"><span class=\"comment\"> 7: invokespecial #9                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\"><span class=\"comment\"> 10: invokestatic  #10                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;</span></span><br><span class=\"line\"><span class=\"comment\"> 13: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;</span></span><br><span class=\"line\"><span class=\"comment\"> 16: ldc           #12                 // String initDeadLoopClass</span></span><br><span class=\"line\"><span class=\"comment\"> 18: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class=\"line\"><span class=\"comment\"> 21: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class=\"line\"><span class=\"comment\"> 24: invokevirtual #15                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class=\"line\"><span class=\"comment\"> 27: goto          27</span></span><br><span class=\"line\"><span class=\"comment\"> &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread[main,<span class=\"number\">5</span>,main]initDeadLoopClass</span><br><span class=\"line\">通过分析：一条线程正在死循环以模拟长时间操作，另外一条线程在阻塞等待.</span><br><span class=\"line\">线程堆栈如下:</span><br><span class=\"line\"><span class=\"number\">2017</span>-<span class=\"number\">07</span>-<span class=\"number\">29</span> <span class=\"number\">20</span>:<span class=\"number\">05</span>:<span class=\"number\">00</span></span><br><span class=\"line\"><span class=\"function\">Full thread dump Java <span class=\"title\">HotSpot</span><span class=\"params\">(TM)</span> 64-Bit Server <span class=\"title\">VM</span> <span class=\"params\">(<span class=\"number\">25.91</span>-b14 mixed mode)</span>:</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">&quot;Monitor Ctrl-Break&quot; #10 daemon prio</span>=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x0000000018554800</span> nid=<span class=\"number\">0x4920</span> runnable [<span class=\"number\">0x00000000190de000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">        at java.net.DualStackPlainSocketImpl.accept0(Native Method)</span><br><span class=\"line\">        at java.net.DualStackPlainSocketImpl.socketAccept(DualStackPlainSocketImpl.java:<span class=\"number\">131</span>)</span><br><span class=\"line\">        at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:<span class=\"number\">409</span>)</span><br><span class=\"line\">        at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:<span class=\"number\">199</span>)</span><br><span class=\"line\">        - locked &lt;<span class=\"number\">0x00000000d79d67c0</span>&gt; (a java.net.SocksSocketImpl)</span><br><span class=\"line\">        at java.net.ServerSocket.implAccept(ServerSocket.java:<span class=\"number\">545</span>)</span><br><span class=\"line\">        at java.net.ServerSocket.accept(ServerSocket.java:<span class=\"number\">513</span>)</span><br><span class=\"line\">        at com.intellij.rt.execution.application.AppMain$<span class=\"number\">1.</span>run(AppMain.java:<span class=\"number\">79</span>)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Finalizer&quot;</span> #<span class=\"number\">3</span> daemon prio=<span class=\"number\">8</span> os_prio=<span class=\"number\">1</span> tid=<span class=\"number\">0x00000000027d8800</span> nid=<span class=\"number\">0x2d14</span> in Object.wait() [<span class=\"number\">0x000000001837e000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">        at java.lang.Object.wait(Native Method)</span><br><span class=\"line\">        - waiting on &lt;<span class=\"number\">0x00000000d7808ee0</span>&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class=\"line\">        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:<span class=\"number\">143</span>)</span><br><span class=\"line\">        - locked &lt;<span class=\"number\">0x00000000d7808ee0</span>&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class=\"line\">        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:<span class=\"number\">164</span>)</span><br><span class=\"line\">        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:<span class=\"number\">209</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Reference Handler&quot;</span> #<span class=\"number\">2</span> daemon prio=<span class=\"number\">10</span> os_prio=<span class=\"number\">2</span> tid=<span class=\"number\">0x00000000027d3000</span> nid=<span class=\"number\">0x4914</span> in Object.wait() [<span class=\"number\">0x000000001827f000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">        at java.lang.Object.wait(Native Method)</span><br><span class=\"line\">        - waiting on &lt;<span class=\"number\">0x00000000d7806b50</span>&gt; (a java.lang.ref.Reference$Lock)</span><br><span class=\"line\">        at java.lang.Object.wait(Object.java:<span class=\"number\">502</span>)</span><br><span class=\"line\">        at java.lang.ref.Reference.tryHandlePending(Reference.java:<span class=\"number\">191</span>)</span><br><span class=\"line\">        - locked &lt;<span class=\"number\">0x00000000d7806b50</span>&gt; (a java.lang.ref.Reference$Lock)</span><br><span class=\"line\">        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:<span class=\"number\">153</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;main&quot;</span> #<span class=\"number\">1</span> prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x000000000220e000</span> nid=<span class=\"number\">0x450c</span> runnable [<span class=\"number\">0x00000000026de000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">        at sf.jvm.load.DeadLoopClass.&lt;clinit&gt;(DeadLoopClass.java:<span class=\"number\">8</span>)</span><br><span class=\"line\">        at java.lang.Class.forName0(Native Method)</span><br><span class=\"line\">        at java.lang.Class.forName(Class.java:<span class=\"number\">264</span>)</span><br><span class=\"line\">        at com.intellij.rt.execution.application.AppMain.main(AppMain.java:<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;VM Thread&quot;</span> os_prio=<span class=\"number\">2</span> tid=<span class=\"number\">0x0000000016ff7000</span> nid=<span class=\"number\">0x6d4</span> runnable</span><br><span class=\"line\"><span class=\"string\">&quot;GC task thread#0 (ParallelGC)&quot;</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00000000026f7800</span> nid=<span class=\"number\">0x4890</span> runnable</span><br><span class=\"line\"><span class=\"string\">&quot;GC task thread#1 (ParallelGC)&quot;</span> os_prio=<span class=\"number\">0</span> tid=<span class=\"number\">0x00000000026f9000</span> nid=<span class=\"number\">0x4514</span> runnable</span><br><span class=\"line\"><span class=\"string\">&quot;VM Periodic Task Thread&quot;</span> os_prio=<span class=\"number\">2</span> tid=<span class=\"number\">0x00000000184e1800</span> nid=<span class=\"number\">0x4934</span> waiting on condition</span><br><span class=\"line\">JNI global references: <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-类加载器\"><a href=\"#2-类加载器\" class=\"headerlink\" title=\"2 类加载器\"></a>2 类加载器</h3><h4 id=\"2-1-类加载器概述\"><a href=\"#2-1-类加载器概述\" class=\"headerlink\" title=\"2.1 　类加载器概述\"></a>2.1 　类加载器概述</h4><p>虚拟机设计团队把类加载阶段中的“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作放到 Java 虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块被称为“类加载器”。<br>类加载器可以说是 Java 语言的一项创新，也是 Java 语言流行的重要原因之一，它最初是为了满足 JavaApplet 的需求而被开发出来的。如今 JavaApplet 技术基本上已经死掉[1]，但类加载器却在类层次划分、OSGi、热部署、代码加密等领域大放异彩，成为了 Java 技术体系中一块重要的基石。<br>类加载器（class loader）用来加载 Java 类到 Java 虚拟机中。一般来说，Java 虚拟机使用 Java 类的方式如下：Java 源程序（.java 文件）在经过 Java 编译器编译之后就被转换成 Java 字节代码（.class 文件）。类加载器负责读取 Java 字节代码，并转换成 java.lang.Class 类的一个实例。每个这样的实例用来表示一个 Java 类。通过此实例的 newInstance()方法就可以创建出该类的一个对象。实际的情况可能更加复杂，比如 Java 字节代码可能是通过工具动态生成的，也可能是通过网络下载的。</p>\n<h4 id=\"2-2-类加载器的结构\"><a href=\"#2-2-类加载器的结构\" class=\"headerlink\" title=\"2.2 类加载器的结构\"></a>2.2 类加载器的结构</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph BT</span><br><span class=\"line\">启动类加载器--&gt;扩展类加载器</span><br><span class=\"line\">扩展类加载器--&gt;应用类加载器</span><br><span class=\"line\">应用类加载器--&gt;自定义加载器1</span><br><span class=\"line\">应用类加载器--&gt;自定义加载器2</span><br></pre></td></tr></table></figure>\n\n<p>Java 虚拟机的角度讲，只存在两种不同的类加载器：一种是启动类加载器（BootstrapClassLoader），这个类加载器使用 C++语言实现[2]，是虚拟机自身的一部分；另外一种就是所有其他的类加载器，这些类加载器都由 Java 语言实现，独立于虚拟机外部，并且全都继承自抽象类 java.lang.ClassLoader。从 Java 开发人员的角度来看，类加载器就还可以划分得更细致一些，绝大部分 Java 程序都会使用到以下三种系统提供的类加载器：：<br>引导类加载器（bootstrap class loader）：它用来加载 Java 的核心库，是用原生代码来实现的，并不继承自 java.lang.ClassLoader。<br>扩展类加载器（extensions class loader）：它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。<br>应用程序类加载器（application class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。<br>除了系统提供的类加载器以外，开发人员可以通过继承 java.lang.ClassLoader 类的方式实现自己的类加载器，以满足一些特殊的需求。</p>\n<p>双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p>\n<p>破坏双亲委派模型<br>双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前——即 JDK1.2 发布之前。由于双亲委派模型在 JDK1.2 之后才被引入的，而类加载器和抽象类 java.lang.ClassLoader 则在 JDK1.0 时代就已经存在，面对已经存在的用户自定义类加载器的实现代码，Java 设计者们引入双亲委派模型时不得不做出一些妥协。为了向前兼容，JDK1.2 之后的 java.lang.ClassLoader 添加了一个新的 protected 方法 findClass()，<br>双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷所导致的，双亲委派很好地解决了各个类加载器的基础类的统一问题（越基础的类由越上层的加载器进行加载），基础类之所以被称为“基础”，是因为它们总是作为被用户代码调用的 API，但世事往往没有绝对的完美，如果基础类又要调用回用户的代码，那该怎么办了？这并非是不可能的事情，一个典型的例子便是 JNDI 服务，JNDI 现在已经是 Java 的标准服务，它的代码由启动类加载器去加载（在 JDK1.3 时代放进去的 rt.jar），但 JNDI 的目的就是对资源进行集中管理和查找，它需要调用由独立厂商实现并部署在应用程序的 ClassPath 下的 JNDI 接口提供者（SPI，ServiceProviderInterface）的代码，但启动类加载器不可能“认识”这些代码啊！那该怎么办？为了解决这个困境，Java 设计团队只好引入了一个不太优雅的设计：线程上下文类加载器（ThreadContextClassLoader）。这个类加载器可以通过 java.lang.Thread 类的 setContextClassLoaser()方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个；如果在应用程序的全局范围内都没有设置过，那么这个类加载器默认就是应用程序类加载器。有了线程上下文类加载器，就可以做一些“舞弊”的事情了，JNDI 服务使用这个线程上下文类加载器去加载所需要的 SPI 代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上就是打通了双亲委派模型的层次结构来逆向使用类加载器，已经违背了双亲委派模型的一般性原则，但这也是无可奈何的事情。Java 中所有涉及 SPI 的加载动作基本上都采用这种方式，例如 JNDI、JDBC、JCE、JAXB 和 JBI 等。<br>双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的，这里所说的“动态性”指的是当前一些非常“热”门的名词：代码热替换（HotSwap）、模块热部署（HotDeployment）等，说白了就是希望应用程序能像我们的电脑外设那样，插上鼠标或 U 盘，不用重启机器就能立即使用，鼠标有问题或要升级就换个鼠标，不用停机也不用重启。对于个人电脑来说，重启一次其实没有什么大不了的，但对于一些生产系统来说，关机重启一次可能就要被列为生产事故，这种情况下热部署就对软件开发者，尤其是企业级软件开发者具有很大的吸引力。在 JSR-297[4]、JSR-277[5]规范从纸上标准变成真正可运行的程序之前，OSGi 是当前业界“事实上”的 Java 模块化标准，而 OSGi 实现模块化热部署的关键则是它自定义的类加载器机制的实现。每一个程序模块（OSGi 中称为 Bundle）都有一个自己的类加载器，当需要更换一个 Bundle 时，就把 Bundle 连同类加载器一起换掉以实现代码的热替换。<br>在 OSGi 环境下，类加载器不再是双亲委派模型中的树状结构，而是进一步发展为网状结构，当收到类加载请求时，OSGi 将按照下面的顺序进行类搜索：</p>\n<blockquote>\n<p>（1）将以 java.*开头的类，委派给父类加载器加载。<br>（2）否则，将委派列表名单内的类，委派给父类加载器加载。<br>（3）否则，将 Import 列表中的类，委派给 Export 这个类的 Bundle 的类加载器加载。<br>（4）否则，查找当前 Bundle 的 ClassPath，使用自己的类加载器加载。<br>（5）否则，查找类是否在自己的 FragmentBundle 中，如果在，则委派给 FragmentBundle 的类加载器加载。<br>（6）否则，查找 DynamicImport 列表的 Bundle，委派给对应 Bundle 的类加载器加载。<br>（7）否则，类查找失败。上面的查找顺序中只有开头两点仍然符合双亲委派规则，其余的类查找都是在平级的类加载器中进行的。</p>\n</blockquote>\n<p>虽然使用了“被破坏”这个词来形容上述不符合双亲委派模型原则的行为，但这里“被破坏”并不带有贬义的感情色彩。只要有足够意义和理由，突破已有的原则就可算作一种创新。正如 OSGi 中的类加载器并不符合传统的双亲委派的类加载器，并且业界对其为了实现热部署而带来的额外的高复杂度还存在不少争议，但在 Java 程序员中基本有一个共识：OSGi 中对类加载器的使用是很值得学习的，弄懂了 OSGi 的实现，自然就明白了类加载器的精粹。<br>//TODO<br>OSGI</p>\n<h4 id=\"2-3-自定义类加载器实例\"><a href=\"#2-3-自定义类加载器实例\" class=\"headerlink\" title=\"2.3 自定义类加载器实例:\"></a>2.3 自定义类加载器实例:</h4><h5 id=\"2-3-1-文件加载\"><a href=\"#2-3-1-文件加载\" class=\"headerlink\" title=\"2.3.1 文件加载:\"></a>2.3.1 文件加载:</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> sf.jvm.load.classloader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystemClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassLoader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String rootDir;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FileSystemClassLoader</span><span class=\"params\">(String rootDir)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.rootDir = rootDir;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">      <span class=\"keyword\">byte</span>[] classData = getClassData(name);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (classData == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassNotFoundException();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> defineClass(name, classData, <span class=\"number\">0</span>, classData.length);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] getClassData(String className) &#123;</span><br><span class=\"line\">      String path = classNameToPath(className);</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          InputStream ins = <span class=\"keyword\">new</span> FileInputStream(path);</span><br><span class=\"line\">          ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">          <span class=\"keyword\">int</span> bufferSize = <span class=\"number\">4096</span>;</span><br><span class=\"line\">          <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[bufferSize];</span><br><span class=\"line\">          <span class=\"keyword\">int</span> bytesNumRead = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> ((bytesNumRead = ins.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">              baos.write(buffer, <span class=\"number\">0</span>, bytesNumRead);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> baos.toByteArray();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">classNameToPath</span><span class=\"params\">(String className)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> rootDir + File.separatorChar + className.replace(<span class=\"string\">&#x27;.&#x27;</span>, File.separatorChar) + <span class=\"string\">&quot;.class&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      String classDataRootPath = <span class=\"string\">&quot;D:\\\\Code\\\\Jcode\\\\notes\\\\java-jlp\\\\java-jvm\\\\target\\\\classes&quot;</span>;</span><br><span class=\"line\">      FileSystemClassLoader fileSystemClassLoader1 = <span class=\"keyword\">new</span> FileSystemClassLoader(classDataRootPath);</span><br><span class=\"line\">      FileSystemClassLoader fileSystemClassLoader2 = <span class=\"keyword\">new</span> FileSystemClassLoader(classDataRootPath);</span><br><span class=\"line\">      String className = <span class=\"string\">&quot;sf.jvm.load.simple.Sample&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          Class&lt;?&gt; class1 = fileSystemClassLoader1.loadClass(className);</span><br><span class=\"line\">          Object obj1 = class1.newInstance();</span><br><span class=\"line\">          Class&lt;?&gt; class2 = fileSystemClassLoader1.loadClass(className);</span><br><span class=\"line\">          Object obj2 = class2.newInstance();</span><br><span class=\"line\">          Method setSampleMethod = class1.getMethod(<span class=\"string\">&quot;setSample&quot;</span>, Object.class);</span><br><span class=\"line\">          setSampleMethod.invoke(obj1, obj2);</span><br><span class=\"line\">          Method setSampleMethod2 = class1.getMethod(<span class=\"string\">&quot;compare&quot;</span>, Object.class);</span><br><span class=\"line\">          setSampleMethod2.invoke(obj1, obj2);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-2-网络加载\"><a href=\"#2-3-2-网络加载\" class=\"headerlink\" title=\"2.3.2 网络加载:\"></a>2.3.2 网络加载:</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> sf.jvm.load.classloader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sf.jvm.load.api.ICalculator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassLoader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String rootUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NetworkClassLoader</span><span class=\"params\">(String rootUrl)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.rootUrl = rootUrl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">      <span class=\"keyword\">byte</span>[] classData = getClassData(name);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (classData == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassNotFoundException();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> defineClass(name, classData, <span class=\"number\">0</span>, classData.length);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] getClassData(String className) &#123;</span><br><span class=\"line\">      String path = classNameToPath(className);</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          URL url = <span class=\"keyword\">new</span> URL(path);</span><br><span class=\"line\">          InputStream ins = url.openStream();</span><br><span class=\"line\">          ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">          <span class=\"keyword\">int</span> bufferSize = <span class=\"number\">4096</span>;</span><br><span class=\"line\">          <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[bufferSize];</span><br><span class=\"line\">          <span class=\"keyword\">int</span> bytesNumRead = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> ((bytesNumRead = ins.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">              baos.write(buffer, <span class=\"number\">0</span>, bytesNumRead);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> baos.toByteArray();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">classNameToPath</span><span class=\"params\">(String className)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> rootUrl + <span class=\"string\">&quot;/&quot;</span> + className.replace(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>) + <span class=\"string\">&quot;.class&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      String url = <span class=\"string\">&quot;http://localhost:8080/ClassloaderTest/classes&quot;</span>;</span><br><span class=\"line\">      NetworkClassLoader ncl = <span class=\"keyword\">new</span> NetworkClassLoader(url);</span><br><span class=\"line\">      String basicClassName = <span class=\"string\">&quot;sf.jvm.load.simple.CalculatorBasic&quot;</span>;</span><br><span class=\"line\">      String advancedClassName = <span class=\"string\">&quot;sf.jvm.load.simple.CalculatorAdvanced&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          Class&lt;?&gt; clazz = ncl.loadClass(basicClassName);</span><br><span class=\"line\">          ICalculator calculator = (ICalculator) clazz.newInstance();</span><br><span class=\"line\">          System.out.println(calculator.getVersion());</span><br><span class=\"line\">          clazz = ncl.loadClass(advancedClassName);</span><br><span class=\"line\">          calculator = (ICalculator) clazz.newInstance();</span><br><span class=\"line\">          System.out.println(calculator.getVersion());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"JVM软引用和弱引用","_content":"\n#### 一个场景\n```java\n如果有一个值，对应的键已经不再使用了, 将会出现什么情况呢？假定对某个键的最后一次引用已经消亡, \n不再有任何途径引用这个值的对象了, 但是, 由于在程序中的任何部分没有再出现这个键, \n所以, 这个 键/值 对无法从映射中删除.\n\n垃圾收集器怎么处理这样的场景呢? 引用出现了!\n```\n\n\n#### JAVA 中的引用\n**强引用 StrongReference**: 普通对象引用，只要还有强引用指向一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象。对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为 null，就是可以被垃圾收集的了，当然具体回收时机还是要看垃圾收集策略\n\n\n**软引用 SoftReference**: 一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。软引用通常用来实现内存敏感的缓存，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存, 维护一种非强制性的映射关系\n\n\n**弱引用 WeakReference**: 并不能使对象豁免垃圾收集，仅仅是提供一种访问在弱引用状态下对象的途径。这就可以用来构建一种没有特定约束的关系,如果试图获取时对象还在，就使用它，否则重现实例化。它同样是很多缓存实现的选择。这个类对象的引用，一般主要是在 major collection 的时候回收，所以它可能在 minor collection 后仍然存在。\n\n\n**虚引用 PhantomReference: **The object is the referent of a PhantomReference, and it has already been selected for collection and its finalizer (if any) has run. The term “reachable” is really a misnomer in this case, as there's no way for you to access the actual object. 不可达, 不影响对象的生命周期, 通过虚引用的 get() 方法永远返回 null.\n\n\n正如您可能猜到的，向对象生命周期图添加三个新的可选状态会造成混乱。尽管文档指出了从强可达到软、弱和虚到回收的逻辑过程，但实际过程取决于程序创建的引用对象。如果创建 WeakReference 但不创建SoftReference，则对象将直接从强可达到弱可达，再从最终确定到收集。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12487950/1619438588692-902fee26-a911-48f8-8556-09bbe528b41a.png#clientId=u1abc7148-9485-4&from=paste&height=206&id=u6a33dc73&margin=%5Bobject%20Object%5D&name=image.png&originHeight=206&originWidth=656&originalType=binary&size=8628&status=done&style=none&taskId=u0e0ed8d5-e6b2-418d-a350-ed9052bcb93&width=656)\n#### References and Referents\nA reference object is a layer of indirection between your program code and some other object, called a referent. Each reference object is constructed around its referent, and the referent cannot be changed.\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12487950/1619605033615-5ec8b4a0-689c-4d6f-bdee-effa11da7b26.png#clientId=u406342b3-8a6c-4&from=paste&height=82&id=Qh0bD&margin=%5Bobject%20Object%5D&name=image.png&originHeight=82&originWidth=490&originalType=binary&size=3281&status=done&style=none&taskId=u2755513c-92e7-4ec9-9371-4629adea141&width=490)\n#### 引用意义\n垃圾回收时的垃圾判定方式: [垃圾回收](https://rongcloud.yuque.com/ofnwgp/xdbvrt/scix1x) \nJVM 在进行垃圾回收的时候，会判定对象是否还存在引用，它会针对不同的引用类型分别对待。\n弱引用可以用来访问对象，但进行垃圾回收时，如果对象仅有弱引用指向，则仍然会被 GC 回收。\n\n\n\n\n#### 小例子\n```java\n// 软引用和弱引用的一个例子\n\n// 强引用\nString str = new String(\"str-value\");\nSoftReference<String> softRef = new SoftReference<String>(str); // 软引用\nstr = null; \t// 去掉强引用\nSystem.gc(); \t// 垃圾回收器进行回收\nSystem.out.println(softRef.get());\n\n// 强引用\nString abc = new String(\"abc-value\");\nWeakReference<String> weakRef = new WeakReference<String>(abc); // 弱引用\nabc = null;\t\t// 去掉强引用\nSystem.gc(); \t// 垃圾回收器进行回收\nSystem.out.println(weakRef.get());\n\n\n输出:\nstr-value\nnull\n```\n\n\n```java\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.WeakHashMap;\n\npublic class ReferenceDemo {\n    public static void main(String[] args) {\n        String a = new String(\"key-a\");\n        String b = new String(\"key-b\");\n\n        Map map = new HashMap();\n        map.put(a, \"aaa\");\n        map.put(b, \"bbb\");\n\n        Map weakmap = new WeakHashMap();\n        weakmap.put(a, \"aaaa\");\n        weakmap.put(b, \"bbbb\");\n\n        map.remove(a);\n        \n        a = null; // 移除 a 的强引用, key-a 也没人引用了; map.size();\n        b = null; // 移除 b 的强引用, key-b 还被 map 引用着 map.get(b); map.get(\"key-b\");\n\n        System.gc();\n\n        Iterator i = map.entrySet().iterator();\n        while (i.hasNext()) {\n            Map.Entry en = (Map.Entry) i.next();\n            System.out.println(\"map:\" + en.getKey() + \":\" + en.getValue());\n        }\n\n        Iterator j = weakmap.entrySet().iterator();\n        while (j.hasNext()) {\n            Map.Entry en = (Map.Entry) j.next();\n            System.out.println(\"weakmap:\" + en.getKey() + \":\" + en.getValue());\n        }\n    }\n}\n\n输出\nmap:key-b:bbb\nweakmap:key-b:bbbb\n```\n\n\n#### 想说的话\n```java\n// 平时使用的缓存存在的问题\n1. 对象都是强引用的\n2. 不确定单个对象占用的 byte size 大小\n3. 无法准确的估算创建缓存的时候为其指定一个准确的大小\n4. JVM 即使报 OOM 也不会清理这些缓存, 失去缓存的意义 => LRU \n\n// 弱引用缓存 WeakHashMap\n1. key 是经过弱引用化处理的, value 不是\n2. 即使不被主动调用 remove, clear 方法，元素也是会有机会清除的\n3. key-value 的清理时机, key 伴随 gc 清理, value 根据 ReferenceQueue 进行清理\n4. ReferenceQueue\n5. 为什么会存在 ReferenceQueue ? \n    我们可以通过 reference.get() 的返回值确定 referent 是否被回收了, \n\t但是现实是我们有大量的引用对象，这么操作是不实际的，一个好的解决方案就出来了 - 引用队列，\n    在构造时将引用与队列相关联，并且在清除引用后将其放在队列上。要发现哪些引用已被清除,\n    可以轮询队列。这可以通过后台线程完成，但是在创建新引用时轮询队列通常更简单(WeakHashMap就是这么做的)\n\t引用队列更像是监听器.\n    \n// 弱引用的特点更适合高速缓存\n\n// 引用的状态\n1. Active: \n\t新创建的实例处于活动状态, 由垃圾收集者进行特殊处理,\n\t收集器检测到引用对象的可访问性已更改为适当的状态后的一段时间，它会将实例的状态更改为挂起或不活动，\n    这取决于创建实例时是否向队列注册了实例, 在前一种情况下，它还将实例添加到挂起引用列表中.\n2. Pending: \n\t挂起引用列表的元素，等待引用处理程序线程排队,未注册的实例从不处于此状态.\n3. Enqueued\n\t在创建实例时向其注册的队列元素. 当实例从其引用队列中移除时,它将变为非活动状态.\n    未注册的实例从不处于此状态\n4. Inactive\n\t一旦实例变为非活动状态,其状态将永远不会再改变.\n```\n\n\n#### 弱引用的应用\nWeakHashMap (源码分析)\n```java\n1. 根据 API 文档，当 Map 中的键不再使用，键对应的键值也将自动在 WeakHashMap 中删除。WeakHashMap 中的键为弱键，和其他 Map 接口的实现有些不同；\n2. 和 HashMap 类似; 但是支持 key 和 value 为 null, 不存在红黑树结构，因为没必要\n3. 同样不是线程安全的，可以使用 Collections.synchronizedMap(Map map) 来使之线程安全\n4. 没有实现 Cloneable, Serializable接口, 没有必要\n\npublic class WeakHashMap<K,V> extends AbstractMap<K,V> implements Map<K,V> {\n\t// 基本组成属性\n\tprivate static final int DEFAULT_INITIAL_CAPACITY = 16;\n    private static final int MAXIMUM_CAPACITY = 1 << 30;\n    private static final float DEFAULT_LOAD_FACTOR = 0.75f;\n    private static final Object NULL_KEY = new Object();\n    Entry<K,V>[] table; // 这个 Entry 继承了 WeakReference\n    private int size;\n    private int threshold;\n    private final float loadFactor;\n    \n    /**\n  \t* Reference queue for cleared WeakEntries\n    *\n    * 队列放的是什么 ?\n \t*/\n    private final ReferenceQueue<Object> queue = new ReferenceQueue<>();\n    \n    int modCount;\n}\n\n// 1. put 方法分析\npublic V put(K key, V value) {\n    Object k = maskNull(key);\n    int h = hash(k);\n    Entry<K,V>[] tab = getTable();\n    int i = indexFor(h, tab.length);\n    \n    // 遍历 table[i] 链表, 如果找到相同的 key 则将老的 value 用新的 value 替换\n    for (Entry<K,V> e = tab[i]; e != null; e = e.next) {\n        if (h == e.hash && eq(k, e.get())) {\n            V oldValue = e.value;\n            if (value != oldValue)\n                e.value = value;\n            return oldValue;\n        }\n    }\n    \n    modCount++;// 修改次数++\n    Entry<K,V> e = tab[i];// 取得链表的第一个元素\n    \n    // 构建新的链表（将新元素放在链表最前面）,同时将 key 注册到引用队列\n    tab[i] = new Entry<>(k, value, queue, h, e); \n    \n    if (++size >= threshold)\n        resize(tab.length * 2);\n    return null;\n}\n\nprivate static Object maskNull(Object key) {\n\treturn (key == null) ? NULL_KEY : key;\n}\n\nfinal int hash(Object k) {\n    int h = k.hashCode();\n    \n    h ^= (h >>> 20) ^ (h >>> 12);\n    return h ^ (h >>> 7) ^ (h >>> 4);\n}\n\nprivate Entry<K,V>[] getTable() {\n    expungeStaleEntries();\n    return table;\n}\n\n// 将引用队列里的元素拿出来，修正 table 中的无效数据\nprivate void expungeStaleEntries() {\n    for (Object x; (x = queue.poll()) != null; ) {\n        synchronized (queue) {\n            @SuppressWarnings(\"unchecked\")\n            Entry<K,V> e = (Entry<K,V>) x;// queue 放的是元素, 将要被清理的元素\n            \n            int i = indexFor(e.hash, table.length);// 定位在 table 数组的位置\n\n            Entry<K,V> prev = table[i];// 取得 table [i] 处链表的第一个元素\n            Entry<K,V> p = prev;\n            while (p != null) {// 链表是否为空或者是否是链表的最后一个元素\n                Entry<K,V> next = p.next;\n                if (p == e) { // 找到了要被清理的元素\n                    if (prev == e)// prev 不一定和 p 相同\n                        table[i] = next; // 用下一个元素对 e 元素替换\n                    else\n                        prev.next = next; // 修复链接\n                    // Must not null out e.next;\n                    // stale entries may be in use by a HashIterator\n                    e.value = null; // Help GC\n                    size--;\n                    break;\n                }\n                prev = p; // 没找到要被清理的元素,交换指针,移动位置,继续比对\n                p = next;\n            }\n        }\n    }\n}\n\nEntry(Object key, V value, ReferenceQueue<Object> queue, int hash, Entry<K,V> next) {\n\tsuper(key, queue);\n    this.value = value;\n    this.hash  = hash;\n    this.next  = next;\n}\n\n/**\n * Creates a new weak reference that refers to the given object and is\n * registered with the given queue.\n *\n * @param referent object the new weak reference will refer to\n * @param q the queue with which the reference is to be registered,\n *          or <tt>null</tt> if registration is not required\n *\n * 监听器效果, 如果引用的对象被回收(reference.get() == null)，则将其加入该队列\n */\npublic WeakReference(T referent, ReferenceQueue<? super T> q) {\n\tsuper(referent, q);\n}\n\nReference(T referent, ReferenceQueue<? super T> queue) {\n\tthis.referent = referent;\n    this.queue = (queue == null) ? ReferenceQueue.NULL : queue;\n}\n```\n\n\n```java\n// 2. get 方法分析\npublic V get(Object key) {\n    Object k = maskNull(key);\n    int h = hash(k);\n    Entry<K,V>[] tab = getTable();\n    int index = indexFor(h, tab.length);\n    Entry<K,V> e = tab[index];\n    while (e != null) {\n        if (e.hash == h && eq(k, e.get()))\n            return e.value;\n        e = e.next;\n    }\n    return null;\n}\n\n// 3. remove 方法, 分析过 expungeStaleEntries 方法，该方法就没必要看了\npublic V remove(Object key) {\n    Object k = maskNull(key);\n    int h = hash(k);\n    Entry<K,V>[] tab = getTable();\n    int i = indexFor(h, tab.length);\n    Entry<K,V> prev = tab[i];\n    Entry<K,V> e = prev;\n\n    while (e != null) {\n        Entry<K,V> next = e.next;\n        if (h == e.hash && eq(k, e.get())) {\n            modCount++;\n            size--;\n            if (prev == e)\n                tab[i] = next;\n            else\n                prev.next = next;\n            return e.value;\n        }\n        prev = e;\n        e = next;\n    }\n\n    return null;\n}\n\n// 通过分析可以看到 getTable() 经常被调用到，它和 ReferenceQueue 一起完成的对 k-v 的清理工作\n```\n","source":"_posts/language/jvm/JVM软引用和弱引用.md","raw":"---\ntitle: JVM软引用和弱引用\ncategories:\n- java\ntag:\n- JVM\n---\n\n#### 一个场景\n```java\n如果有一个值，对应的键已经不再使用了, 将会出现什么情况呢？假定对某个键的最后一次引用已经消亡, \n不再有任何途径引用这个值的对象了, 但是, 由于在程序中的任何部分没有再出现这个键, \n所以, 这个 键/值 对无法从映射中删除.\n\n垃圾收集器怎么处理这样的场景呢? 引用出现了!\n```\n\n\n#### JAVA 中的引用\n**强引用 StrongReference**: 普通对象引用，只要还有强引用指向一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象。对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为 null，就是可以被垃圾收集的了，当然具体回收时机还是要看垃圾收集策略\n\n\n**软引用 SoftReference**: 一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。软引用通常用来实现内存敏感的缓存，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存, 维护一种非强制性的映射关系\n\n\n**弱引用 WeakReference**: 并不能使对象豁免垃圾收集，仅仅是提供一种访问在弱引用状态下对象的途径。这就可以用来构建一种没有特定约束的关系,如果试图获取时对象还在，就使用它，否则重现实例化。它同样是很多缓存实现的选择。这个类对象的引用，一般主要是在 major collection 的时候回收，所以它可能在 minor collection 后仍然存在。\n\n\n**虚引用 PhantomReference: **The object is the referent of a PhantomReference, and it has already been selected for collection and its finalizer (if any) has run. The term “reachable” is really a misnomer in this case, as there's no way for you to access the actual object. 不可达, 不影响对象的生命周期, 通过虚引用的 get() 方法永远返回 null.\n\n\n正如您可能猜到的，向对象生命周期图添加三个新的可选状态会造成混乱。尽管文档指出了从强可达到软、弱和虚到回收的逻辑过程，但实际过程取决于程序创建的引用对象。如果创建 WeakReference 但不创建SoftReference，则对象将直接从强可达到弱可达，再从最终确定到收集。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12487950/1619438588692-902fee26-a911-48f8-8556-09bbe528b41a.png#clientId=u1abc7148-9485-4&from=paste&height=206&id=u6a33dc73&margin=%5Bobject%20Object%5D&name=image.png&originHeight=206&originWidth=656&originalType=binary&size=8628&status=done&style=none&taskId=u0e0ed8d5-e6b2-418d-a350-ed9052bcb93&width=656)\n#### References and Referents\nA reference object is a layer of indirection between your program code and some other object, called a referent. Each reference object is constructed around its referent, and the referent cannot be changed.\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/12487950/1619605033615-5ec8b4a0-689c-4d6f-bdee-effa11da7b26.png#clientId=u406342b3-8a6c-4&from=paste&height=82&id=Qh0bD&margin=%5Bobject%20Object%5D&name=image.png&originHeight=82&originWidth=490&originalType=binary&size=3281&status=done&style=none&taskId=u2755513c-92e7-4ec9-9371-4629adea141&width=490)\n#### 引用意义\n垃圾回收时的垃圾判定方式: [垃圾回收](https://rongcloud.yuque.com/ofnwgp/xdbvrt/scix1x) \nJVM 在进行垃圾回收的时候，会判定对象是否还存在引用，它会针对不同的引用类型分别对待。\n弱引用可以用来访问对象，但进行垃圾回收时，如果对象仅有弱引用指向，则仍然会被 GC 回收。\n\n\n\n\n#### 小例子\n```java\n// 软引用和弱引用的一个例子\n\n// 强引用\nString str = new String(\"str-value\");\nSoftReference<String> softRef = new SoftReference<String>(str); // 软引用\nstr = null; \t// 去掉强引用\nSystem.gc(); \t// 垃圾回收器进行回收\nSystem.out.println(softRef.get());\n\n// 强引用\nString abc = new String(\"abc-value\");\nWeakReference<String> weakRef = new WeakReference<String>(abc); // 弱引用\nabc = null;\t\t// 去掉强引用\nSystem.gc(); \t// 垃圾回收器进行回收\nSystem.out.println(weakRef.get());\n\n\n输出:\nstr-value\nnull\n```\n\n\n```java\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.WeakHashMap;\n\npublic class ReferenceDemo {\n    public static void main(String[] args) {\n        String a = new String(\"key-a\");\n        String b = new String(\"key-b\");\n\n        Map map = new HashMap();\n        map.put(a, \"aaa\");\n        map.put(b, \"bbb\");\n\n        Map weakmap = new WeakHashMap();\n        weakmap.put(a, \"aaaa\");\n        weakmap.put(b, \"bbbb\");\n\n        map.remove(a);\n        \n        a = null; // 移除 a 的强引用, key-a 也没人引用了; map.size();\n        b = null; // 移除 b 的强引用, key-b 还被 map 引用着 map.get(b); map.get(\"key-b\");\n\n        System.gc();\n\n        Iterator i = map.entrySet().iterator();\n        while (i.hasNext()) {\n            Map.Entry en = (Map.Entry) i.next();\n            System.out.println(\"map:\" + en.getKey() + \":\" + en.getValue());\n        }\n\n        Iterator j = weakmap.entrySet().iterator();\n        while (j.hasNext()) {\n            Map.Entry en = (Map.Entry) j.next();\n            System.out.println(\"weakmap:\" + en.getKey() + \":\" + en.getValue());\n        }\n    }\n}\n\n输出\nmap:key-b:bbb\nweakmap:key-b:bbbb\n```\n\n\n#### 想说的话\n```java\n// 平时使用的缓存存在的问题\n1. 对象都是强引用的\n2. 不确定单个对象占用的 byte size 大小\n3. 无法准确的估算创建缓存的时候为其指定一个准确的大小\n4. JVM 即使报 OOM 也不会清理这些缓存, 失去缓存的意义 => LRU \n\n// 弱引用缓存 WeakHashMap\n1. key 是经过弱引用化处理的, value 不是\n2. 即使不被主动调用 remove, clear 方法，元素也是会有机会清除的\n3. key-value 的清理时机, key 伴随 gc 清理, value 根据 ReferenceQueue 进行清理\n4. ReferenceQueue\n5. 为什么会存在 ReferenceQueue ? \n    我们可以通过 reference.get() 的返回值确定 referent 是否被回收了, \n\t但是现实是我们有大量的引用对象，这么操作是不实际的，一个好的解决方案就出来了 - 引用队列，\n    在构造时将引用与队列相关联，并且在清除引用后将其放在队列上。要发现哪些引用已被清除,\n    可以轮询队列。这可以通过后台线程完成，但是在创建新引用时轮询队列通常更简单(WeakHashMap就是这么做的)\n\t引用队列更像是监听器.\n    \n// 弱引用的特点更适合高速缓存\n\n// 引用的状态\n1. Active: \n\t新创建的实例处于活动状态, 由垃圾收集者进行特殊处理,\n\t收集器检测到引用对象的可访问性已更改为适当的状态后的一段时间，它会将实例的状态更改为挂起或不活动，\n    这取决于创建实例时是否向队列注册了实例, 在前一种情况下，它还将实例添加到挂起引用列表中.\n2. Pending: \n\t挂起引用列表的元素，等待引用处理程序线程排队,未注册的实例从不处于此状态.\n3. Enqueued\n\t在创建实例时向其注册的队列元素. 当实例从其引用队列中移除时,它将变为非活动状态.\n    未注册的实例从不处于此状态\n4. Inactive\n\t一旦实例变为非活动状态,其状态将永远不会再改变.\n```\n\n\n#### 弱引用的应用\nWeakHashMap (源码分析)\n```java\n1. 根据 API 文档，当 Map 中的键不再使用，键对应的键值也将自动在 WeakHashMap 中删除。WeakHashMap 中的键为弱键，和其他 Map 接口的实现有些不同；\n2. 和 HashMap 类似; 但是支持 key 和 value 为 null, 不存在红黑树结构，因为没必要\n3. 同样不是线程安全的，可以使用 Collections.synchronizedMap(Map map) 来使之线程安全\n4. 没有实现 Cloneable, Serializable接口, 没有必要\n\npublic class WeakHashMap<K,V> extends AbstractMap<K,V> implements Map<K,V> {\n\t// 基本组成属性\n\tprivate static final int DEFAULT_INITIAL_CAPACITY = 16;\n    private static final int MAXIMUM_CAPACITY = 1 << 30;\n    private static final float DEFAULT_LOAD_FACTOR = 0.75f;\n    private static final Object NULL_KEY = new Object();\n    Entry<K,V>[] table; // 这个 Entry 继承了 WeakReference\n    private int size;\n    private int threshold;\n    private final float loadFactor;\n    \n    /**\n  \t* Reference queue for cleared WeakEntries\n    *\n    * 队列放的是什么 ?\n \t*/\n    private final ReferenceQueue<Object> queue = new ReferenceQueue<>();\n    \n    int modCount;\n}\n\n// 1. put 方法分析\npublic V put(K key, V value) {\n    Object k = maskNull(key);\n    int h = hash(k);\n    Entry<K,V>[] tab = getTable();\n    int i = indexFor(h, tab.length);\n    \n    // 遍历 table[i] 链表, 如果找到相同的 key 则将老的 value 用新的 value 替换\n    for (Entry<K,V> e = tab[i]; e != null; e = e.next) {\n        if (h == e.hash && eq(k, e.get())) {\n            V oldValue = e.value;\n            if (value != oldValue)\n                e.value = value;\n            return oldValue;\n        }\n    }\n    \n    modCount++;// 修改次数++\n    Entry<K,V> e = tab[i];// 取得链表的第一个元素\n    \n    // 构建新的链表（将新元素放在链表最前面）,同时将 key 注册到引用队列\n    tab[i] = new Entry<>(k, value, queue, h, e); \n    \n    if (++size >= threshold)\n        resize(tab.length * 2);\n    return null;\n}\n\nprivate static Object maskNull(Object key) {\n\treturn (key == null) ? NULL_KEY : key;\n}\n\nfinal int hash(Object k) {\n    int h = k.hashCode();\n    \n    h ^= (h >>> 20) ^ (h >>> 12);\n    return h ^ (h >>> 7) ^ (h >>> 4);\n}\n\nprivate Entry<K,V>[] getTable() {\n    expungeStaleEntries();\n    return table;\n}\n\n// 将引用队列里的元素拿出来，修正 table 中的无效数据\nprivate void expungeStaleEntries() {\n    for (Object x; (x = queue.poll()) != null; ) {\n        synchronized (queue) {\n            @SuppressWarnings(\"unchecked\")\n            Entry<K,V> e = (Entry<K,V>) x;// queue 放的是元素, 将要被清理的元素\n            \n            int i = indexFor(e.hash, table.length);// 定位在 table 数组的位置\n\n            Entry<K,V> prev = table[i];// 取得 table [i] 处链表的第一个元素\n            Entry<K,V> p = prev;\n            while (p != null) {// 链表是否为空或者是否是链表的最后一个元素\n                Entry<K,V> next = p.next;\n                if (p == e) { // 找到了要被清理的元素\n                    if (prev == e)// prev 不一定和 p 相同\n                        table[i] = next; // 用下一个元素对 e 元素替换\n                    else\n                        prev.next = next; // 修复链接\n                    // Must not null out e.next;\n                    // stale entries may be in use by a HashIterator\n                    e.value = null; // Help GC\n                    size--;\n                    break;\n                }\n                prev = p; // 没找到要被清理的元素,交换指针,移动位置,继续比对\n                p = next;\n            }\n        }\n    }\n}\n\nEntry(Object key, V value, ReferenceQueue<Object> queue, int hash, Entry<K,V> next) {\n\tsuper(key, queue);\n    this.value = value;\n    this.hash  = hash;\n    this.next  = next;\n}\n\n/**\n * Creates a new weak reference that refers to the given object and is\n * registered with the given queue.\n *\n * @param referent object the new weak reference will refer to\n * @param q the queue with which the reference is to be registered,\n *          or <tt>null</tt> if registration is not required\n *\n * 监听器效果, 如果引用的对象被回收(reference.get() == null)，则将其加入该队列\n */\npublic WeakReference(T referent, ReferenceQueue<? super T> q) {\n\tsuper(referent, q);\n}\n\nReference(T referent, ReferenceQueue<? super T> queue) {\n\tthis.referent = referent;\n    this.queue = (queue == null) ? ReferenceQueue.NULL : queue;\n}\n```\n\n\n```java\n// 2. get 方法分析\npublic V get(Object key) {\n    Object k = maskNull(key);\n    int h = hash(k);\n    Entry<K,V>[] tab = getTable();\n    int index = indexFor(h, tab.length);\n    Entry<K,V> e = tab[index];\n    while (e != null) {\n        if (e.hash == h && eq(k, e.get()))\n            return e.value;\n        e = e.next;\n    }\n    return null;\n}\n\n// 3. remove 方法, 分析过 expungeStaleEntries 方法，该方法就没必要看了\npublic V remove(Object key) {\n    Object k = maskNull(key);\n    int h = hash(k);\n    Entry<K,V>[] tab = getTable();\n    int i = indexFor(h, tab.length);\n    Entry<K,V> prev = tab[i];\n    Entry<K,V> e = prev;\n\n    while (e != null) {\n        Entry<K,V> next = e.next;\n        if (h == e.hash && eq(k, e.get())) {\n            modCount++;\n            size--;\n            if (prev == e)\n                tab[i] = next;\n            else\n                prev.next = next;\n            return e.value;\n        }\n        prev = e;\n        e = next;\n    }\n\n    return null;\n}\n\n// 通过分析可以看到 getTable() 经常被调用到，它和 ReferenceQueue 一起完成的对 k-v 的清理工作\n```\n","slug":"language/jvm/JVM软引用和弱引用","published":1,"date":"2021-07-31T11:10:47.934Z","updated":"2021-07-31T11:10:47.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyit002lu6ukdl759jso","content":"<h4 id=\"一个场景\"><a href=\"#一个场景\" class=\"headerlink\" title=\"一个场景\"></a>一个场景</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果有一个值，对应的键已经不再使用了, 将会出现什么情况呢？假定对某个键的最后一次引用已经消亡, </span><br><span class=\"line\">不再有任何途径引用这个值的对象了, 但是, 由于在程序中的任何部分没有再出现这个键, </span><br><span class=\"line\">所以, 这个 键/值 对无法从映射中删除.</span><br><span class=\"line\"></span><br><span class=\"line\">垃圾收集器怎么处理这样的场景呢? 引用出现了!</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"JAVA-中的引用\"><a href=\"#JAVA-中的引用\" class=\"headerlink\" title=\"JAVA 中的引用\"></a>JAVA 中的引用</h4><p><strong>强引用 StrongReference</strong>: 普通对象引用，只要还有强引用指向一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象。对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为 null，就是可以被垃圾收集的了，当然具体回收时机还是要看垃圾收集策略</p>\n<p><strong>软引用 SoftReference</strong>: 一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。软引用通常用来实现内存敏感的缓存，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存, 维护一种非强制性的映射关系</p>\n<p><strong>弱引用 WeakReference</strong>: 并不能使对象豁免垃圾收集，仅仅是提供一种访问在弱引用状态下对象的途径。这就可以用来构建一种没有特定约束的关系,如果试图获取时对象还在，就使用它，否则重现实例化。它同样是很多缓存实现的选择。这个类对象的引用，一般主要是在 major collection 的时候回收，所以它可能在 minor collection 后仍然存在。</p>\n<p>**虚引用 PhantomReference: **The object is the referent of a PhantomReference, and it has already been selected for collection and its finalizer (if any) has run. The term “reachable” is really a misnomer in this case, as there’s no way for you to access the actual object. 不可达, 不影响对象的生命周期, 通过虚引用的 get() 方法永远返回 null.</p>\n<p>正如您可能猜到的，向对象生命周期图添加三个新的可选状态会造成混乱。尽管文档指出了从强可达到软、弱和虚到回收的逻辑过程，但实际过程取决于程序创建的引用对象。如果创建 WeakReference 但不创建SoftReference，则对象将直接从强可达到弱可达，再从最终确定到收集。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12487950/1619438588692-902fee26-a911-48f8-8556-09bbe528b41a.png#clientId=u1abc7148-9485-4&from=paste&height=206&id=u6a33dc73&margin=%5Bobject%20Object%5D&name=image.png&originHeight=206&originWidth=656&originalType=binary&size=8628&status=done&style=none&taskId=u0e0ed8d5-e6b2-418d-a350-ed9052bcb93&width=656\" alt=\"image.png\"></p>\n<h4 id=\"References-and-Referents\"><a href=\"#References-and-Referents\" class=\"headerlink\" title=\"References and Referents\"></a>References and Referents</h4><p>A reference object is a layer of indirection between your program code and some other object, called a referent. Each reference object is constructed around its referent, and the referent cannot be changed.<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12487950/1619605033615-5ec8b4a0-689c-4d6f-bdee-effa11da7b26.png#clientId=u406342b3-8a6c-4&from=paste&height=82&id=Qh0bD&margin=%5Bobject%20Object%5D&name=image.png&originHeight=82&originWidth=490&originalType=binary&size=3281&status=done&style=none&taskId=u2755513c-92e7-4ec9-9371-4629adea141&width=490\" alt=\"image.png\"></p>\n<h4 id=\"引用意义\"><a href=\"#引用意义\" class=\"headerlink\" title=\"引用意义\"></a>引用意义</h4><p>垃圾回收时的垃圾判定方式: <a href=\"https://rongcloud.yuque.com/ofnwgp/xdbvrt/scix1x\">垃圾回收</a><br>JVM 在进行垃圾回收的时候，会判定对象是否还存在引用，它会针对不同的引用类型分别对待。<br>弱引用可以用来访问对象，但进行垃圾回收时，如果对象仅有弱引用指向，则仍然会被 GC 回收。</p>\n<h4 id=\"小例子\"><a href=\"#小例子\" class=\"headerlink\" title=\"小例子\"></a>小例子</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 软引用和弱引用的一个例子</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 强引用</span></span><br><span class=\"line\">String str = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;str-value&quot;</span>);</span><br><span class=\"line\">SoftReference&lt;String&gt; softRef = <span class=\"keyword\">new</span> SoftReference&lt;String&gt;(str); <span class=\"comment\">// 软引用</span></span><br><span class=\"line\">str = <span class=\"keyword\">null</span>; \t<span class=\"comment\">// 去掉强引用</span></span><br><span class=\"line\">System.gc(); \t<span class=\"comment\">// 垃圾回收器进行回收</span></span><br><span class=\"line\">System.out.println(softRef.get());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 强引用</span></span><br><span class=\"line\">String abc = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;abc-value&quot;</span>);</span><br><span class=\"line\">WeakReference&lt;String&gt; weakRef = <span class=\"keyword\">new</span> WeakReference&lt;String&gt;(abc); <span class=\"comment\">// 弱引用</span></span><br><span class=\"line\">abc = <span class=\"keyword\">null</span>;\t\t<span class=\"comment\">// 去掉强引用</span></span><br><span class=\"line\">System.gc(); \t<span class=\"comment\">// 垃圾回收器进行回收</span></span><br><span class=\"line\">System.out.println(weakRef.get());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">输出:</span><br><span class=\"line\">str-value</span><br><span class=\"line\"><span class=\"keyword\">null</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.WeakHashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReferenceDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String a = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;key-a&quot;</span>);</span><br><span class=\"line\">        String b = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;key-b&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map map = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">        map.put(a, <span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        map.put(b, <span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map weakmap = <span class=\"keyword\">new</span> WeakHashMap();</span><br><span class=\"line\">        weakmap.put(a, <span class=\"string\">&quot;aaaa&quot;</span>);</span><br><span class=\"line\">        weakmap.put(b, <span class=\"string\">&quot;bbbb&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        map.remove(a);</span><br><span class=\"line\">        </span><br><span class=\"line\">        a = <span class=\"keyword\">null</span>; <span class=\"comment\">// 移除 a 的强引用, key-a 也没人引用了; map.size();</span></span><br><span class=\"line\">        b = <span class=\"keyword\">null</span>; <span class=\"comment\">// 移除 b 的强引用, key-b 还被 map 引用着 map.get(b); map.get(&quot;key-b&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\"></span><br><span class=\"line\">        Iterator i = map.entrySet().iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i.hasNext()) &#123;</span><br><span class=\"line\">            Map.Entry en = (Map.Entry) i.next();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;map:&quot;</span> + en.getKey() + <span class=\"string\">&quot;:&quot;</span> + en.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Iterator j = weakmap.entrySet().iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j.hasNext()) &#123;</span><br><span class=\"line\">            Map.Entry en = (Map.Entry) j.next();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;weakmap:&quot;</span> + en.getKey() + <span class=\"string\">&quot;:&quot;</span> + en.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出</span><br><span class=\"line\">map:key-b:bbb</span><br><span class=\"line\">weakmap:key-b:bbbb</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"想说的话\"><a href=\"#想说的话\" class=\"headerlink\" title=\"想说的话\"></a>想说的话</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 平时使用的缓存存在的问题</span></span><br><span class=\"line\"><span class=\"number\">1.</span> 对象都是强引用的</span><br><span class=\"line\"><span class=\"number\">2.</span> 不确定单个对象占用的 <span class=\"keyword\">byte</span> size 大小</span><br><span class=\"line\"><span class=\"number\">3.</span> 无法准确的估算创建缓存的时候为其指定一个准确的大小</span><br><span class=\"line\"><span class=\"number\">4.</span> JVM 即使报 OOM 也不会清理这些缓存, 失去缓存的意义 =&gt; LRU </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 弱引用缓存 WeakHashMap</span></span><br><span class=\"line\"><span class=\"number\">1.</span> key 是经过弱引用化处理的, value 不是</span><br><span class=\"line\"><span class=\"number\">2.</span> 即使不被主动调用 remove, clear 方法，元素也是会有机会清除的</span><br><span class=\"line\"><span class=\"number\">3.</span> key-value 的清理时机, key 伴随 gc 清理, value 根据 ReferenceQueue 进行清理</span><br><span class=\"line\"><span class=\"number\">4.</span> ReferenceQueue</span><br><span class=\"line\"><span class=\"number\">5.</span> 为什么会存在 ReferenceQueue ? </span><br><span class=\"line\">    我们可以通过 reference.get() 的返回值确定 referent 是否被回收了, </span><br><span class=\"line\">\t但是现实是我们有大量的引用对象，这么操作是不实际的，一个好的解决方案就出来了 - 引用队列，</span><br><span class=\"line\">    在构造时将引用与队列相关联，并且在清除引用后将其放在队列上。要发现哪些引用已被清除,</span><br><span class=\"line\">    可以轮询队列。这可以通过后台线程完成，但是在创建新引用时轮询队列通常更简单(WeakHashMap就是这么做的)</span><br><span class=\"line\">\t引用队列更像是监听器.</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 弱引用的特点更适合高速缓存</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用的状态</span></span><br><span class=\"line\"><span class=\"number\">1.</span> Active: </span><br><span class=\"line\">\t新创建的实例处于活动状态, 由垃圾收集者进行特殊处理,</span><br><span class=\"line\">\t收集器检测到引用对象的可访问性已更改为适当的状态后的一段时间，它会将实例的状态更改为挂起或不活动，</span><br><span class=\"line\">    这取决于创建实例时是否向队列注册了实例, 在前一种情况下，它还将实例添加到挂起引用列表中.</span><br><span class=\"line\"><span class=\"number\">2.</span> Pending: </span><br><span class=\"line\">\t挂起引用列表的元素，等待引用处理程序线程排队,未注册的实例从不处于此状态.</span><br><span class=\"line\"><span class=\"number\">3.</span> Enqueued</span><br><span class=\"line\">\t在创建实例时向其注册的队列元素. 当实例从其引用队列中移除时,它将变为非活动状态.</span><br><span class=\"line\">    未注册的实例从不处于此状态</span><br><span class=\"line\"><span class=\"number\">4.</span> Inactive</span><br><span class=\"line\">\t一旦实例变为非活动状态,其状态将永远不会再改变.</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"弱引用的应用\"><a href=\"#弱引用的应用\" class=\"headerlink\" title=\"弱引用的应用\"></a>弱引用的应用</h4><p>WeakHashMap (源码分析)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 根据 API 文档，当 Map 中的键不再使用，键对应的键值也将自动在 WeakHashMap 中删除。WeakHashMap 中的键为弱键，和其他 Map 接口的实现有些不同；</span><br><span class=\"line\"><span class=\"number\">2.</span> 和 HashMap 类似; 但是支持 key 和 value 为 <span class=\"keyword\">null</span>, 不存在红黑树结构，因为没必要</span><br><span class=\"line\"><span class=\"number\">3.</span> 同样不是线程安全的，可以使用 Collections.synchronizedMap(Map map) 来使之线程安全</span><br><span class=\"line\"><span class=\"number\">4.</span> 没有实现 Cloneable, Serializable接口, 没有必要</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeakHashMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 基本组成属性</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_INITIAL_CAPACITY = <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DEFAULT_LOAD_FACTOR = <span class=\"number\">0.75f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object NULL_KEY = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    Entry&lt;K,V&gt;[] table; <span class=\"comment\">// 这个 Entry 继承了 WeakReference</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> threshold;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  \t* Reference queue for cleared WeakEntries</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * 队列放的是什么 ?</span></span><br><span class=\"line\"><span class=\"comment\"> \t*/</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReferenceQueue&lt;Object&gt; queue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> modCount;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. put 方法分析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = hash(k);</span><br><span class=\"line\">    Entry&lt;K,V&gt;[] tab = getTable();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = indexFor(h, tab.length);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 遍历 table[i] 链表, 如果找到相同的 key 则将老的 value 用新的 value 替换</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Entry&lt;K,V&gt; e = tab[i]; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h == e.hash &amp;&amp; eq(k, e.get())) &#123;</span><br><span class=\"line\">            V oldValue = e.value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value != oldValue)</span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    modCount++;<span class=\"comment\">// 修改次数++</span></span><br><span class=\"line\">    Entry&lt;K,V&gt; e = tab[i];<span class=\"comment\">// 取得链表的第一个元素</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 构建新的链表（将新元素放在链表最前面）,同时将 key 注册到引用队列</span></span><br><span class=\"line\">    tab[i] = <span class=\"keyword\">new</span> Entry&lt;&gt;(k, value, queue, h, e); </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt;= threshold)</span><br><span class=\"line\">        resize(tab.length * <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object <span class=\"title\">maskNull</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? NULL_KEY : key;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = k.hashCode();</span><br><span class=\"line\">    </span><br><span class=\"line\">    h ^= (h &gt;&gt;&gt; <span class=\"number\">20</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">12</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h ^ (h &gt;&gt;&gt; <span class=\"number\">7</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Entry&lt;K,V&gt;[] getTable() &#123;</span><br><span class=\"line\">    expungeStaleEntries();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将引用队列里的元素拿出来，修正 table 中的无效数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">expungeStaleEntries</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object x; (x = queue.poll()) != <span class=\"keyword\">null</span>; ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (queue) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">            Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) x;<span class=\"comment\">// queue 放的是元素, 将要被清理的元素</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = indexFor(e.hash, table.length);<span class=\"comment\">// 定位在 table 数组的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Entry&lt;K,V&gt; prev = table[i];<span class=\"comment\">// 取得 table [i] 处链表的第一个元素</span></span><br><span class=\"line\">            Entry&lt;K,V&gt; p = prev;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">// 链表是否为空或者是否是链表的最后一个元素</span></span><br><span class=\"line\">                Entry&lt;K,V&gt; next = p.next;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p == e) &#123; <span class=\"comment\">// 找到了要被清理的元素</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (prev == e)<span class=\"comment\">// prev 不一定和 p 相同</span></span><br><span class=\"line\">                        table[i] = next; <span class=\"comment\">// 用下一个元素对 e 元素替换</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        prev.next = next; <span class=\"comment\">// 修复链接</span></span><br><span class=\"line\">                    <span class=\"comment\">// Must not null out e.next;</span></span><br><span class=\"line\">                    <span class=\"comment\">// stale entries may be in use by a HashIterator</span></span><br><span class=\"line\">                    e.value = <span class=\"keyword\">null</span>; <span class=\"comment\">// Help GC</span></span><br><span class=\"line\">                    size--;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                prev = p; <span class=\"comment\">// 没找到要被清理的元素,交换指针,移动位置,继续比对</span></span><br><span class=\"line\">                p = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Entry(Object key, V value, ReferenceQueue&lt;Object&gt; queue, <span class=\"keyword\">int</span> hash, Entry&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>(key, queue);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hash  = hash;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.next  = next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates a new weak reference that refers to the given object and is</span></span><br><span class=\"line\"><span class=\"comment\"> * registered with the given queue.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> referent object the new weak reference will refer to</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> q the queue with which the reference is to be registered,</span></span><br><span class=\"line\"><span class=\"comment\"> *          or &lt;tt&gt;null&lt;/tt&gt; if registration is not required</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 监听器效果, 如果引用的对象被回收(reference.get() == null)，则将其加入该队列</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeakReference</span><span class=\"params\">(T referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; q)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>(referent, q);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Reference(T referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; queue) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.referent = referent;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue = (queue == <span class=\"keyword\">null</span>) ? ReferenceQueue.NULL : queue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2. get 方法分析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = hash(k);</span><br><span class=\"line\">    Entry&lt;K,V&gt;[] tab = getTable();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = indexFor(h, tab.length);</span><br><span class=\"line\">    Entry&lt;K,V&gt; e = tab[index];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.hash == h &amp;&amp; eq(k, e.get()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.value;</span><br><span class=\"line\">        e = e.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. remove 方法, 分析过 expungeStaleEntries 方法，该方法就没必要看了</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = hash(k);</span><br><span class=\"line\">    Entry&lt;K,V&gt;[] tab = getTable();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = indexFor(h, tab.length);</span><br><span class=\"line\">    Entry&lt;K,V&gt; prev = tab[i];</span><br><span class=\"line\">    Entry&lt;K,V&gt; e = prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Entry&lt;K,V&gt; next = e.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h == e.hash &amp;&amp; eq(k, e.get())) &#123;</span><br><span class=\"line\">            modCount++;</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prev == e)</span><br><span class=\"line\">                tab[i] = next;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                prev.next = next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prev = e;</span><br><span class=\"line\">        e = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过分析可以看到 getTable() 经常被调用到，它和 ReferenceQueue 一起完成的对 k-v 的清理工作</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一个场景\"><a href=\"#一个场景\" class=\"headerlink\" title=\"一个场景\"></a>一个场景</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果有一个值，对应的键已经不再使用了, 将会出现什么情况呢？假定对某个键的最后一次引用已经消亡, </span><br><span class=\"line\">不再有任何途径引用这个值的对象了, 但是, 由于在程序中的任何部分没有再出现这个键, </span><br><span class=\"line\">所以, 这个 键/值 对无法从映射中删除.</span><br><span class=\"line\"></span><br><span class=\"line\">垃圾收集器怎么处理这样的场景呢? 引用出现了!</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"JAVA-中的引用\"><a href=\"#JAVA-中的引用\" class=\"headerlink\" title=\"JAVA 中的引用\"></a>JAVA 中的引用</h4><p><strong>强引用 StrongReference</strong>: 普通对象引用，只要还有强引用指向一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象。对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为 null，就是可以被垃圾收集的了，当然具体回收时机还是要看垃圾收集策略</p>\n<p><strong>软引用 SoftReference</strong>: 一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。软引用通常用来实现内存敏感的缓存，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存, 维护一种非强制性的映射关系</p>\n<p><strong>弱引用 WeakReference</strong>: 并不能使对象豁免垃圾收集，仅仅是提供一种访问在弱引用状态下对象的途径。这就可以用来构建一种没有特定约束的关系,如果试图获取时对象还在，就使用它，否则重现实例化。它同样是很多缓存实现的选择。这个类对象的引用，一般主要是在 major collection 的时候回收，所以它可能在 minor collection 后仍然存在。</p>\n<p>**虚引用 PhantomReference: **The object is the referent of a PhantomReference, and it has already been selected for collection and its finalizer (if any) has run. The term “reachable” is really a misnomer in this case, as there’s no way for you to access the actual object. 不可达, 不影响对象的生命周期, 通过虚引用的 get() 方法永远返回 null.</p>\n<p>正如您可能猜到的，向对象生命周期图添加三个新的可选状态会造成混乱。尽管文档指出了从强可达到软、弱和虚到回收的逻辑过程，但实际过程取决于程序创建的引用对象。如果创建 WeakReference 但不创建SoftReference，则对象将直接从强可达到弱可达，再从最终确定到收集。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12487950/1619438588692-902fee26-a911-48f8-8556-09bbe528b41a.png#clientId=u1abc7148-9485-4&from=paste&height=206&id=u6a33dc73&margin=%5Bobject%20Object%5D&name=image.png&originHeight=206&originWidth=656&originalType=binary&size=8628&status=done&style=none&taskId=u0e0ed8d5-e6b2-418d-a350-ed9052bcb93&width=656\" alt=\"image.png\"></p>\n<h4 id=\"References-and-Referents\"><a href=\"#References-and-Referents\" class=\"headerlink\" title=\"References and Referents\"></a>References and Referents</h4><p>A reference object is a layer of indirection between your program code and some other object, called a referent. Each reference object is constructed around its referent, and the referent cannot be changed.<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12487950/1619605033615-5ec8b4a0-689c-4d6f-bdee-effa11da7b26.png#clientId=u406342b3-8a6c-4&from=paste&height=82&id=Qh0bD&margin=%5Bobject%20Object%5D&name=image.png&originHeight=82&originWidth=490&originalType=binary&size=3281&status=done&style=none&taskId=u2755513c-92e7-4ec9-9371-4629adea141&width=490\" alt=\"image.png\"></p>\n<h4 id=\"引用意义\"><a href=\"#引用意义\" class=\"headerlink\" title=\"引用意义\"></a>引用意义</h4><p>垃圾回收时的垃圾判定方式: <a href=\"https://rongcloud.yuque.com/ofnwgp/xdbvrt/scix1x\">垃圾回收</a><br>JVM 在进行垃圾回收的时候，会判定对象是否还存在引用，它会针对不同的引用类型分别对待。<br>弱引用可以用来访问对象，但进行垃圾回收时，如果对象仅有弱引用指向，则仍然会被 GC 回收。</p>\n<h4 id=\"小例子\"><a href=\"#小例子\" class=\"headerlink\" title=\"小例子\"></a>小例子</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 软引用和弱引用的一个例子</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 强引用</span></span><br><span class=\"line\">String str = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;str-value&quot;</span>);</span><br><span class=\"line\">SoftReference&lt;String&gt; softRef = <span class=\"keyword\">new</span> SoftReference&lt;String&gt;(str); <span class=\"comment\">// 软引用</span></span><br><span class=\"line\">str = <span class=\"keyword\">null</span>; \t<span class=\"comment\">// 去掉强引用</span></span><br><span class=\"line\">System.gc(); \t<span class=\"comment\">// 垃圾回收器进行回收</span></span><br><span class=\"line\">System.out.println(softRef.get());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 强引用</span></span><br><span class=\"line\">String abc = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;abc-value&quot;</span>);</span><br><span class=\"line\">WeakReference&lt;String&gt; weakRef = <span class=\"keyword\">new</span> WeakReference&lt;String&gt;(abc); <span class=\"comment\">// 弱引用</span></span><br><span class=\"line\">abc = <span class=\"keyword\">null</span>;\t\t<span class=\"comment\">// 去掉强引用</span></span><br><span class=\"line\">System.gc(); \t<span class=\"comment\">// 垃圾回收器进行回收</span></span><br><span class=\"line\">System.out.println(weakRef.get());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">输出:</span><br><span class=\"line\">str-value</span><br><span class=\"line\"><span class=\"keyword\">null</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.WeakHashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReferenceDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String a = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;key-a&quot;</span>);</span><br><span class=\"line\">        String b = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;key-b&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map map = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">        map.put(a, <span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        map.put(b, <span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map weakmap = <span class=\"keyword\">new</span> WeakHashMap();</span><br><span class=\"line\">        weakmap.put(a, <span class=\"string\">&quot;aaaa&quot;</span>);</span><br><span class=\"line\">        weakmap.put(b, <span class=\"string\">&quot;bbbb&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        map.remove(a);</span><br><span class=\"line\">        </span><br><span class=\"line\">        a = <span class=\"keyword\">null</span>; <span class=\"comment\">// 移除 a 的强引用, key-a 也没人引用了; map.size();</span></span><br><span class=\"line\">        b = <span class=\"keyword\">null</span>; <span class=\"comment\">// 移除 b 的强引用, key-b 还被 map 引用着 map.get(b); map.get(&quot;key-b&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\"></span><br><span class=\"line\">        Iterator i = map.entrySet().iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i.hasNext()) &#123;</span><br><span class=\"line\">            Map.Entry en = (Map.Entry) i.next();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;map:&quot;</span> + en.getKey() + <span class=\"string\">&quot;:&quot;</span> + en.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Iterator j = weakmap.entrySet().iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j.hasNext()) &#123;</span><br><span class=\"line\">            Map.Entry en = (Map.Entry) j.next();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;weakmap:&quot;</span> + en.getKey() + <span class=\"string\">&quot;:&quot;</span> + en.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出</span><br><span class=\"line\">map:key-b:bbb</span><br><span class=\"line\">weakmap:key-b:bbbb</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"想说的话\"><a href=\"#想说的话\" class=\"headerlink\" title=\"想说的话\"></a>想说的话</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 平时使用的缓存存在的问题</span></span><br><span class=\"line\"><span class=\"number\">1.</span> 对象都是强引用的</span><br><span class=\"line\"><span class=\"number\">2.</span> 不确定单个对象占用的 <span class=\"keyword\">byte</span> size 大小</span><br><span class=\"line\"><span class=\"number\">3.</span> 无法准确的估算创建缓存的时候为其指定一个准确的大小</span><br><span class=\"line\"><span class=\"number\">4.</span> JVM 即使报 OOM 也不会清理这些缓存, 失去缓存的意义 =&gt; LRU </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 弱引用缓存 WeakHashMap</span></span><br><span class=\"line\"><span class=\"number\">1.</span> key 是经过弱引用化处理的, value 不是</span><br><span class=\"line\"><span class=\"number\">2.</span> 即使不被主动调用 remove, clear 方法，元素也是会有机会清除的</span><br><span class=\"line\"><span class=\"number\">3.</span> key-value 的清理时机, key 伴随 gc 清理, value 根据 ReferenceQueue 进行清理</span><br><span class=\"line\"><span class=\"number\">4.</span> ReferenceQueue</span><br><span class=\"line\"><span class=\"number\">5.</span> 为什么会存在 ReferenceQueue ? </span><br><span class=\"line\">    我们可以通过 reference.get() 的返回值确定 referent 是否被回收了, </span><br><span class=\"line\">\t但是现实是我们有大量的引用对象，这么操作是不实际的，一个好的解决方案就出来了 - 引用队列，</span><br><span class=\"line\">    在构造时将引用与队列相关联，并且在清除引用后将其放在队列上。要发现哪些引用已被清除,</span><br><span class=\"line\">    可以轮询队列。这可以通过后台线程完成，但是在创建新引用时轮询队列通常更简单(WeakHashMap就是这么做的)</span><br><span class=\"line\">\t引用队列更像是监听器.</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 弱引用的特点更适合高速缓存</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用的状态</span></span><br><span class=\"line\"><span class=\"number\">1.</span> Active: </span><br><span class=\"line\">\t新创建的实例处于活动状态, 由垃圾收集者进行特殊处理,</span><br><span class=\"line\">\t收集器检测到引用对象的可访问性已更改为适当的状态后的一段时间，它会将实例的状态更改为挂起或不活动，</span><br><span class=\"line\">    这取决于创建实例时是否向队列注册了实例, 在前一种情况下，它还将实例添加到挂起引用列表中.</span><br><span class=\"line\"><span class=\"number\">2.</span> Pending: </span><br><span class=\"line\">\t挂起引用列表的元素，等待引用处理程序线程排队,未注册的实例从不处于此状态.</span><br><span class=\"line\"><span class=\"number\">3.</span> Enqueued</span><br><span class=\"line\">\t在创建实例时向其注册的队列元素. 当实例从其引用队列中移除时,它将变为非活动状态.</span><br><span class=\"line\">    未注册的实例从不处于此状态</span><br><span class=\"line\"><span class=\"number\">4.</span> Inactive</span><br><span class=\"line\">\t一旦实例变为非活动状态,其状态将永远不会再改变.</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"弱引用的应用\"><a href=\"#弱引用的应用\" class=\"headerlink\" title=\"弱引用的应用\"></a>弱引用的应用</h4><p>WeakHashMap (源码分析)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 根据 API 文档，当 Map 中的键不再使用，键对应的键值也将自动在 WeakHashMap 中删除。WeakHashMap 中的键为弱键，和其他 Map 接口的实现有些不同；</span><br><span class=\"line\"><span class=\"number\">2.</span> 和 HashMap 类似; 但是支持 key 和 value 为 <span class=\"keyword\">null</span>, 不存在红黑树结构，因为没必要</span><br><span class=\"line\"><span class=\"number\">3.</span> 同样不是线程安全的，可以使用 Collections.synchronizedMap(Map map) 来使之线程安全</span><br><span class=\"line\"><span class=\"number\">4.</span> 没有实现 Cloneable, Serializable接口, 没有必要</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeakHashMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 基本组成属性</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_INITIAL_CAPACITY = <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DEFAULT_LOAD_FACTOR = <span class=\"number\">0.75f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object NULL_KEY = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    Entry&lt;K,V&gt;[] table; <span class=\"comment\">// 这个 Entry 继承了 WeakReference</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> threshold;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  \t* Reference queue for cleared WeakEntries</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * 队列放的是什么 ?</span></span><br><span class=\"line\"><span class=\"comment\"> \t*/</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReferenceQueue&lt;Object&gt; queue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> modCount;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. put 方法分析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = hash(k);</span><br><span class=\"line\">    Entry&lt;K,V&gt;[] tab = getTable();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = indexFor(h, tab.length);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 遍历 table[i] 链表, 如果找到相同的 key 则将老的 value 用新的 value 替换</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Entry&lt;K,V&gt; e = tab[i]; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h == e.hash &amp;&amp; eq(k, e.get())) &#123;</span><br><span class=\"line\">            V oldValue = e.value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value != oldValue)</span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    modCount++;<span class=\"comment\">// 修改次数++</span></span><br><span class=\"line\">    Entry&lt;K,V&gt; e = tab[i];<span class=\"comment\">// 取得链表的第一个元素</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 构建新的链表（将新元素放在链表最前面）,同时将 key 注册到引用队列</span></span><br><span class=\"line\">    tab[i] = <span class=\"keyword\">new</span> Entry&lt;&gt;(k, value, queue, h, e); </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt;= threshold)</span><br><span class=\"line\">        resize(tab.length * <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object <span class=\"title\">maskNull</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? NULL_KEY : key;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = k.hashCode();</span><br><span class=\"line\">    </span><br><span class=\"line\">    h ^= (h &gt;&gt;&gt; <span class=\"number\">20</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">12</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h ^ (h &gt;&gt;&gt; <span class=\"number\">7</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Entry&lt;K,V&gt;[] getTable() &#123;</span><br><span class=\"line\">    expungeStaleEntries();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将引用队列里的元素拿出来，修正 table 中的无效数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">expungeStaleEntries</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object x; (x = queue.poll()) != <span class=\"keyword\">null</span>; ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (queue) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">            Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) x;<span class=\"comment\">// queue 放的是元素, 将要被清理的元素</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = indexFor(e.hash, table.length);<span class=\"comment\">// 定位在 table 数组的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Entry&lt;K,V&gt; prev = table[i];<span class=\"comment\">// 取得 table [i] 处链表的第一个元素</span></span><br><span class=\"line\">            Entry&lt;K,V&gt; p = prev;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">// 链表是否为空或者是否是链表的最后一个元素</span></span><br><span class=\"line\">                Entry&lt;K,V&gt; next = p.next;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p == e) &#123; <span class=\"comment\">// 找到了要被清理的元素</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (prev == e)<span class=\"comment\">// prev 不一定和 p 相同</span></span><br><span class=\"line\">                        table[i] = next; <span class=\"comment\">// 用下一个元素对 e 元素替换</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        prev.next = next; <span class=\"comment\">// 修复链接</span></span><br><span class=\"line\">                    <span class=\"comment\">// Must not null out e.next;</span></span><br><span class=\"line\">                    <span class=\"comment\">// stale entries may be in use by a HashIterator</span></span><br><span class=\"line\">                    e.value = <span class=\"keyword\">null</span>; <span class=\"comment\">// Help GC</span></span><br><span class=\"line\">                    size--;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                prev = p; <span class=\"comment\">// 没找到要被清理的元素,交换指针,移动位置,继续比对</span></span><br><span class=\"line\">                p = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Entry(Object key, V value, ReferenceQueue&lt;Object&gt; queue, <span class=\"keyword\">int</span> hash, Entry&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>(key, queue);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hash  = hash;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.next  = next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates a new weak reference that refers to the given object and is</span></span><br><span class=\"line\"><span class=\"comment\"> * registered with the given queue.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> referent object the new weak reference will refer to</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> q the queue with which the reference is to be registered,</span></span><br><span class=\"line\"><span class=\"comment\"> *          or &lt;tt&gt;null&lt;/tt&gt; if registration is not required</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 监听器效果, 如果引用的对象被回收(reference.get() == null)，则将其加入该队列</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeakReference</span><span class=\"params\">(T referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; q)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>(referent, q);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Reference(T referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; queue) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.referent = referent;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue = (queue == <span class=\"keyword\">null</span>) ? ReferenceQueue.NULL : queue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2. get 方法分析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = hash(k);</span><br><span class=\"line\">    Entry&lt;K,V&gt;[] tab = getTable();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = indexFor(h, tab.length);</span><br><span class=\"line\">    Entry&lt;K,V&gt; e = tab[index];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.hash == h &amp;&amp; eq(k, e.get()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.value;</span><br><span class=\"line\">        e = e.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. remove 方法, 分析过 expungeStaleEntries 方法，该方法就没必要看了</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = hash(k);</span><br><span class=\"line\">    Entry&lt;K,V&gt;[] tab = getTable();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = indexFor(h, tab.length);</span><br><span class=\"line\">    Entry&lt;K,V&gt; prev = tab[i];</span><br><span class=\"line\">    Entry&lt;K,V&gt; e = prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Entry&lt;K,V&gt; next = e.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h == e.hash &amp;&amp; eq(k, e.get())) &#123;</span><br><span class=\"line\">            modCount++;</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prev == e)</span><br><span class=\"line\">                tab[i] = next;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                prev.next = next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prev = e;</span><br><span class=\"line\">        e = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过分析可以看到 getTable() 经常被调用到，它和 ReferenceQueue 一起完成的对 k-v 的清理工作</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Shell关闭防火墙","_content":"### Redhat6.x 关闭防火墙的方法\n\n    关闭防火墙的方法为：\n\n    1. 永久性生效\n\n    开启：chkconfig iptables on\n\n    关闭：chkconfig iptables off\n\n    2. 即时生效，重启后失效\n\n    开启：service iptables start\n\n    关闭：service iptables stop\n\n    需要说明的是对于 Linux 下的其它服务都可以用以上命令执行开启和关闭操作\n\n    补充：\n\n    a. 防火墙还需要关闭ipv6的防火墙：\n\n    chkconfig ip6tables off\n\n    并且可以通过如下命令查看状态：\n\n    chkconfig --list iptables\n\n    b. selinux状态可以通过以下命令查看：\n\n    sestatus\n","source":"_posts/language/shell/linux防火墙.md","raw":"---\ntitle: Shell关闭防火墙\ncategories:\n- linux\n---\n### Redhat6.x 关闭防火墙的方法\n\n    关闭防火墙的方法为：\n\n    1. 永久性生效\n\n    开启：chkconfig iptables on\n\n    关闭：chkconfig iptables off\n\n    2. 即时生效，重启后失效\n\n    开启：service iptables start\n\n    关闭：service iptables stop\n\n    需要说明的是对于 Linux 下的其它服务都可以用以上命令执行开启和关闭操作\n\n    补充：\n\n    a. 防火墙还需要关闭ipv6的防火墙：\n\n    chkconfig ip6tables off\n\n    并且可以通过如下命令查看状态：\n\n    chkconfig --list iptables\n\n    b. selinux状态可以通过以下命令查看：\n\n    sestatus\n","slug":"language/shell/linux防火墙","published":1,"date":"2021-09-06T14:29:47.098Z","updated":"2021-09-06T14:29:47.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyit002nu6ukeyie0wzz","content":"<h3 id=\"Redhat6-x-关闭防火墙的方法\"><a href=\"#Redhat6-x-关闭防火墙的方法\" class=\"headerlink\" title=\"Redhat6.x 关闭防火墙的方法\"></a>Redhat6.x 关闭防火墙的方法</h3><pre><code>关闭防火墙的方法为：\n\n1. 永久性生效\n\n开启：chkconfig iptables on\n\n关闭：chkconfig iptables off\n\n2. 即时生效，重启后失效\n\n开启：service iptables start\n\n关闭：service iptables stop\n\n需要说明的是对于 Linux 下的其它服务都可以用以上命令执行开启和关闭操作\n\n补充：\n\na. 防火墙还需要关闭ipv6的防火墙：\n\nchkconfig ip6tables off\n\n并且可以通过如下命令查看状态：\n\nchkconfig --list iptables\n\nb. selinux状态可以通过以下命令查看：\n\nsestatus\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Redhat6-x-关闭防火墙的方法\"><a href=\"#Redhat6-x-关闭防火墙的方法\" class=\"headerlink\" title=\"Redhat6.x 关闭防火墙的方法\"></a>Redhat6.x 关闭防火墙的方法</h3><pre><code>关闭防火墙的方法为：\n\n1. 永久性生效\n\n开启：chkconfig iptables on\n\n关闭：chkconfig iptables off\n\n2. 即时生效，重启后失效\n\n开启：service iptables start\n\n关闭：service iptables stop\n\n需要说明的是对于 Linux 下的其它服务都可以用以上命令执行开启和关闭操作\n\n补充：\n\na. 防火墙还需要关闭ipv6的防火墙：\n\nchkconfig ip6tables off\n\n并且可以通过如下命令查看状态：\n\nchkconfig --list iptables\n\nb. selinux状态可以通过以下命令查看：\n\nsestatus\n</code></pre>\n"},{"title":"修改服务端IP","_content":"### 1.查看并修改\n\nvim /etc/sysconfig/network-scripts/ifcfg-bond0\n\n```\n[root@xxx-001 ~]# cat /etc/sysconfig/network-scripts/ifcfg-bond0\nDEVICE=bond0\nONBOOT=yes\nBOOTPROTO=none\nIPADDR=172.21.77.1\nNETMASK=255.255.255.192\nGATEWAY=172.21.77.62\nBONDING_OPTS=\"mode=1 miimon=100 primary=eth0\"\nUSERCTL=no\n```\n\n### 2.重启\n\n    service network restart\n\n### 3.备注\n\n    ---修改ip地址---\n\n    即时生效:# ifconfig eth0 192.168.1.155 netmask 255.255.255.0\n\n    重启生效:修改vi /etc/sysconfig/network-scripts/ifcfg-eth0\n\n    ---修改default gateway---\n\n    即时生效:# route add default gw 192.168.1.1\n\n    重启生效:修改vi /etc/sysconfig/network-scripts/ifcfg-eth0\n\n    ---修改dns---\n\n    修改vi /etc/resolv.conf  #修改后即时生效，重启同样有效\n\n    ---修改host name---\n\n    即时生效:# hostname test1\n\n    重启生效:修改vi /etc/sysconfig/network\n","source":"_posts/language/shell/修改机器服务端IP.md","raw":"---\ntitle: 修改服务端IP\ncategories:\n- linux\n---\n### 1.查看并修改\n\nvim /etc/sysconfig/network-scripts/ifcfg-bond0\n\n```\n[root@xxx-001 ~]# cat /etc/sysconfig/network-scripts/ifcfg-bond0\nDEVICE=bond0\nONBOOT=yes\nBOOTPROTO=none\nIPADDR=172.21.77.1\nNETMASK=255.255.255.192\nGATEWAY=172.21.77.62\nBONDING_OPTS=\"mode=1 miimon=100 primary=eth0\"\nUSERCTL=no\n```\n\n### 2.重启\n\n    service network restart\n\n### 3.备注\n\n    ---修改ip地址---\n\n    即时生效:# ifconfig eth0 192.168.1.155 netmask 255.255.255.0\n\n    重启生效:修改vi /etc/sysconfig/network-scripts/ifcfg-eth0\n\n    ---修改default gateway---\n\n    即时生效:# route add default gw 192.168.1.1\n\n    重启生效:修改vi /etc/sysconfig/network-scripts/ifcfg-eth0\n\n    ---修改dns---\n\n    修改vi /etc/resolv.conf  #修改后即时生效，重启同样有效\n\n    ---修改host name---\n\n    即时生效:# hostname test1\n\n    重启生效:修改vi /etc/sysconfig/network\n","slug":"language/shell/修改机器服务端IP","published":1,"date":"2021-09-06T14:29:47.098Z","updated":"2021-09-06T14:29:47.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyiu002ru6uk5yo44fpj","content":"<h3 id=\"1-查看并修改\"><a href=\"#1-查看并修改\" class=\"headerlink\" title=\"1.查看并修改\"></a>1.查看并修改</h3><p>vim /etc/sysconfig/network-scripts/ifcfg-bond0</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@xxx-001 ~]# cat /etc/sysconfig/network-scripts/ifcfg-bond0</span><br><span class=\"line\">DEVICE=bond0</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">BOOTPROTO=none</span><br><span class=\"line\">IPADDR=172.21.77.1</span><br><span class=\"line\">NETMASK=255.255.255.192</span><br><span class=\"line\">GATEWAY=172.21.77.62</span><br><span class=\"line\">BONDING_OPTS=&quot;mode=1 miimon=100 primary=eth0&quot;</span><br><span class=\"line\">USERCTL=no</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-重启\"><a href=\"#2-重启\" class=\"headerlink\" title=\"2.重启\"></a>2.重启</h3><pre><code>service network restart\n</code></pre>\n<h3 id=\"3-备注\"><a href=\"#3-备注\" class=\"headerlink\" title=\"3.备注\"></a>3.备注</h3><pre><code>---修改ip地址---\n\n即时生效:# ifconfig eth0 192.168.1.155 netmask 255.255.255.0\n\n重启生效:修改vi /etc/sysconfig/network-scripts/ifcfg-eth0\n\n---修改default gateway---\n\n即时生效:# route add default gw 192.168.1.1\n\n重启生效:修改vi /etc/sysconfig/network-scripts/ifcfg-eth0\n\n---修改dns---\n\n修改vi /etc/resolv.conf  #修改后即时生效，重启同样有效\n\n---修改host name---\n\n即时生效:# hostname test1\n\n重启生效:修改vi /etc/sysconfig/network\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-查看并修改\"><a href=\"#1-查看并修改\" class=\"headerlink\" title=\"1.查看并修改\"></a>1.查看并修改</h3><p>vim /etc/sysconfig/network-scripts/ifcfg-bond0</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@xxx-001 ~]# cat /etc/sysconfig/network-scripts/ifcfg-bond0</span><br><span class=\"line\">DEVICE=bond0</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">BOOTPROTO=none</span><br><span class=\"line\">IPADDR=172.21.77.1</span><br><span class=\"line\">NETMASK=255.255.255.192</span><br><span class=\"line\">GATEWAY=172.21.77.62</span><br><span class=\"line\">BONDING_OPTS=&quot;mode=1 miimon=100 primary=eth0&quot;</span><br><span class=\"line\">USERCTL=no</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-重启\"><a href=\"#2-重启\" class=\"headerlink\" title=\"2.重启\"></a>2.重启</h3><pre><code>service network restart\n</code></pre>\n<h3 id=\"3-备注\"><a href=\"#3-备注\" class=\"headerlink\" title=\"3.备注\"></a>3.备注</h3><pre><code>---修改ip地址---\n\n即时生效:# ifconfig eth0 192.168.1.155 netmask 255.255.255.0\n\n重启生效:修改vi /etc/sysconfig/network-scripts/ifcfg-eth0\n\n---修改default gateway---\n\n即时生效:# route add default gw 192.168.1.1\n\n重启生效:修改vi /etc/sysconfig/network-scripts/ifcfg-eth0\n\n---修改dns---\n\n修改vi /etc/resolv.conf  #修改后即时生效，重启同样有效\n\n---修改host name---\n\n即时生效:# hostname test1\n\n重启生效:修改vi /etc/sysconfig/network\n</code></pre>\n"},{"title":"工具脚本","_content":"### 定时任务\n\n```\ncrontab -e\n\n*/1 * * * * /home/5g-doc/doc-update.sh\n```\n\n请参考：https://www.runoob.com/linux/linux-comm-crontab.html\n","source":"_posts/language/shell/工具脚本.md","raw":"---\ntitle: 工具脚本\ncategories:\n- 编程语言\n    - shell\n---\n### 定时任务\n\n```\ncrontab -e\n\n*/1 * * * * /home/5g-doc/doc-update.sh\n```\n\n请参考：https://www.runoob.com/linux/linux-comm-crontab.html\n","slug":"language/shell/工具脚本","published":1,"date":"2021-09-06T14:29:47.099Z","updated":"2021-09-06T14:29:47.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyiv002uu6uk68dfa7by","content":"<h3 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\">*/1 * * * * /home/5g-doc/doc-update.sh</span><br></pre></td></tr></table></figure>\n\n<p>请参考：<a href=\"https://www.runoob.com/linux/linux-comm-crontab.html\">https://www.runoob.com/linux/linux-comm-crontab.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\">*/1 * * * * /home/5g-doc/doc-update.sh</span><br></pre></td></tr></table></figure>\n\n<p>请参考：<a href=\"https://www.runoob.com/linux/linux-comm-crontab.html\">https://www.runoob.com/linux/linux-comm-crontab.html</a></p>\n"},{"title":"常用shell命令","_content":"\n### 查找指定文件并返回结果\n\n    dbhost=`grep -c \"nihao\" servicesetting.properties`\n    echo $dbres\n    if [ $dbres -eq '0' ]; then\n        echo \"nihao Not Found\"\n    else\n        echo \"nihao Found!\"\n    fi\n\n### 判断变量为空\n\n加上引号判断\n\n    if [ ! -n \"$para1\" ]; then\n      echo \"IS NULL\"\n    else\n      echo \"NOT NULL\"\n    fi\n    【输出结果】\"IS NULL\"\n\n直接通过变量判断\n\n    para1=\n    if [ ! $para1 ]; then\n      echo \"IS NULL\"\n    else\n      echo \"NOT NULL\"\n    fi\n    【输出结果】\"IS NULL\"\n\n使用 test 判断\n\n    dmin=\n    if test -z \"$dmin\"\n    then\n      echo \"dmin is not set!\"\n    else\n      echo \"dmin is set !\"\n    fi\n    【输出结果】\"dmin is not set!\"\n\n使用\"\"判断\n\n    dmin=\n    if [ \"$dmin\" = \"\" ]\n    then\n      echo \"dmin is not set!\"\n    else\n      echo \"dmin is set !\"\n    fi\n    【输出结果】\"dmin is not set!\"\n","source":"_posts/language/shell/常用shell命令.md","raw":"---\ntitle: 常用shell命令\ncategories:\n- linux\n---\n\n### 查找指定文件并返回结果\n\n    dbhost=`grep -c \"nihao\" servicesetting.properties`\n    echo $dbres\n    if [ $dbres -eq '0' ]; then\n        echo \"nihao Not Found\"\n    else\n        echo \"nihao Found!\"\n    fi\n\n### 判断变量为空\n\n加上引号判断\n\n    if [ ! -n \"$para1\" ]; then\n      echo \"IS NULL\"\n    else\n      echo \"NOT NULL\"\n    fi\n    【输出结果】\"IS NULL\"\n\n直接通过变量判断\n\n    para1=\n    if [ ! $para1 ]; then\n      echo \"IS NULL\"\n    else\n      echo \"NOT NULL\"\n    fi\n    【输出结果】\"IS NULL\"\n\n使用 test 判断\n\n    dmin=\n    if test -z \"$dmin\"\n    then\n      echo \"dmin is not set!\"\n    else\n      echo \"dmin is set !\"\n    fi\n    【输出结果】\"dmin is not set!\"\n\n使用\"\"判断\n\n    dmin=\n    if [ \"$dmin\" = \"\" ]\n    then\n      echo \"dmin is not set!\"\n    else\n      echo \"dmin is set !\"\n    fi\n    【输出结果】\"dmin is not set!\"\n","slug":"language/shell/常用shell命令","published":1,"date":"2021-09-06T14:29:47.099Z","updated":"2021-09-06T14:29:47.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyiw002xu6uk8a182ga0","content":"<h3 id=\"查找指定文件并返回结果\"><a href=\"#查找指定文件并返回结果\" class=\"headerlink\" title=\"查找指定文件并返回结果\"></a>查找指定文件并返回结果</h3><pre><code>dbhost=`grep -c &quot;nihao&quot; servicesetting.properties`\necho $dbres\nif [ $dbres -eq &#39;0&#39; ]; then\n    echo &quot;nihao Not Found&quot;\nelse\n    echo &quot;nihao Found!&quot;\nfi\n</code></pre>\n<h3 id=\"判断变量为空\"><a href=\"#判断变量为空\" class=\"headerlink\" title=\"判断变量为空\"></a>判断变量为空</h3><p>加上引号判断</p>\n<pre><code>if [ ! -n &quot;$para1&quot; ]; then\n  echo &quot;IS NULL&quot;\nelse\n  echo &quot;NOT NULL&quot;\nfi\n【输出结果】&quot;IS NULL&quot;\n</code></pre>\n<p>直接通过变量判断</p>\n<pre><code>para1=\nif [ ! $para1 ]; then\n  echo &quot;IS NULL&quot;\nelse\n  echo &quot;NOT NULL&quot;\nfi\n【输出结果】&quot;IS NULL&quot;\n</code></pre>\n<p>使用 test 判断</p>\n<pre><code>dmin=\nif test -z &quot;$dmin&quot;\nthen\n  echo &quot;dmin is not set!&quot;\nelse\n  echo &quot;dmin is set !&quot;\nfi\n【输出结果】&quot;dmin is not set!&quot;\n</code></pre>\n<p>使用””判断</p>\n<pre><code>dmin=\nif [ &quot;$dmin&quot; = &quot;&quot; ]\nthen\n  echo &quot;dmin is not set!&quot;\nelse\n  echo &quot;dmin is set !&quot;\nfi\n【输出结果】&quot;dmin is not set!&quot;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"查找指定文件并返回结果\"><a href=\"#查找指定文件并返回结果\" class=\"headerlink\" title=\"查找指定文件并返回结果\"></a>查找指定文件并返回结果</h3><pre><code>dbhost=`grep -c &quot;nihao&quot; servicesetting.properties`\necho $dbres\nif [ $dbres -eq &#39;0&#39; ]; then\n    echo &quot;nihao Not Found&quot;\nelse\n    echo &quot;nihao Found!&quot;\nfi\n</code></pre>\n<h3 id=\"判断变量为空\"><a href=\"#判断变量为空\" class=\"headerlink\" title=\"判断变量为空\"></a>判断变量为空</h3><p>加上引号判断</p>\n<pre><code>if [ ! -n &quot;$para1&quot; ]; then\n  echo &quot;IS NULL&quot;\nelse\n  echo &quot;NOT NULL&quot;\nfi\n【输出结果】&quot;IS NULL&quot;\n</code></pre>\n<p>直接通过变量判断</p>\n<pre><code>para1=\nif [ ! $para1 ]; then\n  echo &quot;IS NULL&quot;\nelse\n  echo &quot;NOT NULL&quot;\nfi\n【输出结果】&quot;IS NULL&quot;\n</code></pre>\n<p>使用 test 判断</p>\n<pre><code>dmin=\nif test -z &quot;$dmin&quot;\nthen\n  echo &quot;dmin is not set!&quot;\nelse\n  echo &quot;dmin is set !&quot;\nfi\n【输出结果】&quot;dmin is not set!&quot;\n</code></pre>\n<p>使用””判断</p>\n<pre><code>dmin=\nif [ &quot;$dmin&quot; = &quot;&quot; ]\nthen\n  echo &quot;dmin is not set!&quot;\nelse\n  echo &quot;dmin is set !&quot;\nfi\n【输出结果】&quot;dmin is not set!&quot;\n</code></pre>\n"},{"title":"系统日志","_content":"\n####系统日志\n/var/log 为系统日志\n/var/log/supervisor/\n","source":"_posts/language/shell/日志相关.md","raw":"---\ntitle: 系统日志\ncategories:\n- linux\n---\n\n####系统日志\n/var/log 为系统日志\n/var/log/supervisor/\n","slug":"language/shell/日志相关","published":1,"date":"2021-09-06T14:29:47.099Z","updated":"2021-09-06T14:29:47.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyix002zu6uk51sqhda6","content":"<p>####系统日志<br>/var/log 为系统日志<br>/var/log/supervisor/</p>\n","site":{"data":{}},"excerpt":"","more":"<p>####系统日志<br>/var/log 为系统日志<br>/var/log/supervisor/</p>\n"},{"title":"权限设置shell命令","_content":"\n### 权限篇 chmod chgrp chown\n\n    chmod 777 文件名\n    chgrp 用户名 文件名  -R\n    chown 用户名 文件名  -R\n\n    -R表示递归目录下所有文件\n\n    一、修改文件所属组群——chgrp\n       修改文件所属组群很简单-chgrp命令，就是change group的缩写（我们可以利用这些来记忆命令）\n       语法：chgrp  组群  文件名/目录\n       举例：\n    [root@redhat ~]# groupadd groupa\n    [root@redhat ~]# groupadd groupb\n    [root@redhat ~]# useradd   -g groupa zgz\n    [root@redhat ~]# su - zgz\n    [zgz@redhat ~]$ touch filea\n    [zgz@redhat ~]$ touch fileb\n    [zgz@redhat ~]$ ls -l\n    total 8\n    -rw-r--r--  1 zgz groupa 0 Sep 26 05:48 filea\n    -rw-r--r--  1 zgz groupa 0 Sep 26 05:50 fileb\n              --\n    [root@redhat zgz]# chgrp  groupb filea      --改变filea所属群组\n    [root@redhat zgz]# ls -l\n    total 8\n    -rw-r--r--  1 zgz groupb 0 Sep 26 05:48 filea\n    -rw-r--r--  1 zgz groupa 0 Sep 26 05:50 fileb\n\n    二、修改文件拥有者——chown\n       修改组群的命令使chgrp，即change group，那么修改文件拥有者的命令自然就是chown，即change owner。chown功能很多，不仅仅能更改文件拥有者，还可以修改文件所属组群。如果需要将某一目录下的所有文件都改变其拥有者，可以使用-R参数。\n       语法如下：\n       chown [-R] 账号名称      文件/目录\n       chown [-R] 账号名称:组群  文件/目录\n       举例：\n    [root@redhat zgz]# ls -l\n    total 20\n    -rw-r--r--  1 zgz groupb    0 Sep 26 05:48 filea\n    -rw-r--r--  1 zgz groupa    3 Sep 26 05:59 fileb\n    drwxr-xr-x  2 zgz groupa 4096 Sep 26 06:07 zgzdir\n    [root@redhat zgz]# chown myy fileb --修改fileb的拥有者为myy\n    [root@redhat zgz]# ls -l\n    total 20\n    -rw-r--r--  1 zgz groupb    0 Sep 26 05:48 filea\n    -rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n    drwxr-xr-x  2 zgz groupa 4096 Sep 26 06:07 zgzdir\n    [root@redhat zgz]# chown myy:groupa filea --修改filea的拥有者为myy，并且同\n    [root@redhat zgz]# ls -l时修改组群为groupa\n    total 20\n    -rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n    -rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n    drwxr-xr-x  2 zgz groupa 4096 Sep 26 06:07 zgzdir\n    [root@redhat zgz]# chown -R myy  zgzdir                同时改变其下所有文件拥有者\n    total 20\n    -rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n    -rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n    drwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n    [root@redhat zgz]# cd zgzdir/\n    [root@redhat zgzdir]# ls -l\n    total 8\n    -rw-r--r--  1 myy groupa 0 Sep 26 06:07 filec\n    -rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n\n    三、改变文件权限——chmod\n       1.用数字来改变文件权限\n         我们已经了解了-rw-r--r-- 所表示含义，linux为每一个权限分配一个固定的数字：\n         r： 4（读权限）\n         w： 2（写权限）\n         x： 1（执行权限）\n    我们再将这些数字相加，就得到每一组的权限值，例如\n    -rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n    第一组（user）：rw- = 4+2+0 = 6\n    第二组（group）：r-- = 4+0+0 = 4\n    第三组（others）：r-- = 4+0+0 = 4\n    那么644就是fileb权限的数字表示值。\n         如果我们想改变某一个文件的权限，首先需要将权限转化为数字组合，例如我们想得到-rwxrw-r--，那么就应该得到数字组合：[4+2+1][4+2+0][4+0+0]=764,然后再用chmod命令去修改\n         chmod语法：\n         chmod xyz 文件/目录\n         举例：\n    [root@redhat zgzdir]# ls -l\n    total 8\n    -rw-r--r--  1 myy groupa 0 Sep 26 06:07 filec\n    -rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n    [root@redhat zgzdir]# chmod 777 filec--将filec的权限改变为777\n    [root@redhat zgzdir]# ls -l\n    total 8\n    -rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n    -rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n    [root@redhat zgzdir]# chmod 750 filed--将filed的权限改变为750\n    [root@redhat zgzdir]# ls -l\n    total 8\n    -rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n    -rwxr-x---  1 myy groupa 0 Sep 26 06:07 filed\n\n       2、用字符来改变文件权限\n          还有一种改变权限的方法，我们已经了解到，文件权限分为三组，分别是user，group，others，那么我们可以用u，g,o分别代表三组，另外，a（all）代表全部，而权限属性即可用r，w，x三个字符来表示，那么请看下面的语法：\n    chmod   u/g/o/a   +(加入)/-(除去)/=(设定)  r/w/x  文件或者目录\n\n     举例：\n     我们想使filed文件得到：u：可读，可写，可执行\n                             g，o：可读，可执行\n    [root@redhat zgzdir]# ls -l\n    total 8\n    -rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n    -rwxr-x---  1 myy groupa 0 Sep 26 06:07 filed\n    [root@redhat zgzdir]# chmod u=rwx,go=rx filed--修改filed的文件属性\n    [root@redhat zgzdir]# ls -l\n    total 8\n    -rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n    -rwxr-xr-x  1 myy groupa 0 Sep 26 06:07 filed\n    其中g和o也可以用“，”分开来分别设定。\n    假设目前我不知道各组权限如何，只是想让所有组都增加“x”权限，那么我们可以用chmod a+x filename来实现，\n    举例：\n    [root@redhat zgz]# ls -l\n    total 24\n    -rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n    -rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n    -rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\n    drwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n    [root@redhat zgz]# chmod a+x filea--修改filea的文件属性，所有组都增加“x”权限\n    [root@redhat zgz]# ls -l\n    total 24\n    -rwxr-xr-x  1 myy groupa    0 Sep 26 05:48 filea\n    -rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n    -rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\n    drwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n    如果想除去某一权限，可以用“-”来操作，\n    举例：\n    [root@redhat zgz]# ls -l\n    total 24\n    -rwxr-xr-x  1 myy groupa    0 Sep 26 05:48 filea\n    -rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n    -rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\n    drwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n    [root@redhat zgz]# chmod a-x filea-修改filea文件属性所有组都除去“x”权限\n    [root@redhat zgz]# ls -l\n    total 24\n    -rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n    -rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n    -rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\n    drwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n    [root@redhat zgz]#\n\n    友情提醒：\n    chgrp，chown，chmod这些命令默认的情况下只有root有权限执行，大家有时可能会用普通账户去修改文件权限，linux会提示你没有这个权限。因此大家一定要注意当前用户，例如：\n    [zgz@redhat ~]$ chgrp groupb filea\n    chgrp: changing group of `filea': Operation not permitted\n    --zgz没有权限来改变‘filea’的组群\n","source":"_posts/language/shell/权限设置shell命令.md","raw":"---\ntitle: 权限设置shell命令\ncategories:\n- linux\n---\n\n### 权限篇 chmod chgrp chown\n\n    chmod 777 文件名\n    chgrp 用户名 文件名  -R\n    chown 用户名 文件名  -R\n\n    -R表示递归目录下所有文件\n\n    一、修改文件所属组群——chgrp\n       修改文件所属组群很简单-chgrp命令，就是change group的缩写（我们可以利用这些来记忆命令）\n       语法：chgrp  组群  文件名/目录\n       举例：\n    [root@redhat ~]# groupadd groupa\n    [root@redhat ~]# groupadd groupb\n    [root@redhat ~]# useradd   -g groupa zgz\n    [root@redhat ~]# su - zgz\n    [zgz@redhat ~]$ touch filea\n    [zgz@redhat ~]$ touch fileb\n    [zgz@redhat ~]$ ls -l\n    total 8\n    -rw-r--r--  1 zgz groupa 0 Sep 26 05:48 filea\n    -rw-r--r--  1 zgz groupa 0 Sep 26 05:50 fileb\n              --\n    [root@redhat zgz]# chgrp  groupb filea      --改变filea所属群组\n    [root@redhat zgz]# ls -l\n    total 8\n    -rw-r--r--  1 zgz groupb 0 Sep 26 05:48 filea\n    -rw-r--r--  1 zgz groupa 0 Sep 26 05:50 fileb\n\n    二、修改文件拥有者——chown\n       修改组群的命令使chgrp，即change group，那么修改文件拥有者的命令自然就是chown，即change owner。chown功能很多，不仅仅能更改文件拥有者，还可以修改文件所属组群。如果需要将某一目录下的所有文件都改变其拥有者，可以使用-R参数。\n       语法如下：\n       chown [-R] 账号名称      文件/目录\n       chown [-R] 账号名称:组群  文件/目录\n       举例：\n    [root@redhat zgz]# ls -l\n    total 20\n    -rw-r--r--  1 zgz groupb    0 Sep 26 05:48 filea\n    -rw-r--r--  1 zgz groupa    3 Sep 26 05:59 fileb\n    drwxr-xr-x  2 zgz groupa 4096 Sep 26 06:07 zgzdir\n    [root@redhat zgz]# chown myy fileb --修改fileb的拥有者为myy\n    [root@redhat zgz]# ls -l\n    total 20\n    -rw-r--r--  1 zgz groupb    0 Sep 26 05:48 filea\n    -rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n    drwxr-xr-x  2 zgz groupa 4096 Sep 26 06:07 zgzdir\n    [root@redhat zgz]# chown myy:groupa filea --修改filea的拥有者为myy，并且同\n    [root@redhat zgz]# ls -l时修改组群为groupa\n    total 20\n    -rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n    -rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n    drwxr-xr-x  2 zgz groupa 4096 Sep 26 06:07 zgzdir\n    [root@redhat zgz]# chown -R myy  zgzdir                同时改变其下所有文件拥有者\n    total 20\n    -rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n    -rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n    drwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n    [root@redhat zgz]# cd zgzdir/\n    [root@redhat zgzdir]# ls -l\n    total 8\n    -rw-r--r--  1 myy groupa 0 Sep 26 06:07 filec\n    -rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n\n    三、改变文件权限——chmod\n       1.用数字来改变文件权限\n         我们已经了解了-rw-r--r-- 所表示含义，linux为每一个权限分配一个固定的数字：\n         r： 4（读权限）\n         w： 2（写权限）\n         x： 1（执行权限）\n    我们再将这些数字相加，就得到每一组的权限值，例如\n    -rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n    第一组（user）：rw- = 4+2+0 = 6\n    第二组（group）：r-- = 4+0+0 = 4\n    第三组（others）：r-- = 4+0+0 = 4\n    那么644就是fileb权限的数字表示值。\n         如果我们想改变某一个文件的权限，首先需要将权限转化为数字组合，例如我们想得到-rwxrw-r--，那么就应该得到数字组合：[4+2+1][4+2+0][4+0+0]=764,然后再用chmod命令去修改\n         chmod语法：\n         chmod xyz 文件/目录\n         举例：\n    [root@redhat zgzdir]# ls -l\n    total 8\n    -rw-r--r--  1 myy groupa 0 Sep 26 06:07 filec\n    -rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n    [root@redhat zgzdir]# chmod 777 filec--将filec的权限改变为777\n    [root@redhat zgzdir]# ls -l\n    total 8\n    -rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n    -rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n    [root@redhat zgzdir]# chmod 750 filed--将filed的权限改变为750\n    [root@redhat zgzdir]# ls -l\n    total 8\n    -rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n    -rwxr-x---  1 myy groupa 0 Sep 26 06:07 filed\n\n       2、用字符来改变文件权限\n          还有一种改变权限的方法，我们已经了解到，文件权限分为三组，分别是user，group，others，那么我们可以用u，g,o分别代表三组，另外，a（all）代表全部，而权限属性即可用r，w，x三个字符来表示，那么请看下面的语法：\n    chmod   u/g/o/a   +(加入)/-(除去)/=(设定)  r/w/x  文件或者目录\n\n     举例：\n     我们想使filed文件得到：u：可读，可写，可执行\n                             g，o：可读，可执行\n    [root@redhat zgzdir]# ls -l\n    total 8\n    -rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n    -rwxr-x---  1 myy groupa 0 Sep 26 06:07 filed\n    [root@redhat zgzdir]# chmod u=rwx,go=rx filed--修改filed的文件属性\n    [root@redhat zgzdir]# ls -l\n    total 8\n    -rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n    -rwxr-xr-x  1 myy groupa 0 Sep 26 06:07 filed\n    其中g和o也可以用“，”分开来分别设定。\n    假设目前我不知道各组权限如何，只是想让所有组都增加“x”权限，那么我们可以用chmod a+x filename来实现，\n    举例：\n    [root@redhat zgz]# ls -l\n    total 24\n    -rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n    -rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n    -rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\n    drwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n    [root@redhat zgz]# chmod a+x filea--修改filea的文件属性，所有组都增加“x”权限\n    [root@redhat zgz]# ls -l\n    total 24\n    -rwxr-xr-x  1 myy groupa    0 Sep 26 05:48 filea\n    -rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n    -rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\n    drwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n    如果想除去某一权限，可以用“-”来操作，\n    举例：\n    [root@redhat zgz]# ls -l\n    total 24\n    -rwxr-xr-x  1 myy groupa    0 Sep 26 05:48 filea\n    -rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n    -rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\n    drwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n    [root@redhat zgz]# chmod a-x filea-修改filea文件属性所有组都除去“x”权限\n    [root@redhat zgz]# ls -l\n    total 24\n    -rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n    -rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n    -rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\n    drwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n    [root@redhat zgz]#\n\n    友情提醒：\n    chgrp，chown，chmod这些命令默认的情况下只有root有权限执行，大家有时可能会用普通账户去修改文件权限，linux会提示你没有这个权限。因此大家一定要注意当前用户，例如：\n    [zgz@redhat ~]$ chgrp groupb filea\n    chgrp: changing group of `filea': Operation not permitted\n    --zgz没有权限来改变‘filea’的组群\n","slug":"language/shell/权限设置shell命令","published":1,"date":"2021-09-06T14:29:47.099Z","updated":"2021-09-06T14:29:47.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyiy0033u6uk8l58flm3","content":"<h3 id=\"权限篇-chmod-chgrp-chown\"><a href=\"#权限篇-chmod-chgrp-chown\" class=\"headerlink\" title=\"权限篇 chmod chgrp chown\"></a>权限篇 chmod chgrp chown</h3><pre><code>chmod 777 文件名\nchgrp 用户名 文件名  -R\nchown 用户名 文件名  -R\n\n-R表示递归目录下所有文件\n\n一、修改文件所属组群——chgrp\n   修改文件所属组群很简单-chgrp命令，就是change group的缩写（我们可以利用这些来记忆命令）\n   语法：chgrp  组群  文件名/目录\n   举例：\n[root@redhat ~]# groupadd groupa\n[root@redhat ~]# groupadd groupb\n[root@redhat ~]# useradd   -g groupa zgz\n[root@redhat ~]# su - zgz\n[zgz@redhat ~]$ touch filea\n[zgz@redhat ~]$ touch fileb\n[zgz@redhat ~]$ ls -l\ntotal 8\n-rw-r--r--  1 zgz groupa 0 Sep 26 05:48 filea\n-rw-r--r--  1 zgz groupa 0 Sep 26 05:50 fileb\n          --\n[root@redhat zgz]# chgrp  groupb filea      --改变filea所属群组\n[root@redhat zgz]# ls -l\ntotal 8\n-rw-r--r--  1 zgz groupb 0 Sep 26 05:48 filea\n-rw-r--r--  1 zgz groupa 0 Sep 26 05:50 fileb\n\n二、修改文件拥有者——chown\n   修改组群的命令使chgrp，即change group，那么修改文件拥有者的命令自然就是chown，即change owner。chown功能很多，不仅仅能更改文件拥有者，还可以修改文件所属组群。如果需要将某一目录下的所有文件都改变其拥有者，可以使用-R参数。\n   语法如下：\n   chown [-R] 账号名称      文件/目录\n   chown [-R] 账号名称:组群  文件/目录\n   举例：\n[root@redhat zgz]# ls -l\ntotal 20\n-rw-r--r--  1 zgz groupb    0 Sep 26 05:48 filea\n-rw-r--r--  1 zgz groupa    3 Sep 26 05:59 fileb\ndrwxr-xr-x  2 zgz groupa 4096 Sep 26 06:07 zgzdir\n[root@redhat zgz]# chown myy fileb --修改fileb的拥有者为myy\n[root@redhat zgz]# ls -l\ntotal 20\n-rw-r--r--  1 zgz groupb    0 Sep 26 05:48 filea\n-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\ndrwxr-xr-x  2 zgz groupa 4096 Sep 26 06:07 zgzdir\n[root@redhat zgz]# chown myy:groupa filea --修改filea的拥有者为myy，并且同\n[root@redhat zgz]# ls -l时修改组群为groupa\ntotal 20\n-rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\ndrwxr-xr-x  2 zgz groupa 4096 Sep 26 06:07 zgzdir\n[root@redhat zgz]# chown -R myy  zgzdir                同时改变其下所有文件拥有者\ntotal 20\n-rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\ndrwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n[root@redhat zgz]# cd zgzdir/\n[root@redhat zgzdir]# ls -l\ntotal 8\n-rw-r--r--  1 myy groupa 0 Sep 26 06:07 filec\n-rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n\n三、改变文件权限——chmod\n   1.用数字来改变文件权限\n     我们已经了解了-rw-r--r-- 所表示含义，linux为每一个权限分配一个固定的数字：\n     r： 4（读权限）\n     w： 2（写权限）\n     x： 1（执行权限）\n我们再将这些数字相加，就得到每一组的权限值，例如\n-rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n第一组（user）：rw- = 4+2+0 = 6\n第二组（group）：r-- = 4+0+0 = 4\n第三组（others）：r-- = 4+0+0 = 4\n那么644就是fileb权限的数字表示值。\n     如果我们想改变某一个文件的权限，首先需要将权限转化为数字组合，例如我们想得到-rwxrw-r--，那么就应该得到数字组合：[4+2+1][4+2+0][4+0+0]=764,然后再用chmod命令去修改\n     chmod语法：\n     chmod xyz 文件/目录\n     举例：\n[root@redhat zgzdir]# ls -l\ntotal 8\n-rw-r--r--  1 myy groupa 0 Sep 26 06:07 filec\n-rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n[root@redhat zgzdir]# chmod 777 filec--将filec的权限改变为777\n[root@redhat zgzdir]# ls -l\ntotal 8\n-rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n-rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n[root@redhat zgzdir]# chmod 750 filed--将filed的权限改变为750\n[root@redhat zgzdir]# ls -l\ntotal 8\n-rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n-rwxr-x---  1 myy groupa 0 Sep 26 06:07 filed\n\n   2、用字符来改变文件权限\n      还有一种改变权限的方法，我们已经了解到，文件权限分为三组，分别是user，group，others，那么我们可以用u，g,o分别代表三组，另外，a（all）代表全部，而权限属性即可用r，w，x三个字符来表示，那么请看下面的语法：\nchmod   u/g/o/a   +(加入)/-(除去)/=(设定)  r/w/x  文件或者目录\n\n 举例：\n 我们想使filed文件得到：u：可读，可写，可执行\n                         g，o：可读，可执行\n[root@redhat zgzdir]# ls -l\ntotal 8\n-rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n-rwxr-x---  1 myy groupa 0 Sep 26 06:07 filed\n[root@redhat zgzdir]# chmod u=rwx,go=rx filed--修改filed的文件属性\n[root@redhat zgzdir]# ls -l\ntotal 8\n-rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n-rwxr-xr-x  1 myy groupa 0 Sep 26 06:07 filed\n其中g和o也可以用“，”分开来分别设定。\n假设目前我不知道各组权限如何，只是想让所有组都增加“x”权限，那么我们可以用chmod a+x filename来实现，\n举例：\n[root@redhat zgz]# ls -l\ntotal 24\n-rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n-rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\ndrwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n[root@redhat zgz]# chmod a+x filea--修改filea的文件属性，所有组都增加“x”权限\n[root@redhat zgz]# ls -l\ntotal 24\n-rwxr-xr-x  1 myy groupa    0 Sep 26 05:48 filea\n-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n-rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\ndrwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n如果想除去某一权限，可以用“-”来操作，\n举例：\n[root@redhat zgz]# ls -l\ntotal 24\n-rwxr-xr-x  1 myy groupa    0 Sep 26 05:48 filea\n-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n-rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\ndrwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n[root@redhat zgz]# chmod a-x filea-修改filea文件属性所有组都除去“x”权限\n[root@redhat zgz]# ls -l\ntotal 24\n-rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n-rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\ndrwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n[root@redhat zgz]#\n\n友情提醒：\nchgrp，chown，chmod这些命令默认的情况下只有root有权限执行，大家有时可能会用普通账户去修改文件权限，linux会提示你没有这个权限。因此大家一定要注意当前用户，例如：\n[zgz@redhat ~]$ chgrp groupb filea\nchgrp: changing group of `filea&#39;: Operation not permitted\n--zgz没有权限来改变‘filea’的组群\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"权限篇-chmod-chgrp-chown\"><a href=\"#权限篇-chmod-chgrp-chown\" class=\"headerlink\" title=\"权限篇 chmod chgrp chown\"></a>权限篇 chmod chgrp chown</h3><pre><code>chmod 777 文件名\nchgrp 用户名 文件名  -R\nchown 用户名 文件名  -R\n\n-R表示递归目录下所有文件\n\n一、修改文件所属组群——chgrp\n   修改文件所属组群很简单-chgrp命令，就是change group的缩写（我们可以利用这些来记忆命令）\n   语法：chgrp  组群  文件名/目录\n   举例：\n[root@redhat ~]# groupadd groupa\n[root@redhat ~]# groupadd groupb\n[root@redhat ~]# useradd   -g groupa zgz\n[root@redhat ~]# su - zgz\n[zgz@redhat ~]$ touch filea\n[zgz@redhat ~]$ touch fileb\n[zgz@redhat ~]$ ls -l\ntotal 8\n-rw-r--r--  1 zgz groupa 0 Sep 26 05:48 filea\n-rw-r--r--  1 zgz groupa 0 Sep 26 05:50 fileb\n          --\n[root@redhat zgz]# chgrp  groupb filea      --改变filea所属群组\n[root@redhat zgz]# ls -l\ntotal 8\n-rw-r--r--  1 zgz groupb 0 Sep 26 05:48 filea\n-rw-r--r--  1 zgz groupa 0 Sep 26 05:50 fileb\n\n二、修改文件拥有者——chown\n   修改组群的命令使chgrp，即change group，那么修改文件拥有者的命令自然就是chown，即change owner。chown功能很多，不仅仅能更改文件拥有者，还可以修改文件所属组群。如果需要将某一目录下的所有文件都改变其拥有者，可以使用-R参数。\n   语法如下：\n   chown [-R] 账号名称      文件/目录\n   chown [-R] 账号名称:组群  文件/目录\n   举例：\n[root@redhat zgz]# ls -l\ntotal 20\n-rw-r--r--  1 zgz groupb    0 Sep 26 05:48 filea\n-rw-r--r--  1 zgz groupa    3 Sep 26 05:59 fileb\ndrwxr-xr-x  2 zgz groupa 4096 Sep 26 06:07 zgzdir\n[root@redhat zgz]# chown myy fileb --修改fileb的拥有者为myy\n[root@redhat zgz]# ls -l\ntotal 20\n-rw-r--r--  1 zgz groupb    0 Sep 26 05:48 filea\n-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\ndrwxr-xr-x  2 zgz groupa 4096 Sep 26 06:07 zgzdir\n[root@redhat zgz]# chown myy:groupa filea --修改filea的拥有者为myy，并且同\n[root@redhat zgz]# ls -l时修改组群为groupa\ntotal 20\n-rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\ndrwxr-xr-x  2 zgz groupa 4096 Sep 26 06:07 zgzdir\n[root@redhat zgz]# chown -R myy  zgzdir                同时改变其下所有文件拥有者\ntotal 20\n-rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\ndrwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n[root@redhat zgz]# cd zgzdir/\n[root@redhat zgzdir]# ls -l\ntotal 8\n-rw-r--r--  1 myy groupa 0 Sep 26 06:07 filec\n-rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n\n三、改变文件权限——chmod\n   1.用数字来改变文件权限\n     我们已经了解了-rw-r--r-- 所表示含义，linux为每一个权限分配一个固定的数字：\n     r： 4（读权限）\n     w： 2（写权限）\n     x： 1（执行权限）\n我们再将这些数字相加，就得到每一组的权限值，例如\n-rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n第一组（user）：rw- = 4+2+0 = 6\n第二组（group）：r-- = 4+0+0 = 4\n第三组（others）：r-- = 4+0+0 = 4\n那么644就是fileb权限的数字表示值。\n     如果我们想改变某一个文件的权限，首先需要将权限转化为数字组合，例如我们想得到-rwxrw-r--，那么就应该得到数字组合：[4+2+1][4+2+0][4+0+0]=764,然后再用chmod命令去修改\n     chmod语法：\n     chmod xyz 文件/目录\n     举例：\n[root@redhat zgzdir]# ls -l\ntotal 8\n-rw-r--r--  1 myy groupa 0 Sep 26 06:07 filec\n-rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n[root@redhat zgzdir]# chmod 777 filec--将filec的权限改变为777\n[root@redhat zgzdir]# ls -l\ntotal 8\n-rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n-rw-r--r--  1 myy groupa 0 Sep 26 06:07 filed\n[root@redhat zgzdir]# chmod 750 filed--将filed的权限改变为750\n[root@redhat zgzdir]# ls -l\ntotal 8\n-rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n-rwxr-x---  1 myy groupa 0 Sep 26 06:07 filed\n\n   2、用字符来改变文件权限\n      还有一种改变权限的方法，我们已经了解到，文件权限分为三组，分别是user，group，others，那么我们可以用u，g,o分别代表三组，另外，a（all）代表全部，而权限属性即可用r，w，x三个字符来表示，那么请看下面的语法：\nchmod   u/g/o/a   +(加入)/-(除去)/=(设定)  r/w/x  文件或者目录\n\n 举例：\n 我们想使filed文件得到：u：可读，可写，可执行\n                         g，o：可读，可执行\n[root@redhat zgzdir]# ls -l\ntotal 8\n-rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n-rwxr-x---  1 myy groupa 0 Sep 26 06:07 filed\n[root@redhat zgzdir]# chmod u=rwx,go=rx filed--修改filed的文件属性\n[root@redhat zgzdir]# ls -l\ntotal 8\n-rwxrwxrwx  1 myy groupa 0 Sep 26 06:07 filec\n-rwxr-xr-x  1 myy groupa 0 Sep 26 06:07 filed\n其中g和o也可以用“，”分开来分别设定。\n假设目前我不知道各组权限如何，只是想让所有组都增加“x”权限，那么我们可以用chmod a+x filename来实现，\n举例：\n[root@redhat zgz]# ls -l\ntotal 24\n-rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n-rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\ndrwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n[root@redhat zgz]# chmod a+x filea--修改filea的文件属性，所有组都增加“x”权限\n[root@redhat zgz]# ls -l\ntotal 24\n-rwxr-xr-x  1 myy groupa    0 Sep 26 05:48 filea\n-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n-rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\ndrwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n如果想除去某一权限，可以用“-”来操作，\n举例：\n[root@redhat zgz]# ls -l\ntotal 24\n-rwxr-xr-x  1 myy groupa    0 Sep 26 05:48 filea\n-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n-rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\ndrwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n[root@redhat zgz]# chmod a-x filea-修改filea文件属性所有组都除去“x”权限\n[root@redhat zgz]# ls -l\ntotal 24\n-rw-r--r--  1 myy groupa    0 Sep 26 05:48 filea\n-rw-r--r--  1 myy groupa    3 Sep 26 05:59 fileb\n-rw-r--r--  1 zgz groupa    0 Sep 26 06:39 fileg\ndrwxr-xr-x  2 myy groupa 4096 Sep 26 06:07 zgzdir\n[root@redhat zgz]#\n\n友情提醒：\nchgrp，chown，chmod这些命令默认的情况下只有root有权限执行，大家有时可能会用普通账户去修改文件权限，linux会提示你没有这个权限。因此大家一定要注意当前用户，例如：\n[zgz@redhat ~]$ chgrp groupb filea\nchgrp: changing group of `filea&#39;: Operation not permitted\n--zgz没有权限来改变‘filea’的组群\n</code></pre>\n"},{"title":"查看系统属性","_content":"## 查看系统属性\n\n### 1.查看 Linux 内核版本命令\n\n#### 1.uname -a\n\n    linux-onss:~ # uname -a\n    Linux linux-onss 4.4.73-5-default #1 SMP Tue Jul 4 15:33:39 UTC 2017 (b7ce4e4) x86_64 x86_64 x86_64 GNU/Linux\n\n#### 2.cat /proc/version\n\n    cat /proc/version\n    Linux version 4.4.73-5-default (geeko@buildhost) (gcc version 4.8.5 (SUSE Linux) ) #1 SMP Tue Jul 4 15:33:39 UTC 2017 (b7ce4e4)\n\n### 2.查看 Linux 系统版本的命令\n\n#### 1.lsb_release -a\n\n    即可列出所有版本信息，这个命令适用于所有的Linux发行版，包括RedHat、SUSE、Debian…等发行版\n\n    lsb_release -a\n    LSB Version:\tn/a\n    Distributor ID:\tSUSE\n    Description:\tSUSE Linux Enterprise Server 12 SP3\n    Release:\t12.3\n    Codename:\tn/a\n\n#### 2.cat /etc/issue\n\n    此命令也适用于所有的Linux发行版。\n\n    cat /etc/issue\n    Welcome to SUSE Linux Enterprise Server 12 SP3  (x86_64) - Kernel \\r (\\l).\n\n#### 3.cat /etc/redhat-release\n\n    这种方法只适合Redhat系的Linux：\n\n    cat /etc/redhat-release\n    Red Hat Enterprise Linux Server release 6.2 (Santiago)\n\n#### 4.查看硬件信息\n\n    请参考：\n    https://www.cnblogs.com/cloudos/p/8416415.html\n","source":"_posts/language/shell/系统属性相关.md","raw":"---\ntitle: 查看系统属性\ncategories:\n- linux\n---\n## 查看系统属性\n\n### 1.查看 Linux 内核版本命令\n\n#### 1.uname -a\n\n    linux-onss:~ # uname -a\n    Linux linux-onss 4.4.73-5-default #1 SMP Tue Jul 4 15:33:39 UTC 2017 (b7ce4e4) x86_64 x86_64 x86_64 GNU/Linux\n\n#### 2.cat /proc/version\n\n    cat /proc/version\n    Linux version 4.4.73-5-default (geeko@buildhost) (gcc version 4.8.5 (SUSE Linux) ) #1 SMP Tue Jul 4 15:33:39 UTC 2017 (b7ce4e4)\n\n### 2.查看 Linux 系统版本的命令\n\n#### 1.lsb_release -a\n\n    即可列出所有版本信息，这个命令适用于所有的Linux发行版，包括RedHat、SUSE、Debian…等发行版\n\n    lsb_release -a\n    LSB Version:\tn/a\n    Distributor ID:\tSUSE\n    Description:\tSUSE Linux Enterprise Server 12 SP3\n    Release:\t12.3\n    Codename:\tn/a\n\n#### 2.cat /etc/issue\n\n    此命令也适用于所有的Linux发行版。\n\n    cat /etc/issue\n    Welcome to SUSE Linux Enterprise Server 12 SP3  (x86_64) - Kernel \\r (\\l).\n\n#### 3.cat /etc/redhat-release\n\n    这种方法只适合Redhat系的Linux：\n\n    cat /etc/redhat-release\n    Red Hat Enterprise Linux Server release 6.2 (Santiago)\n\n#### 4.查看硬件信息\n\n    请参考：\n    https://www.cnblogs.com/cloudos/p/8416415.html\n","slug":"language/shell/系统属性相关","published":1,"date":"2021-09-06T14:29:47.099Z","updated":"2021-09-06T14:29:47.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyiy0036u6uk5qzh4m9a","content":"<h2 id=\"查看系统属性\"><a href=\"#查看系统属性\" class=\"headerlink\" title=\"查看系统属性\"></a>查看系统属性</h2><h3 id=\"1-查看-Linux-内核版本命令\"><a href=\"#1-查看-Linux-内核版本命令\" class=\"headerlink\" title=\"1.查看 Linux 内核版本命令\"></a>1.查看 Linux 内核版本命令</h3><h4 id=\"1-uname-a\"><a href=\"#1-uname-a\" class=\"headerlink\" title=\"1.uname -a\"></a>1.uname -a</h4><pre><code>linux-onss:~ # uname -a\nLinux linux-onss 4.4.73-5-default #1 SMP Tue Jul 4 15:33:39 UTC 2017 (b7ce4e4) x86_64 x86_64 x86_64 GNU/Linux\n</code></pre>\n<h4 id=\"2-cat-proc-version\"><a href=\"#2-cat-proc-version\" class=\"headerlink\" title=\"2.cat /proc/version\"></a>2.cat /proc/version</h4><pre><code>cat /proc/version\nLinux version 4.4.73-5-default (geeko@buildhost) (gcc version 4.8.5 (SUSE Linux) ) #1 SMP Tue Jul 4 15:33:39 UTC 2017 (b7ce4e4)\n</code></pre>\n<h3 id=\"2-查看-Linux-系统版本的命令\"><a href=\"#2-查看-Linux-系统版本的命令\" class=\"headerlink\" title=\"2.查看 Linux 系统版本的命令\"></a>2.查看 Linux 系统版本的命令</h3><h4 id=\"1-lsb-release-a\"><a href=\"#1-lsb-release-a\" class=\"headerlink\" title=\"1.lsb_release -a\"></a>1.lsb_release -a</h4><pre><code>即可列出所有版本信息，这个命令适用于所有的Linux发行版，包括RedHat、SUSE、Debian…等发行版\n\nlsb_release -a\nLSB Version:    n/a\nDistributor ID:    SUSE\nDescription:    SUSE Linux Enterprise Server 12 SP3\nRelease:    12.3\nCodename:    n/a\n</code></pre>\n<h4 id=\"2-cat-etc-issue\"><a href=\"#2-cat-etc-issue\" class=\"headerlink\" title=\"2.cat /etc/issue\"></a>2.cat /etc/issue</h4><pre><code>此命令也适用于所有的Linux发行版。\n\ncat /etc/issue\nWelcome to SUSE Linux Enterprise Server 12 SP3  (x86_64) - Kernel \\r (\\l).\n</code></pre>\n<h4 id=\"3-cat-etc-redhat-release\"><a href=\"#3-cat-etc-redhat-release\" class=\"headerlink\" title=\"3.cat /etc/redhat-release\"></a>3.cat /etc/redhat-release</h4><pre><code>这种方法只适合Redhat系的Linux：\n\ncat /etc/redhat-release\nRed Hat Enterprise Linux Server release 6.2 (Santiago)\n</code></pre>\n<h4 id=\"4-查看硬件信息\"><a href=\"#4-查看硬件信息\" class=\"headerlink\" title=\"4.查看硬件信息\"></a>4.查看硬件信息</h4><pre><code>请参考：\nhttps://www.cnblogs.com/cloudos/p/8416415.html\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"查看系统属性\"><a href=\"#查看系统属性\" class=\"headerlink\" title=\"查看系统属性\"></a>查看系统属性</h2><h3 id=\"1-查看-Linux-内核版本命令\"><a href=\"#1-查看-Linux-内核版本命令\" class=\"headerlink\" title=\"1.查看 Linux 内核版本命令\"></a>1.查看 Linux 内核版本命令</h3><h4 id=\"1-uname-a\"><a href=\"#1-uname-a\" class=\"headerlink\" title=\"1.uname -a\"></a>1.uname -a</h4><pre><code>linux-onss:~ # uname -a\nLinux linux-onss 4.4.73-5-default #1 SMP Tue Jul 4 15:33:39 UTC 2017 (b7ce4e4) x86_64 x86_64 x86_64 GNU/Linux\n</code></pre>\n<h4 id=\"2-cat-proc-version\"><a href=\"#2-cat-proc-version\" class=\"headerlink\" title=\"2.cat /proc/version\"></a>2.cat /proc/version</h4><pre><code>cat /proc/version\nLinux version 4.4.73-5-default (geeko@buildhost) (gcc version 4.8.5 (SUSE Linux) ) #1 SMP Tue Jul 4 15:33:39 UTC 2017 (b7ce4e4)\n</code></pre>\n<h3 id=\"2-查看-Linux-系统版本的命令\"><a href=\"#2-查看-Linux-系统版本的命令\" class=\"headerlink\" title=\"2.查看 Linux 系统版本的命令\"></a>2.查看 Linux 系统版本的命令</h3><h4 id=\"1-lsb-release-a\"><a href=\"#1-lsb-release-a\" class=\"headerlink\" title=\"1.lsb_release -a\"></a>1.lsb_release -a</h4><pre><code>即可列出所有版本信息，这个命令适用于所有的Linux发行版，包括RedHat、SUSE、Debian…等发行版\n\nlsb_release -a\nLSB Version:    n/a\nDistributor ID:    SUSE\nDescription:    SUSE Linux Enterprise Server 12 SP3\nRelease:    12.3\nCodename:    n/a\n</code></pre>\n<h4 id=\"2-cat-etc-issue\"><a href=\"#2-cat-etc-issue\" class=\"headerlink\" title=\"2.cat /etc/issue\"></a>2.cat /etc/issue</h4><pre><code>此命令也适用于所有的Linux发行版。\n\ncat /etc/issue\nWelcome to SUSE Linux Enterprise Server 12 SP3  (x86_64) - Kernel \\r (\\l).\n</code></pre>\n<h4 id=\"3-cat-etc-redhat-release\"><a href=\"#3-cat-etc-redhat-release\" class=\"headerlink\" title=\"3.cat /etc/redhat-release\"></a>3.cat /etc/redhat-release</h4><pre><code>这种方法只适合Redhat系的Linux：\n\ncat /etc/redhat-release\nRed Hat Enterprise Linux Server release 6.2 (Santiago)\n</code></pre>\n<h4 id=\"4-查看硬件信息\"><a href=\"#4-查看硬件信息\" class=\"headerlink\" title=\"4.查看硬件信息\"></a>4.查看硬件信息</h4><pre><code>请参考：\nhttps://www.cnblogs.com/cloudos/p/8416415.html\n</code></pre>\n"},{"title":"Shell远程执行命令","_content":"\n#### Linux Shell 远程执行命令（命令行与脚本方式）\n\n    shell远程执行：\n    　　经常需要远程到其他节点上执行一些shell命令，如果分别ssh到每台主机上再去执行很麻烦，因此能有个集中管理的方式就好了。一下介绍两种shell命令远程执行的方法。\n\n    前提条件：\n    　　配置ssh免密码登陆\n\n    对于简单的命令：\n    　　如果是简单执行几个命令，则：\n\n    ssh user@remoteNode \"cd /home ; ls\"\n    ssh root@10.10.220.90 \"cd /home ; ls\"\n\n    　　基本能完成常用的对于远程节点的管理了，几个注意的点：\n\n    双引号，必须有。如果不加双引号，第二个ls命令在本地执行\n    分号，两个命令之间用分号隔开\n    对于脚本的方式：\n    　　有些远程执行的命令内容较多，单一命令无法完成，考虑脚本方式实现：\n\n    复制代码\n    #!/bin/bash\n    ssh user@remoteNode > /dev/null 2>&1 << eeooff\n    cd /home\n    touch abcdefg.txt\n    exit\n    eeooff\n    echo done!\n    复制代码\n    　　远程执行的内容在“<< eeooff ” 至“ eeooff ”之间，在远程机器上的操作就位于其中，注意的点：\n\n    << eeooff，ssh后直到遇到eeooff这样的内容结束，eeooff可以随便修改成其他形式。\n    重定向目的在于不显示远程的输出了\n    在结束前，加exit退出远程节点\n","source":"_posts/language/shell/远程执行.md","raw":"---\ntitle: Shell远程执行命令\ncategories:\n- linux\n---\n\n#### Linux Shell 远程执行命令（命令行与脚本方式）\n\n    shell远程执行：\n    　　经常需要远程到其他节点上执行一些shell命令，如果分别ssh到每台主机上再去执行很麻烦，因此能有个集中管理的方式就好了。一下介绍两种shell命令远程执行的方法。\n\n    前提条件：\n    　　配置ssh免密码登陆\n\n    对于简单的命令：\n    　　如果是简单执行几个命令，则：\n\n    ssh user@remoteNode \"cd /home ; ls\"\n    ssh root@10.10.220.90 \"cd /home ; ls\"\n\n    　　基本能完成常用的对于远程节点的管理了，几个注意的点：\n\n    双引号，必须有。如果不加双引号，第二个ls命令在本地执行\n    分号，两个命令之间用分号隔开\n    对于脚本的方式：\n    　　有些远程执行的命令内容较多，单一命令无法完成，考虑脚本方式实现：\n\n    复制代码\n    #!/bin/bash\n    ssh user@remoteNode > /dev/null 2>&1 << eeooff\n    cd /home\n    touch abcdefg.txt\n    exit\n    eeooff\n    echo done!\n    复制代码\n    　　远程执行的内容在“<< eeooff ” 至“ eeooff ”之间，在远程机器上的操作就位于其中，注意的点：\n\n    << eeooff，ssh后直到遇到eeooff这样的内容结束，eeooff可以随便修改成其他形式。\n    重定向目的在于不显示远程的输出了\n    在结束前，加exit退出远程节点\n","slug":"language/shell/远程执行","published":1,"date":"2021-09-06T14:29:47.099Z","updated":"2021-09-06T14:29:47.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyj0003bu6uk9dms7991","content":"<h4 id=\"Linux-Shell-远程执行命令（命令行与脚本方式）\"><a href=\"#Linux-Shell-远程执行命令（命令行与脚本方式）\" class=\"headerlink\" title=\"Linux Shell 远程执行命令（命令行与脚本方式）\"></a>Linux Shell 远程执行命令（命令行与脚本方式）</h4><pre><code>shell远程执行：\n　　经常需要远程到其他节点上执行一些shell命令，如果分别ssh到每台主机上再去执行很麻烦，因此能有个集中管理的方式就好了。一下介绍两种shell命令远程执行的方法。\n\n前提条件：\n　　配置ssh免密码登陆\n\n对于简单的命令：\n　　如果是简单执行几个命令，则：\n\nssh user@remoteNode &quot;cd /home ; ls&quot;\nssh root@10.10.220.90 &quot;cd /home ; ls&quot;\n\n　　基本能完成常用的对于远程节点的管理了，几个注意的点：\n\n双引号，必须有。如果不加双引号，第二个ls命令在本地执行\n分号，两个命令之间用分号隔开\n对于脚本的方式：\n　　有些远程执行的命令内容较多，单一命令无法完成，考虑脚本方式实现：\n\n复制代码\n#!/bin/bash\nssh user@remoteNode &gt; /dev/null 2&gt;&amp;1 &lt;&lt; eeooff\ncd /home\ntouch abcdefg.txt\nexit\neeooff\necho done!\n复制代码\n　　远程执行的内容在“&lt;&lt; eeooff ” 至“ eeooff ”之间，在远程机器上的操作就位于其中，注意的点：\n\n&lt;&lt; eeooff，ssh后直到遇到eeooff这样的内容结束，eeooff可以随便修改成其他形式。\n重定向目的在于不显示远程的输出了\n在结束前，加exit退出远程节点\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Linux-Shell-远程执行命令（命令行与脚本方式）\"><a href=\"#Linux-Shell-远程执行命令（命令行与脚本方式）\" class=\"headerlink\" title=\"Linux Shell 远程执行命令（命令行与脚本方式）\"></a>Linux Shell 远程执行命令（命令行与脚本方式）</h4><pre><code>shell远程执行：\n　　经常需要远程到其他节点上执行一些shell命令，如果分别ssh到每台主机上再去执行很麻烦，因此能有个集中管理的方式就好了。一下介绍两种shell命令远程执行的方法。\n\n前提条件：\n　　配置ssh免密码登陆\n\n对于简单的命令：\n　　如果是简单执行几个命令，则：\n\nssh user@remoteNode &quot;cd /home ; ls&quot;\nssh root@10.10.220.90 &quot;cd /home ; ls&quot;\n\n　　基本能完成常用的对于远程节点的管理了，几个注意的点：\n\n双引号，必须有。如果不加双引号，第二个ls命令在本地执行\n分号，两个命令之间用分号隔开\n对于脚本的方式：\n　　有些远程执行的命令内容较多，单一命令无法完成，考虑脚本方式实现：\n\n复制代码\n#!/bin/bash\nssh user@remoteNode &gt; /dev/null 2&gt;&amp;1 &lt;&lt; eeooff\ncd /home\ntouch abcdefg.txt\nexit\neeooff\necho done!\n复制代码\n　　远程执行的内容在“&lt;&lt; eeooff ” 至“ eeooff ”之间，在远程机器上的操作就位于其中，注意的点：\n\n&lt;&lt; eeooff，ssh后直到遇到eeooff这样的内容结束，eeooff可以随便修改成其他形式。\n重定向目的在于不显示远程的输出了\n在结束前，加exit退出远程节点\n</code></pre>\n"},{"title":"DPDK-架构解析","_content":"\n# 目录\n\n### DPDK-架构解析\n\n- [目录](http://t.zoukankan.com/hzcya1995-p-13309271.html#_0)\n- [前文列表](http://t.zoukankan.com/hzcya1995-p-13309271.html#_3)\n- [DPDK 架构](http://t.zoukankan.com/hzcya1995-p-13309271.html#DPDK__7)\n- [内核态模块](http://t.zoukankan.com/hzcya1995-p-13309271.html#_32)\n   - [IGB_UIO](http://t.zoukankan.com/hzcya1995-p-13309271.html#IGB_UIO_33)\n   - [KNI](http://t.zoukankan.com/hzcya1995-p-13309271.html#KNI_35)\n- [PMD](http://t.zoukankan.com/hzcya1995-p-13309271.html#PMD_44)\n- [DPDK Lib（核心部件库）](http://t.zoukankan.com/hzcya1995-p-13309271.html#DPDK_Lib_47)\n   - [组件代码](http://t.zoukankan.com/hzcya1995-p-13309271.html#_75)\n- [平台相关模块](http://t.zoukankan.com/hzcya1995-p-13309271.html#_98)\n- [Classify 库](http://t.zoukankan.com/hzcya1995-p-13309271.html#Classify__109)\n- [QoS 库](http://t.zoukankan.com/hzcya1995-p-13309271.html#QoS__112)\n# 前文列表\n《[DPDK — 安装部署](https://is-cloud.blog.csdn.net/article/details/105980054)》\n《[DPDK — 数据平面开发技术](https://is-cloud.blog.csdn.net/article/details/98944634)》\n# DPDK 架构\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481768904-b3db99fb-9713-449c-8322-139b150da09f.png#clientId=u0928072c-4fbe-4&from=paste&id=ud4958617&margin=%5Bobject%20Object%5D&name=image.png&originHeight=750&originWidth=942&originalType=url&ratio=1&size=130624&status=done&style=none&taskId=ue7338f12-4782-4375-b298-d165d19cfce)\n**内核态模块**：\n\n- IGB_UIO：\n- KNI\n\n**用户态函数库以及网卡驱动程序**：\n\n- 用户态轮询模式的网卡驱动程序（PMD Driver）\n- 核心部件库（Core Libraries）\n- 操作系统平台相关模块（Platform）\n- QoS 库\n- 报文转发分类算法库（Classify）\n\n用户应用程序可以应用以上函数库以及驱动支持，来实现完全内核旁路的数据面转发应用程序，例如：OVS-DPDK。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481769146-6c669857-20c2-4539-8a45-342d8064df02.png#clientId=u0928072c-4fbe-4&from=paste&id=u61914ee9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=496&originWidth=389&originalType=url&ratio=1&size=244431&status=done&style=none&taskId=u498a303d-b2c5-4b95-9d2b-b86ccccf82b)\n\n- **EAL（Environment Abstraction Layer，环境抽象层）**：为应用提供了一个通用接口，隐藏了与底层库与设备打交道的相关细节。EAL 实现了 DPDK 运行的初始化工作，基于大页表的内存分配，多核亲缘性设置，原子和锁操作，并将 PCI 设备地址映射到用户空间，方便应用程序访问。\n- **Buffer Manager API**：通过预先从 EAL 上分配固定大小的多个内存对象，避免了在运行过程中动态进行内存分配和回收，以此来提高效率，用于数据包 Buffer 的管理。\n- **Queue/Ring Manager API**：以高效的方式实现了无锁的 FIFO 环形队列，适用于一个生产者多个消费者、一个消费者多个生产者模型。支持批量无锁操作，可避免锁冲突导致的等待。\n- **Packet Flow Classification API**：通过 Intel SSE 基于多元组的方式实现了高效的 HASH 算法，以便快速对数据包进行分类处理。该 API 一般用于路由查找过程中的最长前缀匹配。此外，安全产品场景中，可以根据 DataFlow 五元组来标记不同的用户。\n- **PMD（Poll Mode Library）**：则实现了 Intel 1GbE、10GbE 和 40GbE 网卡下基于轮询收发包的工作模式，大大加速网卡收发包性能。\n# 内核态模块\n## IGB_UIO\n《[DPDK — IGB_UIO，与 UIO Framework 进行交互的内核模块](https://is-cloud.blog.csdn.net/article/details/106007926)》\n## KNI\nKNI（Kernel NIC Interface，内核网卡接口），是 DPDK 允许用户态和内核态交换报文的解决方案，模拟了一个虚拟的网口，提供 DPDK 应用程序和 Linux 内核之间通讯没接。**即 KNI 接口允许报文从用户态接收后转发到 Linux 内核协议栈中去**。\n虽然 DPDK 的高速转发性能很出色，但是也有自己的一些缺点，比如没有标准协议栈就是其中之一，当然也可能当时设计时就将没有将协议栈考虑进去，毕竟协议栈需要将报文转发处理，可能会使处理报文的能力大大降低。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481769261-be65ada1-ff35-4880-a322-d18f4e381979.png#clientId=u0928072c-4fbe-4&from=paste&id=uba9293cc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=345&originWidth=558&originalType=url&ratio=1&size=82294&status=done&style=none&taskId=ucad680f6-11df-4deb-8c57-78c6b3ef9ff)\n上图是 KNI 的 mbuf 的使用流程，也可以看出报文的流向，因为报文在代码中其实就是一个个内存指针。其中 rx_q 右边是用户态，左边是内核态。最后通过调用 netif_rx 将报文送入 Linux 内核协议栈，这其中需要将 DPDK 的 mbuf 转换成标准的 skb_buf 结构体。当 Linux 内核向 KNI 端口发送报文时，调用回调函数 kni_net_tx，然后报文经过转换之后发送到端口上。\n# PMD\n《[DPDK — PMD，DPDK 的核心优化](https://blog.csdn.net/Jmilk/article/details/103025477)》\n# DPDK Lib（核心部件库）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481773020-678f8177-7108-49a0-864e-ddf4523e41ba.png#clientId=u0928072c-4fbe-4&from=paste&id=uf52df5e3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=378&originWidth=797&originalType=url&ratio=1&size=72204&status=done&style=none&taskId=ud2675454-3c19-45ba-93aa-e142cbd7379)\n核心部件库（Core Libraries）是 DPDK 面向用户态协议栈应用程序员开发的模块。\n\n- **EAL（Environment Abstraction Layer，环境抽象层）**：对 DPDK 的运行环境（e.g. Linux 操作系统）进行初始化，包括：HugePage 内存分配、内存/缓冲区/队列分配、原子性无锁操作、NUMA 亲和性、CPU 绑定等，并通过 UIO 或 VFIO 技术将 PCI/PCIe 设备地址映射到用户态，方便了用户态的 DPDK 应用程序调用。同时为应用程序提供了一个通用接口，隐藏了其与底层库以及设备打交道的相关细节。\n- **MALLOC（堆内存管理组件）**：为 DPDK 应用程序提供从 HugePage 内分配堆内存的接口。当需要为 SKB（Socket Buffer，本质是若干个数据包的缓存区）分配大量的小块内存时（如：分配用于存储 Buffer descriptor table 中每个表项指针的内存）可以调用该接口。由于堆内存是从 HugePage 内存分配的，所以可以减少 TLB 缺页。\n\n注：堆，是由开发人员主动分配和释放的存储空间， 若开发人员不释放，则程序结束时由 OS 回收，分配方式类似于链表；与堆不同，栈，是由操作系统自动分配和释放的存储空间 ，用于存放函数的参数值、局部变量等，其操作方式类似于数据结构中的栈。\n\n- **MBUF（网络报文缓存块管理组件）**：为 DPDK 应用程序提供创建和释放用于存储数据报文信息的缓存块的接口。提供了两种类型的 MBUF，一种用于存储一般信息，一种用于存储实际的报文数据。这些 MBUF 存储在一个内存池中。\n- **MEMPOOL（内存池管理组件）**：为 DPDK 应用程序和其它组件提供分配内存池的接口，内存池是一个由固定大小的多个内存块组成的内存容器，可用于存储不同的对像实体，如：数据报文缓存块等。内存池由内存池的名称（一个字符串）进行唯一标识，它由一个 Ring 缓冲区和一组本地缓存队列组成，每个 CPU Core 优先从自身的缓存队列中分配内存块，当本地缓存队列减少到一定程度时，开始从内存环缓冲区中申请内存块来进行补充。\n- **RING（环缓冲区管理组件）**：为 DPDK 应用程序和其它组件提供一个无锁的多生产者多消费者 FIFO 队列。\n\n**NOTE**：DPDK 基于 Linux 内核的无锁环形缓冲 kfifo 实现了一套自己的无锁机制。支持单生产者入列/单消费者出列和多生产者入列/多消费者出列操作，在数据传输的时候，降低性能的同时还能保证数据的同步。\n\n- **TIMER（定时器组件）**：提供一些异步周期执行的接口（也可以只执行一次），可以指定某个函数在规定时间内的异步执行，就像 LIBC 中的 timer 定时器。但是这里的定时器需要 DPDK 应用程序在主循环中周期内调用 rte_timer_manage 来使能定时器，使用起来不那么方便。TIMER 的时间参考来自 EAL 层提供的时间接口。\n\n注：除了以上六个核心组件外，DPDK 还提供以下功能：\n\n1. 以太网轮询模式驱动（PMD）架构：把以太网驱动从内核移到应用层，采用同步轮询机制而不是内核态的异步中断机制来提高报文的接收和发送效率。\n1. 报文转发算法支持：Hash 库和 LPM 库为报文转发算法提供支持。\n1. 网络协议定义和相关宏定义：基于 FreeBSD IP 协议栈的相关定义，如：TCP、UDP、SCTP 等协议头定义。\n1. 报文 QoS 调度库：支持随机早检测、流量整形、严格优先级和加权随机循环优先级调度等相关 QoS 功能。\n1. 内核网络接口库（KNI）：提供一种 DPDK 应用程序与内核协议栈的通信的方法，类似 Linux 的 TUN/TAP 接口，但比 TUN/TAP 接口效率高。每个物理网口可以虚拟出多个 KNI 接口。\n## 组件代码\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481769193-9dfea3cf-22c5-4457-a519-93ed7c367c80.png#clientId=u0928072c-4fbe-4&from=paste&id=u0bdac4d1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=567&originWidth=754&originalType=url&ratio=1&size=235286&status=done&style=none&taskId=u50cc4576-6bc3-4c17-9ca9-16f78f2a3f9)\n**注**：\n\n- RTE：Run-Time Environment\n- EAL：Environment Abstraction Layer\n- PMD：Poll-Mode Driver\n\n核心部件库对应的 DPDK 核心组件实现：\n\n- **Memory Manager（librte_malloc，堆内存管理器）**：提供一组 API，用于从 HugePages 内存创建的 memzones 中分配内存，而不是在堆中分配。这有助于改善 Linux 用户空间环境下典型的从堆中大量分配 4KB 页面而容易引起 TLB 不命中。\n- **Memory Pool Manager（librte_mempool，内存池管理器）**：内存池管理器负责分配的内存中的 Pool 对象。Pool 由名称唯一标识，并使用一个 Ring 来存储空闲对象。它提供了其他一些可选的服务，例如：每个 CPU Core 的对象缓存和对齐方式帮助，以确保将填充的对象在所有内存通道上得到均匀分布。\n- **Ring Manager（librte_ring，环形队列管理器）**：在一个大小有限的页表中，Ring 数据结构提供了一个无锁的多生产者-多消费者 FIFO API。相较于无锁队列，它有一些的优势，如：更容易实现，适应于大容量操作，而且速度更快。 一个 Ring 可以在 Memory Pool Manager 中被使用，也可以用于不同 CPU Core 或 Processor 之间作为通用的通信机制。\n- **Network Packet Buffer Management（librte_mbuf，网络报文缓冲区管理）**：提供一组 API，用于分配、释放和操作 MBUFs（数据报文缓冲区），DPDK 应用程序中可以使用这些缓存区来存储消息以及报文数据。\n- **Timer Manager（librte_timer，定时器管理）**：为 DPDK 应用程序的执行单元提供了定时服务，支持以异步的方式执行函数。定时器可以设置周期调用，也可以设置为只调用一次。DPDK 应用程序可以使用 EAL 提供的 HPET 接口来获取高精度时钟的引用，并且能在每个 Core 上根据需要进行初始化。\n\n代码目录：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481772817-48082ec2-383b-4210-ba40-a1222f0bc792.png#clientId=u0928072c-4fbe-4&from=paste&id=u3da3a1cd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1242&originWidth=850&originalType=url&ratio=1&size=875251&status=done&style=none&taskId=uf4da37b8-7885-437e-85b9-45254cdde0a)\n# 平台相关模块\n平台相关模块（Platform）包括 KNI、POWER（能耗管理）以及 IVSHMEM 接口。\n\n- **KNI**：主要通过 Linux 内核中的 kni.ko 模块将数据报文从用户态传递给内核态协议栈处理，以便常规的用户进程（e.g. Container）可以使用 Linux 内核协议栈传统的 Socket 接口对相关报文进行处理。\n- **POWER**：提供了一些 API，让 DPDK 应用程序可以根据收包速率动态调整 CPU 频率或让 CPU 进入不同的休眠状态。\n- **IVSHMEM**：模块提供了虚拟机与虚拟机之间，或者虚拟机与主机之间的零拷贝共享内存机制。当 DPDK 应用程序运行时，IVSHMEM 模块会调用 Core Libraries 的 API，把几个 HugePage 内存映射为一个 IVSHMEM 设备池，并通过参数传递给 QEMU，这样，就实现了虚拟机之间的零拷贝内存共享。\n# Classify 库\n支持精确匹配（Exact Match）、最长匹配（LPM）和通配符匹配（ACL）数据报文，并提供常用的包处理的查表操作。\n# QoS 库\n提供网络服务质量相关的组件，如：限速（Meter）和调度（Scheduler）。\n","source":"_posts/network/dpdk/DPDK-架构解析.md","raw":"\n---\ntitle: DPDK-架构解析\n\ncategories:\n- 5G\n\ntag:\n- DPDK\n- 5G\n---\n\n# 目录\n\n### DPDK-架构解析\n\n- [目录](http://t.zoukankan.com/hzcya1995-p-13309271.html#_0)\n- [前文列表](http://t.zoukankan.com/hzcya1995-p-13309271.html#_3)\n- [DPDK 架构](http://t.zoukankan.com/hzcya1995-p-13309271.html#DPDK__7)\n- [内核态模块](http://t.zoukankan.com/hzcya1995-p-13309271.html#_32)\n   - [IGB_UIO](http://t.zoukankan.com/hzcya1995-p-13309271.html#IGB_UIO_33)\n   - [KNI](http://t.zoukankan.com/hzcya1995-p-13309271.html#KNI_35)\n- [PMD](http://t.zoukankan.com/hzcya1995-p-13309271.html#PMD_44)\n- [DPDK Lib（核心部件库）](http://t.zoukankan.com/hzcya1995-p-13309271.html#DPDK_Lib_47)\n   - [组件代码](http://t.zoukankan.com/hzcya1995-p-13309271.html#_75)\n- [平台相关模块](http://t.zoukankan.com/hzcya1995-p-13309271.html#_98)\n- [Classify 库](http://t.zoukankan.com/hzcya1995-p-13309271.html#Classify__109)\n- [QoS 库](http://t.zoukankan.com/hzcya1995-p-13309271.html#QoS__112)\n# 前文列表\n《[DPDK — 安装部署](https://is-cloud.blog.csdn.net/article/details/105980054)》\n《[DPDK — 数据平面开发技术](https://is-cloud.blog.csdn.net/article/details/98944634)》\n# DPDK 架构\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481768904-b3db99fb-9713-449c-8322-139b150da09f.png#clientId=u0928072c-4fbe-4&from=paste&id=ud4958617&margin=%5Bobject%20Object%5D&name=image.png&originHeight=750&originWidth=942&originalType=url&ratio=1&size=130624&status=done&style=none&taskId=ue7338f12-4782-4375-b298-d165d19cfce)\n**内核态模块**：\n\n- IGB_UIO：\n- KNI\n\n**用户态函数库以及网卡驱动程序**：\n\n- 用户态轮询模式的网卡驱动程序（PMD Driver）\n- 核心部件库（Core Libraries）\n- 操作系统平台相关模块（Platform）\n- QoS 库\n- 报文转发分类算法库（Classify）\n\n用户应用程序可以应用以上函数库以及驱动支持，来实现完全内核旁路的数据面转发应用程序，例如：OVS-DPDK。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481769146-6c669857-20c2-4539-8a45-342d8064df02.png#clientId=u0928072c-4fbe-4&from=paste&id=u61914ee9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=496&originWidth=389&originalType=url&ratio=1&size=244431&status=done&style=none&taskId=u498a303d-b2c5-4b95-9d2b-b86ccccf82b)\n\n- **EAL（Environment Abstraction Layer，环境抽象层）**：为应用提供了一个通用接口，隐藏了与底层库与设备打交道的相关细节。EAL 实现了 DPDK 运行的初始化工作，基于大页表的内存分配，多核亲缘性设置，原子和锁操作，并将 PCI 设备地址映射到用户空间，方便应用程序访问。\n- **Buffer Manager API**：通过预先从 EAL 上分配固定大小的多个内存对象，避免了在运行过程中动态进行内存分配和回收，以此来提高效率，用于数据包 Buffer 的管理。\n- **Queue/Ring Manager API**：以高效的方式实现了无锁的 FIFO 环形队列，适用于一个生产者多个消费者、一个消费者多个生产者模型。支持批量无锁操作，可避免锁冲突导致的等待。\n- **Packet Flow Classification API**：通过 Intel SSE 基于多元组的方式实现了高效的 HASH 算法，以便快速对数据包进行分类处理。该 API 一般用于路由查找过程中的最长前缀匹配。此外，安全产品场景中，可以根据 DataFlow 五元组来标记不同的用户。\n- **PMD（Poll Mode Library）**：则实现了 Intel 1GbE、10GbE 和 40GbE 网卡下基于轮询收发包的工作模式，大大加速网卡收发包性能。\n# 内核态模块\n## IGB_UIO\n《[DPDK — IGB_UIO，与 UIO Framework 进行交互的内核模块](https://is-cloud.blog.csdn.net/article/details/106007926)》\n## KNI\nKNI（Kernel NIC Interface，内核网卡接口），是 DPDK 允许用户态和内核态交换报文的解决方案，模拟了一个虚拟的网口，提供 DPDK 应用程序和 Linux 内核之间通讯没接。**即 KNI 接口允许报文从用户态接收后转发到 Linux 内核协议栈中去**。\n虽然 DPDK 的高速转发性能很出色，但是也有自己的一些缺点，比如没有标准协议栈就是其中之一，当然也可能当时设计时就将没有将协议栈考虑进去，毕竟协议栈需要将报文转发处理，可能会使处理报文的能力大大降低。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481769261-be65ada1-ff35-4880-a322-d18f4e381979.png#clientId=u0928072c-4fbe-4&from=paste&id=uba9293cc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=345&originWidth=558&originalType=url&ratio=1&size=82294&status=done&style=none&taskId=ucad680f6-11df-4deb-8c57-78c6b3ef9ff)\n上图是 KNI 的 mbuf 的使用流程，也可以看出报文的流向，因为报文在代码中其实就是一个个内存指针。其中 rx_q 右边是用户态，左边是内核态。最后通过调用 netif_rx 将报文送入 Linux 内核协议栈，这其中需要将 DPDK 的 mbuf 转换成标准的 skb_buf 结构体。当 Linux 内核向 KNI 端口发送报文时，调用回调函数 kni_net_tx，然后报文经过转换之后发送到端口上。\n# PMD\n《[DPDK — PMD，DPDK 的核心优化](https://blog.csdn.net/Jmilk/article/details/103025477)》\n# DPDK Lib（核心部件库）\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481773020-678f8177-7108-49a0-864e-ddf4523e41ba.png#clientId=u0928072c-4fbe-4&from=paste&id=uf52df5e3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=378&originWidth=797&originalType=url&ratio=1&size=72204&status=done&style=none&taskId=ud2675454-3c19-45ba-93aa-e142cbd7379)\n核心部件库（Core Libraries）是 DPDK 面向用户态协议栈应用程序员开发的模块。\n\n- **EAL（Environment Abstraction Layer，环境抽象层）**：对 DPDK 的运行环境（e.g. Linux 操作系统）进行初始化，包括：HugePage 内存分配、内存/缓冲区/队列分配、原子性无锁操作、NUMA 亲和性、CPU 绑定等，并通过 UIO 或 VFIO 技术将 PCI/PCIe 设备地址映射到用户态，方便了用户态的 DPDK 应用程序调用。同时为应用程序提供了一个通用接口，隐藏了其与底层库以及设备打交道的相关细节。\n- **MALLOC（堆内存管理组件）**：为 DPDK 应用程序提供从 HugePage 内分配堆内存的接口。当需要为 SKB（Socket Buffer，本质是若干个数据包的缓存区）分配大量的小块内存时（如：分配用于存储 Buffer descriptor table 中每个表项指针的内存）可以调用该接口。由于堆内存是从 HugePage 内存分配的，所以可以减少 TLB 缺页。\n\n注：堆，是由开发人员主动分配和释放的存储空间， 若开发人员不释放，则程序结束时由 OS 回收，分配方式类似于链表；与堆不同，栈，是由操作系统自动分配和释放的存储空间 ，用于存放函数的参数值、局部变量等，其操作方式类似于数据结构中的栈。\n\n- **MBUF（网络报文缓存块管理组件）**：为 DPDK 应用程序提供创建和释放用于存储数据报文信息的缓存块的接口。提供了两种类型的 MBUF，一种用于存储一般信息，一种用于存储实际的报文数据。这些 MBUF 存储在一个内存池中。\n- **MEMPOOL（内存池管理组件）**：为 DPDK 应用程序和其它组件提供分配内存池的接口，内存池是一个由固定大小的多个内存块组成的内存容器，可用于存储不同的对像实体，如：数据报文缓存块等。内存池由内存池的名称（一个字符串）进行唯一标识，它由一个 Ring 缓冲区和一组本地缓存队列组成，每个 CPU Core 优先从自身的缓存队列中分配内存块，当本地缓存队列减少到一定程度时，开始从内存环缓冲区中申请内存块来进行补充。\n- **RING（环缓冲区管理组件）**：为 DPDK 应用程序和其它组件提供一个无锁的多生产者多消费者 FIFO 队列。\n\n**NOTE**：DPDK 基于 Linux 内核的无锁环形缓冲 kfifo 实现了一套自己的无锁机制。支持单生产者入列/单消费者出列和多生产者入列/多消费者出列操作，在数据传输的时候，降低性能的同时还能保证数据的同步。\n\n- **TIMER（定时器组件）**：提供一些异步周期执行的接口（也可以只执行一次），可以指定某个函数在规定时间内的异步执行，就像 LIBC 中的 timer 定时器。但是这里的定时器需要 DPDK 应用程序在主循环中周期内调用 rte_timer_manage 来使能定时器，使用起来不那么方便。TIMER 的时间参考来自 EAL 层提供的时间接口。\n\n注：除了以上六个核心组件外，DPDK 还提供以下功能：\n\n1. 以太网轮询模式驱动（PMD）架构：把以太网驱动从内核移到应用层，采用同步轮询机制而不是内核态的异步中断机制来提高报文的接收和发送效率。\n1. 报文转发算法支持：Hash 库和 LPM 库为报文转发算法提供支持。\n1. 网络协议定义和相关宏定义：基于 FreeBSD IP 协议栈的相关定义，如：TCP、UDP、SCTP 等协议头定义。\n1. 报文 QoS 调度库：支持随机早检测、流量整形、严格优先级和加权随机循环优先级调度等相关 QoS 功能。\n1. 内核网络接口库（KNI）：提供一种 DPDK 应用程序与内核协议栈的通信的方法，类似 Linux 的 TUN/TAP 接口，但比 TUN/TAP 接口效率高。每个物理网口可以虚拟出多个 KNI 接口。\n## 组件代码\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481769193-9dfea3cf-22c5-4457-a519-93ed7c367c80.png#clientId=u0928072c-4fbe-4&from=paste&id=u0bdac4d1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=567&originWidth=754&originalType=url&ratio=1&size=235286&status=done&style=none&taskId=u50cc4576-6bc3-4c17-9ca9-16f78f2a3f9)\n**注**：\n\n- RTE：Run-Time Environment\n- EAL：Environment Abstraction Layer\n- PMD：Poll-Mode Driver\n\n核心部件库对应的 DPDK 核心组件实现：\n\n- **Memory Manager（librte_malloc，堆内存管理器）**：提供一组 API，用于从 HugePages 内存创建的 memzones 中分配内存，而不是在堆中分配。这有助于改善 Linux 用户空间环境下典型的从堆中大量分配 4KB 页面而容易引起 TLB 不命中。\n- **Memory Pool Manager（librte_mempool，内存池管理器）**：内存池管理器负责分配的内存中的 Pool 对象。Pool 由名称唯一标识，并使用一个 Ring 来存储空闲对象。它提供了其他一些可选的服务，例如：每个 CPU Core 的对象缓存和对齐方式帮助，以确保将填充的对象在所有内存通道上得到均匀分布。\n- **Ring Manager（librte_ring，环形队列管理器）**：在一个大小有限的页表中，Ring 数据结构提供了一个无锁的多生产者-多消费者 FIFO API。相较于无锁队列，它有一些的优势，如：更容易实现，适应于大容量操作，而且速度更快。 一个 Ring 可以在 Memory Pool Manager 中被使用，也可以用于不同 CPU Core 或 Processor 之间作为通用的通信机制。\n- **Network Packet Buffer Management（librte_mbuf，网络报文缓冲区管理）**：提供一组 API，用于分配、释放和操作 MBUFs（数据报文缓冲区），DPDK 应用程序中可以使用这些缓存区来存储消息以及报文数据。\n- **Timer Manager（librte_timer，定时器管理）**：为 DPDK 应用程序的执行单元提供了定时服务，支持以异步的方式执行函数。定时器可以设置周期调用，也可以设置为只调用一次。DPDK 应用程序可以使用 EAL 提供的 HPET 接口来获取高精度时钟的引用，并且能在每个 Core 上根据需要进行初始化。\n\n代码目录：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481772817-48082ec2-383b-4210-ba40-a1222f0bc792.png#clientId=u0928072c-4fbe-4&from=paste&id=u3da3a1cd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1242&originWidth=850&originalType=url&ratio=1&size=875251&status=done&style=none&taskId=uf4da37b8-7885-437e-85b9-45254cdde0a)\n# 平台相关模块\n平台相关模块（Platform）包括 KNI、POWER（能耗管理）以及 IVSHMEM 接口。\n\n- **KNI**：主要通过 Linux 内核中的 kni.ko 模块将数据报文从用户态传递给内核态协议栈处理，以便常规的用户进程（e.g. Container）可以使用 Linux 内核协议栈传统的 Socket 接口对相关报文进行处理。\n- **POWER**：提供了一些 API，让 DPDK 应用程序可以根据收包速率动态调整 CPU 频率或让 CPU 进入不同的休眠状态。\n- **IVSHMEM**：模块提供了虚拟机与虚拟机之间，或者虚拟机与主机之间的零拷贝共享内存机制。当 DPDK 应用程序运行时，IVSHMEM 模块会调用 Core Libraries 的 API，把几个 HugePage 内存映射为一个 IVSHMEM 设备池，并通过参数传递给 QEMU，这样，就实现了虚拟机之间的零拷贝内存共享。\n# Classify 库\n支持精确匹配（Exact Match）、最长匹配（LPM）和通配符匹配（ACL）数据报文，并提供常用的包处理的查表操作。\n# QoS 库\n提供网络服务质量相关的组件，如：限速（Meter）和调度（Scheduler）。\n","slug":"network/dpdk/DPDK-架构解析","published":1,"date":"2021-07-31T11:10:47.890Z","updated":"2021-07-31T11:10:47.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyj0003eu6uk8feggnuu","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><h3 id=\"DPDK-架构解析\"><a href=\"#DPDK-架构解析\" class=\"headerlink\" title=\"DPDK-架构解析\"></a>DPDK-架构解析</h3><ul>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#_0\">目录</a></li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#_3\">前文列表</a></li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#DPDK__7\">DPDK 架构</a></li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#_32\">内核态模块</a><ul>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#IGB_UIO_33\">IGB_UIO</a></li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#KNI_35\">KNI</a></li>\n</ul>\n</li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#PMD_44\">PMD</a></li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#DPDK_Lib_47\">DPDK Lib（核心部件库）</a><ul>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#_75\">组件代码</a></li>\n</ul>\n</li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#_98\">平台相关模块</a></li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#Classify__109\">Classify 库</a></li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#QoS__112\">QoS 库</a><h1 id=\"前文列表\"><a href=\"#前文列表\" class=\"headerlink\" title=\"前文列表\"></a>前文列表</h1>《<a href=\"https://is-cloud.blog.csdn.net/article/details/105980054\">DPDK — 安装部署</a>》<br>《<a href=\"https://is-cloud.blog.csdn.net/article/details/98944634\">DPDK — 数据平面开发技术</a>》<h1 id=\"DPDK-架构\"><a href=\"#DPDK-架构\" class=\"headerlink\" title=\"DPDK 架构\"></a>DPDK 架构</h1><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481768904-b3db99fb-9713-449c-8322-139b150da09f.png#clientId=u0928072c-4fbe-4&from=paste&id=ud4958617&margin=%5Bobject%20Object%5D&name=image.png&originHeight=750&originWidth=942&originalType=url&ratio=1&size=130624&status=done&style=none&taskId=ue7338f12-4782-4375-b298-d165d19cfce\" alt=\"image.png\"></li>\n</ul>\n<p><strong>内核态模块</strong>：</p>\n<ul>\n<li>IGB_UIO：</li>\n<li>KNI</li>\n</ul>\n<p><strong>用户态函数库以及网卡驱动程序</strong>：</p>\n<ul>\n<li>用户态轮询模式的网卡驱动程序（PMD Driver）</li>\n<li>核心部件库（Core Libraries）</li>\n<li>操作系统平台相关模块（Platform）</li>\n<li>QoS 库</li>\n<li>报文转发分类算法库（Classify）</li>\n</ul>\n<p>用户应用程序可以应用以上函数库以及驱动支持，来实现完全内核旁路的数据面转发应用程序，例如：OVS-DPDK。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481769146-6c669857-20c2-4539-8a45-342d8064df02.png#clientId=u0928072c-4fbe-4&from=paste&id=u61914ee9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=496&originWidth=389&originalType=url&ratio=1&size=244431&status=done&style=none&taskId=u498a303d-b2c5-4b95-9d2b-b86ccccf82b\" alt=\"image.png\"></p>\n<ul>\n<li><p><strong>EAL（Environment Abstraction Layer，环境抽象层）</strong>：为应用提供了一个通用接口，隐藏了与底层库与设备打交道的相关细节。EAL 实现了 DPDK 运行的初始化工作，基于大页表的内存分配，多核亲缘性设置，原子和锁操作，并将 PCI 设备地址映射到用户空间，方便应用程序访问。</p>\n</li>\n<li><p><strong>Buffer Manager API</strong>：通过预先从 EAL 上分配固定大小的多个内存对象，避免了在运行过程中动态进行内存分配和回收，以此来提高效率，用于数据包 Buffer 的管理。</p>\n</li>\n<li><p><strong>Queue/Ring Manager API</strong>：以高效的方式实现了无锁的 FIFO 环形队列，适用于一个生产者多个消费者、一个消费者多个生产者模型。支持批量无锁操作，可避免锁冲突导致的等待。</p>\n</li>\n<li><p><strong>Packet Flow Classification API</strong>：通过 Intel SSE 基于多元组的方式实现了高效的 HASH 算法，以便快速对数据包进行分类处理。该 API 一般用于路由查找过程中的最长前缀匹配。此外，安全产品场景中，可以根据 DataFlow 五元组来标记不同的用户。</p>\n</li>\n<li><p><strong>PMD（Poll Mode Library）</strong>：则实现了 Intel 1GbE、10GbE 和 40GbE 网卡下基于轮询收发包的工作模式，大大加速网卡收发包性能。</p>\n<h1 id=\"内核态模块\"><a href=\"#内核态模块\" class=\"headerlink\" title=\"内核态模块\"></a>内核态模块</h1><h2 id=\"IGB-UIO\"><a href=\"#IGB-UIO\" class=\"headerlink\" title=\"IGB_UIO\"></a>IGB_UIO</h2><p>《<a href=\"https://is-cloud.blog.csdn.net/article/details/106007926\">DPDK — IGB_UIO，与 UIO Framework 进行交互的内核模块</a>》</p>\n<h2 id=\"KNI\"><a href=\"#KNI\" class=\"headerlink\" title=\"KNI\"></a>KNI</h2><p>KNI（Kernel NIC Interface，内核网卡接口），是 DPDK 允许用户态和内核态交换报文的解决方案，模拟了一个虚拟的网口，提供 DPDK 应用程序和 Linux 内核之间通讯没接。<strong>即 KNI 接口允许报文从用户态接收后转发到 Linux 内核协议栈中去</strong>。<br>虽然 DPDK 的高速转发性能很出色，但是也有自己的一些缺点，比如没有标准协议栈就是其中之一，当然也可能当时设计时就将没有将协议栈考虑进去，毕竟协议栈需要将报文转发处理，可能会使处理报文的能力大大降低。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481769261-be65ada1-ff35-4880-a322-d18f4e381979.png#clientId=u0928072c-4fbe-4&from=paste&id=uba9293cc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=345&originWidth=558&originalType=url&ratio=1&size=82294&status=done&style=none&taskId=ucad680f6-11df-4deb-8c57-78c6b3ef9ff\" alt=\"image.png\"><br>上图是 KNI 的 mbuf 的使用流程，也可以看出报文的流向，因为报文在代码中其实就是一个个内存指针。其中 rx_q 右边是用户态，左边是内核态。最后通过调用 netif_rx 将报文送入 Linux 内核协议栈，这其中需要将 DPDK 的 mbuf 转换成标准的 skb_buf 结构体。当 Linux 内核向 KNI 端口发送报文时，调用回调函数 kni_net_tx，然后报文经过转换之后发送到端口上。</p>\n<h1 id=\"PMD\"><a href=\"#PMD\" class=\"headerlink\" title=\"PMD\"></a>PMD</h1><p>《<a href=\"https://blog.csdn.net/Jmilk/article/details/103025477\">DPDK — PMD，DPDK 的核心优化</a>》</p>\n<h1 id=\"DPDK-Lib（核心部件库）\"><a href=\"#DPDK-Lib（核心部件库）\" class=\"headerlink\" title=\"DPDK Lib（核心部件库）\"></a>DPDK Lib（核心部件库）</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481773020-678f8177-7108-49a0-864e-ddf4523e41ba.png#clientId=u0928072c-4fbe-4&from=paste&id=uf52df5e3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=378&originWidth=797&originalType=url&ratio=1&size=72204&status=done&style=none&taskId=ud2675454-3c19-45ba-93aa-e142cbd7379\" alt=\"image.png\"><br>核心部件库（Core Libraries）是 DPDK 面向用户态协议栈应用程序员开发的模块。</p>\n</li>\n<li><p><strong>EAL（Environment Abstraction Layer，环境抽象层）</strong>：对 DPDK 的运行环境（e.g. Linux 操作系统）进行初始化，包括：HugePage 内存分配、内存/缓冲区/队列分配、原子性无锁操作、NUMA 亲和性、CPU 绑定等，并通过 UIO 或 VFIO 技术将 PCI/PCIe 设备地址映射到用户态，方便了用户态的 DPDK 应用程序调用。同时为应用程序提供了一个通用接口，隐藏了其与底层库以及设备打交道的相关细节。</p>\n</li>\n<li><p><strong>MALLOC（堆内存管理组件）</strong>：为 DPDK 应用程序提供从 HugePage 内分配堆内存的接口。当需要为 SKB（Socket Buffer，本质是若干个数据包的缓存区）分配大量的小块内存时（如：分配用于存储 Buffer descriptor table 中每个表项指针的内存）可以调用该接口。由于堆内存是从 HugePage 内存分配的，所以可以减少 TLB 缺页。</p>\n</li>\n</ul>\n<p>注：堆，是由开发人员主动分配和释放的存储空间， 若开发人员不释放，则程序结束时由 OS 回收，分配方式类似于链表；与堆不同，栈，是由操作系统自动分配和释放的存储空间 ，用于存放函数的参数值、局部变量等，其操作方式类似于数据结构中的栈。</p>\n<ul>\n<li><strong>MBUF（网络报文缓存块管理组件）</strong>：为 DPDK 应用程序提供创建和释放用于存储数据报文信息的缓存块的接口。提供了两种类型的 MBUF，一种用于存储一般信息，一种用于存储实际的报文数据。这些 MBUF 存储在一个内存池中。</li>\n<li><strong>MEMPOOL（内存池管理组件）</strong>：为 DPDK 应用程序和其它组件提供分配内存池的接口，内存池是一个由固定大小的多个内存块组成的内存容器，可用于存储不同的对像实体，如：数据报文缓存块等。内存池由内存池的名称（一个字符串）进行唯一标识，它由一个 Ring 缓冲区和一组本地缓存队列组成，每个 CPU Core 优先从自身的缓存队列中分配内存块，当本地缓存队列减少到一定程度时，开始从内存环缓冲区中申请内存块来进行补充。</li>\n<li><strong>RING（环缓冲区管理组件）</strong>：为 DPDK 应用程序和其它组件提供一个无锁的多生产者多消费者 FIFO 队列。</li>\n</ul>\n<p><strong>NOTE</strong>：DPDK 基于 Linux 内核的无锁环形缓冲 kfifo 实现了一套自己的无锁机制。支持单生产者入列/单消费者出列和多生产者入列/多消费者出列操作，在数据传输的时候，降低性能的同时还能保证数据的同步。</p>\n<ul>\n<li><strong>TIMER（定时器组件）</strong>：提供一些异步周期执行的接口（也可以只执行一次），可以指定某个函数在规定时间内的异步执行，就像 LIBC 中的 timer 定时器。但是这里的定时器需要 DPDK 应用程序在主循环中周期内调用 rte_timer_manage 来使能定时器，使用起来不那么方便。TIMER 的时间参考来自 EAL 层提供的时间接口。</li>\n</ul>\n<p>注：除了以上六个核心组件外，DPDK 还提供以下功能：</p>\n<ol>\n<li>以太网轮询模式驱动（PMD）架构：把以太网驱动从内核移到应用层，采用同步轮询机制而不是内核态的异步中断机制来提高报文的接收和发送效率。</li>\n<li>报文转发算法支持：Hash 库和 LPM 库为报文转发算法提供支持。</li>\n<li>网络协议定义和相关宏定义：基于 FreeBSD IP 协议栈的相关定义，如：TCP、UDP、SCTP 等协议头定义。</li>\n<li>报文 QoS 调度库：支持随机早检测、流量整形、严格优先级和加权随机循环优先级调度等相关 QoS 功能。</li>\n<li>内核网络接口库（KNI）：提供一种 DPDK 应用程序与内核协议栈的通信的方法，类似 Linux 的 TUN/TAP 接口，但比 TUN/TAP 接口效率高。每个物理网口可以虚拟出多个 KNI 接口。<h2 id=\"组件代码\"><a href=\"#组件代码\" class=\"headerlink\" title=\"组件代码\"></a>组件代码</h2><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481769193-9dfea3cf-22c5-4457-a519-93ed7c367c80.png#clientId=u0928072c-4fbe-4&from=paste&id=u0bdac4d1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=567&originWidth=754&originalType=url&ratio=1&size=235286&status=done&style=none&taskId=u50cc4576-6bc3-4c17-9ca9-16f78f2a3f9\" alt=\"image.png\"></li>\n</ol>\n<p><strong>注</strong>：</p>\n<ul>\n<li>RTE：Run-Time Environment</li>\n<li>EAL：Environment Abstraction Layer</li>\n<li>PMD：Poll-Mode Driver</li>\n</ul>\n<p>核心部件库对应的 DPDK 核心组件实现：</p>\n<ul>\n<li><strong>Memory Manager（librte_malloc，堆内存管理器）</strong>：提供一组 API，用于从 HugePages 内存创建的 memzones 中分配内存，而不是在堆中分配。这有助于改善 Linux 用户空间环境下典型的从堆中大量分配 4KB 页面而容易引起 TLB 不命中。</li>\n<li><strong>Memory Pool Manager（librte_mempool，内存池管理器）</strong>：内存池管理器负责分配的内存中的 Pool 对象。Pool 由名称唯一标识，并使用一个 Ring 来存储空闲对象。它提供了其他一些可选的服务，例如：每个 CPU Core 的对象缓存和对齐方式帮助，以确保将填充的对象在所有内存通道上得到均匀分布。</li>\n<li><strong>Ring Manager（librte_ring，环形队列管理器）</strong>：在一个大小有限的页表中，Ring 数据结构提供了一个无锁的多生产者-多消费者 FIFO API。相较于无锁队列，它有一些的优势，如：更容易实现，适应于大容量操作，而且速度更快。 一个 Ring 可以在 Memory Pool Manager 中被使用，也可以用于不同 CPU Core 或 Processor 之间作为通用的通信机制。</li>\n<li><strong>Network Packet Buffer Management（librte_mbuf，网络报文缓冲区管理）</strong>：提供一组 API，用于分配、释放和操作 MBUFs（数据报文缓冲区），DPDK 应用程序中可以使用这些缓存区来存储消息以及报文数据。</li>\n<li><strong>Timer Manager（librte_timer，定时器管理）</strong>：为 DPDK 应用程序的执行单元提供了定时服务，支持以异步的方式执行函数。定时器可以设置周期调用，也可以设置为只调用一次。DPDK 应用程序可以使用 EAL 提供的 HPET 接口来获取高精度时钟的引用，并且能在每个 Core 上根据需要进行初始化。</li>\n</ul>\n<p>代码目录：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481772817-48082ec2-383b-4210-ba40-a1222f0bc792.png#clientId=u0928072c-4fbe-4&from=paste&id=u3da3a1cd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1242&originWidth=850&originalType=url&ratio=1&size=875251&status=done&style=none&taskId=uf4da37b8-7885-437e-85b9-45254cdde0a\" alt=\"image.png\"></p>\n<h1 id=\"平台相关模块\"><a href=\"#平台相关模块\" class=\"headerlink\" title=\"平台相关模块\"></a>平台相关模块</h1><p>平台相关模块（Platform）包括 KNI、POWER（能耗管理）以及 IVSHMEM 接口。</p>\n<ul>\n<li><strong>KNI</strong>：主要通过 Linux 内核中的 kni.ko 模块将数据报文从用户态传递给内核态协议栈处理，以便常规的用户进程（e.g. Container）可以使用 Linux 内核协议栈传统的 Socket 接口对相关报文进行处理。</li>\n<li><strong>POWER</strong>：提供了一些 API，让 DPDK 应用程序可以根据收包速率动态调整 CPU 频率或让 CPU 进入不同的休眠状态。</li>\n<li><strong>IVSHMEM</strong>：模块提供了虚拟机与虚拟机之间，或者虚拟机与主机之间的零拷贝共享内存机制。当 DPDK 应用程序运行时，IVSHMEM 模块会调用 Core Libraries 的 API，把几个 HugePage 内存映射为一个 IVSHMEM 设备池，并通过参数传递给 QEMU，这样，就实现了虚拟机之间的零拷贝内存共享。<h1 id=\"Classify-库\"><a href=\"#Classify-库\" class=\"headerlink\" title=\"Classify 库\"></a>Classify 库</h1>支持精确匹配（Exact Match）、最长匹配（LPM）和通配符匹配（ACL）数据报文，并提供常用的包处理的查表操作。<h1 id=\"QoS-库\"><a href=\"#QoS-库\" class=\"headerlink\" title=\"QoS 库\"></a>QoS 库</h1>提供网络服务质量相关的组件，如：限速（Meter）和调度（Scheduler）。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><h3 id=\"DPDK-架构解析\"><a href=\"#DPDK-架构解析\" class=\"headerlink\" title=\"DPDK-架构解析\"></a>DPDK-架构解析</h3><ul>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#_0\">目录</a></li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#_3\">前文列表</a></li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#DPDK__7\">DPDK 架构</a></li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#_32\">内核态模块</a><ul>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#IGB_UIO_33\">IGB_UIO</a></li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#KNI_35\">KNI</a></li>\n</ul>\n</li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#PMD_44\">PMD</a></li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#DPDK_Lib_47\">DPDK Lib（核心部件库）</a><ul>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#_75\">组件代码</a></li>\n</ul>\n</li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#_98\">平台相关模块</a></li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#Classify__109\">Classify 库</a></li>\n<li><a href=\"http://t.zoukankan.com/hzcya1995-p-13309271.html#QoS__112\">QoS 库</a><h1 id=\"前文列表\"><a href=\"#前文列表\" class=\"headerlink\" title=\"前文列表\"></a>前文列表</h1>《<a href=\"https://is-cloud.blog.csdn.net/article/details/105980054\">DPDK — 安装部署</a>》<br>《<a href=\"https://is-cloud.blog.csdn.net/article/details/98944634\">DPDK — 数据平面开发技术</a>》<h1 id=\"DPDK-架构\"><a href=\"#DPDK-架构\" class=\"headerlink\" title=\"DPDK 架构\"></a>DPDK 架构</h1><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481768904-b3db99fb-9713-449c-8322-139b150da09f.png#clientId=u0928072c-4fbe-4&from=paste&id=ud4958617&margin=%5Bobject%20Object%5D&name=image.png&originHeight=750&originWidth=942&originalType=url&ratio=1&size=130624&status=done&style=none&taskId=ue7338f12-4782-4375-b298-d165d19cfce\" alt=\"image.png\"></li>\n</ul>\n<p><strong>内核态模块</strong>：</p>\n<ul>\n<li>IGB_UIO：</li>\n<li>KNI</li>\n</ul>\n<p><strong>用户态函数库以及网卡驱动程序</strong>：</p>\n<ul>\n<li>用户态轮询模式的网卡驱动程序（PMD Driver）</li>\n<li>核心部件库（Core Libraries）</li>\n<li>操作系统平台相关模块（Platform）</li>\n<li>QoS 库</li>\n<li>报文转发分类算法库（Classify）</li>\n</ul>\n<p>用户应用程序可以应用以上函数库以及驱动支持，来实现完全内核旁路的数据面转发应用程序，例如：OVS-DPDK。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481769146-6c669857-20c2-4539-8a45-342d8064df02.png#clientId=u0928072c-4fbe-4&from=paste&id=u61914ee9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=496&originWidth=389&originalType=url&ratio=1&size=244431&status=done&style=none&taskId=u498a303d-b2c5-4b95-9d2b-b86ccccf82b\" alt=\"image.png\"></p>\n<ul>\n<li><p><strong>EAL（Environment Abstraction Layer，环境抽象层）</strong>：为应用提供了一个通用接口，隐藏了与底层库与设备打交道的相关细节。EAL 实现了 DPDK 运行的初始化工作，基于大页表的内存分配，多核亲缘性设置，原子和锁操作，并将 PCI 设备地址映射到用户空间，方便应用程序访问。</p>\n</li>\n<li><p><strong>Buffer Manager API</strong>：通过预先从 EAL 上分配固定大小的多个内存对象，避免了在运行过程中动态进行内存分配和回收，以此来提高效率，用于数据包 Buffer 的管理。</p>\n</li>\n<li><p><strong>Queue/Ring Manager API</strong>：以高效的方式实现了无锁的 FIFO 环形队列，适用于一个生产者多个消费者、一个消费者多个生产者模型。支持批量无锁操作，可避免锁冲突导致的等待。</p>\n</li>\n<li><p><strong>Packet Flow Classification API</strong>：通过 Intel SSE 基于多元组的方式实现了高效的 HASH 算法，以便快速对数据包进行分类处理。该 API 一般用于路由查找过程中的最长前缀匹配。此外，安全产品场景中，可以根据 DataFlow 五元组来标记不同的用户。</p>\n</li>\n<li><p><strong>PMD（Poll Mode Library）</strong>：则实现了 Intel 1GbE、10GbE 和 40GbE 网卡下基于轮询收发包的工作模式，大大加速网卡收发包性能。</p>\n<h1 id=\"内核态模块\"><a href=\"#内核态模块\" class=\"headerlink\" title=\"内核态模块\"></a>内核态模块</h1><h2 id=\"IGB-UIO\"><a href=\"#IGB-UIO\" class=\"headerlink\" title=\"IGB_UIO\"></a>IGB_UIO</h2><p>《<a href=\"https://is-cloud.blog.csdn.net/article/details/106007926\">DPDK — IGB_UIO，与 UIO Framework 进行交互的内核模块</a>》</p>\n<h2 id=\"KNI\"><a href=\"#KNI\" class=\"headerlink\" title=\"KNI\"></a>KNI</h2><p>KNI（Kernel NIC Interface，内核网卡接口），是 DPDK 允许用户态和内核态交换报文的解决方案，模拟了一个虚拟的网口，提供 DPDK 应用程序和 Linux 内核之间通讯没接。<strong>即 KNI 接口允许报文从用户态接收后转发到 Linux 内核协议栈中去</strong>。<br>虽然 DPDK 的高速转发性能很出色，但是也有自己的一些缺点，比如没有标准协议栈就是其中之一，当然也可能当时设计时就将没有将协议栈考虑进去，毕竟协议栈需要将报文转发处理，可能会使处理报文的能力大大降低。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481769261-be65ada1-ff35-4880-a322-d18f4e381979.png#clientId=u0928072c-4fbe-4&from=paste&id=uba9293cc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=345&originWidth=558&originalType=url&ratio=1&size=82294&status=done&style=none&taskId=ucad680f6-11df-4deb-8c57-78c6b3ef9ff\" alt=\"image.png\"><br>上图是 KNI 的 mbuf 的使用流程，也可以看出报文的流向，因为报文在代码中其实就是一个个内存指针。其中 rx_q 右边是用户态，左边是内核态。最后通过调用 netif_rx 将报文送入 Linux 内核协议栈，这其中需要将 DPDK 的 mbuf 转换成标准的 skb_buf 结构体。当 Linux 内核向 KNI 端口发送报文时，调用回调函数 kni_net_tx，然后报文经过转换之后发送到端口上。</p>\n<h1 id=\"PMD\"><a href=\"#PMD\" class=\"headerlink\" title=\"PMD\"></a>PMD</h1><p>《<a href=\"https://blog.csdn.net/Jmilk/article/details/103025477\">DPDK — PMD，DPDK 的核心优化</a>》</p>\n<h1 id=\"DPDK-Lib（核心部件库）\"><a href=\"#DPDK-Lib（核心部件库）\" class=\"headerlink\" title=\"DPDK Lib（核心部件库）\"></a>DPDK Lib（核心部件库）</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481773020-678f8177-7108-49a0-864e-ddf4523e41ba.png#clientId=u0928072c-4fbe-4&from=paste&id=uf52df5e3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=378&originWidth=797&originalType=url&ratio=1&size=72204&status=done&style=none&taskId=ud2675454-3c19-45ba-93aa-e142cbd7379\" alt=\"image.png\"><br>核心部件库（Core Libraries）是 DPDK 面向用户态协议栈应用程序员开发的模块。</p>\n</li>\n<li><p><strong>EAL（Environment Abstraction Layer，环境抽象层）</strong>：对 DPDK 的运行环境（e.g. Linux 操作系统）进行初始化，包括：HugePage 内存分配、内存/缓冲区/队列分配、原子性无锁操作、NUMA 亲和性、CPU 绑定等，并通过 UIO 或 VFIO 技术将 PCI/PCIe 设备地址映射到用户态，方便了用户态的 DPDK 应用程序调用。同时为应用程序提供了一个通用接口，隐藏了其与底层库以及设备打交道的相关细节。</p>\n</li>\n<li><p><strong>MALLOC（堆内存管理组件）</strong>：为 DPDK 应用程序提供从 HugePage 内分配堆内存的接口。当需要为 SKB（Socket Buffer，本质是若干个数据包的缓存区）分配大量的小块内存时（如：分配用于存储 Buffer descriptor table 中每个表项指针的内存）可以调用该接口。由于堆内存是从 HugePage 内存分配的，所以可以减少 TLB 缺页。</p>\n</li>\n</ul>\n<p>注：堆，是由开发人员主动分配和释放的存储空间， 若开发人员不释放，则程序结束时由 OS 回收，分配方式类似于链表；与堆不同，栈，是由操作系统自动分配和释放的存储空间 ，用于存放函数的参数值、局部变量等，其操作方式类似于数据结构中的栈。</p>\n<ul>\n<li><strong>MBUF（网络报文缓存块管理组件）</strong>：为 DPDK 应用程序提供创建和释放用于存储数据报文信息的缓存块的接口。提供了两种类型的 MBUF，一种用于存储一般信息，一种用于存储实际的报文数据。这些 MBUF 存储在一个内存池中。</li>\n<li><strong>MEMPOOL（内存池管理组件）</strong>：为 DPDK 应用程序和其它组件提供分配内存池的接口，内存池是一个由固定大小的多个内存块组成的内存容器，可用于存储不同的对像实体，如：数据报文缓存块等。内存池由内存池的名称（一个字符串）进行唯一标识，它由一个 Ring 缓冲区和一组本地缓存队列组成，每个 CPU Core 优先从自身的缓存队列中分配内存块，当本地缓存队列减少到一定程度时，开始从内存环缓冲区中申请内存块来进行补充。</li>\n<li><strong>RING（环缓冲区管理组件）</strong>：为 DPDK 应用程序和其它组件提供一个无锁的多生产者多消费者 FIFO 队列。</li>\n</ul>\n<p><strong>NOTE</strong>：DPDK 基于 Linux 内核的无锁环形缓冲 kfifo 实现了一套自己的无锁机制。支持单生产者入列/单消费者出列和多生产者入列/多消费者出列操作，在数据传输的时候，降低性能的同时还能保证数据的同步。</p>\n<ul>\n<li><strong>TIMER（定时器组件）</strong>：提供一些异步周期执行的接口（也可以只执行一次），可以指定某个函数在规定时间内的异步执行，就像 LIBC 中的 timer 定时器。但是这里的定时器需要 DPDK 应用程序在主循环中周期内调用 rte_timer_manage 来使能定时器，使用起来不那么方便。TIMER 的时间参考来自 EAL 层提供的时间接口。</li>\n</ul>\n<p>注：除了以上六个核心组件外，DPDK 还提供以下功能：</p>\n<ol>\n<li>以太网轮询模式驱动（PMD）架构：把以太网驱动从内核移到应用层，采用同步轮询机制而不是内核态的异步中断机制来提高报文的接收和发送效率。</li>\n<li>报文转发算法支持：Hash 库和 LPM 库为报文转发算法提供支持。</li>\n<li>网络协议定义和相关宏定义：基于 FreeBSD IP 协议栈的相关定义，如：TCP、UDP、SCTP 等协议头定义。</li>\n<li>报文 QoS 调度库：支持随机早检测、流量整形、严格优先级和加权随机循环优先级调度等相关 QoS 功能。</li>\n<li>内核网络接口库（KNI）：提供一种 DPDK 应用程序与内核协议栈的通信的方法，类似 Linux 的 TUN/TAP 接口，但比 TUN/TAP 接口效率高。每个物理网口可以虚拟出多个 KNI 接口。<h2 id=\"组件代码\"><a href=\"#组件代码\" class=\"headerlink\" title=\"组件代码\"></a>组件代码</h2><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481769193-9dfea3cf-22c5-4457-a519-93ed7c367c80.png#clientId=u0928072c-4fbe-4&from=paste&id=u0bdac4d1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=567&originWidth=754&originalType=url&ratio=1&size=235286&status=done&style=none&taskId=u50cc4576-6bc3-4c17-9ca9-16f78f2a3f9\" alt=\"image.png\"></li>\n</ol>\n<p><strong>注</strong>：</p>\n<ul>\n<li>RTE：Run-Time Environment</li>\n<li>EAL：Environment Abstraction Layer</li>\n<li>PMD：Poll-Mode Driver</li>\n</ul>\n<p>核心部件库对应的 DPDK 核心组件实现：</p>\n<ul>\n<li><strong>Memory Manager（librte_malloc，堆内存管理器）</strong>：提供一组 API，用于从 HugePages 内存创建的 memzones 中分配内存，而不是在堆中分配。这有助于改善 Linux 用户空间环境下典型的从堆中大量分配 4KB 页面而容易引起 TLB 不命中。</li>\n<li><strong>Memory Pool Manager（librte_mempool，内存池管理器）</strong>：内存池管理器负责分配的内存中的 Pool 对象。Pool 由名称唯一标识，并使用一个 Ring 来存储空闲对象。它提供了其他一些可选的服务，例如：每个 CPU Core 的对象缓存和对齐方式帮助，以确保将填充的对象在所有内存通道上得到均匀分布。</li>\n<li><strong>Ring Manager（librte_ring，环形队列管理器）</strong>：在一个大小有限的页表中，Ring 数据结构提供了一个无锁的多生产者-多消费者 FIFO API。相较于无锁队列，它有一些的优势，如：更容易实现，适应于大容量操作，而且速度更快。 一个 Ring 可以在 Memory Pool Manager 中被使用，也可以用于不同 CPU Core 或 Processor 之间作为通用的通信机制。</li>\n<li><strong>Network Packet Buffer Management（librte_mbuf，网络报文缓冲区管理）</strong>：提供一组 API，用于分配、释放和操作 MBUFs（数据报文缓冲区），DPDK 应用程序中可以使用这些缓存区来存储消息以及报文数据。</li>\n<li><strong>Timer Manager（librte_timer，定时器管理）</strong>：为 DPDK 应用程序的执行单元提供了定时服务，支持以异步的方式执行函数。定时器可以设置周期调用，也可以设置为只调用一次。DPDK 应用程序可以使用 EAL 提供的 HPET 接口来获取高精度时钟的引用，并且能在每个 Core 上根据需要进行初始化。</li>\n</ul>\n<p>代码目录：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481772817-48082ec2-383b-4210-ba40-a1222f0bc792.png#clientId=u0928072c-4fbe-4&from=paste&id=u3da3a1cd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1242&originWidth=850&originalType=url&ratio=1&size=875251&status=done&style=none&taskId=uf4da37b8-7885-437e-85b9-45254cdde0a\" alt=\"image.png\"></p>\n<h1 id=\"平台相关模块\"><a href=\"#平台相关模块\" class=\"headerlink\" title=\"平台相关模块\"></a>平台相关模块</h1><p>平台相关模块（Platform）包括 KNI、POWER（能耗管理）以及 IVSHMEM 接口。</p>\n<ul>\n<li><strong>KNI</strong>：主要通过 Linux 内核中的 kni.ko 模块将数据报文从用户态传递给内核态协议栈处理，以便常规的用户进程（e.g. Container）可以使用 Linux 内核协议栈传统的 Socket 接口对相关报文进行处理。</li>\n<li><strong>POWER</strong>：提供了一些 API，让 DPDK 应用程序可以根据收包速率动态调整 CPU 频率或让 CPU 进入不同的休眠状态。</li>\n<li><strong>IVSHMEM</strong>：模块提供了虚拟机与虚拟机之间，或者虚拟机与主机之间的零拷贝共享内存机制。当 DPDK 应用程序运行时，IVSHMEM 模块会调用 Core Libraries 的 API，把几个 HugePage 内存映射为一个 IVSHMEM 设备池，并通过参数传递给 QEMU，这样，就实现了虚拟机之间的零拷贝内存共享。<h1 id=\"Classify-库\"><a href=\"#Classify-库\" class=\"headerlink\" title=\"Classify 库\"></a>Classify 库</h1>支持精确匹配（Exact Match）、最长匹配（LPM）和通配符匹配（ACL）数据报文，并提供常用的包处理的查表操作。<h1 id=\"QoS-库\"><a href=\"#QoS-库\" class=\"headerlink\" title=\"QoS 库\"></a>QoS 库</h1>提供网络服务质量相关的组件，如：限速（Meter）和调度（Scheduler）。</li>\n</ul>\n"},{"title":"一文看懂DPDK","_content":"\n# 大纲：\n\n* 一、 网络IO的处境和趋势\n* 二、 Linux + x86网络IO瓶颈\n* 三、 DPDK的基本原理\n* 四、 DPDK的基石UIO\n* 五、 DPDK核心优化：PMD\n* 六、 DPDK的高性能代码实现\n* 七、 DPDK生态\n\n## 一、网络IO的处境和趋势\n从我们用户的使用就可以感受到网速一直在提升，而网络技术的发展也从1GE/10GE/25GE/40GE/100GE的演变，从中可以得出单机的网络IO能力必须跟上时代的发展。\n**1.传统的电信领域**\nIP层及以下，例如路由器、交换机、防火墙、基站等设备都是采用硬件解决方案。基于专用网络处理器（NP），有基于FPGA，更有基于ASIC的。但是基于硬件的劣势非常明显，发生Bug不易修复，不易调试维护，并且网络技术一直在发展，例如2G/3G/4G/5G等移动技术的革新，这些属于业务的逻辑基于硬件实现太痛苦，不能快速迭代。传统领域面临的挑战是急需一套软件架构的高性能网络IO开发框架。\n**2.云的发展**\n私有云的出现通过网络功能虚拟化（NFV）共享硬件成为趋势，NFV的定义是通过标准的服务器、标准交换机实现各种传统的或新的网络功能。急需一套基于常用系统和标准服务器的高性能网络IO开发框架。\n**3.单机性能的飙升**\n网卡从1G到100G的发展，CPU从单核到多核到多CPU的发展，服务器的单机能力通过横行扩展达到新的高点。但是软件开发却无法跟上节奏，单机处理能力没能和硬件门当户对，如何开发出与时并进高吞吐量的服务，单机百万千万并发能力。即使有业务对QPS要求不高，主要是CPU密集型，但是现在大数据分析、人工智能等应用都需要在分布式服务器之间传输大量数据完成作业。这点应该是我们互联网后台开发最应关注，也最关联的。\n## 二、Linux + x86网络IO瓶颈\n在数年前曾经写过《网卡工作原理及高并发下的调优》一文，描述了Linux的收发报文流程。根据经验，在C1（8核）上跑应用每1W包处理需要消耗1%软中断CPU，这意味着单机的上限是100万PPS（Packet Per Second）。从TGW（Netfilter版）的性能100万PPS，AliLVS优化了也只到150万PPS，并且他们使用的服务器的配置还是比较好的。假设，我们要跑满10GE网卡，每个包64字节，这就需要2000万PPS（注：以太网万兆网卡速度上限是1488万PPS，因为最小帧大小为84B《[Bandwidth, Packets Per Second, and Other Network Performance Metrics](https://www.cisco.com/c/en/us/about/security-center/network-performance-metrics.html)》），100G是2亿PPS，即每个包的处理耗时不能超过50纳秒。而一次Cache Miss，不管是TLB、数据Cache、指令Cache发生Miss，回内存读取大约65纳秒，NUMA体系下跨Node通讯大约40纳秒。所以，即使不加上业务逻辑，即使纯收发包都如此艰难。我们要控制Cache的命中率，我们要了解计算机体系结构，不能发生跨Node通讯。\n从这些数据，我希望可以直接感受一下这里的挑战有多大，理想和现实，我们需要从中平衡。问题都有这些\n1.传统的收发报文方式都必须采用硬中断来做通讯，每次硬中断大约消耗100微秒，这还不算因为终止上下文所带来的Cache Miss。\n2.数据必须从内核态用户态之间切换拷贝带来大量CPU消耗，全局锁竞争。\n3.收发包都有系统调用的开销。\n4.内核工作在多核上，为可全局一致，即使采用Lock Free，也避免不了锁总线、内存屏障带来的性能损耗。\n5.从网卡到业务进程，经过的路径太长，有些其实未必要的，例如netfilter框架，这些都带来一定的消耗，而且容易Cache Miss。\n## 三、DPDK的基本原理\n从前面的分析可以得知IO实现的方式、内核的瓶颈，以及数据流过内核存在不可控因素，这些都是在内核中实现，内核是导致瓶颈的原因所在，要解决问题需要绕过内核。所以主流解决方案都是旁路网卡IO，绕过内核直接在用户态收发包来解决内核的瓶颈。\nLinux社区也提供了旁路机制[Netmap](http://info.iet.unipi.it/~luigi/netmap/)，官方数据10G网卡1400万PPS，但是Netmap没广泛使用。其原因有几个：\n1.Netmap需要驱动的支持，即需要网卡厂商认可这个方案。\n2.Netmap仍然依赖中断通知机制，没完全解决瓶颈。\n3.Netmap更像是几个系统调用，实现用户态直接收发包，功能太过原始，没形成依赖的网络开发框架，社区不完善。\n那么，我们来看看发展了十几年的DPDK，从Intel主导开发，到华为、思科、AWS等大厂商的加入，核心玩家都在该圈子里，拥有完善的社区，生态形成闭环。早期，主要是传统电信领域3层以下的应用，如华为、中国电信、中国移动都是其早期使用者，交换机、路由器、网关是主要应用场景。但是，随着上层业务的需求以及DPDK的完善，在更高的应用也在逐步出现。\nDPDK旁路原理：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481909477-2b323099-10ad-4130-9304-45ec7a49f78b.png#clientId=uaf56e294-6f0f-4&from=paste&height=509&id=ub579f8c8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1017&originWidth=1620&originalType=binary&ratio=1&size=250499&status=done&style=none&taskId=u2563a9e7-9bfd-435c-be58-c4bf5090890&width=810)\n图片引自Jingjing Wu的文档《Flow Bifurcation on Intel® Ethernet Controller X710/XL710》\n左边是原来的方式数据从 网卡 -> 驱动 -> 协议栈 -> Socket接口 -> 业务\n右边是DPDK的方式，基于UIO（Userspace I/O）旁路数据。数据从 网卡 -> DPDK轮询模式-> DPDK基础库 -> 业务\n用户态的好处是易用开发和维护，灵活性好。并且Crash也不影响内核运行，鲁棒性强。\nDPDK支持的CPU体系架构：x86、ARM、PowerPC（PPC）\nDPDK支持的网卡列表：[https://core.dpdk.org/supported/](https://core.dpdk.org/supported/)，我们主流使用Intel 82599（光口）、Intel x540（电口）\n## 四、DPDK的基石UIO\n为了让驱动运行在用户态，Linux提供[UIO](https://lwn.net/Articles/232575/)机制。使用UIO可以通过read感知中断，通过mmap实现和网卡的通讯。\n**UIO原理：**\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481922795-fca2bf04-8423-4259-8388-048077db52f2.png#clientId=uaf56e294-6f0f-4&from=paste&height=335&id=u6daa38c3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=669&originWidth=1024&originalType=binary&ratio=1&size=209374&status=done&style=none&taskId=u86af8dc3-fe1b-4d36-aa01-2a17725dd02&width=512)\n要开发用户态驱动有几个步骤：\n1.开发运行在内核的UIO模块，因为硬中断只能在内核处理\n2.通过/dev/uioX读取中断\n3.通过mmap和外设共享内存\n## 五、DPDK核心优化：PMD\nDPDK的UIO驱动屏蔽了硬件发出中断，然后在用户态采用主动轮询的方式，这种模式被称为[PMD](http://doc.dpdk.org/guides/prog_guide/poll_mode_drv.html)（Poll Mode Driver）。\nUIO旁路了内核，主动轮询去掉硬中断，DPDK从而可以在用户态做收发包处理。带来Zero Copy、无系统调用的好处，同步处理减少上下文切换带来的Cache Miss。\n运行在PMD的Core会处于用户态CPU100%的状态\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481936558-321d0b43-f5b2-40a3-91f1-f22d15f099f8.png#clientId=uaf56e294-6f0f-4&from=paste&height=387&id=ucbfe9a24&margin=%5Bobject%20Object%5D&name=image.png&originHeight=308&originWidth=561&originalType=binary&ratio=1&size=36195&status=done&style=none&taskId=uf66018ea-7769-486d-a44c-9d21dcd084d&width=704.5)\n网络空闲时CPU长期空转，会带来能耗问题。所以，DPDK推出Interrupt DPDK模式。\n**Interrupt DPDK：**\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481948671-5b96cbd8-dc36-4d24-a127-7fd62105a10d.png#clientId=uaf56e294-6f0f-4&from=paste&height=176&id=u704c6d00&margin=%5Bobject%20Object%5D&name=image.png&originHeight=183&originWidth=729&originalType=binary&ratio=1&size=26634&status=done&style=none&taskId=udeeea4f7-6473-4504-8186-2bf2e0adda5&width=699.5)\n图片引自David Su/Yunhong Jiang/Wei Wang的文档《Towards Low Latency Interrupt Mode DPDK》\n它的原理和[NAPI](https://www.ibm.com/developerworks/cn/linux/l-napi/index.html)很像，就是没包可处理时进入睡眠，改为中断通知。并且可以和其他进程共享同个CPU Core，但是DPDK进程会有更高调度优先级。\n## 六、DPDK的高性能代码实现\n**1.采用**[HugePage](https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt)**减少TLB Miss**\n默认下Linux采用4KB为一页，页越小内存越大，页表的开销越大，页表的内存占用也越大。CPU有[TLB](https://en.wikipedia.org/wiki/Translation_lookaside_buffer)（Translation Lookaside Buffer）成本高所以一般就只能存放几百到上千个页表项。如果进程要使用64G内存，则64G/4KB=16000000（一千六百万）页，每页在页表项中占用16000000 * 4B=62MB。如果用HugePage采用2MB作为一页，只需64G/2MB=2000，数量不在同个级别。\n而DPDK采用HugePage，在x86-64下支持2MB、1GB的页大小，几何级的降低了页表项的大小，从而减少TLB-Miss。并提供了内存池（Mempool）、MBuf、无锁环（Ring）、Bitmap等基础库。根据我们的实践，在数据平面（Data Plane）频繁的内存分配释放，必须使用内存池，不能直接使用rte_malloc，DPDK的内存分配实现非常简陋，不如ptmalloc。\n**2.SNA（Shared-nothing Architecture）**\n软件架构去中心化，尽量避免全局共享，带来全局竞争，失去横向扩展的能力。NUMA体系下不跨Node远程使用内存。\n**3.SIMD（Single Instruction Multiple Data）**\n从最早的mmx/sse到最新的avx2，SIMD的能力一直在增强。DPDK采用批量同时处理多个包，再用向量编程，一个周期内对所有包进行处理。比如，memcpy就使用SIMD来提高速度。\nSIMD在游戏后台比较常见，但是其他业务如果有类似批量处理的场景，要提高性能，也可看看能否满足。\n**4.不使用慢速API**\n这里需要重新定义一下慢速API，比如说gettimeofday，虽然在64位下通过[vDSO](http://man7.org/linux/man-pages/man7/vdso.7.html)已经不需要陷入内核态，只是一个纯内存访问，每秒也能达到几千万的级别。但是，不要忘记了我们在10GE下，每秒的处理能力就要达到几千万。所以即使是gettimeofday也属于慢速API。DPDK提供[Cycles](https://doc.dpdk.org/api/rte__cycles_8h.html)接口，例如rte_get_tsc_cycles接口，基于HPET或TSC实现。\n在x86-64下使用RDTSC指令，直接从寄存器读取，需要输入2个参数，比较常见的实现：\n```\nstatic inline uint64_t\nrte_rdtsc(void)\n{\n      uint32_t lo, hi;\n\n      __asm__ __volatile__ (\n                 \"rdtsc\" : \"=a\"(lo), \"=d\"(hi)\n                 );\n\n      return ((unsigned long long)lo) | (((unsigned long long)hi) << 32);\n}\n```\n这么写逻辑没错，但是还不够极致，还涉及到2次位运算才能得到结果，我们看看DPDK是怎么实现：\n```\nstatic inline uint64_t\nrte_rdtsc(void)\n{\n\tunion {\n\t\tuint64_t tsc_64;\n\t\tstruct {\n\t\t\tuint32_t lo_32;\n\t\t\tuint32_t hi_32;\n\t\t};\n\t} tsc;\n\n\tasm volatile(\"rdtsc\" :\n\t\t     \"=a\" (tsc.lo_32),\n\t\t     \"=d\" (tsc.hi_32));\n\treturn tsc.tsc_64;\n}\n```\n巧妙的利用C的union共享内存，直接赋值，减少了不必要的运算。但是使用tsc有些问题需要面对和解决\n1) CPU亲和性，解决多核跳动不精确的问题\n2) 内存屏障，解决乱序执行不精确的问题\n3) 禁止降频和禁止Intel Turbo Boost，固定CPU频率，解决频率变化带来的失准问题\n**5.编译执行优化**\n1) 分支预测\n现代CPU通过[pipeline](https://en.wikipedia.org/wiki/Instruction_pipelining)、[superscalar](https://zh.wikipedia.org/wiki/%E8%B6%85%E7%B4%94%E9%87%8F)提高并行处理能力，为了进一步发挥并行能力会做[分支预测](https://zh.wikipedia.org/wiki/%E5%88%86%E6%94%AF%E9%A0%90%E6%B8%AC%E5%99%A8)，提升CPU的并行能力。遇到分支时判断可能进入哪个分支，提前处理该分支的代码，预先做指令读取编码读取寄存器等，预测失败则预处理全部丢弃。我们开发业务有时候会非常清楚这个分支是true还是false，那就可以通过人工干预生成更紧凑的代码提示CPU分支预测成功率。\n```\n#pragma once\n\n#if !__GLIBC_PREREQ(2, 3)\n#    if !define __builtin_expect\n#        define __builtin_expect(x, expected_value) (x)\n#    endif\n#endif\n\n#if !defined(likely)\n#define likely(x) (__builtin_expect(!!(x), 1))\n#endif\n\n#if !defined(unlikely)\n#define unlikely(x) (__builtin_expect(!!(x), 0))\n#endif\n```\n2) CPU Cache预取\nCache Miss的代价非常高，回内存读需要65纳秒，可以将即将访问的数据主动推送的CPU Cache进行优化。比较典型的场景是链表的遍历，链表的下一节点都是随机内存地址，所以CPU肯定是无法自动预加载的。但是我们在处理本节点时，可以通过CPU指令将下一个节点推送到Cache里。\nAPI文档：https://doc.dpdk.org/api/rte__prefetch_8h.html\n\n\n```\nstatic inline void rte_prefetch0(const volatile void *p)\n{\n\tasm volatile (\"prefetcht0 %[p]\" : : [p] \"m\" (*(const volatile char *)p));\n}\n\n#if !defined(prefetch)\n#define prefetch(x) __builtin_prefetch(x)\n#endif\n```\n…等等\n3) 内存对齐\n内存对齐有2个好处：\nl 避免结构体成员跨Cache Line，需2次读取才能合并到寄存器中，降低性能。结构体成员需从大到小排序和以及强制对齐。参考《[Data alignment: Straighten up and fly right](https://www.ibm.com/developerworks/library/pa-dalign/)》\n```\n#define __rte_packed __attribute__((__packed__))\n```\nl 多线程场景下写产生[False sharing](https://en.wikipedia.org/wiki/False_sharing)，造成Cache Miss，结构体按Cache Line对齐\n```\n#ifndef CACHE_LINE_SIZE\n#define CACHE_LINE_SIZE 64\n#endif\n\n#ifndef aligined\n#define aligined(a) __attribute__((__aligned__(a)))\n#endif\n```\n4) 常量优化\n常量相关的运算的编译阶段完成。比如C++11引入了constexp，比如可以使用GCC的__builtin_constant_p来判断值是否常量，然后对常量进行编译时得出结果。举例网络序主机序转换\n```\n#define rte_bswap32(x) ((uint32_t)(__builtin_constant_p(x) ?\t\t\\\n\t\t\t\t   rte_constant_bswap32(x) :\t\t\\\n\t\t\t\t   rte_arch_bswap32(x)))\n```\n其中rte_constant_bswap32的实现\n```\n#define RTE_STATIC_BSWAP32(v) \\\n\t((((uint32_t)(v) & UINT32_C(0x000000ff)) << 24) | \\\n\t (((uint32_t)(v) & UINT32_C(0x0000ff00)) <<  8) | \\\n\t (((uint32_t)(v) & UINT32_C(0x00ff0000)) >>  8) | \\\n\t (((uint32_t)(v) & UINT32_C(0xff000000)) >> 24))\n```\n5）使用CPU指令\n现代CPU提供很多指令可直接完成常见功能，比如大小端转换，x86有bswap指令直接支持了。\n```\nstatic inline uint64_t rte_arch_bswap64(uint64_t _x)\n{\n\tregister uint64_t x = _x;\n\tasm volatile (\"bswap %[x]\"\n\t\t      : [x] \"+r\" (x)\n\t\t      );\n\treturn x;\n}\n```\n这个实现，也是GLIBC的实现，先常量优化、CPU指令优化、最后才用裸代码实现。毕竟都是顶端程序员，对语言、编译器，对实现的追求不一样，所以造轮子前一定要先了解好轮子。\nGoogle开源的[cpu_features](https://github.com/google/cpu_features)可以获取当前CPU支持什么特性，从而对特定CPU进行执行优化。高性能编程永无止境，对硬件、内核、编译器、开发语言的理解要深入且与时俱进。\n## 七、DPDK生态\n对我们互联网后台开发来说DPDK框架本身提供的能力还是比较裸的，比如要使用DPDK就必须实现ARP、IP层这些基础功能，有一定上手难度。如果要更高层的业务使用，还需要用户态的传输协议支持。不建议直接使用DPDK。\n目前生态完善，社区强大（一线大厂支持）的应用层开发项目是[FD.io](https://fd.io/)（The Fast Data Project），有思科开源支持的[VPP](https://wiki.fd.io/view/VPP)，比较完善的协议支持，ARP、VLAN、Multipath、IPv4/v6、MPLS等。用户态传输协议UDP/TCP有[TLDK](https://wiki.fd.io/view/TLDK)。从项目定位到社区支持力度算比较靠谱的框架。\n腾讯云开源的[F-Stack](https://github.com/f-stack/f-stack)也值得关注一下，开发更简单，直接提供了POSIX接口。\n[Seastar](https://github.com/scylladb/seastar)也很强大和灵活，内核态和DPDK都随意切换，也有自己的传输协议[Seastar Native TCP/IP Stack](https://github.com/scylladb/seastar/blob/master/doc/native-stack.md)支持，但是目前还未看到有大型项目在使用Seastar，可能需要填的坑比较多。\n我们GBN Gateway项目需要支持L3/IP层接入做Wan网关，单机20GE，基于DPDK开发。\n","source":"_posts/network/dpdk/一文看懂DPDK.md","raw":"---\ntitle: 一文看懂DPDK\n\ncategories:\n- 5G\n\ntag:\n- DPDK\n- 5G\n---\n\n# 大纲：\n\n* 一、 网络IO的处境和趋势\n* 二、 Linux + x86网络IO瓶颈\n* 三、 DPDK的基本原理\n* 四、 DPDK的基石UIO\n* 五、 DPDK核心优化：PMD\n* 六、 DPDK的高性能代码实现\n* 七、 DPDK生态\n\n## 一、网络IO的处境和趋势\n从我们用户的使用就可以感受到网速一直在提升，而网络技术的发展也从1GE/10GE/25GE/40GE/100GE的演变，从中可以得出单机的网络IO能力必须跟上时代的发展。\n**1.传统的电信领域**\nIP层及以下，例如路由器、交换机、防火墙、基站等设备都是采用硬件解决方案。基于专用网络处理器（NP），有基于FPGA，更有基于ASIC的。但是基于硬件的劣势非常明显，发生Bug不易修复，不易调试维护，并且网络技术一直在发展，例如2G/3G/4G/5G等移动技术的革新，这些属于业务的逻辑基于硬件实现太痛苦，不能快速迭代。传统领域面临的挑战是急需一套软件架构的高性能网络IO开发框架。\n**2.云的发展**\n私有云的出现通过网络功能虚拟化（NFV）共享硬件成为趋势，NFV的定义是通过标准的服务器、标准交换机实现各种传统的或新的网络功能。急需一套基于常用系统和标准服务器的高性能网络IO开发框架。\n**3.单机性能的飙升**\n网卡从1G到100G的发展，CPU从单核到多核到多CPU的发展，服务器的单机能力通过横行扩展达到新的高点。但是软件开发却无法跟上节奏，单机处理能力没能和硬件门当户对，如何开发出与时并进高吞吐量的服务，单机百万千万并发能力。即使有业务对QPS要求不高，主要是CPU密集型，但是现在大数据分析、人工智能等应用都需要在分布式服务器之间传输大量数据完成作业。这点应该是我们互联网后台开发最应关注，也最关联的。\n## 二、Linux + x86网络IO瓶颈\n在数年前曾经写过《网卡工作原理及高并发下的调优》一文，描述了Linux的收发报文流程。根据经验，在C1（8核）上跑应用每1W包处理需要消耗1%软中断CPU，这意味着单机的上限是100万PPS（Packet Per Second）。从TGW（Netfilter版）的性能100万PPS，AliLVS优化了也只到150万PPS，并且他们使用的服务器的配置还是比较好的。假设，我们要跑满10GE网卡，每个包64字节，这就需要2000万PPS（注：以太网万兆网卡速度上限是1488万PPS，因为最小帧大小为84B《[Bandwidth, Packets Per Second, and Other Network Performance Metrics](https://www.cisco.com/c/en/us/about/security-center/network-performance-metrics.html)》），100G是2亿PPS，即每个包的处理耗时不能超过50纳秒。而一次Cache Miss，不管是TLB、数据Cache、指令Cache发生Miss，回内存读取大约65纳秒，NUMA体系下跨Node通讯大约40纳秒。所以，即使不加上业务逻辑，即使纯收发包都如此艰难。我们要控制Cache的命中率，我们要了解计算机体系结构，不能发生跨Node通讯。\n从这些数据，我希望可以直接感受一下这里的挑战有多大，理想和现实，我们需要从中平衡。问题都有这些\n1.传统的收发报文方式都必须采用硬中断来做通讯，每次硬中断大约消耗100微秒，这还不算因为终止上下文所带来的Cache Miss。\n2.数据必须从内核态用户态之间切换拷贝带来大量CPU消耗，全局锁竞争。\n3.收发包都有系统调用的开销。\n4.内核工作在多核上，为可全局一致，即使采用Lock Free，也避免不了锁总线、内存屏障带来的性能损耗。\n5.从网卡到业务进程，经过的路径太长，有些其实未必要的，例如netfilter框架，这些都带来一定的消耗，而且容易Cache Miss。\n## 三、DPDK的基本原理\n从前面的分析可以得知IO实现的方式、内核的瓶颈，以及数据流过内核存在不可控因素，这些都是在内核中实现，内核是导致瓶颈的原因所在，要解决问题需要绕过内核。所以主流解决方案都是旁路网卡IO，绕过内核直接在用户态收发包来解决内核的瓶颈。\nLinux社区也提供了旁路机制[Netmap](http://info.iet.unipi.it/~luigi/netmap/)，官方数据10G网卡1400万PPS，但是Netmap没广泛使用。其原因有几个：\n1.Netmap需要驱动的支持，即需要网卡厂商认可这个方案。\n2.Netmap仍然依赖中断通知机制，没完全解决瓶颈。\n3.Netmap更像是几个系统调用，实现用户态直接收发包，功能太过原始，没形成依赖的网络开发框架，社区不完善。\n那么，我们来看看发展了十几年的DPDK，从Intel主导开发，到华为、思科、AWS等大厂商的加入，核心玩家都在该圈子里，拥有完善的社区，生态形成闭环。早期，主要是传统电信领域3层以下的应用，如华为、中国电信、中国移动都是其早期使用者，交换机、路由器、网关是主要应用场景。但是，随着上层业务的需求以及DPDK的完善，在更高的应用也在逐步出现。\nDPDK旁路原理：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481909477-2b323099-10ad-4130-9304-45ec7a49f78b.png#clientId=uaf56e294-6f0f-4&from=paste&height=509&id=ub579f8c8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1017&originWidth=1620&originalType=binary&ratio=1&size=250499&status=done&style=none&taskId=u2563a9e7-9bfd-435c-be58-c4bf5090890&width=810)\n图片引自Jingjing Wu的文档《Flow Bifurcation on Intel® Ethernet Controller X710/XL710》\n左边是原来的方式数据从 网卡 -> 驱动 -> 协议栈 -> Socket接口 -> 业务\n右边是DPDK的方式，基于UIO（Userspace I/O）旁路数据。数据从 网卡 -> DPDK轮询模式-> DPDK基础库 -> 业务\n用户态的好处是易用开发和维护，灵活性好。并且Crash也不影响内核运行，鲁棒性强。\nDPDK支持的CPU体系架构：x86、ARM、PowerPC（PPC）\nDPDK支持的网卡列表：[https://core.dpdk.org/supported/](https://core.dpdk.org/supported/)，我们主流使用Intel 82599（光口）、Intel x540（电口）\n## 四、DPDK的基石UIO\n为了让驱动运行在用户态，Linux提供[UIO](https://lwn.net/Articles/232575/)机制。使用UIO可以通过read感知中断，通过mmap实现和网卡的通讯。\n**UIO原理：**\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481922795-fca2bf04-8423-4259-8388-048077db52f2.png#clientId=uaf56e294-6f0f-4&from=paste&height=335&id=u6daa38c3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=669&originWidth=1024&originalType=binary&ratio=1&size=209374&status=done&style=none&taskId=u86af8dc3-fe1b-4d36-aa01-2a17725dd02&width=512)\n要开发用户态驱动有几个步骤：\n1.开发运行在内核的UIO模块，因为硬中断只能在内核处理\n2.通过/dev/uioX读取中断\n3.通过mmap和外设共享内存\n## 五、DPDK核心优化：PMD\nDPDK的UIO驱动屏蔽了硬件发出中断，然后在用户态采用主动轮询的方式，这种模式被称为[PMD](http://doc.dpdk.org/guides/prog_guide/poll_mode_drv.html)（Poll Mode Driver）。\nUIO旁路了内核，主动轮询去掉硬中断，DPDK从而可以在用户态做收发包处理。带来Zero Copy、无系统调用的好处，同步处理减少上下文切换带来的Cache Miss。\n运行在PMD的Core会处于用户态CPU100%的状态\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481936558-321d0b43-f5b2-40a3-91f1-f22d15f099f8.png#clientId=uaf56e294-6f0f-4&from=paste&height=387&id=ucbfe9a24&margin=%5Bobject%20Object%5D&name=image.png&originHeight=308&originWidth=561&originalType=binary&ratio=1&size=36195&status=done&style=none&taskId=uf66018ea-7769-486d-a44c-9d21dcd084d&width=704.5)\n网络空闲时CPU长期空转，会带来能耗问题。所以，DPDK推出Interrupt DPDK模式。\n**Interrupt DPDK：**\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/804884/1627481948671-5b96cbd8-dc36-4d24-a127-7fd62105a10d.png#clientId=uaf56e294-6f0f-4&from=paste&height=176&id=u704c6d00&margin=%5Bobject%20Object%5D&name=image.png&originHeight=183&originWidth=729&originalType=binary&ratio=1&size=26634&status=done&style=none&taskId=udeeea4f7-6473-4504-8186-2bf2e0adda5&width=699.5)\n图片引自David Su/Yunhong Jiang/Wei Wang的文档《Towards Low Latency Interrupt Mode DPDK》\n它的原理和[NAPI](https://www.ibm.com/developerworks/cn/linux/l-napi/index.html)很像，就是没包可处理时进入睡眠，改为中断通知。并且可以和其他进程共享同个CPU Core，但是DPDK进程会有更高调度优先级。\n## 六、DPDK的高性能代码实现\n**1.采用**[HugePage](https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt)**减少TLB Miss**\n默认下Linux采用4KB为一页，页越小内存越大，页表的开销越大，页表的内存占用也越大。CPU有[TLB](https://en.wikipedia.org/wiki/Translation_lookaside_buffer)（Translation Lookaside Buffer）成本高所以一般就只能存放几百到上千个页表项。如果进程要使用64G内存，则64G/4KB=16000000（一千六百万）页，每页在页表项中占用16000000 * 4B=62MB。如果用HugePage采用2MB作为一页，只需64G/2MB=2000，数量不在同个级别。\n而DPDK采用HugePage，在x86-64下支持2MB、1GB的页大小，几何级的降低了页表项的大小，从而减少TLB-Miss。并提供了内存池（Mempool）、MBuf、无锁环（Ring）、Bitmap等基础库。根据我们的实践，在数据平面（Data Plane）频繁的内存分配释放，必须使用内存池，不能直接使用rte_malloc，DPDK的内存分配实现非常简陋，不如ptmalloc。\n**2.SNA（Shared-nothing Architecture）**\n软件架构去中心化，尽量避免全局共享，带来全局竞争，失去横向扩展的能力。NUMA体系下不跨Node远程使用内存。\n**3.SIMD（Single Instruction Multiple Data）**\n从最早的mmx/sse到最新的avx2，SIMD的能力一直在增强。DPDK采用批量同时处理多个包，再用向量编程，一个周期内对所有包进行处理。比如，memcpy就使用SIMD来提高速度。\nSIMD在游戏后台比较常见，但是其他业务如果有类似批量处理的场景，要提高性能，也可看看能否满足。\n**4.不使用慢速API**\n这里需要重新定义一下慢速API，比如说gettimeofday，虽然在64位下通过[vDSO](http://man7.org/linux/man-pages/man7/vdso.7.html)已经不需要陷入内核态，只是一个纯内存访问，每秒也能达到几千万的级别。但是，不要忘记了我们在10GE下，每秒的处理能力就要达到几千万。所以即使是gettimeofday也属于慢速API。DPDK提供[Cycles](https://doc.dpdk.org/api/rte__cycles_8h.html)接口，例如rte_get_tsc_cycles接口，基于HPET或TSC实现。\n在x86-64下使用RDTSC指令，直接从寄存器读取，需要输入2个参数，比较常见的实现：\n```\nstatic inline uint64_t\nrte_rdtsc(void)\n{\n      uint32_t lo, hi;\n\n      __asm__ __volatile__ (\n                 \"rdtsc\" : \"=a\"(lo), \"=d\"(hi)\n                 );\n\n      return ((unsigned long long)lo) | (((unsigned long long)hi) << 32);\n}\n```\n这么写逻辑没错，但是还不够极致，还涉及到2次位运算才能得到结果，我们看看DPDK是怎么实现：\n```\nstatic inline uint64_t\nrte_rdtsc(void)\n{\n\tunion {\n\t\tuint64_t tsc_64;\n\t\tstruct {\n\t\t\tuint32_t lo_32;\n\t\t\tuint32_t hi_32;\n\t\t};\n\t} tsc;\n\n\tasm volatile(\"rdtsc\" :\n\t\t     \"=a\" (tsc.lo_32),\n\t\t     \"=d\" (tsc.hi_32));\n\treturn tsc.tsc_64;\n}\n```\n巧妙的利用C的union共享内存，直接赋值，减少了不必要的运算。但是使用tsc有些问题需要面对和解决\n1) CPU亲和性，解决多核跳动不精确的问题\n2) 内存屏障，解决乱序执行不精确的问题\n3) 禁止降频和禁止Intel Turbo Boost，固定CPU频率，解决频率变化带来的失准问题\n**5.编译执行优化**\n1) 分支预测\n现代CPU通过[pipeline](https://en.wikipedia.org/wiki/Instruction_pipelining)、[superscalar](https://zh.wikipedia.org/wiki/%E8%B6%85%E7%B4%94%E9%87%8F)提高并行处理能力，为了进一步发挥并行能力会做[分支预测](https://zh.wikipedia.org/wiki/%E5%88%86%E6%94%AF%E9%A0%90%E6%B8%AC%E5%99%A8)，提升CPU的并行能力。遇到分支时判断可能进入哪个分支，提前处理该分支的代码，预先做指令读取编码读取寄存器等，预测失败则预处理全部丢弃。我们开发业务有时候会非常清楚这个分支是true还是false，那就可以通过人工干预生成更紧凑的代码提示CPU分支预测成功率。\n```\n#pragma once\n\n#if !__GLIBC_PREREQ(2, 3)\n#    if !define __builtin_expect\n#        define __builtin_expect(x, expected_value) (x)\n#    endif\n#endif\n\n#if !defined(likely)\n#define likely(x) (__builtin_expect(!!(x), 1))\n#endif\n\n#if !defined(unlikely)\n#define unlikely(x) (__builtin_expect(!!(x), 0))\n#endif\n```\n2) CPU Cache预取\nCache Miss的代价非常高，回内存读需要65纳秒，可以将即将访问的数据主动推送的CPU Cache进行优化。比较典型的场景是链表的遍历，链表的下一节点都是随机内存地址，所以CPU肯定是无法自动预加载的。但是我们在处理本节点时，可以通过CPU指令将下一个节点推送到Cache里。\nAPI文档：https://doc.dpdk.org/api/rte__prefetch_8h.html\n\n\n```\nstatic inline void rte_prefetch0(const volatile void *p)\n{\n\tasm volatile (\"prefetcht0 %[p]\" : : [p] \"m\" (*(const volatile char *)p));\n}\n\n#if !defined(prefetch)\n#define prefetch(x) __builtin_prefetch(x)\n#endif\n```\n…等等\n3) 内存对齐\n内存对齐有2个好处：\nl 避免结构体成员跨Cache Line，需2次读取才能合并到寄存器中，降低性能。结构体成员需从大到小排序和以及强制对齐。参考《[Data alignment: Straighten up and fly right](https://www.ibm.com/developerworks/library/pa-dalign/)》\n```\n#define __rte_packed __attribute__((__packed__))\n```\nl 多线程场景下写产生[False sharing](https://en.wikipedia.org/wiki/False_sharing)，造成Cache Miss，结构体按Cache Line对齐\n```\n#ifndef CACHE_LINE_SIZE\n#define CACHE_LINE_SIZE 64\n#endif\n\n#ifndef aligined\n#define aligined(a) __attribute__((__aligned__(a)))\n#endif\n```\n4) 常量优化\n常量相关的运算的编译阶段完成。比如C++11引入了constexp，比如可以使用GCC的__builtin_constant_p来判断值是否常量，然后对常量进行编译时得出结果。举例网络序主机序转换\n```\n#define rte_bswap32(x) ((uint32_t)(__builtin_constant_p(x) ?\t\t\\\n\t\t\t\t   rte_constant_bswap32(x) :\t\t\\\n\t\t\t\t   rte_arch_bswap32(x)))\n```\n其中rte_constant_bswap32的实现\n```\n#define RTE_STATIC_BSWAP32(v) \\\n\t((((uint32_t)(v) & UINT32_C(0x000000ff)) << 24) | \\\n\t (((uint32_t)(v) & UINT32_C(0x0000ff00)) <<  8) | \\\n\t (((uint32_t)(v) & UINT32_C(0x00ff0000)) >>  8) | \\\n\t (((uint32_t)(v) & UINT32_C(0xff000000)) >> 24))\n```\n5）使用CPU指令\n现代CPU提供很多指令可直接完成常见功能，比如大小端转换，x86有bswap指令直接支持了。\n```\nstatic inline uint64_t rte_arch_bswap64(uint64_t _x)\n{\n\tregister uint64_t x = _x;\n\tasm volatile (\"bswap %[x]\"\n\t\t      : [x] \"+r\" (x)\n\t\t      );\n\treturn x;\n}\n```\n这个实现，也是GLIBC的实现，先常量优化、CPU指令优化、最后才用裸代码实现。毕竟都是顶端程序员，对语言、编译器，对实现的追求不一样，所以造轮子前一定要先了解好轮子。\nGoogle开源的[cpu_features](https://github.com/google/cpu_features)可以获取当前CPU支持什么特性，从而对特定CPU进行执行优化。高性能编程永无止境，对硬件、内核、编译器、开发语言的理解要深入且与时俱进。\n## 七、DPDK生态\n对我们互联网后台开发来说DPDK框架本身提供的能力还是比较裸的，比如要使用DPDK就必须实现ARP、IP层这些基础功能，有一定上手难度。如果要更高层的业务使用，还需要用户态的传输协议支持。不建议直接使用DPDK。\n目前生态完善，社区强大（一线大厂支持）的应用层开发项目是[FD.io](https://fd.io/)（The Fast Data Project），有思科开源支持的[VPP](https://wiki.fd.io/view/VPP)，比较完善的协议支持，ARP、VLAN、Multipath、IPv4/v6、MPLS等。用户态传输协议UDP/TCP有[TLDK](https://wiki.fd.io/view/TLDK)。从项目定位到社区支持力度算比较靠谱的框架。\n腾讯云开源的[F-Stack](https://github.com/f-stack/f-stack)也值得关注一下，开发更简单，直接提供了POSIX接口。\n[Seastar](https://github.com/scylladb/seastar)也很强大和灵活，内核态和DPDK都随意切换，也有自己的传输协议[Seastar Native TCP/IP Stack](https://github.com/scylladb/seastar/blob/master/doc/native-stack.md)支持，但是目前还未看到有大型项目在使用Seastar，可能需要填的坑比较多。\n我们GBN Gateway项目需要支持L3/IP层接入做Wan网关，单机20GE，基于DPDK开发。\n","slug":"network/dpdk/一文看懂DPDK","published":1,"date":"2021-07-31T11:10:47.937Z","updated":"2021-07-31T11:10:47.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyj1003hu6uk5krvb02v","content":"<h1 id=\"大纲：\"><a href=\"#大纲：\" class=\"headerlink\" title=\"大纲：\"></a>大纲：</h1><ul>\n<li>一、 网络IO的处境和趋势</li>\n<li>二、 Linux + x86网络IO瓶颈</li>\n<li>三、 DPDK的基本原理</li>\n<li>四、 DPDK的基石UIO</li>\n<li>五、 DPDK核心优化：PMD</li>\n<li>六、 DPDK的高性能代码实现</li>\n<li>七、 DPDK生态</li>\n</ul>\n<h2 id=\"一、网络IO的处境和趋势\"><a href=\"#一、网络IO的处境和趋势\" class=\"headerlink\" title=\"一、网络IO的处境和趋势\"></a>一、网络IO的处境和趋势</h2><p>从我们用户的使用就可以感受到网速一直在提升，而网络技术的发展也从1GE/10GE/25GE/40GE/100GE的演变，从中可以得出单机的网络IO能力必须跟上时代的发展。<br><strong>1.传统的电信领域</strong><br>IP层及以下，例如路由器、交换机、防火墙、基站等设备都是采用硬件解决方案。基于专用网络处理器（NP），有基于FPGA，更有基于ASIC的。但是基于硬件的劣势非常明显，发生Bug不易修复，不易调试维护，并且网络技术一直在发展，例如2G/3G/4G/5G等移动技术的革新，这些属于业务的逻辑基于硬件实现太痛苦，不能快速迭代。传统领域面临的挑战是急需一套软件架构的高性能网络IO开发框架。<br><strong>2.云的发展</strong><br>私有云的出现通过网络功能虚拟化（NFV）共享硬件成为趋势，NFV的定义是通过标准的服务器、标准交换机实现各种传统的或新的网络功能。急需一套基于常用系统和标准服务器的高性能网络IO开发框架。<br><strong>3.单机性能的飙升</strong><br>网卡从1G到100G的发展，CPU从单核到多核到多CPU的发展，服务器的单机能力通过横行扩展达到新的高点。但是软件开发却无法跟上节奏，单机处理能力没能和硬件门当户对，如何开发出与时并进高吞吐量的服务，单机百万千万并发能力。即使有业务对QPS要求不高，主要是CPU密集型，但是现在大数据分析、人工智能等应用都需要在分布式服务器之间传输大量数据完成作业。这点应该是我们互联网后台开发最应关注，也最关联的。</p>\n<h2 id=\"二、Linux-x86网络IO瓶颈\"><a href=\"#二、Linux-x86网络IO瓶颈\" class=\"headerlink\" title=\"二、Linux + x86网络IO瓶颈\"></a>二、Linux + x86网络IO瓶颈</h2><p>在数年前曾经写过《网卡工作原理及高并发下的调优》一文，描述了Linux的收发报文流程。根据经验，在C1（8核）上跑应用每1W包处理需要消耗1%软中断CPU，这意味着单机的上限是100万PPS（Packet Per Second）。从TGW（Netfilter版）的性能100万PPS，AliLVS优化了也只到150万PPS，并且他们使用的服务器的配置还是比较好的。假设，我们要跑满10GE网卡，每个包64字节，这就需要2000万PPS（注：以太网万兆网卡速度上限是1488万PPS，因为最小帧大小为84B《<a href=\"https://www.cisco.com/c/en/us/about/security-center/network-performance-metrics.html\">Bandwidth, Packets Per Second, and Other Network Performance Metrics</a>》），100G是2亿PPS，即每个包的处理耗时不能超过50纳秒。而一次Cache Miss，不管是TLB、数据Cache、指令Cache发生Miss，回内存读取大约65纳秒，NUMA体系下跨Node通讯大约40纳秒。所以，即使不加上业务逻辑，即使纯收发包都如此艰难。我们要控制Cache的命中率，我们要了解计算机体系结构，不能发生跨Node通讯。<br>从这些数据，我希望可以直接感受一下这里的挑战有多大，理想和现实，我们需要从中平衡。问题都有这些<br>1.传统的收发报文方式都必须采用硬中断来做通讯，每次硬中断大约消耗100微秒，这还不算因为终止上下文所带来的Cache Miss。<br>2.数据必须从内核态用户态之间切换拷贝带来大量CPU消耗，全局锁竞争。<br>3.收发包都有系统调用的开销。<br>4.内核工作在多核上，为可全局一致，即使采用Lock Free，也避免不了锁总线、内存屏障带来的性能损耗。<br>5.从网卡到业务进程，经过的路径太长，有些其实未必要的，例如netfilter框架，这些都带来一定的消耗，而且容易Cache Miss。</p>\n<h2 id=\"三、DPDK的基本原理\"><a href=\"#三、DPDK的基本原理\" class=\"headerlink\" title=\"三、DPDK的基本原理\"></a>三、DPDK的基本原理</h2><p>从前面的分析可以得知IO实现的方式、内核的瓶颈，以及数据流过内核存在不可控因素，这些都是在内核中实现，内核是导致瓶颈的原因所在，要解决问题需要绕过内核。所以主流解决方案都是旁路网卡IO，绕过内核直接在用户态收发包来解决内核的瓶颈。<br>Linux社区也提供了旁路机制<a href=\"http://info.iet.unipi.it/~luigi/netmap/\">Netmap</a>，官方数据10G网卡1400万PPS，但是Netmap没广泛使用。其原因有几个：<br>1.Netmap需要驱动的支持，即需要网卡厂商认可这个方案。<br>2.Netmap仍然依赖中断通知机制，没完全解决瓶颈。<br>3.Netmap更像是几个系统调用，实现用户态直接收发包，功能太过原始，没形成依赖的网络开发框架，社区不完善。<br>那么，我们来看看发展了十几年的DPDK，从Intel主导开发，到华为、思科、AWS等大厂商的加入，核心玩家都在该圈子里，拥有完善的社区，生态形成闭环。早期，主要是传统电信领域3层以下的应用，如华为、中国电信、中国移动都是其早期使用者，交换机、路由器、网关是主要应用场景。但是，随着上层业务的需求以及DPDK的完善，在更高的应用也在逐步出现。<br>DPDK旁路原理：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481909477-2b323099-10ad-4130-9304-45ec7a49f78b.png#clientId=uaf56e294-6f0f-4&from=paste&height=509&id=ub579f8c8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1017&originWidth=1620&originalType=binary&ratio=1&size=250499&status=done&style=none&taskId=u2563a9e7-9bfd-435c-be58-c4bf5090890&width=810\" alt=\"image.png\"><br>图片引自Jingjing Wu的文档《Flow Bifurcation on Intel® Ethernet Controller X710/XL710》<br>左边是原来的方式数据从 网卡 -&gt; 驱动 -&gt; 协议栈 -&gt; Socket接口 -&gt; 业务<br>右边是DPDK的方式，基于UIO（Userspace I/O）旁路数据。数据从 网卡 -&gt; DPDK轮询模式-&gt; DPDK基础库 -&gt; 业务<br>用户态的好处是易用开发和维护，灵活性好。并且Crash也不影响内核运行，鲁棒性强。<br>DPDK支持的CPU体系架构：x86、ARM、PowerPC（PPC）<br>DPDK支持的网卡列表：<a href=\"https://core.dpdk.org/supported/\">https://core.dpdk.org/supported/</a>，我们主流使用Intel 82599（光口）、Intel x540（电口）</p>\n<h2 id=\"四、DPDK的基石UIO\"><a href=\"#四、DPDK的基石UIO\" class=\"headerlink\" title=\"四、DPDK的基石UIO\"></a>四、DPDK的基石UIO</h2><p>为了让驱动运行在用户态，Linux提供<a href=\"https://lwn.net/Articles/232575/\">UIO</a>机制。使用UIO可以通过read感知中断，通过mmap实现和网卡的通讯。<br><strong>UIO原理：</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481922795-fca2bf04-8423-4259-8388-048077db52f2.png#clientId=uaf56e294-6f0f-4&from=paste&height=335&id=u6daa38c3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=669&originWidth=1024&originalType=binary&ratio=1&size=209374&status=done&style=none&taskId=u86af8dc3-fe1b-4d36-aa01-2a17725dd02&width=512\" alt=\"image.png\"><br>要开发用户态驱动有几个步骤：<br>1.开发运行在内核的UIO模块，因为硬中断只能在内核处理<br>2.通过/dev/uioX读取中断<br>3.通过mmap和外设共享内存</p>\n<h2 id=\"五、DPDK核心优化：PMD\"><a href=\"#五、DPDK核心优化：PMD\" class=\"headerlink\" title=\"五、DPDK核心优化：PMD\"></a>五、DPDK核心优化：PMD</h2><p>DPDK的UIO驱动屏蔽了硬件发出中断，然后在用户态采用主动轮询的方式，这种模式被称为<a href=\"http://doc.dpdk.org/guides/prog_guide/poll_mode_drv.html\">PMD</a>（Poll Mode Driver）。<br>UIO旁路了内核，主动轮询去掉硬中断，DPDK从而可以在用户态做收发包处理。带来Zero Copy、无系统调用的好处，同步处理减少上下文切换带来的Cache Miss。<br>运行在PMD的Core会处于用户态CPU100%的状态<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481936558-321d0b43-f5b2-40a3-91f1-f22d15f099f8.png#clientId=uaf56e294-6f0f-4&from=paste&height=387&id=ucbfe9a24&margin=%5Bobject%20Object%5D&name=image.png&originHeight=308&originWidth=561&originalType=binary&ratio=1&size=36195&status=done&style=none&taskId=uf66018ea-7769-486d-a44c-9d21dcd084d&width=704.5\" alt=\"image.png\"><br>网络空闲时CPU长期空转，会带来能耗问题。所以，DPDK推出Interrupt DPDK模式。<br><strong>Interrupt DPDK：</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481948671-5b96cbd8-dc36-4d24-a127-7fd62105a10d.png#clientId=uaf56e294-6f0f-4&from=paste&height=176&id=u704c6d00&margin=%5Bobject%20Object%5D&name=image.png&originHeight=183&originWidth=729&originalType=binary&ratio=1&size=26634&status=done&style=none&taskId=udeeea4f7-6473-4504-8186-2bf2e0adda5&width=699.5\" alt=\"image.png\"><br>图片引自David Su/Yunhong Jiang/Wei Wang的文档《Towards Low Latency Interrupt Mode DPDK》<br>它的原理和<a href=\"https://www.ibm.com/developerworks/cn/linux/l-napi/index.html\">NAPI</a>很像，就是没包可处理时进入睡眠，改为中断通知。并且可以和其他进程共享同个CPU Core，但是DPDK进程会有更高调度优先级。</p>\n<h2 id=\"六、DPDK的高性能代码实现\"><a href=\"#六、DPDK的高性能代码实现\" class=\"headerlink\" title=\"六、DPDK的高性能代码实现\"></a>六、DPDK的高性能代码实现</h2><p><strong>1.采用</strong><a href=\"https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt\">HugePage</a><strong>减少TLB Miss</strong><br>默认下Linux采用4KB为一页，页越小内存越大，页表的开销越大，页表的内存占用也越大。CPU有<a href=\"https://en.wikipedia.org/wiki/Translation_lookaside_buffer\">TLB</a>（Translation Lookaside Buffer）成本高所以一般就只能存放几百到上千个页表项。如果进程要使用64G内存，则64G/4KB=16000000（一千六百万）页，每页在页表项中占用16000000 * 4B=62MB。如果用HugePage采用2MB作为一页，只需64G/2MB=2000，数量不在同个级别。<br>而DPDK采用HugePage，在x86-64下支持2MB、1GB的页大小，几何级的降低了页表项的大小，从而减少TLB-Miss。并提供了内存池（Mempool）、MBuf、无锁环（Ring）、Bitmap等基础库。根据我们的实践，在数据平面（Data Plane）频繁的内存分配释放，必须使用内存池，不能直接使用rte_malloc，DPDK的内存分配实现非常简陋，不如ptmalloc。<br><strong>2.SNA（Shared-nothing Architecture）</strong><br>软件架构去中心化，尽量避免全局共享，带来全局竞争，失去横向扩展的能力。NUMA体系下不跨Node远程使用内存。<br><strong>3.SIMD（Single Instruction Multiple Data）</strong><br>从最早的mmx/sse到最新的avx2，SIMD的能力一直在增强。DPDK采用批量同时处理多个包，再用向量编程，一个周期内对所有包进行处理。比如，memcpy就使用SIMD来提高速度。<br>SIMD在游戏后台比较常见，但是其他业务如果有类似批量处理的场景，要提高性能，也可看看能否满足。<br><strong>4.不使用慢速API</strong><br>这里需要重新定义一下慢速API，比如说gettimeofday，虽然在64位下通过<a href=\"http://man7.org/linux/man-pages/man7/vdso.7.html\">vDSO</a>已经不需要陷入内核态，只是一个纯内存访问，每秒也能达到几千万的级别。但是，不要忘记了我们在10GE下，每秒的处理能力就要达到几千万。所以即使是gettimeofday也属于慢速API。DPDK提供<a href=\"https://doc.dpdk.org/api/rte__cycles_8h.html\">Cycles</a>接口，例如rte_get_tsc_cycles接口，基于HPET或TSC实现。<br>在x86-64下使用RDTSC指令，直接从寄存器读取，需要输入2个参数，比较常见的实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static inline uint64_t</span><br><span class=\"line\">rte_rdtsc(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      uint32_t lo, hi;</span><br><span class=\"line\"></span><br><span class=\"line\">      __asm__ __volatile__ (</span><br><span class=\"line\">                 &quot;rdtsc&quot; : &quot;=a&quot;(lo), &quot;=d&quot;(hi)</span><br><span class=\"line\">                 );</span><br><span class=\"line\"></span><br><span class=\"line\">      return ((unsigned long long)lo) | (((unsigned long long)hi) &lt;&lt; 32);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这么写逻辑没错，但是还不够极致，还涉及到2次位运算才能得到结果，我们看看DPDK是怎么实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static inline uint64_t</span><br><span class=\"line\">rte_rdtsc(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tunion &#123;</span><br><span class=\"line\">\t\tuint64_t tsc_64;</span><br><span class=\"line\">\t\tstruct &#123;</span><br><span class=\"line\">\t\t\tuint32_t lo_32;</span><br><span class=\"line\">\t\t\tuint32_t hi_32;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125; tsc;</span><br><span class=\"line\"></span><br><span class=\"line\">\tasm volatile(&quot;rdtsc&quot; :</span><br><span class=\"line\">\t\t     &quot;=a&quot; (tsc.lo_32),</span><br><span class=\"line\">\t\t     &quot;=d&quot; (tsc.hi_32));</span><br><span class=\"line\">\treturn tsc.tsc_64;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>巧妙的利用C的union共享内存，直接赋值，减少了不必要的运算。但是使用tsc有些问题需要面对和解决</p>\n<ol>\n<li>CPU亲和性，解决多核跳动不精确的问题</li>\n<li>内存屏障，解决乱序执行不精确的问题</li>\n<li>禁止降频和禁止Intel Turbo Boost，固定CPU频率，解决频率变化带来的失准问题</li>\n</ol>\n<p><strong>5.编译执行优化</strong></p>\n<ol>\n<li>分支预测<br>现代CPU通过<a href=\"https://en.wikipedia.org/wiki/Instruction_pipelining\">pipeline</a>、<a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E7%B4%94%E9%87%8F\">superscalar</a>提高并行处理能力，为了进一步发挥并行能力会做<a href=\"https://zh.wikipedia.org/wiki/%E5%88%86%E6%94%AF%E9%A0%90%E6%B8%AC%E5%99%A8\">分支预测</a>，提升CPU的并行能力。遇到分支时判断可能进入哪个分支，提前处理该分支的代码，预先做指令读取编码读取寄存器等，预测失败则预处理全部丢弃。我们开发业务有时候会非常清楚这个分支是true还是false，那就可以通过人工干预生成更紧凑的代码提示CPU分支预测成功率。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma once</span><br><span class=\"line\"></span><br><span class=\"line\">#if !__GLIBC_PREREQ(2, 3)</span><br><span class=\"line\">#    if !define __builtin_expect</span><br><span class=\"line\">#        define __builtin_expect(x, expected_value) (x)</span><br><span class=\"line\">#    endif</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">#if !defined(likely)</span><br><span class=\"line\">#define likely(x) (__builtin_expect(!!(x), 1))</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">#if !defined(unlikely)</span><br><span class=\"line\">#define unlikely(x) (__builtin_expect(!!(x), 0))</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></li>\n<li>CPU Cache预取<br>Cache Miss的代价非常高，回内存读需要65纳秒，可以将即将访问的数据主动推送的CPU Cache进行优化。比较典型的场景是链表的遍历，链表的下一节点都是随机内存地址，所以CPU肯定是无法自动预加载的。但是我们在处理本节点时，可以通过CPU指令将下一个节点推送到Cache里。<br>API文档：<a href=\"https://doc.dpdk.org/api/rte__prefetch_8h.html\">https://doc.dpdk.org/api/rte__prefetch_8h.html</a></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static inline void rte_prefetch0(const volatile void *p)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tasm volatile (&quot;prefetcht0 %[p]&quot; : : [p] &quot;m&quot; (*(const volatile char *)p));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#if !defined(prefetch)</span><br><span class=\"line\">#define prefetch(x) __builtin_prefetch(x)</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<p>…等等<br>3) 内存对齐<br>内存对齐有2个好处：<br>l 避免结构体成员跨Cache Line，需2次读取才能合并到寄存器中，降低性能。结构体成员需从大到小排序和以及强制对齐。参考《<a href=\"https://www.ibm.com/developerworks/library/pa-dalign/\">Data alignment: Straighten up and fly right</a>》</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define __rte_packed __attribute__((__packed__))</span><br></pre></td></tr></table></figure>\n<p>l 多线程场景下写产生<a href=\"https://en.wikipedia.org/wiki/False_sharing\">False sharing</a>，造成Cache Miss，结构体按Cache Line对齐</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef CACHE_LINE_SIZE</span><br><span class=\"line\">#define CACHE_LINE_SIZE 64</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">#ifndef aligined</span><br><span class=\"line\">#define aligined(a) __attribute__((__aligned__(a)))</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>常量优化<br>常量相关的运算的编译阶段完成。比如C++11引入了constexp，比如可以使用GCC的__builtin_constant_p来判断值是否常量，然后对常量进行编译时得出结果。举例网络序主机序转换<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define rte_bswap32(x) ((uint32_t)(__builtin_constant_p(x) ?\t\t\\</span><br><span class=\"line\">\t\t\t\t   rte_constant_bswap32(x) :\t\t\\</span><br><span class=\"line\">\t\t\t\t   rte_arch_bswap32(x)))</span><br></pre></td></tr></table></figure>\n其中rte_constant_bswap32的实现<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define RTE_STATIC_BSWAP32(v) \\</span><br><span class=\"line\">\t((((uint32_t)(v) &amp; UINT32_C(0x000000ff)) &lt;&lt; 24) | \\</span><br><span class=\"line\">\t (((uint32_t)(v) &amp; UINT32_C(0x0000ff00)) &lt;&lt;  8) | \\</span><br><span class=\"line\">\t (((uint32_t)(v) &amp; UINT32_C(0x00ff0000)) &gt;&gt;  8) | \\</span><br><span class=\"line\">\t (((uint32_t)(v) &amp; UINT32_C(0xff000000)) &gt;&gt; 24))</span><br></pre></td></tr></table></figure>\n5）使用CPU指令<br>现代CPU提供很多指令可直接完成常见功能，比如大小端转换，x86有bswap指令直接支持了。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static inline uint64_t rte_arch_bswap64(uint64_t _x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tregister uint64_t x = _x;</span><br><span class=\"line\">\tasm volatile (&quot;bswap %[x]&quot;</span><br><span class=\"line\">\t\t      : [x] &quot;+r&quot; (x)</span><br><span class=\"line\">\t\t      );</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n这个实现，也是GLIBC的实现，先常量优化、CPU指令优化、最后才用裸代码实现。毕竟都是顶端程序员，对语言、编译器，对实现的追求不一样，所以造轮子前一定要先了解好轮子。<br>Google开源的<a href=\"https://github.com/google/cpu_features\">cpu_features</a>可以获取当前CPU支持什么特性，从而对特定CPU进行执行优化。高性能编程永无止境，对硬件、内核、编译器、开发语言的理解要深入且与时俱进。<h2 id=\"七、DPDK生态\"><a href=\"#七、DPDK生态\" class=\"headerlink\" title=\"七、DPDK生态\"></a>七、DPDK生态</h2>对我们互联网后台开发来说DPDK框架本身提供的能力还是比较裸的，比如要使用DPDK就必须实现ARP、IP层这些基础功能，有一定上手难度。如果要更高层的业务使用，还需要用户态的传输协议支持。不建议直接使用DPDK。<br>目前生态完善，社区强大（一线大厂支持）的应用层开发项目是<a href=\"https://fd.io/\">FD.io</a>（The Fast Data Project），有思科开源支持的<a href=\"https://wiki.fd.io/view/VPP\">VPP</a>，比较完善的协议支持，ARP、VLAN、Multipath、IPv4/v6、MPLS等。用户态传输协议UDP/TCP有<a href=\"https://wiki.fd.io/view/TLDK\">TLDK</a>。从项目定位到社区支持力度算比较靠谱的框架。<br>腾讯云开源的<a href=\"https://github.com/f-stack/f-stack\">F-Stack</a>也值得关注一下，开发更简单，直接提供了POSIX接口。<br><a href=\"https://github.com/scylladb/seastar\">Seastar</a>也很强大和灵活，内核态和DPDK都随意切换，也有自己的传输协议<a href=\"https://github.com/scylladb/seastar/blob/master/doc/native-stack.md\">Seastar Native TCP/IP Stack</a>支持，但是目前还未看到有大型项目在使用Seastar，可能需要填的坑比较多。<br>我们GBN Gateway项目需要支持L3/IP层接入做Wan网关，单机20GE，基于DPDK开发。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"大纲：\"><a href=\"#大纲：\" class=\"headerlink\" title=\"大纲：\"></a>大纲：</h1><ul>\n<li>一、 网络IO的处境和趋势</li>\n<li>二、 Linux + x86网络IO瓶颈</li>\n<li>三、 DPDK的基本原理</li>\n<li>四、 DPDK的基石UIO</li>\n<li>五、 DPDK核心优化：PMD</li>\n<li>六、 DPDK的高性能代码实现</li>\n<li>七、 DPDK生态</li>\n</ul>\n<h2 id=\"一、网络IO的处境和趋势\"><a href=\"#一、网络IO的处境和趋势\" class=\"headerlink\" title=\"一、网络IO的处境和趋势\"></a>一、网络IO的处境和趋势</h2><p>从我们用户的使用就可以感受到网速一直在提升，而网络技术的发展也从1GE/10GE/25GE/40GE/100GE的演变，从中可以得出单机的网络IO能力必须跟上时代的发展。<br><strong>1.传统的电信领域</strong><br>IP层及以下，例如路由器、交换机、防火墙、基站等设备都是采用硬件解决方案。基于专用网络处理器（NP），有基于FPGA，更有基于ASIC的。但是基于硬件的劣势非常明显，发生Bug不易修复，不易调试维护，并且网络技术一直在发展，例如2G/3G/4G/5G等移动技术的革新，这些属于业务的逻辑基于硬件实现太痛苦，不能快速迭代。传统领域面临的挑战是急需一套软件架构的高性能网络IO开发框架。<br><strong>2.云的发展</strong><br>私有云的出现通过网络功能虚拟化（NFV）共享硬件成为趋势，NFV的定义是通过标准的服务器、标准交换机实现各种传统的或新的网络功能。急需一套基于常用系统和标准服务器的高性能网络IO开发框架。<br><strong>3.单机性能的飙升</strong><br>网卡从1G到100G的发展，CPU从单核到多核到多CPU的发展，服务器的单机能力通过横行扩展达到新的高点。但是软件开发却无法跟上节奏，单机处理能力没能和硬件门当户对，如何开发出与时并进高吞吐量的服务，单机百万千万并发能力。即使有业务对QPS要求不高，主要是CPU密集型，但是现在大数据分析、人工智能等应用都需要在分布式服务器之间传输大量数据完成作业。这点应该是我们互联网后台开发最应关注，也最关联的。</p>\n<h2 id=\"二、Linux-x86网络IO瓶颈\"><a href=\"#二、Linux-x86网络IO瓶颈\" class=\"headerlink\" title=\"二、Linux + x86网络IO瓶颈\"></a>二、Linux + x86网络IO瓶颈</h2><p>在数年前曾经写过《网卡工作原理及高并发下的调优》一文，描述了Linux的收发报文流程。根据经验，在C1（8核）上跑应用每1W包处理需要消耗1%软中断CPU，这意味着单机的上限是100万PPS（Packet Per Second）。从TGW（Netfilter版）的性能100万PPS，AliLVS优化了也只到150万PPS，并且他们使用的服务器的配置还是比较好的。假设，我们要跑满10GE网卡，每个包64字节，这就需要2000万PPS（注：以太网万兆网卡速度上限是1488万PPS，因为最小帧大小为84B《<a href=\"https://www.cisco.com/c/en/us/about/security-center/network-performance-metrics.html\">Bandwidth, Packets Per Second, and Other Network Performance Metrics</a>》），100G是2亿PPS，即每个包的处理耗时不能超过50纳秒。而一次Cache Miss，不管是TLB、数据Cache、指令Cache发生Miss，回内存读取大约65纳秒，NUMA体系下跨Node通讯大约40纳秒。所以，即使不加上业务逻辑，即使纯收发包都如此艰难。我们要控制Cache的命中率，我们要了解计算机体系结构，不能发生跨Node通讯。<br>从这些数据，我希望可以直接感受一下这里的挑战有多大，理想和现实，我们需要从中平衡。问题都有这些<br>1.传统的收发报文方式都必须采用硬中断来做通讯，每次硬中断大约消耗100微秒，这还不算因为终止上下文所带来的Cache Miss。<br>2.数据必须从内核态用户态之间切换拷贝带来大量CPU消耗，全局锁竞争。<br>3.收发包都有系统调用的开销。<br>4.内核工作在多核上，为可全局一致，即使采用Lock Free，也避免不了锁总线、内存屏障带来的性能损耗。<br>5.从网卡到业务进程，经过的路径太长，有些其实未必要的，例如netfilter框架，这些都带来一定的消耗，而且容易Cache Miss。</p>\n<h2 id=\"三、DPDK的基本原理\"><a href=\"#三、DPDK的基本原理\" class=\"headerlink\" title=\"三、DPDK的基本原理\"></a>三、DPDK的基本原理</h2><p>从前面的分析可以得知IO实现的方式、内核的瓶颈，以及数据流过内核存在不可控因素，这些都是在内核中实现，内核是导致瓶颈的原因所在，要解决问题需要绕过内核。所以主流解决方案都是旁路网卡IO，绕过内核直接在用户态收发包来解决内核的瓶颈。<br>Linux社区也提供了旁路机制<a href=\"http://info.iet.unipi.it/~luigi/netmap/\">Netmap</a>，官方数据10G网卡1400万PPS，但是Netmap没广泛使用。其原因有几个：<br>1.Netmap需要驱动的支持，即需要网卡厂商认可这个方案。<br>2.Netmap仍然依赖中断通知机制，没完全解决瓶颈。<br>3.Netmap更像是几个系统调用，实现用户态直接收发包，功能太过原始，没形成依赖的网络开发框架，社区不完善。<br>那么，我们来看看发展了十几年的DPDK，从Intel主导开发，到华为、思科、AWS等大厂商的加入，核心玩家都在该圈子里，拥有完善的社区，生态形成闭环。早期，主要是传统电信领域3层以下的应用，如华为、中国电信、中国移动都是其早期使用者，交换机、路由器、网关是主要应用场景。但是，随着上层业务的需求以及DPDK的完善，在更高的应用也在逐步出现。<br>DPDK旁路原理：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481909477-2b323099-10ad-4130-9304-45ec7a49f78b.png#clientId=uaf56e294-6f0f-4&from=paste&height=509&id=ub579f8c8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1017&originWidth=1620&originalType=binary&ratio=1&size=250499&status=done&style=none&taskId=u2563a9e7-9bfd-435c-be58-c4bf5090890&width=810\" alt=\"image.png\"><br>图片引自Jingjing Wu的文档《Flow Bifurcation on Intel® Ethernet Controller X710/XL710》<br>左边是原来的方式数据从 网卡 -&gt; 驱动 -&gt; 协议栈 -&gt; Socket接口 -&gt; 业务<br>右边是DPDK的方式，基于UIO（Userspace I/O）旁路数据。数据从 网卡 -&gt; DPDK轮询模式-&gt; DPDK基础库 -&gt; 业务<br>用户态的好处是易用开发和维护，灵活性好。并且Crash也不影响内核运行，鲁棒性强。<br>DPDK支持的CPU体系架构：x86、ARM、PowerPC（PPC）<br>DPDK支持的网卡列表：<a href=\"https://core.dpdk.org/supported/\">https://core.dpdk.org/supported/</a>，我们主流使用Intel 82599（光口）、Intel x540（电口）</p>\n<h2 id=\"四、DPDK的基石UIO\"><a href=\"#四、DPDK的基石UIO\" class=\"headerlink\" title=\"四、DPDK的基石UIO\"></a>四、DPDK的基石UIO</h2><p>为了让驱动运行在用户态，Linux提供<a href=\"https://lwn.net/Articles/232575/\">UIO</a>机制。使用UIO可以通过read感知中断，通过mmap实现和网卡的通讯。<br><strong>UIO原理：</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481922795-fca2bf04-8423-4259-8388-048077db52f2.png#clientId=uaf56e294-6f0f-4&from=paste&height=335&id=u6daa38c3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=669&originWidth=1024&originalType=binary&ratio=1&size=209374&status=done&style=none&taskId=u86af8dc3-fe1b-4d36-aa01-2a17725dd02&width=512\" alt=\"image.png\"><br>要开发用户态驱动有几个步骤：<br>1.开发运行在内核的UIO模块，因为硬中断只能在内核处理<br>2.通过/dev/uioX读取中断<br>3.通过mmap和外设共享内存</p>\n<h2 id=\"五、DPDK核心优化：PMD\"><a href=\"#五、DPDK核心优化：PMD\" class=\"headerlink\" title=\"五、DPDK核心优化：PMD\"></a>五、DPDK核心优化：PMD</h2><p>DPDK的UIO驱动屏蔽了硬件发出中断，然后在用户态采用主动轮询的方式，这种模式被称为<a href=\"http://doc.dpdk.org/guides/prog_guide/poll_mode_drv.html\">PMD</a>（Poll Mode Driver）。<br>UIO旁路了内核，主动轮询去掉硬中断，DPDK从而可以在用户态做收发包处理。带来Zero Copy、无系统调用的好处，同步处理减少上下文切换带来的Cache Miss。<br>运行在PMD的Core会处于用户态CPU100%的状态<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481936558-321d0b43-f5b2-40a3-91f1-f22d15f099f8.png#clientId=uaf56e294-6f0f-4&from=paste&height=387&id=ucbfe9a24&margin=%5Bobject%20Object%5D&name=image.png&originHeight=308&originWidth=561&originalType=binary&ratio=1&size=36195&status=done&style=none&taskId=uf66018ea-7769-486d-a44c-9d21dcd084d&width=704.5\" alt=\"image.png\"><br>网络空闲时CPU长期空转，会带来能耗问题。所以，DPDK推出Interrupt DPDK模式。<br><strong>Interrupt DPDK：</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627481948671-5b96cbd8-dc36-4d24-a127-7fd62105a10d.png#clientId=uaf56e294-6f0f-4&from=paste&height=176&id=u704c6d00&margin=%5Bobject%20Object%5D&name=image.png&originHeight=183&originWidth=729&originalType=binary&ratio=1&size=26634&status=done&style=none&taskId=udeeea4f7-6473-4504-8186-2bf2e0adda5&width=699.5\" alt=\"image.png\"><br>图片引自David Su/Yunhong Jiang/Wei Wang的文档《Towards Low Latency Interrupt Mode DPDK》<br>它的原理和<a href=\"https://www.ibm.com/developerworks/cn/linux/l-napi/index.html\">NAPI</a>很像，就是没包可处理时进入睡眠，改为中断通知。并且可以和其他进程共享同个CPU Core，但是DPDK进程会有更高调度优先级。</p>\n<h2 id=\"六、DPDK的高性能代码实现\"><a href=\"#六、DPDK的高性能代码实现\" class=\"headerlink\" title=\"六、DPDK的高性能代码实现\"></a>六、DPDK的高性能代码实现</h2><p><strong>1.采用</strong><a href=\"https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt\">HugePage</a><strong>减少TLB Miss</strong><br>默认下Linux采用4KB为一页，页越小内存越大，页表的开销越大，页表的内存占用也越大。CPU有<a href=\"https://en.wikipedia.org/wiki/Translation_lookaside_buffer\">TLB</a>（Translation Lookaside Buffer）成本高所以一般就只能存放几百到上千个页表项。如果进程要使用64G内存，则64G/4KB=16000000（一千六百万）页，每页在页表项中占用16000000 * 4B=62MB。如果用HugePage采用2MB作为一页，只需64G/2MB=2000，数量不在同个级别。<br>而DPDK采用HugePage，在x86-64下支持2MB、1GB的页大小，几何级的降低了页表项的大小，从而减少TLB-Miss。并提供了内存池（Mempool）、MBuf、无锁环（Ring）、Bitmap等基础库。根据我们的实践，在数据平面（Data Plane）频繁的内存分配释放，必须使用内存池，不能直接使用rte_malloc，DPDK的内存分配实现非常简陋，不如ptmalloc。<br><strong>2.SNA（Shared-nothing Architecture）</strong><br>软件架构去中心化，尽量避免全局共享，带来全局竞争，失去横向扩展的能力。NUMA体系下不跨Node远程使用内存。<br><strong>3.SIMD（Single Instruction Multiple Data）</strong><br>从最早的mmx/sse到最新的avx2，SIMD的能力一直在增强。DPDK采用批量同时处理多个包，再用向量编程，一个周期内对所有包进行处理。比如，memcpy就使用SIMD来提高速度。<br>SIMD在游戏后台比较常见，但是其他业务如果有类似批量处理的场景，要提高性能，也可看看能否满足。<br><strong>4.不使用慢速API</strong><br>这里需要重新定义一下慢速API，比如说gettimeofday，虽然在64位下通过<a href=\"http://man7.org/linux/man-pages/man7/vdso.7.html\">vDSO</a>已经不需要陷入内核态，只是一个纯内存访问，每秒也能达到几千万的级别。但是，不要忘记了我们在10GE下，每秒的处理能力就要达到几千万。所以即使是gettimeofday也属于慢速API。DPDK提供<a href=\"https://doc.dpdk.org/api/rte__cycles_8h.html\">Cycles</a>接口，例如rte_get_tsc_cycles接口，基于HPET或TSC实现。<br>在x86-64下使用RDTSC指令，直接从寄存器读取，需要输入2个参数，比较常见的实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static inline uint64_t</span><br><span class=\"line\">rte_rdtsc(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      uint32_t lo, hi;</span><br><span class=\"line\"></span><br><span class=\"line\">      __asm__ __volatile__ (</span><br><span class=\"line\">                 &quot;rdtsc&quot; : &quot;=a&quot;(lo), &quot;=d&quot;(hi)</span><br><span class=\"line\">                 );</span><br><span class=\"line\"></span><br><span class=\"line\">      return ((unsigned long long)lo) | (((unsigned long long)hi) &lt;&lt; 32);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这么写逻辑没错，但是还不够极致，还涉及到2次位运算才能得到结果，我们看看DPDK是怎么实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static inline uint64_t</span><br><span class=\"line\">rte_rdtsc(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tunion &#123;</span><br><span class=\"line\">\t\tuint64_t tsc_64;</span><br><span class=\"line\">\t\tstruct &#123;</span><br><span class=\"line\">\t\t\tuint32_t lo_32;</span><br><span class=\"line\">\t\t\tuint32_t hi_32;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125; tsc;</span><br><span class=\"line\"></span><br><span class=\"line\">\tasm volatile(&quot;rdtsc&quot; :</span><br><span class=\"line\">\t\t     &quot;=a&quot; (tsc.lo_32),</span><br><span class=\"line\">\t\t     &quot;=d&quot; (tsc.hi_32));</span><br><span class=\"line\">\treturn tsc.tsc_64;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>巧妙的利用C的union共享内存，直接赋值，减少了不必要的运算。但是使用tsc有些问题需要面对和解决</p>\n<ol>\n<li>CPU亲和性，解决多核跳动不精确的问题</li>\n<li>内存屏障，解决乱序执行不精确的问题</li>\n<li>禁止降频和禁止Intel Turbo Boost，固定CPU频率，解决频率变化带来的失准问题</li>\n</ol>\n<p><strong>5.编译执行优化</strong></p>\n<ol>\n<li>分支预测<br>现代CPU通过<a href=\"https://en.wikipedia.org/wiki/Instruction_pipelining\">pipeline</a>、<a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E7%B4%94%E9%87%8F\">superscalar</a>提高并行处理能力，为了进一步发挥并行能力会做<a href=\"https://zh.wikipedia.org/wiki/%E5%88%86%E6%94%AF%E9%A0%90%E6%B8%AC%E5%99%A8\">分支预测</a>，提升CPU的并行能力。遇到分支时判断可能进入哪个分支，提前处理该分支的代码，预先做指令读取编码读取寄存器等，预测失败则预处理全部丢弃。我们开发业务有时候会非常清楚这个分支是true还是false，那就可以通过人工干预生成更紧凑的代码提示CPU分支预测成功率。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma once</span><br><span class=\"line\"></span><br><span class=\"line\">#if !__GLIBC_PREREQ(2, 3)</span><br><span class=\"line\">#    if !define __builtin_expect</span><br><span class=\"line\">#        define __builtin_expect(x, expected_value) (x)</span><br><span class=\"line\">#    endif</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">#if !defined(likely)</span><br><span class=\"line\">#define likely(x) (__builtin_expect(!!(x), 1))</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">#if !defined(unlikely)</span><br><span class=\"line\">#define unlikely(x) (__builtin_expect(!!(x), 0))</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></li>\n<li>CPU Cache预取<br>Cache Miss的代价非常高，回内存读需要65纳秒，可以将即将访问的数据主动推送的CPU Cache进行优化。比较典型的场景是链表的遍历，链表的下一节点都是随机内存地址，所以CPU肯定是无法自动预加载的。但是我们在处理本节点时，可以通过CPU指令将下一个节点推送到Cache里。<br>API文档：<a href=\"https://doc.dpdk.org/api/rte__prefetch_8h.html\">https://doc.dpdk.org/api/rte__prefetch_8h.html</a></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static inline void rte_prefetch0(const volatile void *p)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tasm volatile (&quot;prefetcht0 %[p]&quot; : : [p] &quot;m&quot; (*(const volatile char *)p));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#if !defined(prefetch)</span><br><span class=\"line\">#define prefetch(x) __builtin_prefetch(x)</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<p>…等等<br>3) 内存对齐<br>内存对齐有2个好处：<br>l 避免结构体成员跨Cache Line，需2次读取才能合并到寄存器中，降低性能。结构体成员需从大到小排序和以及强制对齐。参考《<a href=\"https://www.ibm.com/developerworks/library/pa-dalign/\">Data alignment: Straighten up and fly right</a>》</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define __rte_packed __attribute__((__packed__))</span><br></pre></td></tr></table></figure>\n<p>l 多线程场景下写产生<a href=\"https://en.wikipedia.org/wiki/False_sharing\">False sharing</a>，造成Cache Miss，结构体按Cache Line对齐</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef CACHE_LINE_SIZE</span><br><span class=\"line\">#define CACHE_LINE_SIZE 64</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">#ifndef aligined</span><br><span class=\"line\">#define aligined(a) __attribute__((__aligned__(a)))</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>常量优化<br>常量相关的运算的编译阶段完成。比如C++11引入了constexp，比如可以使用GCC的__builtin_constant_p来判断值是否常量，然后对常量进行编译时得出结果。举例网络序主机序转换<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define rte_bswap32(x) ((uint32_t)(__builtin_constant_p(x) ?\t\t\\</span><br><span class=\"line\">\t\t\t\t   rte_constant_bswap32(x) :\t\t\\</span><br><span class=\"line\">\t\t\t\t   rte_arch_bswap32(x)))</span><br></pre></td></tr></table></figure>\n其中rte_constant_bswap32的实现<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define RTE_STATIC_BSWAP32(v) \\</span><br><span class=\"line\">\t((((uint32_t)(v) &amp; UINT32_C(0x000000ff)) &lt;&lt; 24) | \\</span><br><span class=\"line\">\t (((uint32_t)(v) &amp; UINT32_C(0x0000ff00)) &lt;&lt;  8) | \\</span><br><span class=\"line\">\t (((uint32_t)(v) &amp; UINT32_C(0x00ff0000)) &gt;&gt;  8) | \\</span><br><span class=\"line\">\t (((uint32_t)(v) &amp; UINT32_C(0xff000000)) &gt;&gt; 24))</span><br></pre></td></tr></table></figure>\n5）使用CPU指令<br>现代CPU提供很多指令可直接完成常见功能，比如大小端转换，x86有bswap指令直接支持了。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static inline uint64_t rte_arch_bswap64(uint64_t _x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tregister uint64_t x = _x;</span><br><span class=\"line\">\tasm volatile (&quot;bswap %[x]&quot;</span><br><span class=\"line\">\t\t      : [x] &quot;+r&quot; (x)</span><br><span class=\"line\">\t\t      );</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n这个实现，也是GLIBC的实现，先常量优化、CPU指令优化、最后才用裸代码实现。毕竟都是顶端程序员，对语言、编译器，对实现的追求不一样，所以造轮子前一定要先了解好轮子。<br>Google开源的<a href=\"https://github.com/google/cpu_features\">cpu_features</a>可以获取当前CPU支持什么特性，从而对特定CPU进行执行优化。高性能编程永无止境，对硬件、内核、编译器、开发语言的理解要深入且与时俱进。<h2 id=\"七、DPDK生态\"><a href=\"#七、DPDK生态\" class=\"headerlink\" title=\"七、DPDK生态\"></a>七、DPDK生态</h2>对我们互联网后台开发来说DPDK框架本身提供的能力还是比较裸的，比如要使用DPDK就必须实现ARP、IP层这些基础功能，有一定上手难度。如果要更高层的业务使用，还需要用户态的传输协议支持。不建议直接使用DPDK。<br>目前生态完善，社区强大（一线大厂支持）的应用层开发项目是<a href=\"https://fd.io/\">FD.io</a>（The Fast Data Project），有思科开源支持的<a href=\"https://wiki.fd.io/view/VPP\">VPP</a>，比较完善的协议支持，ARP、VLAN、Multipath、IPv4/v6、MPLS等。用户态传输协议UDP/TCP有<a href=\"https://wiki.fd.io/view/TLDK\">TLDK</a>。从项目定位到社区支持力度算比较靠谱的框架。<br>腾讯云开源的<a href=\"https://github.com/f-stack/f-stack\">F-Stack</a>也值得关注一下，开发更简单，直接提供了POSIX接口。<br><a href=\"https://github.com/scylladb/seastar\">Seastar</a>也很强大和灵活，内核态和DPDK都随意切换，也有自己的传输协议<a href=\"https://github.com/scylladb/seastar/blob/master/doc/native-stack.md\">Seastar Native TCP/IP Stack</a>支持，但是目前还未看到有大型项目在使用Seastar，可能需要填的坑比较多。<br>我们GBN Gateway项目需要支持L3/IP层接入做Wan网关，单机20GE，基于DPDK开发。</li>\n</ol>\n"},{"title":"SCTP概要","_content":"\n## 1.简介\nSCTP(Stream Control Transmission Protocol),流控制传输协议,和UDP，TCP类似\nTCP是一种面向连接的协议，提供可靠传输，确保数据有序发送；\nUDP是一种面向消息的协议，不能确保数据有序发送\nSCTP是后来引入的一种新的协议，提供了和TCP一样的可靠、有序的数据传输功能，同时却能和UDP一样面对消息的方式来进行操作，保护消息边界，有下面一些特性\n## 2.SCTP特性\n\n- 多宿主（Multi-Homing）\n- 多流（Multi-streaming）\n- 初始化保护（Initiation protection）\n- 消息分帧（Message framing）\n- 可配置的无序发送（Configurable unordered delivery）\n- 平滑关闭（Graceful shutdown）\n\n​\n\n### 2.1 多宿主\n\n\nSCTP里面引入了联合（Association）的概念TCP连接是在两个主机的单个接口之间建立的SCTP可以把多条路径合并到一个联合中，数据可以在任意一个连接路径上进行传输\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1627480915523-b1986537-7174-48d4-a148-fba170b4d657.png#clientId=u48df284e-bf72-4&from=paste&id=u8942af97&margin=%5Bobject%20Object%5D&originHeight=325&originWidth=485&originalType=url&ratio=1&status=done&style=none&taskId=uafde6a16-0d86-4649-9d84-0dcd105a004)\n### 2.2 多流\n       SCTP可以在一个联合中支持多流机制，每个流（stream）都是独立的。每个流都有各自的编号，编码在SCTP报文中阻塞的流不会影响同一联合中的其他流，可以并行进行传输\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1627480914764-6dbae28f-4e8d-4bf3-9bf9-a53f4d86d378.png#clientId=u48df284e-bf72-4&from=paste&id=u08bbe321&margin=%5Bobject%20Object%5D&originHeight=164&originWidth=463&originalType=url&ratio=1&status=done&style=none&taskId=u612f73a4-99ec-4c4d-85c8-ff80dcdc695)\n### 2.3 初始化保护\n      TCP中的三次握手机制会被利用来进行DoS（Denial of Service）攻击，通过发送大量的SYN报文最终耗尽服务器的资源SCTP通过引入4次握手机制来避免这种场景：服务器的INIT-ACK中会包含cookie（标识这个连接的唯一上下文）；\n客户端使用这个cookie来进行响应。服务器收到这个响应后，才为这个连接分配资源；为了解决4次握手机制带来的时延，SCTP协议还允许在COOKIE-ECHO和COOKIE-ACK报文中传输数据包\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1627480917379-b7cb7c2b-b1cb-4a80-8573-ebe1d246c7c7.png#clientId=u48df284e-bf72-4&from=paste&id=u3a4682d7&margin=%5Bobject%20Object%5D&originHeight=258&originWidth=546&originalType=url&ratio=1&status=done&style=none&taskId=u554b496a-477c-49ba-bcc3-a16bad0a456)\n消息分帧\nTCP协议是按照字节流的方式进行数据传输的，并不存在消息边界，比如说音频视频都可以通过流的方式进行传递；UDP使用的是消息分帧，发端多大的数据包，收端收到的数据包也是这么大；\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1627480915216-fecb3fa7-5a65-419b-9101-aff14c310912.png#clientId=u48df284e-bf72-4&from=paste&id=u3c6a317d&margin=%5Bobject%20Object%5D&originHeight=202&originWidth=426&originalType=url&ratio=1&status=done&style=none&taskId=u68997ce0-2001-421a-9e05-de4aaad582a)\n可配置的无序发送\nTCP能确保数据按照次序发送；UDP无法保证消息有序；SCTP中也可以配置成接受无序的消息；\n这样的通信方式对于面向消息的传输非常有用，因为每个消息都是各自独立的，次序并不重要。\n平滑关闭\nTCP和SCTP都是基于连接的协议，完成传输后都需要有一个拆除连接的过程。TCP中连接的删除是半关闭的，服务的某一端可以关闭自己这端的socket，但是可以继续接受数据。SCTP协议设计的时候考虑这种半关闭的状态实际上很少使用，所以简化了关闭的过程，一旦某一端发起了连接拆除，对等的两端都关闭。\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1627480914813-f11dbcb5-74ba-46f1-a04d-c7e5538f7a5d.png#clientId=u48df284e-bf72-4&from=paste&id=u04833e5f&margin=%5Bobject%20Object%5D&originHeight=258&originWidth=546&originalType=url&ratio=1&status=done&style=none&taskId=u43fedf9d-ba51-4d9a-992d-96bed9ef960)\n\n\n版权声明：本文为博主原创文章，遵循[CC 4.0 BY-SA](https://creativecommons.org/licenses/by-sa/4.0/)版权协议，转载请附上原文出处链接和本声明。\n本文链接：[https://blog.csdn.net/qq_34709713/article/details/106511096](https://blog.csdn.net/qq_34709713/article/details/106511096)\n","source":"_posts/network/protocol/SCTP概要.md","raw":"---\ntitle: SCTP概要\n\ncategories:\n- 5G\n\ntag:\n- 5G\n- NGAP\n---\n\n## 1.简介\nSCTP(Stream Control Transmission Protocol),流控制传输协议,和UDP，TCP类似\nTCP是一种面向连接的协议，提供可靠传输，确保数据有序发送；\nUDP是一种面向消息的协议，不能确保数据有序发送\nSCTP是后来引入的一种新的协议，提供了和TCP一样的可靠、有序的数据传输功能，同时却能和UDP一样面对消息的方式来进行操作，保护消息边界，有下面一些特性\n## 2.SCTP特性\n\n- 多宿主（Multi-Homing）\n- 多流（Multi-streaming）\n- 初始化保护（Initiation protection）\n- 消息分帧（Message framing）\n- 可配置的无序发送（Configurable unordered delivery）\n- 平滑关闭（Graceful shutdown）\n\n​\n\n### 2.1 多宿主\n\n\nSCTP里面引入了联合（Association）的概念TCP连接是在两个主机的单个接口之间建立的SCTP可以把多条路径合并到一个联合中，数据可以在任意一个连接路径上进行传输\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1627480915523-b1986537-7174-48d4-a148-fba170b4d657.png#clientId=u48df284e-bf72-4&from=paste&id=u8942af97&margin=%5Bobject%20Object%5D&originHeight=325&originWidth=485&originalType=url&ratio=1&status=done&style=none&taskId=uafde6a16-0d86-4649-9d84-0dcd105a004)\n### 2.2 多流\n       SCTP可以在一个联合中支持多流机制，每个流（stream）都是独立的。每个流都有各自的编号，编码在SCTP报文中阻塞的流不会影响同一联合中的其他流，可以并行进行传输\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1627480914764-6dbae28f-4e8d-4bf3-9bf9-a53f4d86d378.png#clientId=u48df284e-bf72-4&from=paste&id=u08bbe321&margin=%5Bobject%20Object%5D&originHeight=164&originWidth=463&originalType=url&ratio=1&status=done&style=none&taskId=u612f73a4-99ec-4c4d-85c8-ff80dcdc695)\n### 2.3 初始化保护\n      TCP中的三次握手机制会被利用来进行DoS（Denial of Service）攻击，通过发送大量的SYN报文最终耗尽服务器的资源SCTP通过引入4次握手机制来避免这种场景：服务器的INIT-ACK中会包含cookie（标识这个连接的唯一上下文）；\n客户端使用这个cookie来进行响应。服务器收到这个响应后，才为这个连接分配资源；为了解决4次握手机制带来的时延，SCTP协议还允许在COOKIE-ECHO和COOKIE-ACK报文中传输数据包\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1627480917379-b7cb7c2b-b1cb-4a80-8573-ebe1d246c7c7.png#clientId=u48df284e-bf72-4&from=paste&id=u3a4682d7&margin=%5Bobject%20Object%5D&originHeight=258&originWidth=546&originalType=url&ratio=1&status=done&style=none&taskId=u554b496a-477c-49ba-bcc3-a16bad0a456)\n消息分帧\nTCP协议是按照字节流的方式进行数据传输的，并不存在消息边界，比如说音频视频都可以通过流的方式进行传递；UDP使用的是消息分帧，发端多大的数据包，收端收到的数据包也是这么大；\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1627480915216-fecb3fa7-5a65-419b-9101-aff14c310912.png#clientId=u48df284e-bf72-4&from=paste&id=u3c6a317d&margin=%5Bobject%20Object%5D&originHeight=202&originWidth=426&originalType=url&ratio=1&status=done&style=none&taskId=u68997ce0-2001-421a-9e05-de4aaad582a)\n可配置的无序发送\nTCP能确保数据按照次序发送；UDP无法保证消息有序；SCTP中也可以配置成接受无序的消息；\n这样的通信方式对于面向消息的传输非常有用，因为每个消息都是各自独立的，次序并不重要。\n平滑关闭\nTCP和SCTP都是基于连接的协议，完成传输后都需要有一个拆除连接的过程。TCP中连接的删除是半关闭的，服务的某一端可以关闭自己这端的socket，但是可以继续接受数据。SCTP协议设计的时候考虑这种半关闭的状态实际上很少使用，所以简化了关闭的过程，一旦某一端发起了连接拆除，对等的两端都关闭。\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1627480914813-f11dbcb5-74ba-46f1-a04d-c7e5538f7a5d.png#clientId=u48df284e-bf72-4&from=paste&id=u04833e5f&margin=%5Bobject%20Object%5D&originHeight=258&originWidth=546&originalType=url&ratio=1&status=done&style=none&taskId=u43fedf9d-ba51-4d9a-992d-96bed9ef960)\n\n\n版权声明：本文为博主原创文章，遵循[CC 4.0 BY-SA](https://creativecommons.org/licenses/by-sa/4.0/)版权协议，转载请附上原文出处链接和本声明。\n本文链接：[https://blog.csdn.net/qq_34709713/article/details/106511096](https://blog.csdn.net/qq_34709713/article/details/106511096)\n","slug":"network/protocol/SCTP概要","published":1,"date":"2021-07-31T11:10:47.927Z","updated":"2021-07-31T11:10:47.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyj2003ju6uke087fnuf","content":"<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h2><p>SCTP(Stream Control Transmission Protocol),流控制传输协议,和UDP，TCP类似<br>TCP是一种面向连接的协议，提供可靠传输，确保数据有序发送；<br>UDP是一种面向消息的协议，不能确保数据有序发送<br>SCTP是后来引入的一种新的协议，提供了和TCP一样的可靠、有序的数据传输功能，同时却能和UDP一样面对消息的方式来进行操作，保护消息边界，有下面一些特性</p>\n<h2 id=\"2-SCTP特性\"><a href=\"#2-SCTP特性\" class=\"headerlink\" title=\"2.SCTP特性\"></a>2.SCTP特性</h2><ul>\n<li>多宿主（Multi-Homing）</li>\n<li>多流（Multi-streaming）</li>\n<li>初始化保护（Initiation protection）</li>\n<li>消息分帧（Message framing）</li>\n<li>可配置的无序发送（Configurable unordered delivery）</li>\n<li>平滑关闭（Graceful shutdown）</li>\n</ul>\n<p>​</p>\n<h3 id=\"2-1-多宿主\"><a href=\"#2-1-多宿主\" class=\"headerlink\" title=\"2.1 多宿主\"></a>2.1 多宿主</h3><p>SCTP里面引入了联合（Association）的概念TCP连接是在两个主机的单个接口之间建立的SCTP可以把多条路径合并到一个联合中，数据可以在任意一个连接路径上进行传输<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627480915523-b1986537-7174-48d4-a148-fba170b4d657.png#clientId=u48df284e-bf72-4&from=paste&id=u8942af97&margin=%5Bobject%20Object%5D&originHeight=325&originWidth=485&originalType=url&ratio=1&status=done&style=none&taskId=uafde6a16-0d86-4649-9d84-0dcd105a004\"></p>\n<h3 id=\"2-2-多流\"><a href=\"#2-2-多流\" class=\"headerlink\" title=\"2.2 多流\"></a>2.2 多流</h3><pre><code>   SCTP可以在一个联合中支持多流机制，每个流（stream）都是独立的。每个流都有各自的编号，编码在SCTP报文中阻塞的流不会影响同一联合中的其他流，可以并行进行传输\n</code></pre>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627480914764-6dbae28f-4e8d-4bf3-9bf9-a53f4d86d378.png#clientId=u48df284e-bf72-4&from=paste&id=u08bbe321&margin=%5Bobject%20Object%5D&originHeight=164&originWidth=463&originalType=url&ratio=1&status=done&style=none&taskId=u612f73a4-99ec-4c4d-85c8-ff80dcdc695\"></p>\n<h3 id=\"2-3-初始化保护\"><a href=\"#2-3-初始化保护\" class=\"headerlink\" title=\"2.3 初始化保护\"></a>2.3 初始化保护</h3><pre><code>  TCP中的三次握手机制会被利用来进行DoS（Denial of Service）攻击，通过发送大量的SYN报文最终耗尽服务器的资源SCTP通过引入4次握手机制来避免这种场景：服务器的INIT-ACK中会包含cookie（标识这个连接的唯一上下文）；\n</code></pre>\n<p>客户端使用这个cookie来进行响应。服务器收到这个响应后，才为这个连接分配资源；为了解决4次握手机制带来的时延，SCTP协议还允许在COOKIE-ECHO和COOKIE-ACK报文中传输数据包<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627480917379-b7cb7c2b-b1cb-4a80-8573-ebe1d246c7c7.png#clientId=u48df284e-bf72-4&from=paste&id=u3a4682d7&margin=%5Bobject%20Object%5D&originHeight=258&originWidth=546&originalType=url&ratio=1&status=done&style=none&taskId=u554b496a-477c-49ba-bcc3-a16bad0a456\"><br>消息分帧<br>TCP协议是按照字节流的方式进行数据传输的，并不存在消息边界，比如说音频视频都可以通过流的方式进行传递；UDP使用的是消息分帧，发端多大的数据包，收端收到的数据包也是这么大；<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627480915216-fecb3fa7-5a65-419b-9101-aff14c310912.png#clientId=u48df284e-bf72-4&from=paste&id=u3c6a317d&margin=%5Bobject%20Object%5D&originHeight=202&originWidth=426&originalType=url&ratio=1&status=done&style=none&taskId=u68997ce0-2001-421a-9e05-de4aaad582a\"><br>可配置的无序发送<br>TCP能确保数据按照次序发送；UDP无法保证消息有序；SCTP中也可以配置成接受无序的消息；<br>这样的通信方式对于面向消息的传输非常有用，因为每个消息都是各自独立的，次序并不重要。<br>平滑关闭<br>TCP和SCTP都是基于连接的协议，完成传输后都需要有一个拆除连接的过程。TCP中连接的删除是半关闭的，服务的某一端可以关闭自己这端的socket，但是可以继续接受数据。SCTP协议设计的时候考虑这种半关闭的状态实际上很少使用，所以简化了关闭的过程，一旦某一端发起了连接拆除，对等的两端都关闭。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627480914813-f11dbcb5-74ba-46f1-a04d-c7e5538f7a5d.png#clientId=u48df284e-bf72-4&from=paste&id=u04833e5f&margin=%5Bobject%20Object%5D&originHeight=258&originWidth=546&originalType=url&ratio=1&status=done&style=none&taskId=u43fedf9d-ba51-4d9a-992d-96bed9ef960\"></p>\n<p>版权声明：本文为博主原创文章，遵循<a href=\"https://creativecommons.org/licenses/by-sa/4.0/\">CC 4.0 BY-SA</a>版权协议，转载请附上原文出处链接和本声明。<br>本文链接：<a href=\"https://blog.csdn.net/qq_34709713/article/details/106511096\">https://blog.csdn.net/qq_34709713/article/details/106511096</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h2><p>SCTP(Stream Control Transmission Protocol),流控制传输协议,和UDP，TCP类似<br>TCP是一种面向连接的协议，提供可靠传输，确保数据有序发送；<br>UDP是一种面向消息的协议，不能确保数据有序发送<br>SCTP是后来引入的一种新的协议，提供了和TCP一样的可靠、有序的数据传输功能，同时却能和UDP一样面对消息的方式来进行操作，保护消息边界，有下面一些特性</p>\n<h2 id=\"2-SCTP特性\"><a href=\"#2-SCTP特性\" class=\"headerlink\" title=\"2.SCTP特性\"></a>2.SCTP特性</h2><ul>\n<li>多宿主（Multi-Homing）</li>\n<li>多流（Multi-streaming）</li>\n<li>初始化保护（Initiation protection）</li>\n<li>消息分帧（Message framing）</li>\n<li>可配置的无序发送（Configurable unordered delivery）</li>\n<li>平滑关闭（Graceful shutdown）</li>\n</ul>\n<p>​</p>\n<h3 id=\"2-1-多宿主\"><a href=\"#2-1-多宿主\" class=\"headerlink\" title=\"2.1 多宿主\"></a>2.1 多宿主</h3><p>SCTP里面引入了联合（Association）的概念TCP连接是在两个主机的单个接口之间建立的SCTP可以把多条路径合并到一个联合中，数据可以在任意一个连接路径上进行传输<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627480915523-b1986537-7174-48d4-a148-fba170b4d657.png#clientId=u48df284e-bf72-4&from=paste&id=u8942af97&margin=%5Bobject%20Object%5D&originHeight=325&originWidth=485&originalType=url&ratio=1&status=done&style=none&taskId=uafde6a16-0d86-4649-9d84-0dcd105a004\"></p>\n<h3 id=\"2-2-多流\"><a href=\"#2-2-多流\" class=\"headerlink\" title=\"2.2 多流\"></a>2.2 多流</h3><pre><code>   SCTP可以在一个联合中支持多流机制，每个流（stream）都是独立的。每个流都有各自的编号，编码在SCTP报文中阻塞的流不会影响同一联合中的其他流，可以并行进行传输\n</code></pre>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627480914764-6dbae28f-4e8d-4bf3-9bf9-a53f4d86d378.png#clientId=u48df284e-bf72-4&from=paste&id=u08bbe321&margin=%5Bobject%20Object%5D&originHeight=164&originWidth=463&originalType=url&ratio=1&status=done&style=none&taskId=u612f73a4-99ec-4c4d-85c8-ff80dcdc695\"></p>\n<h3 id=\"2-3-初始化保护\"><a href=\"#2-3-初始化保护\" class=\"headerlink\" title=\"2.3 初始化保护\"></a>2.3 初始化保护</h3><pre><code>  TCP中的三次握手机制会被利用来进行DoS（Denial of Service）攻击，通过发送大量的SYN报文最终耗尽服务器的资源SCTP通过引入4次握手机制来避免这种场景：服务器的INIT-ACK中会包含cookie（标识这个连接的唯一上下文）；\n</code></pre>\n<p>客户端使用这个cookie来进行响应。服务器收到这个响应后，才为这个连接分配资源；为了解决4次握手机制带来的时延，SCTP协议还允许在COOKIE-ECHO和COOKIE-ACK报文中传输数据包<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627480917379-b7cb7c2b-b1cb-4a80-8573-ebe1d246c7c7.png#clientId=u48df284e-bf72-4&from=paste&id=u3a4682d7&margin=%5Bobject%20Object%5D&originHeight=258&originWidth=546&originalType=url&ratio=1&status=done&style=none&taskId=u554b496a-477c-49ba-bcc3-a16bad0a456\"><br>消息分帧<br>TCP协议是按照字节流的方式进行数据传输的，并不存在消息边界，比如说音频视频都可以通过流的方式进行传递；UDP使用的是消息分帧，发端多大的数据包，收端收到的数据包也是这么大；<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627480915216-fecb3fa7-5a65-419b-9101-aff14c310912.png#clientId=u48df284e-bf72-4&from=paste&id=u3c6a317d&margin=%5Bobject%20Object%5D&originHeight=202&originWidth=426&originalType=url&ratio=1&status=done&style=none&taskId=u68997ce0-2001-421a-9e05-de4aaad582a\"><br>可配置的无序发送<br>TCP能确保数据按照次序发送；UDP无法保证消息有序；SCTP中也可以配置成接受无序的消息；<br>这样的通信方式对于面向消息的传输非常有用，因为每个消息都是各自独立的，次序并不重要。<br>平滑关闭<br>TCP和SCTP都是基于连接的协议，完成传输后都需要有一个拆除连接的过程。TCP中连接的删除是半关闭的，服务的某一端可以关闭自己这端的socket，但是可以继续接受数据。SCTP协议设计的时候考虑这种半关闭的状态实际上很少使用，所以简化了关闭的过程，一旦某一端发起了连接拆除，对等的两端都关闭。<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1627480914813-f11dbcb5-74ba-46f1-a04d-c7e5538f7a5d.png#clientId=u48df284e-bf72-4&from=paste&id=u04833e5f&margin=%5Bobject%20Object%5D&originHeight=258&originWidth=546&originalType=url&ratio=1&status=done&style=none&taskId=u43fedf9d-ba51-4d9a-992d-96bed9ef960\"></p>\n<p>版权声明：本文为博主原创文章，遵循<a href=\"https://creativecommons.org/licenses/by-sa/4.0/\">CC 4.0 BY-SA</a>版权协议，转载请附上原文出处链接和本声明。<br>本文链接：<a href=\"https://blog.csdn.net/qq_34709713/article/details/106511096\">https://blog.csdn.net/qq_34709713/article/details/106511096</a></p>\n"},{"title":"CMPP短信客户端","_content":"\n最近公司有需求采用cmpp发送短信调研了一下相关工具，发现如下测试工具挺好用分享一下。\n​\n\n\n- 工具类\n\n      [https://www.cnblogs.com/tuyile006/p/12051168.html](https://www.cnblogs.com/tuyile006/p/12051168.html)\n\n- 开源源码\n\n     [https://github.com/Lihuanghe/SMSGate](https://github.com/Lihuanghe/SMSGate)\n## 1.介绍\nCMPP2.0/CMPP3.0服务端，带数据库，可以接收第三方CMPP客户端的短信，并存入数据库，结合我的cmpp客户端服务程序，将可以实现接收第三方SP的短信并转发到网关实现发送，并将状态报告、上行短信转发给第三方SP，实现了透明网关的作用。\n程序界面如下：\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1630054353122-2535722c-af7a-4052-b547-14708cb98cd9.png#clientId=u482c2e30-bdf3-4&from=paste&id=u05bf13d4&margin=%5Bobject%20Object%5D&originHeight=622&originWidth=978&originalType=url&ratio=1&status=done&style=none&taskId=u8fd28d46-d868-445f-9849-342dd132027)\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1630054353291-c7e8756a-7c25-479a-b3b1-a31f96c1f33a.png#clientId=u482c2e30-bdf3-4&from=paste&id=ud8081f22&margin=%5Bobject%20Object%5D&originHeight=670&originWidth=703&originalType=url&ratio=1&status=done&style=none&taskId=ubc236dfd-0b99-4c1d-959f-aec5968cd34)\n源码截图如下：\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1630054353170-58a66bb5-05b3-4683-8c66-60e69c884929.png#clientId=u482c2e30-bdf3-4&from=paste&id=u29b16441&margin=%5Bobject%20Object%5D&originHeight=772&originWidth=1315&originalType=url&ratio=1&status=done&style=none&taskId=uff5e83d6-7a43-4c9a-b38c-804d7cf592a)\n如界面所示，可以直接给下游SP发MO短信。本程序已经在多个项目中使用，支持长短信，可以实现多个客户端并发连接。\n提供试用版[DEMO下载](https://files.cnblogs.com/files/tuyile006/CMPP2.0Server.rar)    注意360会提示木马，请不用理会。\n目前程序已经升级到V5.0版本，性能更加强大稳定。V5.0版演示如下：\n![](https://cdn.nlark.com/yuque/0/2021/gif/804884/1630054352691-638347f8-e28d-4e27-9df9-03b52619a8e1.gif#clientId=u482c2e30-bdf3-4&from=paste&id=udddf4c32&margin=%5Bobject%20Object%5D&originHeight=751&originWidth=1358&originalType=url&ratio=1&status=done&style=none&taskId=ue546fc3d-e993-49cc-ac38-6b90c2a22cb)\n## 2.下载\n\n\n下载 ：   [客户端V5.0版Demo](https://files.cnblogs.com/files/tuyile006/SMSClient.UI.zip)     [服务端V5.0版Demo](https://files.cnblogs.com/files/tuyile006/SMSServer.UI.zip)\n相关源码是作者的劳动成果，如有需要，请联系作者购买。\n## ​\n\n## 3.参考\n[https://www.cnblogs.com/tuyile006/p/12051168.html](https://www.cnblogs.com/tuyile006/p/12051168.html)\n​\n\n","source":"_posts/network/sms/CMPP短信.md","raw":"---\ntitle: CMPP短信客户端\n\ncategories:\n- 短信\n\ntag:\n- cmpp\n---\n\n最近公司有需求采用cmpp发送短信调研了一下相关工具，发现如下测试工具挺好用分享一下。\n​\n\n\n- 工具类\n\n      [https://www.cnblogs.com/tuyile006/p/12051168.html](https://www.cnblogs.com/tuyile006/p/12051168.html)\n\n- 开源源码\n\n     [https://github.com/Lihuanghe/SMSGate](https://github.com/Lihuanghe/SMSGate)\n## 1.介绍\nCMPP2.0/CMPP3.0服务端，带数据库，可以接收第三方CMPP客户端的短信，并存入数据库，结合我的cmpp客户端服务程序，将可以实现接收第三方SP的短信并转发到网关实现发送，并将状态报告、上行短信转发给第三方SP，实现了透明网关的作用。\n程序界面如下：\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1630054353122-2535722c-af7a-4052-b547-14708cb98cd9.png#clientId=u482c2e30-bdf3-4&from=paste&id=u05bf13d4&margin=%5Bobject%20Object%5D&originHeight=622&originWidth=978&originalType=url&ratio=1&status=done&style=none&taskId=u8fd28d46-d868-445f-9849-342dd132027)\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1630054353291-c7e8756a-7c25-479a-b3b1-a31f96c1f33a.png#clientId=u482c2e30-bdf3-4&from=paste&id=ud8081f22&margin=%5Bobject%20Object%5D&originHeight=670&originWidth=703&originalType=url&ratio=1&status=done&style=none&taskId=ubc236dfd-0b99-4c1d-959f-aec5968cd34)\n源码截图如下：\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1630054353170-58a66bb5-05b3-4683-8c66-60e69c884929.png#clientId=u482c2e30-bdf3-4&from=paste&id=u29b16441&margin=%5Bobject%20Object%5D&originHeight=772&originWidth=1315&originalType=url&ratio=1&status=done&style=none&taskId=uff5e83d6-7a43-4c9a-b38c-804d7cf592a)\n如界面所示，可以直接给下游SP发MO短信。本程序已经在多个项目中使用，支持长短信，可以实现多个客户端并发连接。\n提供试用版[DEMO下载](https://files.cnblogs.com/files/tuyile006/CMPP2.0Server.rar)    注意360会提示木马，请不用理会。\n目前程序已经升级到V5.0版本，性能更加强大稳定。V5.0版演示如下：\n![](https://cdn.nlark.com/yuque/0/2021/gif/804884/1630054352691-638347f8-e28d-4e27-9df9-03b52619a8e1.gif#clientId=u482c2e30-bdf3-4&from=paste&id=udddf4c32&margin=%5Bobject%20Object%5D&originHeight=751&originWidth=1358&originalType=url&ratio=1&status=done&style=none&taskId=ue546fc3d-e993-49cc-ac38-6b90c2a22cb)\n## 2.下载\n\n\n下载 ：   [客户端V5.0版Demo](https://files.cnblogs.com/files/tuyile006/SMSClient.UI.zip)     [服务端V5.0版Demo](https://files.cnblogs.com/files/tuyile006/SMSServer.UI.zip)\n相关源码是作者的劳动成果，如有需要，请联系作者购买。\n## ​\n\n## 3.参考\n[https://www.cnblogs.com/tuyile006/p/12051168.html](https://www.cnblogs.com/tuyile006/p/12051168.html)\n​\n\n","slug":"network/sms/CMPP短信","published":1,"date":"2021-09-06T14:29:47.111Z","updated":"2021-09-06T14:29:47.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyj3003lu6uk8cwmgvx4","content":"<p>最近公司有需求采用cmpp发送短信调研了一下相关工具，发现如下测试工具挺好用分享一下。<br>​</p>\n<ul>\n<li><p>工具类</p>\n<pre><code>[https://www.cnblogs.com/tuyile006/p/12051168.html](https://www.cnblogs.com/tuyile006/p/12051168.html)\n</code></pre>\n</li>\n<li><p>开源源码</p>\n<p>   <a href=\"https://github.com/Lihuanghe/SMSGate\">https://github.com/Lihuanghe/SMSGate</a></p>\n<h2 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1.介绍\"></a>1.介绍</h2><p>CMPP2.0/CMPP3.0服务端，带数据库，可以接收第三方CMPP客户端的短信，并存入数据库，结合我的cmpp客户端服务程序，将可以实现接收第三方SP的短信并转发到网关实现发送，并将状态报告、上行短信转发给第三方SP，实现了透明网关的作用。<br>程序界面如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1630054353122-2535722c-af7a-4052-b547-14708cb98cd9.png#clientId=u482c2e30-bdf3-4&from=paste&id=u05bf13d4&margin=%5Bobject%20Object%5D&originHeight=622&originWidth=978&originalType=url&ratio=1&status=done&style=none&taskId=u8fd28d46-d868-445f-9849-342dd132027\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1630054353291-c7e8756a-7c25-479a-b3b1-a31f96c1f33a.png#clientId=u482c2e30-bdf3-4&from=paste&id=ud8081f22&margin=%5Bobject%20Object%5D&originHeight=670&originWidth=703&originalType=url&ratio=1&status=done&style=none&taskId=ubc236dfd-0b99-4c1d-959f-aec5968cd34\"><br>源码截图如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1630054353170-58a66bb5-05b3-4683-8c66-60e69c884929.png#clientId=u482c2e30-bdf3-4&from=paste&id=u29b16441&margin=%5Bobject%20Object%5D&originHeight=772&originWidth=1315&originalType=url&ratio=1&status=done&style=none&taskId=uff5e83d6-7a43-4c9a-b38c-804d7cf592a\"><br>如界面所示，可以直接给下游SP发MO短信。本程序已经在多个项目中使用，支持长短信，可以实现多个客户端并发连接。<br>提供试用版<a href=\"https://files.cnblogs.com/files/tuyile006/CMPP2.0Server.rar\">DEMO下载</a>    注意360会提示木马，请不用理会。<br>目前程序已经升级到V5.0版本，性能更加强大稳定。V5.0版演示如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/804884/1630054352691-638347f8-e28d-4e27-9df9-03b52619a8e1.gif#clientId=u482c2e30-bdf3-4&from=paste&id=udddf4c32&margin=%5Bobject%20Object%5D&originHeight=751&originWidth=1358&originalType=url&ratio=1&status=done&style=none&taskId=ue546fc3d-e993-49cc-ac38-6b90c2a22cb\"></p>\n<h2 id=\"2-下载\"><a href=\"#2-下载\" class=\"headerlink\" title=\"2.下载\"></a>2.下载</h2></li>\n</ul>\n<p>下载 ：   <a href=\"https://files.cnblogs.com/files/tuyile006/SMSClient.UI.zip\">客户端V5.0版Demo</a>     <a href=\"https://files.cnblogs.com/files/tuyile006/SMSServer.UI.zip\">服务端V5.0版Demo</a><br>相关源码是作者的劳动成果，如有需要，请联系作者购买。</p>\n<h2 id=\"​\"><a href=\"#​\" class=\"headerlink\" title=\"​\"></a>​</h2><h2 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3.参考\"></a>3.参考</h2><p><a href=\"https://www.cnblogs.com/tuyile006/p/12051168.html\">https://www.cnblogs.com/tuyile006/p/12051168.html</a><br>​</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近公司有需求采用cmpp发送短信调研了一下相关工具，发现如下测试工具挺好用分享一下。<br>​</p>\n<ul>\n<li><p>工具类</p>\n<pre><code>[https://www.cnblogs.com/tuyile006/p/12051168.html](https://www.cnblogs.com/tuyile006/p/12051168.html)\n</code></pre>\n</li>\n<li><p>开源源码</p>\n<p>   <a href=\"https://github.com/Lihuanghe/SMSGate\">https://github.com/Lihuanghe/SMSGate</a></p>\n<h2 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1.介绍\"></a>1.介绍</h2><p>CMPP2.0/CMPP3.0服务端，带数据库，可以接收第三方CMPP客户端的短信，并存入数据库，结合我的cmpp客户端服务程序，将可以实现接收第三方SP的短信并转发到网关实现发送，并将状态报告、上行短信转发给第三方SP，实现了透明网关的作用。<br>程序界面如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1630054353122-2535722c-af7a-4052-b547-14708cb98cd9.png#clientId=u482c2e30-bdf3-4&from=paste&id=u05bf13d4&margin=%5Bobject%20Object%5D&originHeight=622&originWidth=978&originalType=url&ratio=1&status=done&style=none&taskId=u8fd28d46-d868-445f-9849-342dd132027\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1630054353291-c7e8756a-7c25-479a-b3b1-a31f96c1f33a.png#clientId=u482c2e30-bdf3-4&from=paste&id=ud8081f22&margin=%5Bobject%20Object%5D&originHeight=670&originWidth=703&originalType=url&ratio=1&status=done&style=none&taskId=ubc236dfd-0b99-4c1d-959f-aec5968cd34\"><br>源码截图如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1630054353170-58a66bb5-05b3-4683-8c66-60e69c884929.png#clientId=u482c2e30-bdf3-4&from=paste&id=u29b16441&margin=%5Bobject%20Object%5D&originHeight=772&originWidth=1315&originalType=url&ratio=1&status=done&style=none&taskId=uff5e83d6-7a43-4c9a-b38c-804d7cf592a\"><br>如界面所示，可以直接给下游SP发MO短信。本程序已经在多个项目中使用，支持长短信，可以实现多个客户端并发连接。<br>提供试用版<a href=\"https://files.cnblogs.com/files/tuyile006/CMPP2.0Server.rar\">DEMO下载</a>    注意360会提示木马，请不用理会。<br>目前程序已经升级到V5.0版本，性能更加强大稳定。V5.0版演示如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/804884/1630054352691-638347f8-e28d-4e27-9df9-03b52619a8e1.gif#clientId=u482c2e30-bdf3-4&from=paste&id=udddf4c32&margin=%5Bobject%20Object%5D&originHeight=751&originWidth=1358&originalType=url&ratio=1&status=done&style=none&taskId=ue546fc3d-e993-49cc-ac38-6b90c2a22cb\"></p>\n<h2 id=\"2-下载\"><a href=\"#2-下载\" class=\"headerlink\" title=\"2.下载\"></a>2.下载</h2></li>\n</ul>\n<p>下载 ：   <a href=\"https://files.cnblogs.com/files/tuyile006/SMSClient.UI.zip\">客户端V5.0版Demo</a>     <a href=\"https://files.cnblogs.com/files/tuyile006/SMSServer.UI.zip\">服务端V5.0版Demo</a><br>相关源码是作者的劳动成果，如有需要，请联系作者购买。</p>\n<h2 id=\"​\"><a href=\"#​\" class=\"headerlink\" title=\"​\"></a>​</h2><h2 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3.参考\"></a>3.参考</h2><p><a href=\"https://www.cnblogs.com/tuyile006/p/12051168.html\">https://www.cnblogs.com/tuyile006/p/12051168.html</a><br>​</p>\n"},{"title":"深入理解单例模式:静态内部类单例","_content":"\n\n\n# 深入理解单例模式：静态内部类单例原理\n\n本文主要介绍 java 的单例模式，以及详细剖析静态内部类之所以能够实现单例的原理。OK，废话不多说，进入正文。\n\n## 1.单例原则\n\n首先我们要先了解下单例的四大原则：\n\n- 1.构造私有。\n- 2.以静态方法或者枚举返回实例。\n- 3.确保实例只有一个，尤其是多线程环境。\n- 4.确保反序列换时不会重新构建对象。\n\n## 2.常用的单例模式：\n\n饿汉模式、懒汉模式、双重锁懒汉模式、静态内部类模式、枚举模式，我们来逐一分析下这些模式的区别。\n\n### 2.1.饿汉模式：\n\n饿汉模式在类被初始化时就已经在内存中创建了对象，以空间换时间，故不存在线程安全问题。\n参考如下：\n\n```\npublic class SingleTon{\n    private static SingleTon INSTANCE = new SingleTon();\n    private SingleTon(){}\n    public static SingleTon getInstance(){\n        return INSTANCE;\n    }\n}\n```\n\n### 2.2.懒汉模式：\n\n懒汉模式在方法被调用后才创建对象，以时间换空间，在多线程环境下存在风险。\n参考如下\n\n```\npublic class SingleTon{\n    private static SingleTon  INSTANCE = null;\n    private SingleTon(){}\n    public static SingleTon getInstance() {\n        if(INSTANCE == null){\n            INSTANCE = new SingleTon();\n        }\n        return INSTANCE；\n    }\n}\n```\n\n### 2.3.双重锁懒汉模式(Double Check Lock)\n\nDCL 模式的优点就是，只有在对象需要被使用时才创建，第一次判断 INSTANCE == null 为了避免非必要加锁，\n当第一次加载时才对实例进行加锁再实例化。这样既可以节约内存空间，又可以保证线程安全。\n但是，由于 jvm 存在乱序执行功能，DCL 也会出现线程不安全的情况。具体分析如下：\n\n```\npublic class SingleTon{\n    private static SingleTon INSTANCE = null;\n    private SingleTon(){}\n    public static SingleTon getInstance(){if(INSTANCE == null){\n        synchronized(SingleTon.class){\n            if(INSTANCE == null){\n                INSTANCE = new SingleTon();\n            }\n        }\n        return INSTANCE;\n    }\n}\n```\n\nINSTANCE = new SingleTon();\n这个步骤，其实在 jvm 里面的执行分为三步：\n\n- 1.在堆内存开辟内存空间。\n- 2.在堆内存中实例化 SingleTon 里面的各个参数。\n- 3.把对象指向堆内存空间。\n\n由于 jvm 存在乱序执行功能，所以可能在 2 还没执行时就先执行了 3，如果此时再被切换到线程 B 上，由于执行了 3，\nINSTANCE 已经非空了，会被直接拿出来用，这样的话，就会出现异常。这个就是著名的 DCL 失效问题。\n\n不过在 JDK1.5 之后，官方也发现了这个问题，故而具体化了 volatile，即在 JDK1.6 及以后，只要定义为\n\n```\nprivate volatile static SingleTon INSTANCE = null;\n```\n\n就可解决 DCL 失效问题。volatile 确保 INSTANCE 每次均在主内存中读取，这样虽然会牺牲一点效率，但也无伤大雅。\n\n### 2.4.静态内部类模式：\n\n静态内部类的优点是：外部类加载时并不需要立即加载内部类，内部类不被加载则不去初始化 INSTANCE，故而不占内存。\n即当 SingleTon 第一次被加载时，并不需要去加载 SingleTonHoler，只有当 getInstance()方法第一次被调用时，\n才会去初始化 INSTANCE,第一次调用 getInstance()方法会导致虚拟机加载 SingleTonHoler 类，\n这种方法不仅能确保线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。\n\n```\npublic class SingleTon{\n    private SingleTon(){}\n\n    private static class SingleTonHoler{\n        private static SingleTon INSTANCE = new SingleTon();\n    }\n\n    public static SingleTon getInstance(){\n        return SingleTonHoler.INSTANCE;\n    }\n}\n```\n\n那么，静态内部类又是如何实现线程安全的呢？首先，我们先了解下类的加载时机。\n类加载时机：JAVA 虚拟机在有且仅有的 5 种场景下会对类进行初始化。\n\n- 1.遇到 new、getstatic、setstatic 或者 invokestatic 这 4 个字节码指令时，对应的 java 代码场景为：\n  new 一个关键字或者一个实例化对象时、读取或设置一个静态字段时(final 修饰、已在编译期把结果放入常量池的除外)、调用一个类的静态方法时。\n- 2.使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没进行初始化，需要先调用其初始化方法进行初始化。\n- 3.当初始化一个类时，如果其父类还未进行初始化，会先触发其父类的初始化。\n- 4.当虚拟机启动时，用户需要指定一个要执行的主类(包含 main()方法的类)，虚拟机会先初始化这个类。\n- 5.当使用 JDK 1.7 等动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果 REF_getStatic、\n  REF_putStatic、REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。\n\n这 5 种情况被称为是类的主动引用，注意，这里《虚拟机规范》中使用的限定词是\"有且仅有\"，\n那么，除此之外的所有引用类都不会对类进行初始化，称为被动引用。静态内部类就属于被动引用的行列。\n\n我们再回头看下 getInstance()方法，调用的是 SingleTonHoler.INSTANCE，取的是 SingleTonHoler 里的 INSTANCE 对象，\n跟上面那个 DCL 方法不同的是，getInstance()方法并没有多次去 new 对象，故不管多少个线程去调用 getInstance()方法，\n取的都是同一个 INSTANCE 对象，而不用去重新创建。当 getInstance()方法被调用时，SingleTonHoler 才在 SingleTon 的运行时常量池里，\n把符号引用替换为直接引用，这时静态对象 INSTANCE 也真正被创建，然后再被 getInstance()方法返回出去，这点同饿汉模式。\n那么 INSTANCE 在创建过程中又是如何保证线程安全的呢？在《深入理解 JAVA 虚拟机》中，有这么一句话:\n\n虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确地加锁、同步，\n如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，\n直到活动线程执行<clinit>()方法完毕。如果在一个类的<clinit>()方法中有耗时很长的操作，\n就可能造成多个进程阻塞(需要注意的是，其他线程虽然会被阻塞，但如果执行<clinit>()方法后，\n其他线程唤醒之后不会再次进入<clinit>()方法。同一个加载器下，一个类型只会初始化一次。)，在实际应用中，这种阻塞往往是很隐蔽的。\n\n故而，可以看出 INSTANCE 在创建过程中是线程安全的，所以说静态内部类形式的单例可保证线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。\n\n那么，是不是可以说静态内部类单例就是最完美的单例模式了呢？其实不然，静态内部类也有着一个致命的缺点，就是传参的问题，\n由于是静态内部类的形式去创建单例的，故外部无法传递参数进去，例如 Context 这种参数，所以，我们创建单例时，可以在静态内部类与 DCL 模式里自己斟酌。\n\n### 2.5.枚举类型单例模式\n\n```\n//枚举单例：\npublic enum SingleTon{\n    INSTANCE;\n    public void method(){\n    //TODO\n    }\n}\n```\n\n枚举在 java 中与普通类一样，都能拥有字段与方法，而且枚举实例创建是线程安全的，在任何情况下，它都是一个单例。我们可直接以\nSingleTon.INSTANCE 的方式调用。\n\n## 参考\n\nhttps://blog.csdn.net/mnb65482/article/details/80458571\n《深入理解 JAVA 虚拟机》\n《Android 源码设计模式解析与实战》\n《java 虚拟机规范》\n","source":"_posts/language/java/design/深入理解单例模式-静态内部类单例原理.md","raw":"---\ntitle: 深入理解单例模式:静态内部类单例\ncategories:\n- java\ntag:\n- design\n---\n\n\n\n# 深入理解单例模式：静态内部类单例原理\n\n本文主要介绍 java 的单例模式，以及详细剖析静态内部类之所以能够实现单例的原理。OK，废话不多说，进入正文。\n\n## 1.单例原则\n\n首先我们要先了解下单例的四大原则：\n\n- 1.构造私有。\n- 2.以静态方法或者枚举返回实例。\n- 3.确保实例只有一个，尤其是多线程环境。\n- 4.确保反序列换时不会重新构建对象。\n\n## 2.常用的单例模式：\n\n饿汉模式、懒汉模式、双重锁懒汉模式、静态内部类模式、枚举模式，我们来逐一分析下这些模式的区别。\n\n### 2.1.饿汉模式：\n\n饿汉模式在类被初始化时就已经在内存中创建了对象，以空间换时间，故不存在线程安全问题。\n参考如下：\n\n```\npublic class SingleTon{\n    private static SingleTon INSTANCE = new SingleTon();\n    private SingleTon(){}\n    public static SingleTon getInstance(){\n        return INSTANCE;\n    }\n}\n```\n\n### 2.2.懒汉模式：\n\n懒汉模式在方法被调用后才创建对象，以时间换空间，在多线程环境下存在风险。\n参考如下\n\n```\npublic class SingleTon{\n    private static SingleTon  INSTANCE = null;\n    private SingleTon(){}\n    public static SingleTon getInstance() {\n        if(INSTANCE == null){\n            INSTANCE = new SingleTon();\n        }\n        return INSTANCE；\n    }\n}\n```\n\n### 2.3.双重锁懒汉模式(Double Check Lock)\n\nDCL 模式的优点就是，只有在对象需要被使用时才创建，第一次判断 INSTANCE == null 为了避免非必要加锁，\n当第一次加载时才对实例进行加锁再实例化。这样既可以节约内存空间，又可以保证线程安全。\n但是，由于 jvm 存在乱序执行功能，DCL 也会出现线程不安全的情况。具体分析如下：\n\n```\npublic class SingleTon{\n    private static SingleTon INSTANCE = null;\n    private SingleTon(){}\n    public static SingleTon getInstance(){if(INSTANCE == null){\n        synchronized(SingleTon.class){\n            if(INSTANCE == null){\n                INSTANCE = new SingleTon();\n            }\n        }\n        return INSTANCE;\n    }\n}\n```\n\nINSTANCE = new SingleTon();\n这个步骤，其实在 jvm 里面的执行分为三步：\n\n- 1.在堆内存开辟内存空间。\n- 2.在堆内存中实例化 SingleTon 里面的各个参数。\n- 3.把对象指向堆内存空间。\n\n由于 jvm 存在乱序执行功能，所以可能在 2 还没执行时就先执行了 3，如果此时再被切换到线程 B 上，由于执行了 3，\nINSTANCE 已经非空了，会被直接拿出来用，这样的话，就会出现异常。这个就是著名的 DCL 失效问题。\n\n不过在 JDK1.5 之后，官方也发现了这个问题，故而具体化了 volatile，即在 JDK1.6 及以后，只要定义为\n\n```\nprivate volatile static SingleTon INSTANCE = null;\n```\n\n就可解决 DCL 失效问题。volatile 确保 INSTANCE 每次均在主内存中读取，这样虽然会牺牲一点效率，但也无伤大雅。\n\n### 2.4.静态内部类模式：\n\n静态内部类的优点是：外部类加载时并不需要立即加载内部类，内部类不被加载则不去初始化 INSTANCE，故而不占内存。\n即当 SingleTon 第一次被加载时，并不需要去加载 SingleTonHoler，只有当 getInstance()方法第一次被调用时，\n才会去初始化 INSTANCE,第一次调用 getInstance()方法会导致虚拟机加载 SingleTonHoler 类，\n这种方法不仅能确保线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。\n\n```\npublic class SingleTon{\n    private SingleTon(){}\n\n    private static class SingleTonHoler{\n        private static SingleTon INSTANCE = new SingleTon();\n    }\n\n    public static SingleTon getInstance(){\n        return SingleTonHoler.INSTANCE;\n    }\n}\n```\n\n那么，静态内部类又是如何实现线程安全的呢？首先，我们先了解下类的加载时机。\n类加载时机：JAVA 虚拟机在有且仅有的 5 种场景下会对类进行初始化。\n\n- 1.遇到 new、getstatic、setstatic 或者 invokestatic 这 4 个字节码指令时，对应的 java 代码场景为：\n  new 一个关键字或者一个实例化对象时、读取或设置一个静态字段时(final 修饰、已在编译期把结果放入常量池的除外)、调用一个类的静态方法时。\n- 2.使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没进行初始化，需要先调用其初始化方法进行初始化。\n- 3.当初始化一个类时，如果其父类还未进行初始化，会先触发其父类的初始化。\n- 4.当虚拟机启动时，用户需要指定一个要执行的主类(包含 main()方法的类)，虚拟机会先初始化这个类。\n- 5.当使用 JDK 1.7 等动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果 REF_getStatic、\n  REF_putStatic、REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。\n\n这 5 种情况被称为是类的主动引用，注意，这里《虚拟机规范》中使用的限定词是\"有且仅有\"，\n那么，除此之外的所有引用类都不会对类进行初始化，称为被动引用。静态内部类就属于被动引用的行列。\n\n我们再回头看下 getInstance()方法，调用的是 SingleTonHoler.INSTANCE，取的是 SingleTonHoler 里的 INSTANCE 对象，\n跟上面那个 DCL 方法不同的是，getInstance()方法并没有多次去 new 对象，故不管多少个线程去调用 getInstance()方法，\n取的都是同一个 INSTANCE 对象，而不用去重新创建。当 getInstance()方法被调用时，SingleTonHoler 才在 SingleTon 的运行时常量池里，\n把符号引用替换为直接引用，这时静态对象 INSTANCE 也真正被创建，然后再被 getInstance()方法返回出去，这点同饿汉模式。\n那么 INSTANCE 在创建过程中又是如何保证线程安全的呢？在《深入理解 JAVA 虚拟机》中，有这么一句话:\n\n虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确地加锁、同步，\n如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，\n直到活动线程执行<clinit>()方法完毕。如果在一个类的<clinit>()方法中有耗时很长的操作，\n就可能造成多个进程阻塞(需要注意的是，其他线程虽然会被阻塞，但如果执行<clinit>()方法后，\n其他线程唤醒之后不会再次进入<clinit>()方法。同一个加载器下，一个类型只会初始化一次。)，在实际应用中，这种阻塞往往是很隐蔽的。\n\n故而，可以看出 INSTANCE 在创建过程中是线程安全的，所以说静态内部类形式的单例可保证线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。\n\n那么，是不是可以说静态内部类单例就是最完美的单例模式了呢？其实不然，静态内部类也有着一个致命的缺点，就是传参的问题，\n由于是静态内部类的形式去创建单例的，故外部无法传递参数进去，例如 Context 这种参数，所以，我们创建单例时，可以在静态内部类与 DCL 模式里自己斟酌。\n\n### 2.5.枚举类型单例模式\n\n```\n//枚举单例：\npublic enum SingleTon{\n    INSTANCE;\n    public void method(){\n    //TODO\n    }\n}\n```\n\n枚举在 java 中与普通类一样，都能拥有字段与方法，而且枚举实例创建是线程安全的，在任何情况下，它都是一个单例。我们可直接以\nSingleTon.INSTANCE 的方式调用。\n\n## 参考\n\nhttps://blog.csdn.net/mnb65482/article/details/80458571\n《深入理解 JAVA 虚拟机》\n《Android 源码设计模式解析与实战》\n《java 虚拟机规范》\n","slug":"language/java/design/深入理解单例模式-静态内部类单例原理","published":1,"date":"2021-09-14T14:56:14.668Z","updated":"2021-09-14T14:56:14.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyj4003pu6uk5mf64ewo","content":"<h1 id=\"深入理解单例模式：静态内部类单例原理\"><a href=\"#深入理解单例模式：静态内部类单例原理\" class=\"headerlink\" title=\"深入理解单例模式：静态内部类单例原理\"></a>深入理解单例模式：静态内部类单例原理</h1><p>本文主要介绍 java 的单例模式，以及详细剖析静态内部类之所以能够实现单例的原理。OK，废话不多说，进入正文。</p>\n<h2 id=\"1-单例原则\"><a href=\"#1-单例原则\" class=\"headerlink\" title=\"1.单例原则\"></a>1.单例原则</h2><p>首先我们要先了解下单例的四大原则：</p>\n<ul>\n<li>1.构造私有。</li>\n<li>2.以静态方法或者枚举返回实例。</li>\n<li>3.确保实例只有一个，尤其是多线程环境。</li>\n<li>4.确保反序列换时不会重新构建对象。</li>\n</ul>\n<h2 id=\"2-常用的单例模式：\"><a href=\"#2-常用的单例模式：\" class=\"headerlink\" title=\"2.常用的单例模式：\"></a>2.常用的单例模式：</h2><p>饿汉模式、懒汉模式、双重锁懒汉模式、静态内部类模式、枚举模式，我们来逐一分析下这些模式的区别。</p>\n<h3 id=\"2-1-饿汉模式：\"><a href=\"#2-1-饿汉模式：\" class=\"headerlink\" title=\"2.1.饿汉模式：\"></a>2.1.饿汉模式：</h3><p>饿汉模式在类被初始化时就已经在内存中创建了对象，以空间换时间，故不存在线程安全问题。<br>参考如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingleTon&#123;</span><br><span class=\"line\">    private static SingleTon INSTANCE = new SingleTon();</span><br><span class=\"line\">    private SingleTon()&#123;&#125;</span><br><span class=\"line\">    public static SingleTon getInstance()&#123;</span><br><span class=\"line\">        return INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-懒汉模式：\"><a href=\"#2-2-懒汉模式：\" class=\"headerlink\" title=\"2.2.懒汉模式：\"></a>2.2.懒汉模式：</h3><p>懒汉模式在方法被调用后才创建对象，以时间换空间，在多线程环境下存在风险。<br>参考如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingleTon&#123;</span><br><span class=\"line\">    private static SingleTon  INSTANCE = null;</span><br><span class=\"line\">    private SingleTon()&#123;&#125;</span><br><span class=\"line\">    public static SingleTon getInstance() &#123;</span><br><span class=\"line\">        if(INSTANCE == null)&#123;</span><br><span class=\"line\">            INSTANCE = new SingleTon();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return INSTANCE；</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-双重锁懒汉模式-Double-Check-Lock\"><a href=\"#2-3-双重锁懒汉模式-Double-Check-Lock\" class=\"headerlink\" title=\"2.3.双重锁懒汉模式(Double Check Lock)\"></a>2.3.双重锁懒汉模式(Double Check Lock)</h3><p>DCL 模式的优点就是，只有在对象需要被使用时才创建，第一次判断 INSTANCE == null 为了避免非必要加锁，<br>当第一次加载时才对实例进行加锁再实例化。这样既可以节约内存空间，又可以保证线程安全。<br>但是，由于 jvm 存在乱序执行功能，DCL 也会出现线程不安全的情况。具体分析如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingleTon&#123;</span><br><span class=\"line\">    private static SingleTon INSTANCE = null;</span><br><span class=\"line\">    private SingleTon()&#123;&#125;</span><br><span class=\"line\">    public static SingleTon getInstance()&#123;if(INSTANCE == null)&#123;</span><br><span class=\"line\">        synchronized(SingleTon.class)&#123;</span><br><span class=\"line\">            if(INSTANCE == null)&#123;</span><br><span class=\"line\">                INSTANCE = new SingleTon();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>INSTANCE = new SingleTon();<br>这个步骤，其实在 jvm 里面的执行分为三步：</p>\n<ul>\n<li>1.在堆内存开辟内存空间。</li>\n<li>2.在堆内存中实例化 SingleTon 里面的各个参数。</li>\n<li>3.把对象指向堆内存空间。</li>\n</ul>\n<p>由于 jvm 存在乱序执行功能，所以可能在 2 还没执行时就先执行了 3，如果此时再被切换到线程 B 上，由于执行了 3，<br>INSTANCE 已经非空了，会被直接拿出来用，这样的话，就会出现异常。这个就是著名的 DCL 失效问题。</p>\n<p>不过在 JDK1.5 之后，官方也发现了这个问题，故而具体化了 volatile，即在 JDK1.6 及以后，只要定义为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private volatile static SingleTon INSTANCE = null;</span><br></pre></td></tr></table></figure>\n\n<p>就可解决 DCL 失效问题。volatile 确保 INSTANCE 每次均在主内存中读取，这样虽然会牺牲一点效率，但也无伤大雅。</p>\n<h3 id=\"2-4-静态内部类模式：\"><a href=\"#2-4-静态内部类模式：\" class=\"headerlink\" title=\"2.4.静态内部类模式：\"></a>2.4.静态内部类模式：</h3><p>静态内部类的优点是：外部类加载时并不需要立即加载内部类，内部类不被加载则不去初始化 INSTANCE，故而不占内存。<br>即当 SingleTon 第一次被加载时，并不需要去加载 SingleTonHoler，只有当 getInstance()方法第一次被调用时，<br>才会去初始化 INSTANCE,第一次调用 getInstance()方法会导致虚拟机加载 SingleTonHoler 类，<br>这种方法不仅能确保线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingleTon&#123;</span><br><span class=\"line\">    private SingleTon()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class SingleTonHoler&#123;</span><br><span class=\"line\">        private static SingleTon INSTANCE = new SingleTon();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static SingleTon getInstance()&#123;</span><br><span class=\"line\">        return SingleTonHoler.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么，静态内部类又是如何实现线程安全的呢？首先，我们先了解下类的加载时机。<br>类加载时机：JAVA 虚拟机在有且仅有的 5 种场景下会对类进行初始化。</p>\n<ul>\n<li>1.遇到 new、getstatic、setstatic 或者 invokestatic 这 4 个字节码指令时，对应的 java 代码场景为：<br>new 一个关键字或者一个实例化对象时、读取或设置一个静态字段时(final 修饰、已在编译期把结果放入常量池的除外)、调用一个类的静态方法时。</li>\n<li>2.使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没进行初始化，需要先调用其初始化方法进行初始化。</li>\n<li>3.当初始化一个类时，如果其父类还未进行初始化，会先触发其父类的初始化。</li>\n<li>4.当虚拟机启动时，用户需要指定一个要执行的主类(包含 main()方法的类)，虚拟机会先初始化这个类。</li>\n<li>5.当使用 JDK 1.7 等动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果 REF_getStatic、<br>REF_putStatic、REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</li>\n</ul>\n<p>这 5 种情况被称为是类的主动引用，注意，这里《虚拟机规范》中使用的限定词是”有且仅有”，<br>那么，除此之外的所有引用类都不会对类进行初始化，称为被动引用。静态内部类就属于被动引用的行列。</p>\n<p>我们再回头看下 getInstance()方法，调用的是 SingleTonHoler.INSTANCE，取的是 SingleTonHoler 里的 INSTANCE 对象，<br>跟上面那个 DCL 方法不同的是，getInstance()方法并没有多次去 new 对象，故不管多少个线程去调用 getInstance()方法，<br>取的都是同一个 INSTANCE 对象，而不用去重新创建。当 getInstance()方法被调用时，SingleTonHoler 才在 SingleTon 的运行时常量池里，<br>把符号引用替换为直接引用，这时静态对象 INSTANCE 也真正被创建，然后再被 getInstance()方法返回出去，这点同饿汉模式。<br>那么 INSTANCE 在创建过程中又是如何保证线程安全的呢？在《深入理解 JAVA 虚拟机》中，有这么一句话:</p>\n<p>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确地加锁、同步，<br>如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，<br>直到活动线程执行<clinit>()方法完毕。如果在一个类的<clinit>()方法中有耗时很长的操作，<br>就可能造成多个进程阻塞(需要注意的是，其他线程虽然会被阻塞，但如果执行<clinit>()方法后，<br>其他线程唤醒之后不会再次进入<clinit>()方法。同一个加载器下，一个类型只会初始化一次。)，在实际应用中，这种阻塞往往是很隐蔽的。</p>\n<p>故而，可以看出 INSTANCE 在创建过程中是线程安全的，所以说静态内部类形式的单例可保证线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。</p>\n<p>那么，是不是可以说静态内部类单例就是最完美的单例模式了呢？其实不然，静态内部类也有着一个致命的缺点，就是传参的问题，<br>由于是静态内部类的形式去创建单例的，故外部无法传递参数进去，例如 Context 这种参数，所以，我们创建单例时，可以在静态内部类与 DCL 模式里自己斟酌。</p>\n<h3 id=\"2-5-枚举类型单例模式\"><a href=\"#2-5-枚举类型单例模式\" class=\"headerlink\" title=\"2.5.枚举类型单例模式\"></a>2.5.枚举类型单例模式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//枚举单例：</span><br><span class=\"line\">public enum SingleTon&#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    public void method()&#123;</span><br><span class=\"line\">    //TODO</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>枚举在 java 中与普通类一样，都能拥有字段与方法，而且枚举实例创建是线程安全的，在任何情况下，它都是一个单例。我们可直接以<br>SingleTon.INSTANCE 的方式调用。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/mnb65482/article/details/80458571\">https://blog.csdn.net/mnb65482/article/details/80458571</a><br>《深入理解 JAVA 虚拟机》<br>《Android 源码设计模式解析与实战》<br>《java 虚拟机规范》</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"深入理解单例模式：静态内部类单例原理\"><a href=\"#深入理解单例模式：静态内部类单例原理\" class=\"headerlink\" title=\"深入理解单例模式：静态内部类单例原理\"></a>深入理解单例模式：静态内部类单例原理</h1><p>本文主要介绍 java 的单例模式，以及详细剖析静态内部类之所以能够实现单例的原理。OK，废话不多说，进入正文。</p>\n<h2 id=\"1-单例原则\"><a href=\"#1-单例原则\" class=\"headerlink\" title=\"1.单例原则\"></a>1.单例原则</h2><p>首先我们要先了解下单例的四大原则：</p>\n<ul>\n<li>1.构造私有。</li>\n<li>2.以静态方法或者枚举返回实例。</li>\n<li>3.确保实例只有一个，尤其是多线程环境。</li>\n<li>4.确保反序列换时不会重新构建对象。</li>\n</ul>\n<h2 id=\"2-常用的单例模式：\"><a href=\"#2-常用的单例模式：\" class=\"headerlink\" title=\"2.常用的单例模式：\"></a>2.常用的单例模式：</h2><p>饿汉模式、懒汉模式、双重锁懒汉模式、静态内部类模式、枚举模式，我们来逐一分析下这些模式的区别。</p>\n<h3 id=\"2-1-饿汉模式：\"><a href=\"#2-1-饿汉模式：\" class=\"headerlink\" title=\"2.1.饿汉模式：\"></a>2.1.饿汉模式：</h3><p>饿汉模式在类被初始化时就已经在内存中创建了对象，以空间换时间，故不存在线程安全问题。<br>参考如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingleTon&#123;</span><br><span class=\"line\">    private static SingleTon INSTANCE = new SingleTon();</span><br><span class=\"line\">    private SingleTon()&#123;&#125;</span><br><span class=\"line\">    public static SingleTon getInstance()&#123;</span><br><span class=\"line\">        return INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-懒汉模式：\"><a href=\"#2-2-懒汉模式：\" class=\"headerlink\" title=\"2.2.懒汉模式：\"></a>2.2.懒汉模式：</h3><p>懒汉模式在方法被调用后才创建对象，以时间换空间，在多线程环境下存在风险。<br>参考如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingleTon&#123;</span><br><span class=\"line\">    private static SingleTon  INSTANCE = null;</span><br><span class=\"line\">    private SingleTon()&#123;&#125;</span><br><span class=\"line\">    public static SingleTon getInstance() &#123;</span><br><span class=\"line\">        if(INSTANCE == null)&#123;</span><br><span class=\"line\">            INSTANCE = new SingleTon();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return INSTANCE；</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-双重锁懒汉模式-Double-Check-Lock\"><a href=\"#2-3-双重锁懒汉模式-Double-Check-Lock\" class=\"headerlink\" title=\"2.3.双重锁懒汉模式(Double Check Lock)\"></a>2.3.双重锁懒汉模式(Double Check Lock)</h3><p>DCL 模式的优点就是，只有在对象需要被使用时才创建，第一次判断 INSTANCE == null 为了避免非必要加锁，<br>当第一次加载时才对实例进行加锁再实例化。这样既可以节约内存空间，又可以保证线程安全。<br>但是，由于 jvm 存在乱序执行功能，DCL 也会出现线程不安全的情况。具体分析如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingleTon&#123;</span><br><span class=\"line\">    private static SingleTon INSTANCE = null;</span><br><span class=\"line\">    private SingleTon()&#123;&#125;</span><br><span class=\"line\">    public static SingleTon getInstance()&#123;if(INSTANCE == null)&#123;</span><br><span class=\"line\">        synchronized(SingleTon.class)&#123;</span><br><span class=\"line\">            if(INSTANCE == null)&#123;</span><br><span class=\"line\">                INSTANCE = new SingleTon();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>INSTANCE = new SingleTon();<br>这个步骤，其实在 jvm 里面的执行分为三步：</p>\n<ul>\n<li>1.在堆内存开辟内存空间。</li>\n<li>2.在堆内存中实例化 SingleTon 里面的各个参数。</li>\n<li>3.把对象指向堆内存空间。</li>\n</ul>\n<p>由于 jvm 存在乱序执行功能，所以可能在 2 还没执行时就先执行了 3，如果此时再被切换到线程 B 上，由于执行了 3，<br>INSTANCE 已经非空了，会被直接拿出来用，这样的话，就会出现异常。这个就是著名的 DCL 失效问题。</p>\n<p>不过在 JDK1.5 之后，官方也发现了这个问题，故而具体化了 volatile，即在 JDK1.6 及以后，只要定义为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private volatile static SingleTon INSTANCE = null;</span><br></pre></td></tr></table></figure>\n\n<p>就可解决 DCL 失效问题。volatile 确保 INSTANCE 每次均在主内存中读取，这样虽然会牺牲一点效率，但也无伤大雅。</p>\n<h3 id=\"2-4-静态内部类模式：\"><a href=\"#2-4-静态内部类模式：\" class=\"headerlink\" title=\"2.4.静态内部类模式：\"></a>2.4.静态内部类模式：</h3><p>静态内部类的优点是：外部类加载时并不需要立即加载内部类，内部类不被加载则不去初始化 INSTANCE，故而不占内存。<br>即当 SingleTon 第一次被加载时，并不需要去加载 SingleTonHoler，只有当 getInstance()方法第一次被调用时，<br>才会去初始化 INSTANCE,第一次调用 getInstance()方法会导致虚拟机加载 SingleTonHoler 类，<br>这种方法不仅能确保线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingleTon&#123;</span><br><span class=\"line\">    private SingleTon()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class SingleTonHoler&#123;</span><br><span class=\"line\">        private static SingleTon INSTANCE = new SingleTon();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static SingleTon getInstance()&#123;</span><br><span class=\"line\">        return SingleTonHoler.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么，静态内部类又是如何实现线程安全的呢？首先，我们先了解下类的加载时机。<br>类加载时机：JAVA 虚拟机在有且仅有的 5 种场景下会对类进行初始化。</p>\n<ul>\n<li>1.遇到 new、getstatic、setstatic 或者 invokestatic 这 4 个字节码指令时，对应的 java 代码场景为：<br>new 一个关键字或者一个实例化对象时、读取或设置一个静态字段时(final 修饰、已在编译期把结果放入常量池的除外)、调用一个类的静态方法时。</li>\n<li>2.使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没进行初始化，需要先调用其初始化方法进行初始化。</li>\n<li>3.当初始化一个类时，如果其父类还未进行初始化，会先触发其父类的初始化。</li>\n<li>4.当虚拟机启动时，用户需要指定一个要执行的主类(包含 main()方法的类)，虚拟机会先初始化这个类。</li>\n<li>5.当使用 JDK 1.7 等动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果 REF_getStatic、<br>REF_putStatic、REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</li>\n</ul>\n<p>这 5 种情况被称为是类的主动引用，注意，这里《虚拟机规范》中使用的限定词是”有且仅有”，<br>那么，除此之外的所有引用类都不会对类进行初始化，称为被动引用。静态内部类就属于被动引用的行列。</p>\n<p>我们再回头看下 getInstance()方法，调用的是 SingleTonHoler.INSTANCE，取的是 SingleTonHoler 里的 INSTANCE 对象，<br>跟上面那个 DCL 方法不同的是，getInstance()方法并没有多次去 new 对象，故不管多少个线程去调用 getInstance()方法，<br>取的都是同一个 INSTANCE 对象，而不用去重新创建。当 getInstance()方法被调用时，SingleTonHoler 才在 SingleTon 的运行时常量池里，<br>把符号引用替换为直接引用，这时静态对象 INSTANCE 也真正被创建，然后再被 getInstance()方法返回出去，这点同饿汉模式。<br>那么 INSTANCE 在创建过程中又是如何保证线程安全的呢？在《深入理解 JAVA 虚拟机》中，有这么一句话:</p>\n<p>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确地加锁、同步，<br>如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，<br>直到活动线程执行<clinit>()方法完毕。如果在一个类的<clinit>()方法中有耗时很长的操作，<br>就可能造成多个进程阻塞(需要注意的是，其他线程虽然会被阻塞，但如果执行<clinit>()方法后，<br>其他线程唤醒之后不会再次进入<clinit>()方法。同一个加载器下，一个类型只会初始化一次。)，在实际应用中，这种阻塞往往是很隐蔽的。</p>\n<p>故而，可以看出 INSTANCE 在创建过程中是线程安全的，所以说静态内部类形式的单例可保证线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。</p>\n<p>那么，是不是可以说静态内部类单例就是最完美的单例模式了呢？其实不然，静态内部类也有着一个致命的缺点，就是传参的问题，<br>由于是静态内部类的形式去创建单例的，故外部无法传递参数进去，例如 Context 这种参数，所以，我们创建单例时，可以在静态内部类与 DCL 模式里自己斟酌。</p>\n<h3 id=\"2-5-枚举类型单例模式\"><a href=\"#2-5-枚举类型单例模式\" class=\"headerlink\" title=\"2.5.枚举类型单例模式\"></a>2.5.枚举类型单例模式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//枚举单例：</span><br><span class=\"line\">public enum SingleTon&#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    public void method()&#123;</span><br><span class=\"line\">    //TODO</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>枚举在 java 中与普通类一样，都能拥有字段与方法，而且枚举实例创建是线程安全的，在任何情况下，它都是一个单例。我们可直接以<br>SingleTon.INSTANCE 的方式调用。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/mnb65482/article/details/80458571\">https://blog.csdn.net/mnb65482/article/details/80458571</a><br>《深入理解 JAVA 虚拟机》<br>《Android 源码设计模式解析与实战》<br>《java 虚拟机规范》</p>\n"},{"title":"AspectJ使用介绍","_content":"\n## 1.AspectJ 使用介绍\n\nAspectJ 作为 AOP 编程的完全解决方案，提供了三种织入时机，分别为\n* compile-time：编译期织入，在编译的时候一步到位，直接编译出包含织入代码的 .class 文件\n* post-compile：编译后织入，增强已经编译出来的类，如我们要增强依赖的 jar 包中的某个类的某个方法\n* load-time：在 JVM 进行类加载的时候进行织入\n\n### 1.1 编译插桩分类\n\n编译插桩技术具体可以分为两类，如下所示：\n* 1）、APT（Annotation Process Tools） ：用于生成 Java 代码。\n* 2）、AOP（Aspect Oriented Programming）：用于操作字节码。\n\n我们分别来详细介绍下它们的作用。\n\n* 1、APT（Annotation Process Tools）\n  总所周知，ButterKnife、Dagger、GreenDao、Protocol Buffers 这些常用的注解生成框架都会在编译过程中生成代码。 \n  而 使用 AndroidAnnotation 结合 APT 技术 来生成代码的时机，是在编译最开始的时候介入的。\n  但是 AOP 是在编译完成后生成 dex 文件之前的时候，直接通过修改 .class 文件的方式，来直接添加或者修改代码逻辑的。\n  使用 APT 技术生成 Java 代码的方式具有如下 两方面 的优势：\n\n  1）、隔离了框架复杂的内部实现，使得开发更加地简单高效。\n  2）、大大减少了手工重复的工作量，降低了开发时出错的机率。\n\n*  2、AOP（Aspect Oriented Programming）\n   而对于操作字节码的方式来说，一般都在 代码监控、代码修改、代码分析 这三个场景有着很广泛的应用。\n   相对于 Java 代码生成的方式，操作字节码的方式有如下 特点：\n\n    1）、应用场景更广。\n    2）、功能更加强大。\n    3）、使用复杂度较高。\n   \n## 2.依赖引入\n以gradle依赖为例\n\n```\nbuildscript {\n  repositories {\n    mavenLocal()\n    maven { url 'https://plugins.gradle.org/m2/' }\n\n  }\n  dependencies {\n    classpath group: 'io.freefair.gradle', name: 'aspectj-plugin', version: '5.3.3.3'\n\n  }\n}\napply plugin: \"io.freefair.aspectj\"\n\n\ndependencies {\n  compile group: 'org.aspectj', name: 'aspectjweaver', version: '1.9.5'\n  compile group: 'org.aspectj', name: 'aspectjrt', version: '1.9.5'\n \n}\n\n\n```\n\n* aspectj底层依赖库\n    * net.bytebuddy:byte-buddy\n\n## 3.代码编写\n\n* 代码地址请参考：https://github.com/wuhaocn/jcode-simple.git\n\n* 注意下面操作类应放在\"src/main/aspectj\"包下面\n\n### 3.1.定义业务类\n* Account.java\n```\npublic class Account {\n\n    public int balance = 20;\n\n    public boolean pay(int amount) {\n        if (balance < amount) {\n            return false;\n        }\n        balance -= amount;\n        return true;\n    }\n}\n```\n### 3.2.定义注解类\n* AccountAspect.aj\n```\npublic aspect AccountAspect {\n\n    pointcut callPay(int amount, Account account):\n            call(boolean com.rcloud.Account.pay(int)) && args(amount) && target(account);\n\n    before(int amount, Account account): callPay(amount, account) {\n        System.out.println(\"[AccountAspect]付款前总金额: \" + account.balance);\n        System.out.println(\"[AccountAspect]需要付款: \" + amount);\n    }\n\n    boolean around(int amount, Account account): callPay(amount, account) {\n        if (account.balance < amount) {\n            System.out.println(\"[AccountAspect]拒绝付款!\");\n            return false;\n        }\n        return proceed(amount, account);\n    }\n\n    after(int amount, Account balance): callPay(amount, balance) {\n        System.out.println(\"[AccountAspect]付款后，剩余：\" + balance.balance);\n    }\n\n}\n```\n### 3.3.使用类\n* AccountDoWork.java\n```\npublic class AccountDoWork {\n    public static void pay() {\n        Account account = new Account();\n        account.pay(1);\n    }\n}\n\n```\n## 4.AspectJ 的优势与局限性\n最常用的字节码处理框架有 AspectJ、ASM 等等，它们的相同之处在于输入输出都是 Class 文件。\n并且，它们都是 在 Java 文件编译成 .class 文件之后，生成 Dalvik 字节码之前执行。\n而 AspectJ 作为 Java 中流行的 AOP（aspect-oriented programming） 编程扩展框架，\n其内部使用的是 BCEL框架 来完成其功能。下面，我们就来了解下 AspectJ 具备哪些优势。\n### 4.1.AspectJ 的优势\n   它的优势有两点：成熟稳定、使用非常简单。\n* 1、成熟稳定\n字节码的处理并不简单，特别是 针对于字节码的格式和各种指令规则，如果处理出错，\n就会导致程序编译或者运行过程中出现问题。而 AspectJ 作为从 2001 年发展至今的框架，\n它已经发展地非常成熟，通常不用考虑插入的字节码发生正确性相关的问题。\n* 2、使用非常简单\nAspectJ 的使用非常简单，并且它的功能非常强大，我们完全不需要理解任何 Java 字节码相关的知识，\n就可以在很多情况下对字节码进行操控。例如，它可以在如下五个位置插入自定义的代码：\n1）、在方法（包括构造方法）被调用的位置。\n2）、在方法体（包括构造方法）的内部。\n3）、在读写变量的位置。\n4）、在静态代码块内部。\n5）、在异常处理的位置的前后。\n此外，它也可以 直接将原位置的代码替换为自定义的代码。\n\n### 4.2.AspectJ 的缺陷\n而 AspectJ 的缺点可以归结为如下 三点：\n* 1、切入点固定\nAspectJ 只能在一些固定的切入点来进行操作，如果想要进行更细致的操作则很难实现，它\n无法针对一些特定规则的字节码序列做操作。\n* 2、正则表达式的局限性\nAspectJ 的匹配规则采用了类似正则表达式的规则，比如 匹配 Activity 生命周期的 onXXX 方法，如果有自定义的其他以 on 开头的方法也会匹配到，这样匹配的正确性就无法满足。\n* 3、性能较低\nAspectJ 在实现时会包装自己一些特定的类，它并不会直接把 Trace 函数直接插入到代码中，而是经过一系列自己的封装。这样不仅生成的字节码比较大，而且对原函数的性能会有不小的影响。如果想对 App 中所有的函数都进行插桩，性能影响肯定会比较大。如果你只插桩一小部分函数，那么 AspectJ 带来的性能损耗几乎可以忽略不计。\n## 5.AspectJ 核心语法简介\nAspectJ 其实就是一种 AOP 框架，AOP 是实现程序功能统一维护的一种技术。\n利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合性降低，\n提高程序的可重用性，同时大大提高了开发效率。因此 AOP 的优势可总结为如下 两点：\n\n1）、无侵入性。\n2）、修改方便。\n\n此外，AOP 不同于 OOP 将问题划分到单个模块之中，它把 涉及到众多模块的同一类问题进行了统一处理。\n比如我们可以设计两个切面，一个是用于处理 App 中所有模块的日志输出功能，\n另外一个则是用于处理 App 中一些特殊函数调用的权限检查。\n下面👇，我们就来看看要掌握 AspectJ 的使用，我们需要了解的一些 核心概念。\n* 1、横切关注点\n对哪些方法进行拦截，拦截后怎么处理。\n* 2、切面（Aspect）\n类是对物体特征的抽象，切面就是对横切关注点的抽象。\n* 3、连接点（JoinPoint）\nJPoint 是一个程序的关键执行点，也是我们关注的重点。\n  它就是指被拦截到的点（如方法、字段、构造器等等）。\n* 4、切入点（PointCut）\n对 JoinPoint 进行拦截的定义。\nPointCut 的目的就是提供一种方法使得开发者能够选择自己感兴趣的 JoinPoint。\n* 5、通知（Advice）\n切入点仅用于捕捉连接点集合，但是，除了捕捉连接点集合以外什么事情都没有做。 \n事实上实现横切行为我们要使用通知。\n它 一般指拦截到 JoinPoint 后要执行的代码，分为 前置、后置、环绕 三种类型。\n这里，我们需要 注意 Advice Precedence（优先权） 的情况，\n比如我们对同一个切面方法同时使用了 @Before 和 @Around 时就会报错，\n此时会提示需要设置 Advice 的优先级。\nAspectJ 作为一种基于 Java 语言实现的一套面向切面程序设计规范。\n它向 Java 中加入了 连接点(Join Point) 这个新概念 ，\n其实它也只是现存的一个 Java 概 念的名称而已。它向 Java 语言中加入了少许新结构，\n譬如 切入点(pointcut)、通知(Advice)、类型间声明(Inter-type declaration) 和 切面(Aspect)。切入点和通知动态地影响程序流程，\n类型间声明则是静态的影响程序的类等级结构，而切面则是对所有这些新结构的封装。\n对于 AsepctJ 中的各个核心概念来说，其 连接点就恰如程序流中适当的一点。\n而切入点收集特定的连接点集合和在这些点中的值。\n一个通知则是当一个连接点到达时执行的代码，这些都是 AspectJ 的动态部分。\n其实连接点就好比是 程序中那一条一条的语句，\n而切入点就是特定一条语句处设置的一个断点，它收集了断点处程序栈的信息，\n而通知就是在这个断点前后想要加入的程序代码。\n此外，AspectJ 中也有许多不同种类的类型间声明，\n这就允许程序员修改程序的静态结构、名称、类的成员以及类之间的关系。 \nAspectJ 中的切面是横切关注点的模块单元。它们的行为与 Java 语言中的类很象，\n但是切面 还封装了切入点、通知以及类型间声明。\n\n\n## 6.小结\nAspectJ 的三种织入方式中，个人觉得前面的两种会比较实用一些，因为第三种需要修改启动脚本，对于大型公司来说会比较不友好，\n需要专门找运维人员配置。 在实际生产中，我们用得最多的还是纯 Spring AOP，通过本文的介绍，相信大家对于 AspectJ 的使用应该也没什么压力了。\n大家如果对于本文介绍的内容有什么不清楚的，请直接在评论区留言，如果对于 Spring + AspectJ 感兴趣的读者，碰到问题也可以在评论区和大家互动讨论。\n\n## 7.参考\n\nhttps://javadoop.com/post/aspectj\nhttps://juejin.cn/post/6844904112396615688\n\n","source":"_posts/language/java/bytecode/aspectj使用介绍.md","raw":"---\ntitle: AspectJ使用介绍\ncategories:\n- java\ntag:\n- AOP\n- 字节码\n---\n\n## 1.AspectJ 使用介绍\n\nAspectJ 作为 AOP 编程的完全解决方案，提供了三种织入时机，分别为\n* compile-time：编译期织入，在编译的时候一步到位，直接编译出包含织入代码的 .class 文件\n* post-compile：编译后织入，增强已经编译出来的类，如我们要增强依赖的 jar 包中的某个类的某个方法\n* load-time：在 JVM 进行类加载的时候进行织入\n\n### 1.1 编译插桩分类\n\n编译插桩技术具体可以分为两类，如下所示：\n* 1）、APT（Annotation Process Tools） ：用于生成 Java 代码。\n* 2）、AOP（Aspect Oriented Programming）：用于操作字节码。\n\n我们分别来详细介绍下它们的作用。\n\n* 1、APT（Annotation Process Tools）\n  总所周知，ButterKnife、Dagger、GreenDao、Protocol Buffers 这些常用的注解生成框架都会在编译过程中生成代码。 \n  而 使用 AndroidAnnotation 结合 APT 技术 来生成代码的时机，是在编译最开始的时候介入的。\n  但是 AOP 是在编译完成后生成 dex 文件之前的时候，直接通过修改 .class 文件的方式，来直接添加或者修改代码逻辑的。\n  使用 APT 技术生成 Java 代码的方式具有如下 两方面 的优势：\n\n  1）、隔离了框架复杂的内部实现，使得开发更加地简单高效。\n  2）、大大减少了手工重复的工作量，降低了开发时出错的机率。\n\n*  2、AOP（Aspect Oriented Programming）\n   而对于操作字节码的方式来说，一般都在 代码监控、代码修改、代码分析 这三个场景有着很广泛的应用。\n   相对于 Java 代码生成的方式，操作字节码的方式有如下 特点：\n\n    1）、应用场景更广。\n    2）、功能更加强大。\n    3）、使用复杂度较高。\n   \n## 2.依赖引入\n以gradle依赖为例\n\n```\nbuildscript {\n  repositories {\n    mavenLocal()\n    maven { url 'https://plugins.gradle.org/m2/' }\n\n  }\n  dependencies {\n    classpath group: 'io.freefair.gradle', name: 'aspectj-plugin', version: '5.3.3.3'\n\n  }\n}\napply plugin: \"io.freefair.aspectj\"\n\n\ndependencies {\n  compile group: 'org.aspectj', name: 'aspectjweaver', version: '1.9.5'\n  compile group: 'org.aspectj', name: 'aspectjrt', version: '1.9.5'\n \n}\n\n\n```\n\n* aspectj底层依赖库\n    * net.bytebuddy:byte-buddy\n\n## 3.代码编写\n\n* 代码地址请参考：https://github.com/wuhaocn/jcode-simple.git\n\n* 注意下面操作类应放在\"src/main/aspectj\"包下面\n\n### 3.1.定义业务类\n* Account.java\n```\npublic class Account {\n\n    public int balance = 20;\n\n    public boolean pay(int amount) {\n        if (balance < amount) {\n            return false;\n        }\n        balance -= amount;\n        return true;\n    }\n}\n```\n### 3.2.定义注解类\n* AccountAspect.aj\n```\npublic aspect AccountAspect {\n\n    pointcut callPay(int amount, Account account):\n            call(boolean com.rcloud.Account.pay(int)) && args(amount) && target(account);\n\n    before(int amount, Account account): callPay(amount, account) {\n        System.out.println(\"[AccountAspect]付款前总金额: \" + account.balance);\n        System.out.println(\"[AccountAspect]需要付款: \" + amount);\n    }\n\n    boolean around(int amount, Account account): callPay(amount, account) {\n        if (account.balance < amount) {\n            System.out.println(\"[AccountAspect]拒绝付款!\");\n            return false;\n        }\n        return proceed(amount, account);\n    }\n\n    after(int amount, Account balance): callPay(amount, balance) {\n        System.out.println(\"[AccountAspect]付款后，剩余：\" + balance.balance);\n    }\n\n}\n```\n### 3.3.使用类\n* AccountDoWork.java\n```\npublic class AccountDoWork {\n    public static void pay() {\n        Account account = new Account();\n        account.pay(1);\n    }\n}\n\n```\n## 4.AspectJ 的优势与局限性\n最常用的字节码处理框架有 AspectJ、ASM 等等，它们的相同之处在于输入输出都是 Class 文件。\n并且，它们都是 在 Java 文件编译成 .class 文件之后，生成 Dalvik 字节码之前执行。\n而 AspectJ 作为 Java 中流行的 AOP（aspect-oriented programming） 编程扩展框架，\n其内部使用的是 BCEL框架 来完成其功能。下面，我们就来了解下 AspectJ 具备哪些优势。\n### 4.1.AspectJ 的优势\n   它的优势有两点：成熟稳定、使用非常简单。\n* 1、成熟稳定\n字节码的处理并不简单，特别是 针对于字节码的格式和各种指令规则，如果处理出错，\n就会导致程序编译或者运行过程中出现问题。而 AspectJ 作为从 2001 年发展至今的框架，\n它已经发展地非常成熟，通常不用考虑插入的字节码发生正确性相关的问题。\n* 2、使用非常简单\nAspectJ 的使用非常简单，并且它的功能非常强大，我们完全不需要理解任何 Java 字节码相关的知识，\n就可以在很多情况下对字节码进行操控。例如，它可以在如下五个位置插入自定义的代码：\n1）、在方法（包括构造方法）被调用的位置。\n2）、在方法体（包括构造方法）的内部。\n3）、在读写变量的位置。\n4）、在静态代码块内部。\n5）、在异常处理的位置的前后。\n此外，它也可以 直接将原位置的代码替换为自定义的代码。\n\n### 4.2.AspectJ 的缺陷\n而 AspectJ 的缺点可以归结为如下 三点：\n* 1、切入点固定\nAspectJ 只能在一些固定的切入点来进行操作，如果想要进行更细致的操作则很难实现，它\n无法针对一些特定规则的字节码序列做操作。\n* 2、正则表达式的局限性\nAspectJ 的匹配规则采用了类似正则表达式的规则，比如 匹配 Activity 生命周期的 onXXX 方法，如果有自定义的其他以 on 开头的方法也会匹配到，这样匹配的正确性就无法满足。\n* 3、性能较低\nAspectJ 在实现时会包装自己一些特定的类，它并不会直接把 Trace 函数直接插入到代码中，而是经过一系列自己的封装。这样不仅生成的字节码比较大，而且对原函数的性能会有不小的影响。如果想对 App 中所有的函数都进行插桩，性能影响肯定会比较大。如果你只插桩一小部分函数，那么 AspectJ 带来的性能损耗几乎可以忽略不计。\n## 5.AspectJ 核心语法简介\nAspectJ 其实就是一种 AOP 框架，AOP 是实现程序功能统一维护的一种技术。\n利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合性降低，\n提高程序的可重用性，同时大大提高了开发效率。因此 AOP 的优势可总结为如下 两点：\n\n1）、无侵入性。\n2）、修改方便。\n\n此外，AOP 不同于 OOP 将问题划分到单个模块之中，它把 涉及到众多模块的同一类问题进行了统一处理。\n比如我们可以设计两个切面，一个是用于处理 App 中所有模块的日志输出功能，\n另外一个则是用于处理 App 中一些特殊函数调用的权限检查。\n下面👇，我们就来看看要掌握 AspectJ 的使用，我们需要了解的一些 核心概念。\n* 1、横切关注点\n对哪些方法进行拦截，拦截后怎么处理。\n* 2、切面（Aspect）\n类是对物体特征的抽象，切面就是对横切关注点的抽象。\n* 3、连接点（JoinPoint）\nJPoint 是一个程序的关键执行点，也是我们关注的重点。\n  它就是指被拦截到的点（如方法、字段、构造器等等）。\n* 4、切入点（PointCut）\n对 JoinPoint 进行拦截的定义。\nPointCut 的目的就是提供一种方法使得开发者能够选择自己感兴趣的 JoinPoint。\n* 5、通知（Advice）\n切入点仅用于捕捉连接点集合，但是，除了捕捉连接点集合以外什么事情都没有做。 \n事实上实现横切行为我们要使用通知。\n它 一般指拦截到 JoinPoint 后要执行的代码，分为 前置、后置、环绕 三种类型。\n这里，我们需要 注意 Advice Precedence（优先权） 的情况，\n比如我们对同一个切面方法同时使用了 @Before 和 @Around 时就会报错，\n此时会提示需要设置 Advice 的优先级。\nAspectJ 作为一种基于 Java 语言实现的一套面向切面程序设计规范。\n它向 Java 中加入了 连接点(Join Point) 这个新概念 ，\n其实它也只是现存的一个 Java 概 念的名称而已。它向 Java 语言中加入了少许新结构，\n譬如 切入点(pointcut)、通知(Advice)、类型间声明(Inter-type declaration) 和 切面(Aspect)。切入点和通知动态地影响程序流程，\n类型间声明则是静态的影响程序的类等级结构，而切面则是对所有这些新结构的封装。\n对于 AsepctJ 中的各个核心概念来说，其 连接点就恰如程序流中适当的一点。\n而切入点收集特定的连接点集合和在这些点中的值。\n一个通知则是当一个连接点到达时执行的代码，这些都是 AspectJ 的动态部分。\n其实连接点就好比是 程序中那一条一条的语句，\n而切入点就是特定一条语句处设置的一个断点，它收集了断点处程序栈的信息，\n而通知就是在这个断点前后想要加入的程序代码。\n此外，AspectJ 中也有许多不同种类的类型间声明，\n这就允许程序员修改程序的静态结构、名称、类的成员以及类之间的关系。 \nAspectJ 中的切面是横切关注点的模块单元。它们的行为与 Java 语言中的类很象，\n但是切面 还封装了切入点、通知以及类型间声明。\n\n\n## 6.小结\nAspectJ 的三种织入方式中，个人觉得前面的两种会比较实用一些，因为第三种需要修改启动脚本，对于大型公司来说会比较不友好，\n需要专门找运维人员配置。 在实际生产中，我们用得最多的还是纯 Spring AOP，通过本文的介绍，相信大家对于 AspectJ 的使用应该也没什么压力了。\n大家如果对于本文介绍的内容有什么不清楚的，请直接在评论区留言，如果对于 Spring + AspectJ 感兴趣的读者，碰到问题也可以在评论区和大家互动讨论。\n\n## 7.参考\n\nhttps://javadoop.com/post/aspectj\nhttps://juejin.cn/post/6844904112396615688\n\n","slug":"language/java/bytecode/aspectj使用介绍","published":1,"date":"2021-09-06T14:29:47.096Z","updated":"2021-09-06T14:29:47.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyj5003tu6ukgx4jh5ga","content":"<h2 id=\"1-AspectJ-使用介绍\"><a href=\"#1-AspectJ-使用介绍\" class=\"headerlink\" title=\"1.AspectJ 使用介绍\"></a>1.AspectJ 使用介绍</h2><p>AspectJ 作为 AOP 编程的完全解决方案，提供了三种织入时机，分别为</p>\n<ul>\n<li>compile-time：编译期织入，在编译的时候一步到位，直接编译出包含织入代码的 .class 文件</li>\n<li>post-compile：编译后织入，增强已经编译出来的类，如我们要增强依赖的 jar 包中的某个类的某个方法</li>\n<li>load-time：在 JVM 进行类加载的时候进行织入</li>\n</ul>\n<h3 id=\"1-1-编译插桩分类\"><a href=\"#1-1-编译插桩分类\" class=\"headerlink\" title=\"1.1 编译插桩分类\"></a>1.1 编译插桩分类</h3><p>编译插桩技术具体可以分为两类，如下所示：</p>\n<ul>\n<li>1）、APT（Annotation Process Tools） ：用于生成 Java 代码。</li>\n<li>2）、AOP（Aspect Oriented Programming）：用于操作字节码。</li>\n</ul>\n<p>我们分别来详细介绍下它们的作用。</p>\n<ul>\n<li><p>1、APT（Annotation Process Tools）<br>总所周知，ButterKnife、Dagger、GreenDao、Protocol Buffers 这些常用的注解生成框架都会在编译过程中生成代码。<br>而 使用 AndroidAnnotation 结合 APT 技术 来生成代码的时机，是在编译最开始的时候介入的。<br>但是 AOP 是在编译完成后生成 dex 文件之前的时候，直接通过修改 .class 文件的方式，来直接添加或者修改代码逻辑的。<br>使用 APT 技术生成 Java 代码的方式具有如下 两方面 的优势：</p>\n<p>1）、隔离了框架复杂的内部实现，使得开发更加地简单高效。<br>2）、大大减少了手工重复的工作量，降低了开发时出错的机率。</p>\n</li>\n<li><p>2、AOP（Aspect Oriented Programming）<br> 而对于操作字节码的方式来说，一般都在 代码监控、代码修改、代码分析 这三个场景有着很广泛的应用。<br> 相对于 Java 代码生成的方式，操作字节码的方式有如下 特点：</p>\n<p>  1）、应用场景更广。<br>  2）、功能更加强大。<br>  3）、使用复杂度较高。</p>\n</li>\n</ul>\n<h2 id=\"2-依赖引入\"><a href=\"#2-依赖引入\" class=\"headerlink\" title=\"2.依赖引入\"></a>2.依赖引入</h2><p>以gradle依赖为例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">  repositories &#123;</span><br><span class=\"line\">    mavenLocal()</span><br><span class=\"line\">    maven &#123; url &#x27;https://plugins.gradle.org/m2/&#x27; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dependencies &#123;</span><br><span class=\"line\">    classpath group: &#x27;io.freefair.gradle&#x27;, name: &#x27;aspectj-plugin&#x27;, version: &#x27;5.3.3.3&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apply plugin: &quot;io.freefair.aspectj&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  compile group: &#x27;org.aspectj&#x27;, name: &#x27;aspectjweaver&#x27;, version: &#x27;1.9.5&#x27;</span><br><span class=\"line\">  compile group: &#x27;org.aspectj&#x27;, name: &#x27;aspectjrt&#x27;, version: &#x27;1.9.5&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>aspectj底层依赖库<ul>\n<li>net.bytebuddy:byte-buddy</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-代码编写\"><a href=\"#3-代码编写\" class=\"headerlink\" title=\"3.代码编写\"></a>3.代码编写</h2><ul>\n<li><p>代码地址请参考：<a href=\"https://github.com/wuhaocn/jcode-simple.git\">https://github.com/wuhaocn/jcode-simple.git</a></p>\n</li>\n<li><p>注意下面操作类应放在”src/main/aspectj”包下面</p>\n</li>\n</ul>\n<h3 id=\"3-1-定义业务类\"><a href=\"#3-1-定义业务类\" class=\"headerlink\" title=\"3.1.定义业务类\"></a>3.1.定义业务类</h3><ul>\n<li>Account.java<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Account &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int balance = 20;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean pay(int amount) &#123;</span><br><span class=\"line\">        if (balance &lt; amount) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        balance -= amount;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-定义注解类\"><a href=\"#3-2-定义注解类\" class=\"headerlink\" title=\"3.2.定义注解类\"></a>3.2.定义注解类</h3></li>\n<li>AccountAspect.aj<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public aspect AccountAspect &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    pointcut callPay(int amount, Account account):</span><br><span class=\"line\">            call(boolean com.rcloud.Account.pay(int)) &amp;&amp; args(amount) &amp;&amp; target(account);</span><br><span class=\"line\"></span><br><span class=\"line\">    before(int amount, Account account): callPay(amount, account) &#123;</span><br><span class=\"line\">        System.out.println(&quot;[AccountAspect]付款前总金额: &quot; + account.balance);</span><br><span class=\"line\">        System.out.println(&quot;[AccountAspect]需要付款: &quot; + amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    boolean around(int amount, Account account): callPay(amount, account) &#123;</span><br><span class=\"line\">        if (account.balance &lt; amount) &#123;</span><br><span class=\"line\">            System.out.println(&quot;[AccountAspect]拒绝付款!&quot;);</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return proceed(amount, account);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    after(int amount, Account balance): callPay(amount, balance) &#123;</span><br><span class=\"line\">        System.out.println(&quot;[AccountAspect]付款后，剩余：&quot; + balance.balance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-使用类\"><a href=\"#3-3-使用类\" class=\"headerlink\" title=\"3.3.使用类\"></a>3.3.使用类</h3></li>\n<li>AccountDoWork.java<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AccountDoWork &#123;</span><br><span class=\"line\">    public static void pay() &#123;</span><br><span class=\"line\">        Account account = new Account();</span><br><span class=\"line\">        account.pay(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-AspectJ-的优势与局限性\"><a href=\"#4-AspectJ-的优势与局限性\" class=\"headerlink\" title=\"4.AspectJ 的优势与局限性\"></a>4.AspectJ 的优势与局限性</h2>最常用的字节码处理框架有 AspectJ、ASM 等等，它们的相同之处在于输入输出都是 Class 文件。<br>并且，它们都是 在 Java 文件编译成 .class 文件之后，生成 Dalvik 字节码之前执行。<br>而 AspectJ 作为 Java 中流行的 AOP（aspect-oriented programming） 编程扩展框架，<br>其内部使用的是 BCEL框架 来完成其功能。下面，我们就来了解下 AspectJ 具备哪些优势。<h3 id=\"4-1-AspectJ-的优势\"><a href=\"#4-1-AspectJ-的优势\" class=\"headerlink\" title=\"4.1.AspectJ 的优势\"></a>4.1.AspectJ 的优势</h3> 它的优势有两点：成熟稳定、使用非常简单。</li>\n<li>1、成熟稳定<br>字节码的处理并不简单，特别是 针对于字节码的格式和各种指令规则，如果处理出错，<br>就会导致程序编译或者运行过程中出现问题。而 AspectJ 作为从 2001 年发展至今的框架，<br>它已经发展地非常成熟，通常不用考虑插入的字节码发生正确性相关的问题。</li>\n<li>2、使用非常简单<br>AspectJ 的使用非常简单，并且它的功能非常强大，我们完全不需要理解任何 Java 字节码相关的知识，<br>就可以在很多情况下对字节码进行操控。例如，它可以在如下五个位置插入自定义的代码：<br>1）、在方法（包括构造方法）被调用的位置。<br>2）、在方法体（包括构造方法）的内部。<br>3）、在读写变量的位置。<br>4）、在静态代码块内部。<br>5）、在异常处理的位置的前后。<br>此外，它也可以 直接将原位置的代码替换为自定义的代码。</li>\n</ul>\n<h3 id=\"4-2-AspectJ-的缺陷\"><a href=\"#4-2-AspectJ-的缺陷\" class=\"headerlink\" title=\"4.2.AspectJ 的缺陷\"></a>4.2.AspectJ 的缺陷</h3><p>而 AspectJ 的缺点可以归结为如下 三点：</p>\n<ul>\n<li>1、切入点固定<br>AspectJ 只能在一些固定的切入点来进行操作，如果想要进行更细致的操作则很难实现，它<br>无法针对一些特定规则的字节码序列做操作。</li>\n<li>2、正则表达式的局限性<br>AspectJ 的匹配规则采用了类似正则表达式的规则，比如 匹配 Activity 生命周期的 onXXX 方法，如果有自定义的其他以 on 开头的方法也会匹配到，这样匹配的正确性就无法满足。</li>\n<li>3、性能较低<br>AspectJ 在实现时会包装自己一些特定的类，它并不会直接把 Trace 函数直接插入到代码中，而是经过一系列自己的封装。这样不仅生成的字节码比较大，而且对原函数的性能会有不小的影响。如果想对 App 中所有的函数都进行插桩，性能影响肯定会比较大。如果你只插桩一小部分函数，那么 AspectJ 带来的性能损耗几乎可以忽略不计。<h2 id=\"5-AspectJ-核心语法简介\"><a href=\"#5-AspectJ-核心语法简介\" class=\"headerlink\" title=\"5.AspectJ 核心语法简介\"></a>5.AspectJ 核心语法简介</h2>AspectJ 其实就是一种 AOP 框架，AOP 是实现程序功能统一维护的一种技术。<br>利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合性降低，<br>提高程序的可重用性，同时大大提高了开发效率。因此 AOP 的优势可总结为如下 两点：</li>\n</ul>\n<p>1）、无侵入性。<br>2）、修改方便。</p>\n<p>此外，AOP 不同于 OOP 将问题划分到单个模块之中，它把 涉及到众多模块的同一类问题进行了统一处理。<br>比如我们可以设计两个切面，一个是用于处理 App 中所有模块的日志输出功能，<br>另外一个则是用于处理 App 中一些特殊函数调用的权限检查。<br>下面👇，我们就来看看要掌握 AspectJ 的使用，我们需要了解的一些 核心概念。</p>\n<ul>\n<li>1、横切关注点<br>对哪些方法进行拦截，拦截后怎么处理。</li>\n<li>2、切面（Aspect）<br>类是对物体特征的抽象，切面就是对横切关注点的抽象。</li>\n<li>3、连接点（JoinPoint）<br>JPoint 是一个程序的关键执行点，也是我们关注的重点。<br>它就是指被拦截到的点（如方法、字段、构造器等等）。</li>\n<li>4、切入点（PointCut）<br>对 JoinPoint 进行拦截的定义。<br>PointCut 的目的就是提供一种方法使得开发者能够选择自己感兴趣的 JoinPoint。</li>\n<li>5、通知（Advice）<br>切入点仅用于捕捉连接点集合，但是，除了捕捉连接点集合以外什么事情都没有做。<br>事实上实现横切行为我们要使用通知。<br>它 一般指拦截到 JoinPoint 后要执行的代码，分为 前置、后置、环绕 三种类型。<br>这里，我们需要 注意 Advice Precedence（优先权） 的情况，<br>比如我们对同一个切面方法同时使用了 @Before 和 @Around 时就会报错，<br>此时会提示需要设置 Advice 的优先级。<br>AspectJ 作为一种基于 Java 语言实现的一套面向切面程序设计规范。<br>它向 Java 中加入了 连接点(Join Point) 这个新概念 ，<br>其实它也只是现存的一个 Java 概 念的名称而已。它向 Java 语言中加入了少许新结构，<br>譬如 切入点(pointcut)、通知(Advice)、类型间声明(Inter-type declaration) 和 切面(Aspect)。切入点和通知动态地影响程序流程，<br>类型间声明则是静态的影响程序的类等级结构，而切面则是对所有这些新结构的封装。<br>对于 AsepctJ 中的各个核心概念来说，其 连接点就恰如程序流中适当的一点。<br>而切入点收集特定的连接点集合和在这些点中的值。<br>一个通知则是当一个连接点到达时执行的代码，这些都是 AspectJ 的动态部分。<br>其实连接点就好比是 程序中那一条一条的语句，<br>而切入点就是特定一条语句处设置的一个断点，它收集了断点处程序栈的信息，<br>而通知就是在这个断点前后想要加入的程序代码。<br>此外，AspectJ 中也有许多不同种类的类型间声明，<br>这就允许程序员修改程序的静态结构、名称、类的成员以及类之间的关系。<br>AspectJ 中的切面是横切关注点的模块单元。它们的行为与 Java 语言中的类很象，<br>但是切面 还封装了切入点、通知以及类型间声明。</li>\n</ul>\n<h2 id=\"6-小结\"><a href=\"#6-小结\" class=\"headerlink\" title=\"6.小结\"></a>6.小结</h2><p>AspectJ 的三种织入方式中，个人觉得前面的两种会比较实用一些，因为第三种需要修改启动脚本，对于大型公司来说会比较不友好，<br>需要专门找运维人员配置。 在实际生产中，我们用得最多的还是纯 Spring AOP，通过本文的介绍，相信大家对于 AspectJ 的使用应该也没什么压力了。<br>大家如果对于本文介绍的内容有什么不清楚的，请直接在评论区留言，如果对于 Spring + AspectJ 感兴趣的读者，碰到问题也可以在评论区和大家互动讨论。</p>\n<h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7.参考\"></a>7.参考</h2><p><a href=\"https://javadoop.com/post/aspectj\">https://javadoop.com/post/aspectj</a><br><a href=\"https://juejin.cn/post/6844904112396615688\">https://juejin.cn/post/6844904112396615688</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-AspectJ-使用介绍\"><a href=\"#1-AspectJ-使用介绍\" class=\"headerlink\" title=\"1.AspectJ 使用介绍\"></a>1.AspectJ 使用介绍</h2><p>AspectJ 作为 AOP 编程的完全解决方案，提供了三种织入时机，分别为</p>\n<ul>\n<li>compile-time：编译期织入，在编译的时候一步到位，直接编译出包含织入代码的 .class 文件</li>\n<li>post-compile：编译后织入，增强已经编译出来的类，如我们要增强依赖的 jar 包中的某个类的某个方法</li>\n<li>load-time：在 JVM 进行类加载的时候进行织入</li>\n</ul>\n<h3 id=\"1-1-编译插桩分类\"><a href=\"#1-1-编译插桩分类\" class=\"headerlink\" title=\"1.1 编译插桩分类\"></a>1.1 编译插桩分类</h3><p>编译插桩技术具体可以分为两类，如下所示：</p>\n<ul>\n<li>1）、APT（Annotation Process Tools） ：用于生成 Java 代码。</li>\n<li>2）、AOP（Aspect Oriented Programming）：用于操作字节码。</li>\n</ul>\n<p>我们分别来详细介绍下它们的作用。</p>\n<ul>\n<li><p>1、APT（Annotation Process Tools）<br>总所周知，ButterKnife、Dagger、GreenDao、Protocol Buffers 这些常用的注解生成框架都会在编译过程中生成代码。<br>而 使用 AndroidAnnotation 结合 APT 技术 来生成代码的时机，是在编译最开始的时候介入的。<br>但是 AOP 是在编译完成后生成 dex 文件之前的时候，直接通过修改 .class 文件的方式，来直接添加或者修改代码逻辑的。<br>使用 APT 技术生成 Java 代码的方式具有如下 两方面 的优势：</p>\n<p>1）、隔离了框架复杂的内部实现，使得开发更加地简单高效。<br>2）、大大减少了手工重复的工作量，降低了开发时出错的机率。</p>\n</li>\n<li><p>2、AOP（Aspect Oriented Programming）<br> 而对于操作字节码的方式来说，一般都在 代码监控、代码修改、代码分析 这三个场景有着很广泛的应用。<br> 相对于 Java 代码生成的方式，操作字节码的方式有如下 特点：</p>\n<p>  1）、应用场景更广。<br>  2）、功能更加强大。<br>  3）、使用复杂度较高。</p>\n</li>\n</ul>\n<h2 id=\"2-依赖引入\"><a href=\"#2-依赖引入\" class=\"headerlink\" title=\"2.依赖引入\"></a>2.依赖引入</h2><p>以gradle依赖为例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">  repositories &#123;</span><br><span class=\"line\">    mavenLocal()</span><br><span class=\"line\">    maven &#123; url &#x27;https://plugins.gradle.org/m2/&#x27; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dependencies &#123;</span><br><span class=\"line\">    classpath group: &#x27;io.freefair.gradle&#x27;, name: &#x27;aspectj-plugin&#x27;, version: &#x27;5.3.3.3&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apply plugin: &quot;io.freefair.aspectj&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  compile group: &#x27;org.aspectj&#x27;, name: &#x27;aspectjweaver&#x27;, version: &#x27;1.9.5&#x27;</span><br><span class=\"line\">  compile group: &#x27;org.aspectj&#x27;, name: &#x27;aspectjrt&#x27;, version: &#x27;1.9.5&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>aspectj底层依赖库<ul>\n<li>net.bytebuddy:byte-buddy</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-代码编写\"><a href=\"#3-代码编写\" class=\"headerlink\" title=\"3.代码编写\"></a>3.代码编写</h2><ul>\n<li><p>代码地址请参考：<a href=\"https://github.com/wuhaocn/jcode-simple.git\">https://github.com/wuhaocn/jcode-simple.git</a></p>\n</li>\n<li><p>注意下面操作类应放在”src/main/aspectj”包下面</p>\n</li>\n</ul>\n<h3 id=\"3-1-定义业务类\"><a href=\"#3-1-定义业务类\" class=\"headerlink\" title=\"3.1.定义业务类\"></a>3.1.定义业务类</h3><ul>\n<li>Account.java<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Account &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int balance = 20;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean pay(int amount) &#123;</span><br><span class=\"line\">        if (balance &lt; amount) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        balance -= amount;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-定义注解类\"><a href=\"#3-2-定义注解类\" class=\"headerlink\" title=\"3.2.定义注解类\"></a>3.2.定义注解类</h3></li>\n<li>AccountAspect.aj<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public aspect AccountAspect &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    pointcut callPay(int amount, Account account):</span><br><span class=\"line\">            call(boolean com.rcloud.Account.pay(int)) &amp;&amp; args(amount) &amp;&amp; target(account);</span><br><span class=\"line\"></span><br><span class=\"line\">    before(int amount, Account account): callPay(amount, account) &#123;</span><br><span class=\"line\">        System.out.println(&quot;[AccountAspect]付款前总金额: &quot; + account.balance);</span><br><span class=\"line\">        System.out.println(&quot;[AccountAspect]需要付款: &quot; + amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    boolean around(int amount, Account account): callPay(amount, account) &#123;</span><br><span class=\"line\">        if (account.balance &lt; amount) &#123;</span><br><span class=\"line\">            System.out.println(&quot;[AccountAspect]拒绝付款!&quot;);</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return proceed(amount, account);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    after(int amount, Account balance): callPay(amount, balance) &#123;</span><br><span class=\"line\">        System.out.println(&quot;[AccountAspect]付款后，剩余：&quot; + balance.balance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-使用类\"><a href=\"#3-3-使用类\" class=\"headerlink\" title=\"3.3.使用类\"></a>3.3.使用类</h3></li>\n<li>AccountDoWork.java<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AccountDoWork &#123;</span><br><span class=\"line\">    public static void pay() &#123;</span><br><span class=\"line\">        Account account = new Account();</span><br><span class=\"line\">        account.pay(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-AspectJ-的优势与局限性\"><a href=\"#4-AspectJ-的优势与局限性\" class=\"headerlink\" title=\"4.AspectJ 的优势与局限性\"></a>4.AspectJ 的优势与局限性</h2>最常用的字节码处理框架有 AspectJ、ASM 等等，它们的相同之处在于输入输出都是 Class 文件。<br>并且，它们都是 在 Java 文件编译成 .class 文件之后，生成 Dalvik 字节码之前执行。<br>而 AspectJ 作为 Java 中流行的 AOP（aspect-oriented programming） 编程扩展框架，<br>其内部使用的是 BCEL框架 来完成其功能。下面，我们就来了解下 AspectJ 具备哪些优势。<h3 id=\"4-1-AspectJ-的优势\"><a href=\"#4-1-AspectJ-的优势\" class=\"headerlink\" title=\"4.1.AspectJ 的优势\"></a>4.1.AspectJ 的优势</h3> 它的优势有两点：成熟稳定、使用非常简单。</li>\n<li>1、成熟稳定<br>字节码的处理并不简单，特别是 针对于字节码的格式和各种指令规则，如果处理出错，<br>就会导致程序编译或者运行过程中出现问题。而 AspectJ 作为从 2001 年发展至今的框架，<br>它已经发展地非常成熟，通常不用考虑插入的字节码发生正确性相关的问题。</li>\n<li>2、使用非常简单<br>AspectJ 的使用非常简单，并且它的功能非常强大，我们完全不需要理解任何 Java 字节码相关的知识，<br>就可以在很多情况下对字节码进行操控。例如，它可以在如下五个位置插入自定义的代码：<br>1）、在方法（包括构造方法）被调用的位置。<br>2）、在方法体（包括构造方法）的内部。<br>3）、在读写变量的位置。<br>4）、在静态代码块内部。<br>5）、在异常处理的位置的前后。<br>此外，它也可以 直接将原位置的代码替换为自定义的代码。</li>\n</ul>\n<h3 id=\"4-2-AspectJ-的缺陷\"><a href=\"#4-2-AspectJ-的缺陷\" class=\"headerlink\" title=\"4.2.AspectJ 的缺陷\"></a>4.2.AspectJ 的缺陷</h3><p>而 AspectJ 的缺点可以归结为如下 三点：</p>\n<ul>\n<li>1、切入点固定<br>AspectJ 只能在一些固定的切入点来进行操作，如果想要进行更细致的操作则很难实现，它<br>无法针对一些特定规则的字节码序列做操作。</li>\n<li>2、正则表达式的局限性<br>AspectJ 的匹配规则采用了类似正则表达式的规则，比如 匹配 Activity 生命周期的 onXXX 方法，如果有自定义的其他以 on 开头的方法也会匹配到，这样匹配的正确性就无法满足。</li>\n<li>3、性能较低<br>AspectJ 在实现时会包装自己一些特定的类，它并不会直接把 Trace 函数直接插入到代码中，而是经过一系列自己的封装。这样不仅生成的字节码比较大，而且对原函数的性能会有不小的影响。如果想对 App 中所有的函数都进行插桩，性能影响肯定会比较大。如果你只插桩一小部分函数，那么 AspectJ 带来的性能损耗几乎可以忽略不计。<h2 id=\"5-AspectJ-核心语法简介\"><a href=\"#5-AspectJ-核心语法简介\" class=\"headerlink\" title=\"5.AspectJ 核心语法简介\"></a>5.AspectJ 核心语法简介</h2>AspectJ 其实就是一种 AOP 框架，AOP 是实现程序功能统一维护的一种技术。<br>利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合性降低，<br>提高程序的可重用性，同时大大提高了开发效率。因此 AOP 的优势可总结为如下 两点：</li>\n</ul>\n<p>1）、无侵入性。<br>2）、修改方便。</p>\n<p>此外，AOP 不同于 OOP 将问题划分到单个模块之中，它把 涉及到众多模块的同一类问题进行了统一处理。<br>比如我们可以设计两个切面，一个是用于处理 App 中所有模块的日志输出功能，<br>另外一个则是用于处理 App 中一些特殊函数调用的权限检查。<br>下面👇，我们就来看看要掌握 AspectJ 的使用，我们需要了解的一些 核心概念。</p>\n<ul>\n<li>1、横切关注点<br>对哪些方法进行拦截，拦截后怎么处理。</li>\n<li>2、切面（Aspect）<br>类是对物体特征的抽象，切面就是对横切关注点的抽象。</li>\n<li>3、连接点（JoinPoint）<br>JPoint 是一个程序的关键执行点，也是我们关注的重点。<br>它就是指被拦截到的点（如方法、字段、构造器等等）。</li>\n<li>4、切入点（PointCut）<br>对 JoinPoint 进行拦截的定义。<br>PointCut 的目的就是提供一种方法使得开发者能够选择自己感兴趣的 JoinPoint。</li>\n<li>5、通知（Advice）<br>切入点仅用于捕捉连接点集合，但是，除了捕捉连接点集合以外什么事情都没有做。<br>事实上实现横切行为我们要使用通知。<br>它 一般指拦截到 JoinPoint 后要执行的代码，分为 前置、后置、环绕 三种类型。<br>这里，我们需要 注意 Advice Precedence（优先权） 的情况，<br>比如我们对同一个切面方法同时使用了 @Before 和 @Around 时就会报错，<br>此时会提示需要设置 Advice 的优先级。<br>AspectJ 作为一种基于 Java 语言实现的一套面向切面程序设计规范。<br>它向 Java 中加入了 连接点(Join Point) 这个新概念 ，<br>其实它也只是现存的一个 Java 概 念的名称而已。它向 Java 语言中加入了少许新结构，<br>譬如 切入点(pointcut)、通知(Advice)、类型间声明(Inter-type declaration) 和 切面(Aspect)。切入点和通知动态地影响程序流程，<br>类型间声明则是静态的影响程序的类等级结构，而切面则是对所有这些新结构的封装。<br>对于 AsepctJ 中的各个核心概念来说，其 连接点就恰如程序流中适当的一点。<br>而切入点收集特定的连接点集合和在这些点中的值。<br>一个通知则是当一个连接点到达时执行的代码，这些都是 AspectJ 的动态部分。<br>其实连接点就好比是 程序中那一条一条的语句，<br>而切入点就是特定一条语句处设置的一个断点，它收集了断点处程序栈的信息，<br>而通知就是在这个断点前后想要加入的程序代码。<br>此外，AspectJ 中也有许多不同种类的类型间声明，<br>这就允许程序员修改程序的静态结构、名称、类的成员以及类之间的关系。<br>AspectJ 中的切面是横切关注点的模块单元。它们的行为与 Java 语言中的类很象，<br>但是切面 还封装了切入点、通知以及类型间声明。</li>\n</ul>\n<h2 id=\"6-小结\"><a href=\"#6-小结\" class=\"headerlink\" title=\"6.小结\"></a>6.小结</h2><p>AspectJ 的三种织入方式中，个人觉得前面的两种会比较实用一些，因为第三种需要修改启动脚本，对于大型公司来说会比较不友好，<br>需要专门找运维人员配置。 在实际生产中，我们用得最多的还是纯 Spring AOP，通过本文的介绍，相信大家对于 AspectJ 的使用应该也没什么压力了。<br>大家如果对于本文介绍的内容有什么不清楚的，请直接在评论区留言，如果对于 Spring + AspectJ 感兴趣的读者，碰到问题也可以在评论区和大家互动讨论。</p>\n<h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7.参考\"></a>7.参考</h2><p><a href=\"https://javadoop.com/post/aspectj\">https://javadoop.com/post/aspectj</a><br><a href=\"https://juejin.cn/post/6844904112396615688\">https://juejin.cn/post/6844904112396615688</a></p>\n"},{"title":"Java动态调试技术原理及实践","_content":"\n\n### Java动态调试技术原理及实践\n\n#### 1. 动态调试要解决的问题\n\n断点调试是我们最常使用的调试手段，它可以获取到方法执行过程中的变量信息，并可以观察到方法的执行路径。\n但断点调试会在断点位置停顿，使得整个应用停止响应。在线上停顿应用是致命的，动态调试技术给了我们创造新的调试模式的想象空间。\n本文将研究 Java 语言中的动态调试技术，首先概括 Java 动态调试所涉及的技术基础，接着介绍我们在 Java 动态调试领域的思考及实践，\n通过结合实际业务场景，设计并实现了一种具备动态性的断点调试工具 Java-debug-tool，显著提高了故障排查效率。\n\n#### 2. Java Agent 技术\n\nJVMTI （JVM Tool Interface）是 Java 虚拟机对外提供的 Native 编程接口，通过 JVMTI，外部进程可以获取到运行时 JVM 的诸多信息，比如线程、GC 等。\nAgent 是一个运行在目标 JVM 的特定程序，它的职责是负责从目标 JVM 中获取数据，然后将数据传递给外部进程。\n加载 Agent 的时机可以是目标 JVM 启动之时，也可以是在目标 JVM 运行时进行加载，而在目标 JVM 运行时进行 Agent 加载具备动态性，\n对于时机未知的 Debug 场景来说非常实用。下面将详细分析 Java Agent 技术的实现细节。\n\n##### 2.1 Agent 的实现模式\n\nJVMTI 是一套 Native 接口，在 Java SE 5 之前，要实现一个 Agent 只能通过编写 Native 代码来实现。\n从 Java SE 5 开始，可以使用 Java 的 Instrumentation 接口（java.lang.instrument）来编写 Agent。\n无论是通过 Native 的方式还是通过 Java Instrumentation 接口的方式来编写 Agent，它们的工作都是借助 JVMTI 来进行完成，\n下面介绍通过 Java Instrumentation 接口编写 Agent 的方法。\n\n###### 2.1.1 通过 Java Instrumentation API\n\n实现 Agent 启动方法\n\nJava Agent 支持目标 JVM 启动时加载，也支持在目标 JVM 运行时加载，这两种不同的加载模式会使用不同的入口函数，\n如果需要在目标 JVM 启动的同时加载 Agent，那么可以选择实现下面的方法：\n\n```\n[1] public static void premain(String agentArgs, Instrumentation inst);\n[2] public static void premain(String agentArgs);\n```\n\nJVM 将首先寻找[1]，如果没有发现[1]，再寻找[2]。如果希望在目标 JVM 运行时加载 Agent，则需要实现下面的方法：\n\n```\n[1] public static void agentmain(String agentArgs, Instrumentation inst);\n[2] public static void agentmain(String agentArgs);\n```\n\n这两组方法的第一个参数 AgentArgs 是随同 “– javaagent”一起传入的程序参数，如果这个字符串代表了多个参数，就需要自己解析这些参数。\ninst 是 Instrumentation 类型的对象，是 JVM 自动传入的，我们可以拿这个参数进行类增强等操作。\n\n指定 Main-Class\nAgent 需要打包成一个 jar 包，在 ManiFest 属性中指定“Premain-Class”或者“Agent-Class”：\nPremain-Class: class\nAgent-Class: class\n挂载到目标 JVM\n将编写的 Agent 打成 jar 包后，就可以挂载到目标 JVM 上去了。如果选择在目标 JVM 启动时加载 Agent，则可以使用 \"-javaagent:<jarpath>[=<option>]\"，\n具体的使用方法可以使用“Java -Help”来查看。如果想要在运行时挂载 Agent 到目标 JVM，就需要做一些额外的开发了。\ncom.sun.tools.attach.VirtualMachine 这个类代表一个 JVM 抽象，可以通过这个类找到目标 JVM，并且将 Agent 挂载到目标 JVM 上。\n下面是使用 com.sun.tools.attach.VirtualMachine 进行动态挂载 Agent 的一般实现：\n\n```\nprivate void attachAgentToTargetJVM() throws Exception {\n    List<VirtualMachineDescriptor> virtualMachineDescriptors = VirtualMachine.list();\n    VirtualMachineDescriptor targetVM = null;\n    for (VirtualMachineDescriptor descriptor : virtualMachineDescriptors) {\n        if (descriptor.id().equals(configure.getPid())) {\n            targetVM = descriptor;\n            break;\n        }\n    }\n    if (targetVM == null) {\n        throw new IllegalArgumentException(\"could not find the target jvm by process id:\" + configure.getPid());\n    }\n    VirtualMachine virtualMachine = null;\n    try {\n        virtualMachine = VirtualMachine.attach(targetVM);\n        virtualMachine.loadAgent(\"{agent}\", \"{params}\");\n    } catch (Exception e) {\n        if (virtualMachine != null) {\n            virtualMachine.detach();\n        }\n    }\n}\n```\n\n首先通过指定的进程 ID 找到目标 JVM，然后通过 Attach 挂载到目标 JVM 上，执行加载 Agent 操作。\nVirtualMachine 的 Attach 方法就是用来将 Agent 挂载到目标 JVM 上去的，而 Detach 则是将 Agent 从目标 JVM 卸载。关\n于 Agent 是如何挂载到目标 JVM 上的具体技术细节，将在下文中进行分析。\n\n##### 2.2 启动时加载 Agent\n\n###### 2.2.1 参数解析\n\n创建 JVM 时，JVM 会进行参数解析，即解析那些用来配置 JVM 启动的参数，比如堆大小、GC 等；本文主要关注解析的参数为-agentlib、 -agentpath、 -javaagent，这几个参数用来指定 Agent，JVM 会根据这几个参数加载 Agent。下面来分析一下 JVM 是如何解析这几个参数的。\n\n```\n  // -agentlib and -agentpath\n  if (match_option(option, \"-agentlib:\", &tail) ||\n          (is_absolute_path = match_option(option, \"-agentpath:\", &tail))) {\n      if(tail != NULL) {\n        const char* pos = strchr(tail, '=');\n        size_t len = (pos == NULL) ? strlen(tail) : pos - tail;\n        char* name = strncpy(NEW_C_HEAP_ARRAY(char, len + 1, mtArguments), tail, len);\n        name[len] = '\\0';\n        char *options = NULL;\n        if(pos != NULL) {\n          options = os::strdup_check_oom(pos + 1, mtArguments);\n        }\n        #if !INCLUDE_JVMTI\n        if (valid_jdwp_agent(name, is_absolute_path)) {\n          jio_fprintf(defaultStream::error_stream(),\n            \"Debugging agents are not supported in this VM\\n\");\n          return JNI_ERR;\n        }\n        #endif // !INCLUDE_JVMTI\n        add_init_agent(name, options, is_absolute_path);\n      }\n    // -javaagent\n    } else if (match_option(option, \"-javaagent:\", &tail)) {\n        #if !INCLUDE_JVMTI\n      jio_fprintf(defaultStream::error_stream(),\n        \"Instrumentation agents are not supported in this VM\\n\");\n      return JNI_ERR;\n        #else\n      if (tail != NULL) {\n        size_t length = strlen(tail) + 1;\n        char *options = NEW_C_HEAP_ARRAY(char, length, mtArguments);\n        jio_snprintf(options, length, \"%s\", tail);\n        add_init_agent(\"instrument\", options, false);\n        // java agents need module java.instrument\n        if (!create_numbered_property(\"jdk.module.addmods\", \"java.instrument\", addmods_count++)) {\n          return JNI_ENOMEM;\n        }\n      }\n        #endif // !INCLUDE_JVMTI\n    }\n```\n\n上面的代码片段截取自 hotspot/src/share/vm/runtime/arguments.cpp 中的 Arguments::parse_each_vm_init_arg(const JavaVMInitArgs* args, bool* patch_mod_javabase, Flag::Flags origin) 函数，该函数用来解析一个具体的 JVM 参数。这段代码的主要功能是解析出需要加载的 Agent 路径，然后调用 add_init_agent 函数进行解析结果的存储。下面先看一下 add_init_agent 函数的具体实现：\n\n```\n  // -agentlib and -agentpath arguments\n  static AgentLibraryList _agentList;\n  static void add_init_agent(const char* name, char* options, bool absolute_path)\n    { _agentList.add(new AgentLibrary(name, options, absolute_path, NULL)); }\n```\n\nAgentLibraryList 是一个简单的链表结构，add_init_agent 函数将解析好的、需要加载的 Agent 添加到这个链表中，等待后续的处理。\n\n这里需要注意，解析-javaagent 参数有一些特别之处，这个参数用来指定一个我们通过 Java Instrumentation API 来编写的 Agent，Java Instrumentation API 底层依赖的是 JVMTI，对-JavaAgent 的处理也说明了这一点，在调用 add_init_agent 函数时第一个参数是“instrument”，关于加载 Agent 这个问题在下一小节进行展开。到此，我们知道在启动 JVM 时指定的 Agent 已经被 JVM 解析完存放在了一个链表结构中。下面来分析一下 JVM 是如何加载这些 Agent 的。\n\n###### 2.2.2 执行加载操作\n\n在创建 JVM 进程的函数中，解析完 JVM 参数之后，下面的这段代码和加载 Agent 相关：\n\n```\n   // Launch -agentlib/-agentpath and converted -Xrun agents\n  if (Arguments::init_agents_at_startup()) {\n    create_vm_init_agents();\n  }\n  static bool init_agents_at_startup() {\n    return !_agentList.is_empty();\n  }\n```\n\n当 JVM 判断出上一小节中解析出来的 Agent 不为空的时候，就要去调用函数 create_vm_init_agents 来加载 Agent，下面来分析一下 create_vm_init_agents 函数是如何加载 Agent 的。\n\n```\nvoid Threads::create_vm_init_agents() {\n  AgentLibrary* agent;\n  for (agent = Arguments::agents(); agent != NULL; agent = agent->next()) {\n    OnLoadEntry_t  on_load_entry = lookup_agent_on_load(agent);\n    if (on_load_entry != NULL) {\n      // Invoke the Agent_OnLoad function\n      jint err = (*on_load_entry)(&main_vm, agent->options(), NULL);\n    }\n  }\n}\n```\n\ncreate_vm_init_agents 这个函数通过遍历 Agent 链表来逐个加载 Agent。通过这段代码可以看出，首先通过 lookup_agent_on_load 来加载 Agent 并且找到 Agent_OnLoad 函数，这个函数是 Agent 的入口函数。如果没找到这个函数，则认为是加载了一个不合法的 Agent，则什么也不做，否则调用这个函数，这样 Agent 的代码就开始执行起来了。对于使用 Java Instrumentation API 来编写 Agent 的方式来说，在解析阶段观察到在 add_init_agent 函数里面传递进去的是一个叫做\"instrument\"的字符串，其实这是一个动态链接库。在 Linux 里面，这个库叫做 libinstrument.so，在 BSD 系统中叫做 libinstrument.dylib，该动态链接库在{JAVA_HOME}/jre/lib/目录下。\n\n###### 2.2.3 Instrument 动态链接库\n\nlibinstrument 用来支持使用 Java Instrumentation API 来编写 Agent，在 libinstrument 中有一个非常重要的类称为：JPLISAgent（Java Programming Language Instrumentation Services Agent），它的作用是初始化所有通过 Java Instrumentation API 编写的 Agent，并且也承担着通过 JVMTI 实现 Java Instrumentation 中暴露 API 的责任。\n我们已经知道，在 JVM 启动的时候，JVM 会通过-javaagent 参数加载 Agent。最开始加载的是 libinstrument 动态链接库，然后在动态链接库里面找到 JVMTI 的入口方法：Agent_OnLoad。下面就来分析一下在 libinstrument 动态链接库中，Agent_OnLoad 函数是怎么实现的。\n\n```\nJNIEXPORT jint JNICALL\nDEF_Agent_OnLoad(JavaVM *vm, char *tail, void * reserved) {\n    initerror = createNewJPLISAgent(vm, &agent);\n    if ( initerror == JPLIS_INIT_ERROR_NONE ) {\n        if (parseArgumentTail(tail, &jarfile, &options) != 0) {\n            fprintf(stderr, \"-javaagent: memory allocation failure.\\n\");\n            return JNI_ERR;\n        }\n        attributes = readAttributes(jarfile);\n        premainClass = getAttribute(attributes, \"Premain-Class\");\n        /* Save the jarfile name */\n        agent->mJarfile = jarfile;\n        /*\n         * Convert JAR attributes into agent capabilities\n         */\n        convertCapabilityAttributes(attributes, agent);\n        /*\n         * Track (record) the agent class name and options data\n         */\n        initerror = recordCommandLineData(agent, premainClass, options);\n    }\n    return result;\n}\n```\n\n上述代码片段是经过精简的 libinstrument 中 Agent_OnLoad 实现的，大概的流程就是：先创建一个 JPLISAgent，然后将 ManiFest 中设定的一些参数解析出来， 比如（Premain-Class）等。创建了 JPLISAgent 之后，调用 initializeJPLISAgent 对这个 Agent 进行初始化操作。跟进 initializeJPLISAgent 看一下是如何初始化的：\n\n```\nJPLISInitializationError initializeJPLISAgent(JPLISAgent *agent, JavaVM *vm, jvmtiEnv *jvmtienv) {\n    /* check what capabilities are available */\n    checkCapabilities(agent);\n    /* check phase - if live phase then we don't need the VMInit event */\n    jvmtierror = (*jvmtienv)->GetPhase(jvmtienv, &phase);\n    /* now turn on the VMInit event */\n    if ( jvmtierror == JVMTI_ERROR_NONE ) {\n        jvmtiEventCallbacks callbacks;\n        memset(&callbacks, 0, sizeof(callbacks));\n        callbacks.VMInit = &eventHandlerVMInit;\n        jvmtierror = (*jvmtienv)->SetEventCallbacks(jvmtienv,&callbacks,sizeof(callbacks));\n    }\n    if ( jvmtierror == JVMTI_ERROR_NONE ) {\n        jvmtierror = (*jvmtienv)->SetEventNotificationMode(jvmtienv,JVMTI_ENABLE,JVMTI_EVENT_VM_INIT,NULL);\n    }\n    return (jvmtierror == JVMTI_ERROR_NONE)? JPLIS_INIT_ERROR_NONE : JPLIS_INIT_ERROR_FAILURE;\n}\n```\n\n这里，我们关注 callbacks.VMInit = &eventHandlerVMInit;这行代码，这里设置了一个 VMInit 事件的回调函数，表示在 JVM 初始化的时候会回调 eventHandlerVMInit 函数。下面来看一下这个函数的实现细节，猜测就是在这里调用了 Premain 方法：\n\n```\nvoid JNICALL  eventHandlerVMInit( jvmtiEnv *jvmtienv,JNIEnv *jnienv,jthread thread) {\n   // ...\n   success = processJavaStart( environment->mAgent, jnienv);\n  // ...\n}\njboolean  processJavaStart(JPLISAgent *agent,JNIEnv *jnienv) {\n    result = createInstrumentationImpl(jnienv, agent);\n    /*\n     *  Load the Java agent, and call the premain.\n     */\n    if ( result ) {\n        result = startJavaAgent(agent, jnienv, agent->mAgentClassName, agent->mOptionsString, agent->mPremainCaller);\n    }\n    return result;\n}\njboolean startJavaAgent( JPLISAgent *agent,JNIEnv *jnienv,const char *classname,const char *optionsString,jmethodID agentMainMethod) {\n  // ...\n  invokeJavaAgentMainMethod(jnienv,agent->mInstrumentationImpl,agentMainMethod, classNameObject,optionsStringObject);\n  // ...\n}\n```\n\n看到这里，Instrument 已经实例化，invokeJavaAgentMainMethod 这个方法将我们的 Premain 方法执行起来了。接着，我们就可以根据 Instrument 实例来做我们想要做的事情了。\n\n##### 2.3 运行时加载 Agent\n\n比起 JVM 启动时加载 Agent，运行时加载 Agent 就比较有诱惑力了，因为运行时加载 Agent 的能力给我们提供了很强的动态性，我们可以在需要的时候加载 Agent 来进行一些工作。因为是动态的，我们可以按照需求来加载所需要的 Agent，下面来分析一下动态加载 Agent 的相关技术细节。\n\n###### 2.3.1 AttachListener\n\nAttach 机制通过 Attach Listener 线程来进行相关事务的处理，下面来看一下 Attach Listener 线程是如何初始化的。\n\n```\n// Starts the Attach Listener thread\nvoid AttachListener::init() {\n  // 创建线程相关部分代码被去掉了\n  const char thread_name[] = \"Attach Listener\";\n  Handle string = java_lang_String::create_from_str(thread_name, THREAD);\n  { MutexLocker mu(Threads_lock);\n    JavaThread* listener_thread = new JavaThread(&attach_listener_thread_entry);\n    // ...\n  }\n}\n```\n\n我们知道，一个线程启动之后都需要指定一个入口来执行代码，Attach Listener 线程的入口是 attach_listener_thread_entry，下面看一下这个函数的具体实现：\n\n```\nstatic void attach_listener_thread_entry(JavaThread* thread, TRAPS) {\n  AttachListener::set_initialized();\n  for (;;) {\n      AttachOperation* op = AttachListener::dequeue();\n      // find the function to dispatch too\n      AttachOperationFunctionInfo* info = NULL;\n      for (int i=0; funcs[i].name != NULL; i++) {\n        const char* name = funcs[i].name;\n        if (strcmp(op->name(), name) == 0) {\n          info = &(funcs[i]); break;\n        }}\n       // dispatch to the function that implements this operation\n        res = (info->func)(op, &st);\n      //...\n    }\n}\n```\n\n整个函数执行逻辑，大概是这样的：\n\n拉取一个需要执行的任务：AttachListener::dequeue。\n\n查询匹配的命令处理函数。\n\n执行匹配到的命令执行函数。\n\n其中第二步里面存在一个命令函数表，整个表如下：\n\n```\nstatic AttachOperationFunctionInfo funcs[] = {\n  { \"agentProperties\",  get_agent_properties },\n  { \"datadump\",         data_dump },\n  { \"dumpheap\",         dump_heap },\n  { \"load\",             load_agent },\n  { \"properties\",       get_system_properties },\n  { \"threaddump\",       thread_dump },\n  { \"inspectheap\",      heap_inspection },\n  { \"setflag\",          set_flag },\n  { \"printflag\",        print_flag },\n  { \"jcmd\",             jcmd },\n  { NULL,               NULL }\n};\n```\n\n对于加载 Agent 来说，命令就是“load”。现在，我们知道了 Attach Listener 大概的工作模式，但是还是不太清楚任务从哪来，这个秘密就藏在 AttachListener::dequeue 这行代码里面，接下来我们来分析一下 dequeue 这个函数：\n\n```\nLinuxAttachOperation* LinuxAttachListener::dequeue() {\n  for (;;) {\n    // wait for client to connect\n    struct sockaddr addr;\n    socklen_t len = sizeof(addr);\n    RESTARTABLE(::accept(listener(), &addr, &len), s);\n    // get the credentials of the peer and check the effective uid/guid\n    // - check with jeff on this.\n    struct ucred cred_info;\n    socklen_t optlen = sizeof(cred_info);\n    if (::getsockopt(s, SOL_SOCKET, SO_PEERCRED, (void*)&cred_info, &optlen) == -1) {\n      ::close(s);\n      continue;\n    }\n    // peer credential look okay so we read the request\n    LinuxAttachOperation* op = read_request(s);\n    return op;\n  }\n}\n```\n\n这是 Linux 上的实现，不同的操作系统实现方式不太一样。上面的代码表面，Attach Listener 在某个端口监听着，通过 accept 来接收一个连接，\n然后从这个连接里面将请求读取出来，然后将请求包装成一个 AttachOperation 类型的对象，之后就会从表里查询对应的处理函数，然后进行处理。\n\n```\nAttach Listener使用一种被称为“懒加载”的策略进行初始化，也就是说，JVM启动的时候Attach Listener并不一定会启动起来。下面我们来分析一下这种“懒加载”策略的具体实现方案。\n  // Start Attach Listener if +StartAttachListener or it can't be started lazily\n  if (!DisableAttachMechanism) {\n    AttachListener::vm_start();\n    if (StartAttachListener || AttachListener::init_at_startup()) {\n      AttachListener::init();\n    }\n  }\n// Attach Listener is started lazily except in the case when\n// +ReduseSignalUsage is used\nbool AttachListener::init_at_startup() {\n  if (ReduceSignalUsage) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n上面的代码截取自 create_vm 函数，DisableAttachMechanism、StartAttachListener 和 ReduceSignalUsage 这三个变量默认都是 false，所以 AttachListener::init();这行代码不会在 create_vm 的时候执行，而 vm_start 会执行。下面来看一下这个函数的实现细节：\n\n```\nvoid AttachListener::vm_start() {\n  char fn[UNIX_PATH_MAX];\n  struct stat64 st;\n  int ret;\n  int n = snprintf(fn, UNIX_PATH_MAX, \"%s/.java_pid%d\",\n           os::get_temp_directory(), os::current_process_id());\n  assert(n < (int)UNIX_PATH_MAX, \"java_pid file name buffer overflow\");\n  RESTARTABLE(::stat64(fn, &st), ret);\n  if (ret == 0) {\n    ret = ::unlink(fn);\n    if (ret == -1) {\n      log_debug(attach)(\"Failed to remove stale attach pid file at %s\", fn);\n    }\n  }\n}\n```\n\n这是在 Linux 上的实现，是将/tmp/目录下的.java_pid{pid}文件删除，后面在创建 Attach Listener 线程的时候会创建出来这个文件。上面说到，AttachListener::init()这行代码不会在 create_vm 的时候执行，这行代码的实现已经在上文中分析了，就是创建 Attach Listener 线程，并监听其他 JVM 的命令请求。现在来分析一下这行代码是什么时候被调用的，也就是“懒加载”到底是怎么加载起来的。\n\n// Signal Dispatcher needs to be started before VMInit event is posted\nos::signal_init();\n这是 create_vm 中的一段代码，看起来跟信号相关，其实 Attach 机制就是使用信号来实现“懒加载“的。下面我们来仔细地分析一下这个过程。\n\n```\nvoid os::signal_init() {\n  if (!ReduceSignalUsage) {\n    // Setup JavaThread for processing signals\n    EXCEPTION_MARK;\n    Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::java_lang_Thread(), true, CHECK);\n    instanceKlassHandle klass (THREAD, k);\n    instanceHandle thread_oop = klass->allocate_instance_handle(CHECK);\n    const char thread_name[] = \"Signal Dispatcher\";\n    Handle string = java_lang_String::create_from_str(thread_name, CHECK);\n    // Initialize thread_oop to put it into the system threadGroup\n    Handle thread_group (THREAD, Universe::system_thread_group());\n    JavaValue result(T_VOID);\n    JavaCalls::call_special(&result, thread_oop,klass,vmSymbols::object_initializer_name(),vmSymbols::threadgroup_string_void_signature(),\n                           thread_group,string,CHECK);\n    KlassHandle group(THREAD, SystemDictionary::ThreadGroup_klass());\n    JavaCalls::call_special(&result,thread_group,group,vmSymbols::add_method_name(),vmSymbols::thread_void_signature(),thread_oop,CHECK);\n    os::signal_init_pd();\n    { MutexLocker mu(Threads_lock);\n      JavaThread* signal_thread = new JavaThread(&signal_thread_entry);\n     // ...\n    }\n    // Handle ^BREAK\n    os::signal(SIGBREAK, os::user_handler());\n  }\n}\n```\n\nJVM 创建了一个新的进程来实现信号处理，这个线程叫“Signal Dispatcher”，一个线程创建之后需要有一个入口，“Signal Dispatcher”的入口是 signal_thread_entry：\n\n这段代码截取自 signal_thread_entry 函数，截取中的内容是和 Attach 机制信号处理相关的代码。这段代码的意思是，当接收到“SIGBREAK”信号，就执行接下来的代码，这个信号是需要 Attach 到 JVM 上的信号发出来，这个后面会再分析。我们先来看一句关键的代码：AttachListener::is_init_trigger()：\n\n```\nbool AttachListener::is_init_trigger() {\n  if (init_at_startup() || is_initialized()) {\n    return false;               // initialized at startup or already initialized\n  }\n  char fn[PATH_MAX+1];\n  sprintf(fn, \".attach_pid%d\", os::current_process_id());\n  int ret;\n  struct stat64 st;\n  RESTARTABLE(::stat64(fn, &st), ret);\n  if (ret == -1) {\n    log_trace(attach)(\"Failed to find attach file: %s, trying alternate\", fn);\n    snprintf(fn, sizeof(fn), \"%s/.attach_pid%d\", os::get_temp_directory(), os::current_process_id());\n    RESTARTABLE(::stat64(fn, &st), ret);\n  }\n  if (ret == 0) {\n    // simple check to avoid starting the attach mechanism when\n    // a bogus user creates the file\n    if (st.st_uid == geteuid()) {\n      init();\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n首先检查了一下是否在 JVM 启动时启动了 Attach Listener，或者是否已经启动过。如果没有，才继续执行，在/tmp 目录下创建一个叫做.attach_pid%d 的文件，然后执行 AttachListener 的 init 函数，这个函数就是用来创建 Attach Listener 线程的函数，上面已经提到多次并进行了分析。到此，我们知道 Attach 机制的奥秘所在，也就是 Attach Listener 线程的创建依靠 Signal Dispatcher 线程，Signal Dispatcher 是用来处理信号的线程，当 Signal Dispatcher 线程接收到“SIGBREAK”信号之后，就会执行初始化 Attach Listener 的工作。\n\n###### 2.3.2 运行时加载 Agent 的实现\n\n我们继续分析，到底是如何将一个 Agent 挂载到运行着的目标 JVM 上，在上文中提到了一段代码，用来进行运行时挂载 Agent，可以参考上文中展示的关于“attachAgentToTargetJvm”方法的代码。这个方法里面的关键是调用 VirtualMachine 的 attach 方法进行 Agent 挂载的功能。下面我们就来分析一下 VirtualMachine 的 attach 方法具体是怎么实现的。\n\n```\npublic static VirtualMachine attach(String var0) throws AttachNotSupportedException, IOException {\n    if (var0 == null) {\n        throw new NullPointerException(\"id cannot be null\");\n    } else {\n        List var1 = AttachProvider.providers();\n        if (var1.size() == 0) {\n            throw new AttachNotSupportedException(\"no providers installed\");\n        } else {\n            AttachNotSupportedException var2 = null;\n            Iterator var3 = var1.iterator();\n            while(var3.hasNext()) {\n                AttachProvider var4 = (AttachProvider)var3.next();\n                try {\n                    return var4.attachVirtualMachine(var0);\n                } catch (AttachNotSupportedException var6) {\n                    var2 = var6;\n                }\n            }\n            throw var2;\n        }\n    }\n}\n```\n\n这个方法通过 attachVirtualMachine 方法进行 attach 操作，在 MacOS 系统中，AttachProvider 的实现类是 BsdAttachProvider。我们来看一下 BsdAttachProvider 的 attachVirtualMachine 方法是如何实现的：\n\n```\npublic VirtualMachine attachVirtualMachine(String var1) throws AttachNotSupportedException, IOException {\n        this.checkAttachPermission();\n        this.testAttachable(var1);\n        return new BsdVirtualMachine(this, var1);\n    }\nBsdVirtualMachine(AttachProvider var1, String var2) throws AttachNotSupportedException, IOException {\n        int var3 = Integer.parseInt(var2);\n        this.path = this.findSocketFile(var3);\n        if (this.path == null) {\n            File var4 = new File(tmpdir, \".attach_pid\" + var3);\n            createAttachFile(var4.getPath());\n            try {\n                sendQuitTo(var3);\n                int var5 = 0;\n                long var6 = 200L;\n                int var8 = (int)(this.attachTimeout() / var6);\n                do {\n                    try {\n                        Thread.sleep(var6);\n                    } catch (InterruptedException var21) {\n                        ;\n                    }\n                    this.path = this.findSocketFile(var3);\n                    ++var5;\n                } while(var5 <= var8 && this.path == null);\n            } finally {\n                var4.delete();\n            }\n        }\n        int var24 = socket();\n        connect(var24, this.path);\n    }\n    private String findSocketFile(int var1) {\n        String var2 = \".java_pid\" + var1;\n        File var3 = new File(tmpdir, var2);\n        return var3.exists() ? var3.getPath() : null;\n    }\n```\n\nfindSocketFile 方法用来查询目标 JVM 上是否已经启动了 Attach Listener，它通过检查\"tmp/\"目录下是否存在 java_pid{pid}来进行实现。如果已经存在了，则说明 Attach 机制已经准备就绪，可以接受客户端的命令了，这个时候客户端就可以通过 connect 连接到目标 JVM 进行命令的发送，比如可以发送“load”命令来加载 Agent。如果 java_pid{pid}文件还不存在，则需要通过 sendQuitTo 方法向目标 JVM 发送一个“SIGBREAK”信号，让它初始化 Attach Listener 线程并准备接受客户端连接。可以看到，发送了信号之后客户端会循环等待 java_pid{pid}这个文件，之后再通过 connect 连接到目标 JVM 上。\n\n###### 2.3.3 load 命令的实现\n\n下面来分析一下，“load”命令在 JVM 层面的实现：\n\n```\nstatic jint load_agent(AttachOperation* op, outputStream* out) {\n  // get agent name and options\n  const char* agent = op->arg(0);\n  const char* absParam = op->arg(1);\n  const char* options = op->arg(2);\n  // If loading a java agent then need to ensure that the java.instrument module is loaded\n  if (strcmp(agent, \"instrument\") == 0) {\n    Thread* THREAD = Thread::current();\n    ResourceMark rm(THREAD);\n    HandleMark hm(THREAD);\n    JavaValue result(T_OBJECT);\n    Handle h_module_name = java_lang_String::create_from_str(\"java.instrument\", THREAD);\n    JavaCalls::call_static(&result,SystemDictionary::module_Modules_klass(),vmSymbols::loadModule_name(),\n                           vmSymbols::loadModule_signature(),h_module_name,THREAD);\n  }\n  return JvmtiExport::load_agent_library(agent, absParam, options, out);\n}\n```\n\n这个函数先确保加载了 java.instrument 模块，之后真正执行 Agent 加载的函数是 load_agent_library ,这个函数的套路就是加载 Agent 动态链接库，如果是通过 Java instrument API 实现的 Agent，则加载的是 libinstrument 动态链接库，然后通过 libinstrument 里面的代码实现运行 agentmain 方法的逻辑，这一部分内容和 libinstrument 实现 premain 方法运行的逻辑其实差不多，这里不再做分析。至此，我们对 Java Agent 技术已经有了一个全面而细致的了解。\n\n#### 3. 动态替换类字节码技术\n\n##### 3.1 动态字节码修改的限制\n\n上文中已经详细分析了 Agent 技术的实现，我们使用 Java Instrumentation API 来完成动态类修改的功能，在 Instrumentation 接口中，通过 addTransformer 方法来增加一个类转换器，类转换器由类 ClassFileTransformer 接口实现。ClassFileTransformer 接口中唯一的方法 transform 用于实现类转换，当类被加载的时候，就会调用 transform 方法，进行类转换。在运行时，我们可以通过 Instrumentation 的 redefineClasses 方法进行类重定义，在方法上有一段注释需要特别注意：\n\n- The redefinition may change method bodies, the constant pool and attributes.\n- The redefinition must not add, remove or rename fields or methods, change the\n- signatures of methods, or change inheritance. These restrictions maybe be\n- lifted in future versions. The class file bytes are not checked, verified and installed\n- until after the transformations have been applied, if the resultant bytes are in\n- error this method will throw an exception.\n  这里面提到，我们不可以增加、删除或者重命名字段和方法，改变方法的签名或者类的继承关系。认识到这一点很重要，当我们通过 ASM 获取到增强的字节码之后，如果增强后的字节码没有遵守这些规则，那么调用 redefineClasses 方法来进行类的重定义就会失败。那 redefineClasses 方法具体是怎么实现类的重定义的呢？它对运行时的 JVM 会造成什么样的影响呢？下面来分析 redefineClasses 的实现细节。\n\n##### 3.2 重定义类字节码的实现细节\n\n上文中我们提到，libinstrument 动态链接库中，JPLISAgent 不仅实现了 Agent 入口代码执行的路由，而且还是 Java 代码与 JVMTI 之间的一道桥梁。我们在 Java 代码中调用 Java Instrumentation API 的 redefineClasses，其实会调用 libinstrument 中的相关代码，我们来分析一下这条路径。\n\n```\npublic void redefineClasses(ClassDefinition... var1) throws ClassNotFoundException {\n    if (!this.isRedefineClassesSupported()) {\n        throw new UnsupportedOperationException(\"redefineClasses is not supported in this environment\");\n    } else if (var1 == null) {\n        throw new NullPointerException(\"null passed as 'definitions' in redefineClasses\");\n    } else {\n        for(int var2 = 0; var2 < var1.length; ++var2) {\n            if (var1[var2] == null) {\n                throw new NullPointerException(\"element of 'definitions' is null in redefineClasses\");\n            }\n        }\n        if (var1.length != 0) {\n            this.redefineClasses0(this.mNativeAgent, var1);\n        }\n    }\n}\nprivate native void redefineClasses0(long var1, ClassDefinition[] var3) throws ClassNotFoundException;\n```\n\n这是 InstrumentationImpl 中的 redefineClasses 实现，该方法的具体实现依赖一个 Native 方法 redefineClasses()，我们可以在 libinstrument 中找到这个 Native 方法的实现：\n\n```\nJNIEXPORT void JNICALL Java_sun_instrument_InstrumentationImpl_redefineClasses0\n  (JNIEnv * jnienv, jobject implThis, jlong agent, jobjectArray classDefinitions) {\n    redefineClasses(jnienv, (JPLISAgent*)(intptr_t)agent, classDefinitions);\n}\n```\n\nredefineClasses 这个函数的实现比较复杂，代码很长。下面是一段关键的代码片段：\n\n可以看到，其实是调用了 JVMTI 的 RetransformClasses 函数来完成类的重定义细节。\n\n```\n// class_count - pre-checked to be greater than or equal to 0\n// class_definitions - pre-checked for NULL\njvmtiError JvmtiEnv::RedefineClasses(jint class_count, const jvmtiClassDefinition* class_definitions) {\n//TODO: add locking\n  VM_RedefineClasses op(class_count, class_definitions, jvmti_class_load_kind_redefine);\n  VMThread::execute(&op);\n  return (op.check_error());\n} /* end RedefineClasses */\n```\n\n重定义类的请求会被 JVM 包装成一个 VM_RedefineClasses 类型的 VM_Operation，VM_Operation 是 JVM 内部的一些操作的基类，包括 GC 操作等。VM_Operation 由 VMThread 来执行，新的 VM_Operation 操作会被添加到 VMThread 的运行队列中去，VMThread 会不断从队列里面拉取 VM_Operation 并调用其 doit 等函数执行具体的操作。VM_RedefineClasses 函数的流程较为复杂，下面是 VM_RedefineClasses 的大致流程：\n\n加载新的字节码，合并常量池，并且对新的字节码进行校验工作\n// Load the caller's new class definition(s) into \\_scratch_classes.\n// Constant pool merging work is done here as needed. Also calls\n// compare_and_normalize_class_versions() to verify the class\n// definition(s).\njvmtiError load_new_class_versions(TRAPS);\n清除方法上的断点\n\n```\n  // Remove all breakpoints in methods of this class\n  JvmtiBreakpoints& jvmti_breakpoints = JvmtiCurrentBreakpoints::get_jvmti_breakpoints();\n  jvmti_breakpoints.clearall_in_class_at_safepoint(the_class());\nJIT逆优化\n\n  // Deoptimize all compiled code that depends on this class\n  flush_dependent_code(the_class, THREAD);\n```\n\n进行字节码替换工作，需要进行更新类 itable/vtable 等操作\n进行类重定义通知\n\n```\n SystemDictionary::notice_modification();\n```\n\nVM_RedefineClasses 实现比较复杂的，详细实现可以参考 RedefineClasses 的实现。\n\n#### 4. Java-debug-tool 设计与实现\n\nJava-debug-tool 是一个使用 Java Instrument API 来实现的动态调试工具，它通过在目标 JVM 上启动一个 TcpServer 来和调试客户端通信。\n调试客户端通过命令行来发送调试命令给 TcpServer，TcpServer 中有专门用来处理命令的 handler，handler 处理完命令之后会将结果发送回客户端，\n客户端通过处理将调试结果展示出来。下面将详细介绍 Java-debug-tool 的整体设计和实现。\n\n##### 4.1 Java-debug-tool 整体架构\n\nJava-debug-tool 包括一个 Java Agent 和一个用于处理调试命令的核心 API，核心 API 通过一个自定义的类加载器加载进来，以保证目标 JVM 的类不会被污染。\n整体上 Java-debug-tool 的设计是一个 Client-Server 的架构，命令客户端需要完整的完成一个命令之后才能继续执行下一个调试命令。\nJava-debug-tool 支持多人同时进行调试，下面是整体架构图：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE44pMzDfgj8Oe9fFbU2wHn35PjibaPxvOnFMmwx1Jzv9Tsy1kxn41Q7NQ/640)\n\n下面对每一层做简单介绍：\n\n- 交互层：负责将程序员的输入转换成调试交互协议，并且将调试信息呈现出来。\n\n- 连接管理层：负责管理客户端连接，从连接中读调试协议数据并解码，对调试结果编码并将其写到连接中去；同时将那些超时未活动的连接关闭。\n\n- 业务逻辑层：实现调试命令处理，包括命令分发、数据收集、数据处理等过程。\n\n- 基础实现层：Java-debug-tool 实现的底层依赖，通过 Java Instrumentation 提供的 API 进行类查找、类重定义等能力，Java Instrumentation 底层依赖 JVMTI 来完成具体的功能。\n\n在 Agent 被挂载到目标 JVM 上之后，Java-debug-tool 会安排一个 Spy 在目标 JVM 内活动，这个 Spy 负责将目标 JVM 内部的相关调试数据转移到命令处理模块，\n命令处理模块会处理这些数据，然后给客户端返回调试结果。命令处理模块会增强目标类的字节码来达到数据获取的目的\n，多个客户端可以共享一份增强过的字节码，无需重复增强。下面从 Java-debug-tool 的字节码增强方案、命令设计与实现等角度详细说明。\n\n##### 4.2 Java-debug-tool 的字节码增强方案\n\nJava-debug-tool 使用字节码增强来获取到方法运行时的信息，比如方法入参、出参等，可以在不同的字节码位置进行增强，这种行为可以称为“插桩”，\n每个“桩”用于获取数据并将他转储出去。Java-debug-tool 具备强大的插桩能力，不同的桩负责获取不同类别的数据，下面是 Java-debug-tool 目前所支持的“桩”：\n\n- 方法进入点：用于获取方法入参信息。\n\n- Fields 获取点 1：在方法执行前获取到对象的字段信息。\n\n- 变量存储点：获取局部变量信息。\n\n- Fields 获取点 2：在方法退出前获取到对象的字段信息。\n\n- 方法退出点：用于获取方法返回值。\n\n- 抛出异常点：用于获取方法抛出的异常信息。\n\n通过上面这些代码桩，Java-debug-tool 可以收集到丰富的方法执行信息，经过处理可以返回更加可视化的调试结果。\n\n###### 4.2.1 字节码增强\n\nJava-debug-tool 在实现上使用了 ASM 工具来进行字节码增强，并且每个插桩点都可以进行配置，如果不想要什么信息，则没必要进行对应的插桩操作。这种可配置的设计是非常有必要的，因为有时候我们仅仅是想要知道方法的入参和出参，但 Java-debug-tool 却给我们返回了所有的调试信息，这样我们就得在众多的输出中找到我们所关注的内容。如果可以进行配置，则除了入参点和出参点外其他的桩都不插，那么就可以快速看到我们想要的调试数据，这种设计的本质是为了让调试者更加专注。下面是 Java-debug-tool 的字节码增强工作方式：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4jIYWODnoWDfEAhWyia6LIsKKwIkT5FEMxEzrFKTUV5WGdAEMmlno0hA/640)\n\n\n图 4-2-1\n\n如图 4-2-1 所示，当调试者发出调试命令之后，Java-debug-tool 会识别命令并判断是否需要进行字节码增强，如果命令需要增强字节码，则判断当前类+当前方法是否已经被增强过。上文已经提到，字节码替换是有一定损耗的，这种具有损耗的操作发生的次数越少越好，所以字节码替换操作会被记录起来，后续命令直接使用即可，不需要重复进行字节码增强，字节码增强还涉及多个调试客户端的协同工作问题，当一个客户端增强了一个类的字节码之后，这个客户端就锁定了该字节码，其他客户端变成只读，无法对该类进行字节码增强，只有当持有锁的客户端主动释放锁或者断开连接之后，其他客户端才能继续增强该类的字节码。\n字节码增强模块收到字节码增强请求之后，会判断每个增强点是否需要插桩，这个判断的根据就是上文提到的插桩配置，之后字节码增强模块会生成新的字节码，Java-debug-tool 将执行字节码替换操作，之后就可以进行调试数据收集了。\n经过字节码增强之后，原来的方法中会插入收集运行时数据的代码，这些代码在方法被调用的时候执行，获取到诸如方法入参、局部变量等信息，这些信息将传递给数据收集装置进行处理。数据收集的工作通过 Advice 完成，每个客户端同一时间只能注册一个 Advice 到 Java-debug-tool 调试模块上，多个客户端可以同时注册自己的 Advice 到调试模块上。Advice 负责收集数据并进行判断，如果当前数据符合调试命令的要求，Java-debug-tool 就会卸载这个 Advice，Advice 的数据就会被转移到 Java-debug-tool 的命令结果处理模块进行处理，并将结果发送到客户端。\n\n###### 4.2.2 Advice 的工作方式\n\nAdvice 是调试数据收集器，不同的调试策略会对应不同的 Advice。Advice 是工作在目标 JVM 的线程内部的，它需要轻量级和高效，意味着 Advice 不能做太过于复杂的事情，它的核心接口“match”用来判断本次收集到的调试数据是否满足调试需求。如果满足，那么 Java-debug-tool 就会将其卸载，否则会继续让他收集调试数据，这种“加载 Advice” -> “卸载 Advice”的工作模式具备很好的灵活性。\n关于 Advice，需要说明的另外一点就是线程安全，因为它加载之后会运行在目标 JVM 的线程中，目标 JVM 的方法极有可能是多线程访问的，这也就是说，Advice 需要有能力处理多个线程同时访问方法的能力，如果 Advice 处理不当，则可能会收集到杂乱无章的调试数据。下面的图片展示了 Advice 和 Java-debug-tool 调试分析模块、目标方法执行以及调试客户端等模块的关系。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4icUzSicIdgKaWyBsIVgmiaOHEPR5mUvyqDOg3e6ELs0aFF1Ub23RjnNsQ/640)\n图 4-2-2\nAdvice 的首次挂载由 Java-debug-tool 的命令处理器完成，当一次调试数据收集完成之后，调试数据处理模块会自动卸载 Advice，然后进行判断，如果调试数据符合 Advice 的策略，则直接将数据交由数据处理模块进行处理，否则会清空调试数据，并再次将 Advice 挂载到目标方法上去，等待下一次调试数据。非首次挂载由调试数据处理模块进行，它借助 Advice 按需取数据，如果不符合需求，则继续挂载 Advice 来获取数据，否则对调试数据进行处理并返回给客户端。\n\n##### 4.3 Java-debug-tool 的命令设计与实现\n\n###### 4.3.1 命令执行\n\n上文已经完整的描述了 Java-debug-tool 的设计以及核心技术方案，本小节将详细介绍 Java-debug-tool 的命令设计与实现。首先需要将一个调试命令的执行流程描述清楚，下面是一张用来表示命令请求处理流程的图片：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4NAFPL7rkntPMiaicJtbn84MnRNibQkPhUibZ5cuWpZpcibYxx0vR41PHNDw/640)\n图 4-3-1\n图 4-3-1 简单的描述了 Java-debug-tool 的命令处理方式，客户端连接到服务端之后，会进行一些协议解析、协议认证、协议填充等工作，之后将进行命令分发。服务端如果发现客户端的命令不合法，则会立即返回错误信息，否则再进行命令处理。命令处理属于典型的三段式处理，前置命令处理、命令处理以及后置命令处理，同时会对命令处理过程中的异常信息进行捕获处理，三段式处理的好处是命令处理被拆成了多个阶段，多个阶段负责不同的职责。前置命令处理用来做一些命令权限控制的工作，并填充一些类似命令处理开始时间戳等信息，命令处理就是通过字节码增强，挂载 Advice 进行数据收集，再经过数据处理来产生命令结果的过程，后置处理则用来处理一些连接关闭、字节码解锁等事项。\nJava-debug-tool 允许客户端设置一个命令执行超时时间，超过这个时间则认为命令没有结果，如果客户端没有设置自己的超时时间，就使用默认的超时时间进行超时控制。Java-debug-tool 通过设计了两阶段的超时检测机制来实现命令执行超时功能：首先，第一阶段超时触发，则 Java-debug-tool 会友好的警告命令处理模块处理时间已经超时，需要立即停止命令执行，这允许命令自己做一些现场清理工作，当然需要命令执行线程自己感知到这种超时警告；当第二阶段超时触发，则 Java-debug-tool 认为命令必须结束执行，会强行打断命令执行线程。超时机制的目的是为了不让命令执行太长时间，命令如果长时间没有收集到调试数据，则应该停止执行，并思考是否调试了一个错误的方法。当然，超时机制还可以定期清理那些因为未知原因断开连接的客户端持有的调试资源，比如字节码锁。\n\n###### 4.3.4 获取方法执行视图\n\nJava-debug-tool 通过下面的信息来向调试者呈现出一次方法执行的视图：\n正在调试的方法信息。\n\n方法调用堆栈。\n\n调试耗时，包括对目标 JVM 造成的 STW 时间。\n\n方法入参，包括入参的类型及参数值。\n\n方法的执行路径。\n\n代码执行耗时。\n\n局部变量信息。\n\n方法返回结果。\n\n方法抛出的异常。\n\n对象字段值快照。\n\n图 4-3-2 展示了 Java-debug-tool 获取到正在运行的方法的执行视图的信息。\n![](https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4TYKGnNuqCgHOSkZiabggzJUESbqSDMWRZM1OtVNGziasnSAiae7ibYicAKw/640?wx_fmt=png)\n\n图 4-3-2\n\n##### 4.4 Java-debug-tool 与同类产品对比分析\n\nJava-debug-tool 的同类产品主要是 greys，其他类似的工具大部分都是基于 greys 进行的二次开发，所以直接选择 greys 来和 Java-debug-tool 进行对比。\n\n#### 5. 总结\n\n本文详细剖析了 Java 动态调试关键技术的实现细节，并介绍了我们基于 Java 动态调试技术结合实际故障排查场景进行的一点探索实践；动态调试技术为研发人员进行线上问题排查提供了一种新的思路，我们基于动态调试技术解决了传统断点调试存在的问题，使得可以将断点调试这种技术应用在线上，以线下调试的思维来进行线上调试，提高问题排查效率。\n\n#### 6. 参考文献\n\nASM 4 guide\n\nJava Virtual Machine Specification\n\nJVM Tool Interface\n\nalibaba arthas\n\nopenjdk\n\n#### 摘自\n\nhttps://mp.weixin.qq.com/s/ZlNcvwJ_swspifWTLHA92Q\n","source":"_posts/language/java/bytecode/Java动态调试技术原理及实践.md","raw":"---\ntitle: Java动态调试技术原理及实践\ncategories:\n- java\ntag:\n- 动态调试技术\n---\n\n\n### Java动态调试技术原理及实践\n\n#### 1. 动态调试要解决的问题\n\n断点调试是我们最常使用的调试手段，它可以获取到方法执行过程中的变量信息，并可以观察到方法的执行路径。\n但断点调试会在断点位置停顿，使得整个应用停止响应。在线上停顿应用是致命的，动态调试技术给了我们创造新的调试模式的想象空间。\n本文将研究 Java 语言中的动态调试技术，首先概括 Java 动态调试所涉及的技术基础，接着介绍我们在 Java 动态调试领域的思考及实践，\n通过结合实际业务场景，设计并实现了一种具备动态性的断点调试工具 Java-debug-tool，显著提高了故障排查效率。\n\n#### 2. Java Agent 技术\n\nJVMTI （JVM Tool Interface）是 Java 虚拟机对外提供的 Native 编程接口，通过 JVMTI，外部进程可以获取到运行时 JVM 的诸多信息，比如线程、GC 等。\nAgent 是一个运行在目标 JVM 的特定程序，它的职责是负责从目标 JVM 中获取数据，然后将数据传递给外部进程。\n加载 Agent 的时机可以是目标 JVM 启动之时，也可以是在目标 JVM 运行时进行加载，而在目标 JVM 运行时进行 Agent 加载具备动态性，\n对于时机未知的 Debug 场景来说非常实用。下面将详细分析 Java Agent 技术的实现细节。\n\n##### 2.1 Agent 的实现模式\n\nJVMTI 是一套 Native 接口，在 Java SE 5 之前，要实现一个 Agent 只能通过编写 Native 代码来实现。\n从 Java SE 5 开始，可以使用 Java 的 Instrumentation 接口（java.lang.instrument）来编写 Agent。\n无论是通过 Native 的方式还是通过 Java Instrumentation 接口的方式来编写 Agent，它们的工作都是借助 JVMTI 来进行完成，\n下面介绍通过 Java Instrumentation 接口编写 Agent 的方法。\n\n###### 2.1.1 通过 Java Instrumentation API\n\n实现 Agent 启动方法\n\nJava Agent 支持目标 JVM 启动时加载，也支持在目标 JVM 运行时加载，这两种不同的加载模式会使用不同的入口函数，\n如果需要在目标 JVM 启动的同时加载 Agent，那么可以选择实现下面的方法：\n\n```\n[1] public static void premain(String agentArgs, Instrumentation inst);\n[2] public static void premain(String agentArgs);\n```\n\nJVM 将首先寻找[1]，如果没有发现[1]，再寻找[2]。如果希望在目标 JVM 运行时加载 Agent，则需要实现下面的方法：\n\n```\n[1] public static void agentmain(String agentArgs, Instrumentation inst);\n[2] public static void agentmain(String agentArgs);\n```\n\n这两组方法的第一个参数 AgentArgs 是随同 “– javaagent”一起传入的程序参数，如果这个字符串代表了多个参数，就需要自己解析这些参数。\ninst 是 Instrumentation 类型的对象，是 JVM 自动传入的，我们可以拿这个参数进行类增强等操作。\n\n指定 Main-Class\nAgent 需要打包成一个 jar 包，在 ManiFest 属性中指定“Premain-Class”或者“Agent-Class”：\nPremain-Class: class\nAgent-Class: class\n挂载到目标 JVM\n将编写的 Agent 打成 jar 包后，就可以挂载到目标 JVM 上去了。如果选择在目标 JVM 启动时加载 Agent，则可以使用 \"-javaagent:<jarpath>[=<option>]\"，\n具体的使用方法可以使用“Java -Help”来查看。如果想要在运行时挂载 Agent 到目标 JVM，就需要做一些额外的开发了。\ncom.sun.tools.attach.VirtualMachine 这个类代表一个 JVM 抽象，可以通过这个类找到目标 JVM，并且将 Agent 挂载到目标 JVM 上。\n下面是使用 com.sun.tools.attach.VirtualMachine 进行动态挂载 Agent 的一般实现：\n\n```\nprivate void attachAgentToTargetJVM() throws Exception {\n    List<VirtualMachineDescriptor> virtualMachineDescriptors = VirtualMachine.list();\n    VirtualMachineDescriptor targetVM = null;\n    for (VirtualMachineDescriptor descriptor : virtualMachineDescriptors) {\n        if (descriptor.id().equals(configure.getPid())) {\n            targetVM = descriptor;\n            break;\n        }\n    }\n    if (targetVM == null) {\n        throw new IllegalArgumentException(\"could not find the target jvm by process id:\" + configure.getPid());\n    }\n    VirtualMachine virtualMachine = null;\n    try {\n        virtualMachine = VirtualMachine.attach(targetVM);\n        virtualMachine.loadAgent(\"{agent}\", \"{params}\");\n    } catch (Exception e) {\n        if (virtualMachine != null) {\n            virtualMachine.detach();\n        }\n    }\n}\n```\n\n首先通过指定的进程 ID 找到目标 JVM，然后通过 Attach 挂载到目标 JVM 上，执行加载 Agent 操作。\nVirtualMachine 的 Attach 方法就是用来将 Agent 挂载到目标 JVM 上去的，而 Detach 则是将 Agent 从目标 JVM 卸载。关\n于 Agent 是如何挂载到目标 JVM 上的具体技术细节，将在下文中进行分析。\n\n##### 2.2 启动时加载 Agent\n\n###### 2.2.1 参数解析\n\n创建 JVM 时，JVM 会进行参数解析，即解析那些用来配置 JVM 启动的参数，比如堆大小、GC 等；本文主要关注解析的参数为-agentlib、 -agentpath、 -javaagent，这几个参数用来指定 Agent，JVM 会根据这几个参数加载 Agent。下面来分析一下 JVM 是如何解析这几个参数的。\n\n```\n  // -agentlib and -agentpath\n  if (match_option(option, \"-agentlib:\", &tail) ||\n          (is_absolute_path = match_option(option, \"-agentpath:\", &tail))) {\n      if(tail != NULL) {\n        const char* pos = strchr(tail, '=');\n        size_t len = (pos == NULL) ? strlen(tail) : pos - tail;\n        char* name = strncpy(NEW_C_HEAP_ARRAY(char, len + 1, mtArguments), tail, len);\n        name[len] = '\\0';\n        char *options = NULL;\n        if(pos != NULL) {\n          options = os::strdup_check_oom(pos + 1, mtArguments);\n        }\n        #if !INCLUDE_JVMTI\n        if (valid_jdwp_agent(name, is_absolute_path)) {\n          jio_fprintf(defaultStream::error_stream(),\n            \"Debugging agents are not supported in this VM\\n\");\n          return JNI_ERR;\n        }\n        #endif // !INCLUDE_JVMTI\n        add_init_agent(name, options, is_absolute_path);\n      }\n    // -javaagent\n    } else if (match_option(option, \"-javaagent:\", &tail)) {\n        #if !INCLUDE_JVMTI\n      jio_fprintf(defaultStream::error_stream(),\n        \"Instrumentation agents are not supported in this VM\\n\");\n      return JNI_ERR;\n        #else\n      if (tail != NULL) {\n        size_t length = strlen(tail) + 1;\n        char *options = NEW_C_HEAP_ARRAY(char, length, mtArguments);\n        jio_snprintf(options, length, \"%s\", tail);\n        add_init_agent(\"instrument\", options, false);\n        // java agents need module java.instrument\n        if (!create_numbered_property(\"jdk.module.addmods\", \"java.instrument\", addmods_count++)) {\n          return JNI_ENOMEM;\n        }\n      }\n        #endif // !INCLUDE_JVMTI\n    }\n```\n\n上面的代码片段截取自 hotspot/src/share/vm/runtime/arguments.cpp 中的 Arguments::parse_each_vm_init_arg(const JavaVMInitArgs* args, bool* patch_mod_javabase, Flag::Flags origin) 函数，该函数用来解析一个具体的 JVM 参数。这段代码的主要功能是解析出需要加载的 Agent 路径，然后调用 add_init_agent 函数进行解析结果的存储。下面先看一下 add_init_agent 函数的具体实现：\n\n```\n  // -agentlib and -agentpath arguments\n  static AgentLibraryList _agentList;\n  static void add_init_agent(const char* name, char* options, bool absolute_path)\n    { _agentList.add(new AgentLibrary(name, options, absolute_path, NULL)); }\n```\n\nAgentLibraryList 是一个简单的链表结构，add_init_agent 函数将解析好的、需要加载的 Agent 添加到这个链表中，等待后续的处理。\n\n这里需要注意，解析-javaagent 参数有一些特别之处，这个参数用来指定一个我们通过 Java Instrumentation API 来编写的 Agent，Java Instrumentation API 底层依赖的是 JVMTI，对-JavaAgent 的处理也说明了这一点，在调用 add_init_agent 函数时第一个参数是“instrument”，关于加载 Agent 这个问题在下一小节进行展开。到此，我们知道在启动 JVM 时指定的 Agent 已经被 JVM 解析完存放在了一个链表结构中。下面来分析一下 JVM 是如何加载这些 Agent 的。\n\n###### 2.2.2 执行加载操作\n\n在创建 JVM 进程的函数中，解析完 JVM 参数之后，下面的这段代码和加载 Agent 相关：\n\n```\n   // Launch -agentlib/-agentpath and converted -Xrun agents\n  if (Arguments::init_agents_at_startup()) {\n    create_vm_init_agents();\n  }\n  static bool init_agents_at_startup() {\n    return !_agentList.is_empty();\n  }\n```\n\n当 JVM 判断出上一小节中解析出来的 Agent 不为空的时候，就要去调用函数 create_vm_init_agents 来加载 Agent，下面来分析一下 create_vm_init_agents 函数是如何加载 Agent 的。\n\n```\nvoid Threads::create_vm_init_agents() {\n  AgentLibrary* agent;\n  for (agent = Arguments::agents(); agent != NULL; agent = agent->next()) {\n    OnLoadEntry_t  on_load_entry = lookup_agent_on_load(agent);\n    if (on_load_entry != NULL) {\n      // Invoke the Agent_OnLoad function\n      jint err = (*on_load_entry)(&main_vm, agent->options(), NULL);\n    }\n  }\n}\n```\n\ncreate_vm_init_agents 这个函数通过遍历 Agent 链表来逐个加载 Agent。通过这段代码可以看出，首先通过 lookup_agent_on_load 来加载 Agent 并且找到 Agent_OnLoad 函数，这个函数是 Agent 的入口函数。如果没找到这个函数，则认为是加载了一个不合法的 Agent，则什么也不做，否则调用这个函数，这样 Agent 的代码就开始执行起来了。对于使用 Java Instrumentation API 来编写 Agent 的方式来说，在解析阶段观察到在 add_init_agent 函数里面传递进去的是一个叫做\"instrument\"的字符串，其实这是一个动态链接库。在 Linux 里面，这个库叫做 libinstrument.so，在 BSD 系统中叫做 libinstrument.dylib，该动态链接库在{JAVA_HOME}/jre/lib/目录下。\n\n###### 2.2.3 Instrument 动态链接库\n\nlibinstrument 用来支持使用 Java Instrumentation API 来编写 Agent，在 libinstrument 中有一个非常重要的类称为：JPLISAgent（Java Programming Language Instrumentation Services Agent），它的作用是初始化所有通过 Java Instrumentation API 编写的 Agent，并且也承担着通过 JVMTI 实现 Java Instrumentation 中暴露 API 的责任。\n我们已经知道，在 JVM 启动的时候，JVM 会通过-javaagent 参数加载 Agent。最开始加载的是 libinstrument 动态链接库，然后在动态链接库里面找到 JVMTI 的入口方法：Agent_OnLoad。下面就来分析一下在 libinstrument 动态链接库中，Agent_OnLoad 函数是怎么实现的。\n\n```\nJNIEXPORT jint JNICALL\nDEF_Agent_OnLoad(JavaVM *vm, char *tail, void * reserved) {\n    initerror = createNewJPLISAgent(vm, &agent);\n    if ( initerror == JPLIS_INIT_ERROR_NONE ) {\n        if (parseArgumentTail(tail, &jarfile, &options) != 0) {\n            fprintf(stderr, \"-javaagent: memory allocation failure.\\n\");\n            return JNI_ERR;\n        }\n        attributes = readAttributes(jarfile);\n        premainClass = getAttribute(attributes, \"Premain-Class\");\n        /* Save the jarfile name */\n        agent->mJarfile = jarfile;\n        /*\n         * Convert JAR attributes into agent capabilities\n         */\n        convertCapabilityAttributes(attributes, agent);\n        /*\n         * Track (record) the agent class name and options data\n         */\n        initerror = recordCommandLineData(agent, premainClass, options);\n    }\n    return result;\n}\n```\n\n上述代码片段是经过精简的 libinstrument 中 Agent_OnLoad 实现的，大概的流程就是：先创建一个 JPLISAgent，然后将 ManiFest 中设定的一些参数解析出来， 比如（Premain-Class）等。创建了 JPLISAgent 之后，调用 initializeJPLISAgent 对这个 Agent 进行初始化操作。跟进 initializeJPLISAgent 看一下是如何初始化的：\n\n```\nJPLISInitializationError initializeJPLISAgent(JPLISAgent *agent, JavaVM *vm, jvmtiEnv *jvmtienv) {\n    /* check what capabilities are available */\n    checkCapabilities(agent);\n    /* check phase - if live phase then we don't need the VMInit event */\n    jvmtierror = (*jvmtienv)->GetPhase(jvmtienv, &phase);\n    /* now turn on the VMInit event */\n    if ( jvmtierror == JVMTI_ERROR_NONE ) {\n        jvmtiEventCallbacks callbacks;\n        memset(&callbacks, 0, sizeof(callbacks));\n        callbacks.VMInit = &eventHandlerVMInit;\n        jvmtierror = (*jvmtienv)->SetEventCallbacks(jvmtienv,&callbacks,sizeof(callbacks));\n    }\n    if ( jvmtierror == JVMTI_ERROR_NONE ) {\n        jvmtierror = (*jvmtienv)->SetEventNotificationMode(jvmtienv,JVMTI_ENABLE,JVMTI_EVENT_VM_INIT,NULL);\n    }\n    return (jvmtierror == JVMTI_ERROR_NONE)? JPLIS_INIT_ERROR_NONE : JPLIS_INIT_ERROR_FAILURE;\n}\n```\n\n这里，我们关注 callbacks.VMInit = &eventHandlerVMInit;这行代码，这里设置了一个 VMInit 事件的回调函数，表示在 JVM 初始化的时候会回调 eventHandlerVMInit 函数。下面来看一下这个函数的实现细节，猜测就是在这里调用了 Premain 方法：\n\n```\nvoid JNICALL  eventHandlerVMInit( jvmtiEnv *jvmtienv,JNIEnv *jnienv,jthread thread) {\n   // ...\n   success = processJavaStart( environment->mAgent, jnienv);\n  // ...\n}\njboolean  processJavaStart(JPLISAgent *agent,JNIEnv *jnienv) {\n    result = createInstrumentationImpl(jnienv, agent);\n    /*\n     *  Load the Java agent, and call the premain.\n     */\n    if ( result ) {\n        result = startJavaAgent(agent, jnienv, agent->mAgentClassName, agent->mOptionsString, agent->mPremainCaller);\n    }\n    return result;\n}\njboolean startJavaAgent( JPLISAgent *agent,JNIEnv *jnienv,const char *classname,const char *optionsString,jmethodID agentMainMethod) {\n  // ...\n  invokeJavaAgentMainMethod(jnienv,agent->mInstrumentationImpl,agentMainMethod, classNameObject,optionsStringObject);\n  // ...\n}\n```\n\n看到这里，Instrument 已经实例化，invokeJavaAgentMainMethod 这个方法将我们的 Premain 方法执行起来了。接着，我们就可以根据 Instrument 实例来做我们想要做的事情了。\n\n##### 2.3 运行时加载 Agent\n\n比起 JVM 启动时加载 Agent，运行时加载 Agent 就比较有诱惑力了，因为运行时加载 Agent 的能力给我们提供了很强的动态性，我们可以在需要的时候加载 Agent 来进行一些工作。因为是动态的，我们可以按照需求来加载所需要的 Agent，下面来分析一下动态加载 Agent 的相关技术细节。\n\n###### 2.3.1 AttachListener\n\nAttach 机制通过 Attach Listener 线程来进行相关事务的处理，下面来看一下 Attach Listener 线程是如何初始化的。\n\n```\n// Starts the Attach Listener thread\nvoid AttachListener::init() {\n  // 创建线程相关部分代码被去掉了\n  const char thread_name[] = \"Attach Listener\";\n  Handle string = java_lang_String::create_from_str(thread_name, THREAD);\n  { MutexLocker mu(Threads_lock);\n    JavaThread* listener_thread = new JavaThread(&attach_listener_thread_entry);\n    // ...\n  }\n}\n```\n\n我们知道，一个线程启动之后都需要指定一个入口来执行代码，Attach Listener 线程的入口是 attach_listener_thread_entry，下面看一下这个函数的具体实现：\n\n```\nstatic void attach_listener_thread_entry(JavaThread* thread, TRAPS) {\n  AttachListener::set_initialized();\n  for (;;) {\n      AttachOperation* op = AttachListener::dequeue();\n      // find the function to dispatch too\n      AttachOperationFunctionInfo* info = NULL;\n      for (int i=0; funcs[i].name != NULL; i++) {\n        const char* name = funcs[i].name;\n        if (strcmp(op->name(), name) == 0) {\n          info = &(funcs[i]); break;\n        }}\n       // dispatch to the function that implements this operation\n        res = (info->func)(op, &st);\n      //...\n    }\n}\n```\n\n整个函数执行逻辑，大概是这样的：\n\n拉取一个需要执行的任务：AttachListener::dequeue。\n\n查询匹配的命令处理函数。\n\n执行匹配到的命令执行函数。\n\n其中第二步里面存在一个命令函数表，整个表如下：\n\n```\nstatic AttachOperationFunctionInfo funcs[] = {\n  { \"agentProperties\",  get_agent_properties },\n  { \"datadump\",         data_dump },\n  { \"dumpheap\",         dump_heap },\n  { \"load\",             load_agent },\n  { \"properties\",       get_system_properties },\n  { \"threaddump\",       thread_dump },\n  { \"inspectheap\",      heap_inspection },\n  { \"setflag\",          set_flag },\n  { \"printflag\",        print_flag },\n  { \"jcmd\",             jcmd },\n  { NULL,               NULL }\n};\n```\n\n对于加载 Agent 来说，命令就是“load”。现在，我们知道了 Attach Listener 大概的工作模式，但是还是不太清楚任务从哪来，这个秘密就藏在 AttachListener::dequeue 这行代码里面，接下来我们来分析一下 dequeue 这个函数：\n\n```\nLinuxAttachOperation* LinuxAttachListener::dequeue() {\n  for (;;) {\n    // wait for client to connect\n    struct sockaddr addr;\n    socklen_t len = sizeof(addr);\n    RESTARTABLE(::accept(listener(), &addr, &len), s);\n    // get the credentials of the peer and check the effective uid/guid\n    // - check with jeff on this.\n    struct ucred cred_info;\n    socklen_t optlen = sizeof(cred_info);\n    if (::getsockopt(s, SOL_SOCKET, SO_PEERCRED, (void*)&cred_info, &optlen) == -1) {\n      ::close(s);\n      continue;\n    }\n    // peer credential look okay so we read the request\n    LinuxAttachOperation* op = read_request(s);\n    return op;\n  }\n}\n```\n\n这是 Linux 上的实现，不同的操作系统实现方式不太一样。上面的代码表面，Attach Listener 在某个端口监听着，通过 accept 来接收一个连接，\n然后从这个连接里面将请求读取出来，然后将请求包装成一个 AttachOperation 类型的对象，之后就会从表里查询对应的处理函数，然后进行处理。\n\n```\nAttach Listener使用一种被称为“懒加载”的策略进行初始化，也就是说，JVM启动的时候Attach Listener并不一定会启动起来。下面我们来分析一下这种“懒加载”策略的具体实现方案。\n  // Start Attach Listener if +StartAttachListener or it can't be started lazily\n  if (!DisableAttachMechanism) {\n    AttachListener::vm_start();\n    if (StartAttachListener || AttachListener::init_at_startup()) {\n      AttachListener::init();\n    }\n  }\n// Attach Listener is started lazily except in the case when\n// +ReduseSignalUsage is used\nbool AttachListener::init_at_startup() {\n  if (ReduceSignalUsage) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n上面的代码截取自 create_vm 函数，DisableAttachMechanism、StartAttachListener 和 ReduceSignalUsage 这三个变量默认都是 false，所以 AttachListener::init();这行代码不会在 create_vm 的时候执行，而 vm_start 会执行。下面来看一下这个函数的实现细节：\n\n```\nvoid AttachListener::vm_start() {\n  char fn[UNIX_PATH_MAX];\n  struct stat64 st;\n  int ret;\n  int n = snprintf(fn, UNIX_PATH_MAX, \"%s/.java_pid%d\",\n           os::get_temp_directory(), os::current_process_id());\n  assert(n < (int)UNIX_PATH_MAX, \"java_pid file name buffer overflow\");\n  RESTARTABLE(::stat64(fn, &st), ret);\n  if (ret == 0) {\n    ret = ::unlink(fn);\n    if (ret == -1) {\n      log_debug(attach)(\"Failed to remove stale attach pid file at %s\", fn);\n    }\n  }\n}\n```\n\n这是在 Linux 上的实现，是将/tmp/目录下的.java_pid{pid}文件删除，后面在创建 Attach Listener 线程的时候会创建出来这个文件。上面说到，AttachListener::init()这行代码不会在 create_vm 的时候执行，这行代码的实现已经在上文中分析了，就是创建 Attach Listener 线程，并监听其他 JVM 的命令请求。现在来分析一下这行代码是什么时候被调用的，也就是“懒加载”到底是怎么加载起来的。\n\n// Signal Dispatcher needs to be started before VMInit event is posted\nos::signal_init();\n这是 create_vm 中的一段代码，看起来跟信号相关，其实 Attach 机制就是使用信号来实现“懒加载“的。下面我们来仔细地分析一下这个过程。\n\n```\nvoid os::signal_init() {\n  if (!ReduceSignalUsage) {\n    // Setup JavaThread for processing signals\n    EXCEPTION_MARK;\n    Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::java_lang_Thread(), true, CHECK);\n    instanceKlassHandle klass (THREAD, k);\n    instanceHandle thread_oop = klass->allocate_instance_handle(CHECK);\n    const char thread_name[] = \"Signal Dispatcher\";\n    Handle string = java_lang_String::create_from_str(thread_name, CHECK);\n    // Initialize thread_oop to put it into the system threadGroup\n    Handle thread_group (THREAD, Universe::system_thread_group());\n    JavaValue result(T_VOID);\n    JavaCalls::call_special(&result, thread_oop,klass,vmSymbols::object_initializer_name(),vmSymbols::threadgroup_string_void_signature(),\n                           thread_group,string,CHECK);\n    KlassHandle group(THREAD, SystemDictionary::ThreadGroup_klass());\n    JavaCalls::call_special(&result,thread_group,group,vmSymbols::add_method_name(),vmSymbols::thread_void_signature(),thread_oop,CHECK);\n    os::signal_init_pd();\n    { MutexLocker mu(Threads_lock);\n      JavaThread* signal_thread = new JavaThread(&signal_thread_entry);\n     // ...\n    }\n    // Handle ^BREAK\n    os::signal(SIGBREAK, os::user_handler());\n  }\n}\n```\n\nJVM 创建了一个新的进程来实现信号处理，这个线程叫“Signal Dispatcher”，一个线程创建之后需要有一个入口，“Signal Dispatcher”的入口是 signal_thread_entry：\n\n这段代码截取自 signal_thread_entry 函数，截取中的内容是和 Attach 机制信号处理相关的代码。这段代码的意思是，当接收到“SIGBREAK”信号，就执行接下来的代码，这个信号是需要 Attach 到 JVM 上的信号发出来，这个后面会再分析。我们先来看一句关键的代码：AttachListener::is_init_trigger()：\n\n```\nbool AttachListener::is_init_trigger() {\n  if (init_at_startup() || is_initialized()) {\n    return false;               // initialized at startup or already initialized\n  }\n  char fn[PATH_MAX+1];\n  sprintf(fn, \".attach_pid%d\", os::current_process_id());\n  int ret;\n  struct stat64 st;\n  RESTARTABLE(::stat64(fn, &st), ret);\n  if (ret == -1) {\n    log_trace(attach)(\"Failed to find attach file: %s, trying alternate\", fn);\n    snprintf(fn, sizeof(fn), \"%s/.attach_pid%d\", os::get_temp_directory(), os::current_process_id());\n    RESTARTABLE(::stat64(fn, &st), ret);\n  }\n  if (ret == 0) {\n    // simple check to avoid starting the attach mechanism when\n    // a bogus user creates the file\n    if (st.st_uid == geteuid()) {\n      init();\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n首先检查了一下是否在 JVM 启动时启动了 Attach Listener，或者是否已经启动过。如果没有，才继续执行，在/tmp 目录下创建一个叫做.attach_pid%d 的文件，然后执行 AttachListener 的 init 函数，这个函数就是用来创建 Attach Listener 线程的函数，上面已经提到多次并进行了分析。到此，我们知道 Attach 机制的奥秘所在，也就是 Attach Listener 线程的创建依靠 Signal Dispatcher 线程，Signal Dispatcher 是用来处理信号的线程，当 Signal Dispatcher 线程接收到“SIGBREAK”信号之后，就会执行初始化 Attach Listener 的工作。\n\n###### 2.3.2 运行时加载 Agent 的实现\n\n我们继续分析，到底是如何将一个 Agent 挂载到运行着的目标 JVM 上，在上文中提到了一段代码，用来进行运行时挂载 Agent，可以参考上文中展示的关于“attachAgentToTargetJvm”方法的代码。这个方法里面的关键是调用 VirtualMachine 的 attach 方法进行 Agent 挂载的功能。下面我们就来分析一下 VirtualMachine 的 attach 方法具体是怎么实现的。\n\n```\npublic static VirtualMachine attach(String var0) throws AttachNotSupportedException, IOException {\n    if (var0 == null) {\n        throw new NullPointerException(\"id cannot be null\");\n    } else {\n        List var1 = AttachProvider.providers();\n        if (var1.size() == 0) {\n            throw new AttachNotSupportedException(\"no providers installed\");\n        } else {\n            AttachNotSupportedException var2 = null;\n            Iterator var3 = var1.iterator();\n            while(var3.hasNext()) {\n                AttachProvider var4 = (AttachProvider)var3.next();\n                try {\n                    return var4.attachVirtualMachine(var0);\n                } catch (AttachNotSupportedException var6) {\n                    var2 = var6;\n                }\n            }\n            throw var2;\n        }\n    }\n}\n```\n\n这个方法通过 attachVirtualMachine 方法进行 attach 操作，在 MacOS 系统中，AttachProvider 的实现类是 BsdAttachProvider。我们来看一下 BsdAttachProvider 的 attachVirtualMachine 方法是如何实现的：\n\n```\npublic VirtualMachine attachVirtualMachine(String var1) throws AttachNotSupportedException, IOException {\n        this.checkAttachPermission();\n        this.testAttachable(var1);\n        return new BsdVirtualMachine(this, var1);\n    }\nBsdVirtualMachine(AttachProvider var1, String var2) throws AttachNotSupportedException, IOException {\n        int var3 = Integer.parseInt(var2);\n        this.path = this.findSocketFile(var3);\n        if (this.path == null) {\n            File var4 = new File(tmpdir, \".attach_pid\" + var3);\n            createAttachFile(var4.getPath());\n            try {\n                sendQuitTo(var3);\n                int var5 = 0;\n                long var6 = 200L;\n                int var8 = (int)(this.attachTimeout() / var6);\n                do {\n                    try {\n                        Thread.sleep(var6);\n                    } catch (InterruptedException var21) {\n                        ;\n                    }\n                    this.path = this.findSocketFile(var3);\n                    ++var5;\n                } while(var5 <= var8 && this.path == null);\n            } finally {\n                var4.delete();\n            }\n        }\n        int var24 = socket();\n        connect(var24, this.path);\n    }\n    private String findSocketFile(int var1) {\n        String var2 = \".java_pid\" + var1;\n        File var3 = new File(tmpdir, var2);\n        return var3.exists() ? var3.getPath() : null;\n    }\n```\n\nfindSocketFile 方法用来查询目标 JVM 上是否已经启动了 Attach Listener，它通过检查\"tmp/\"目录下是否存在 java_pid{pid}来进行实现。如果已经存在了，则说明 Attach 机制已经准备就绪，可以接受客户端的命令了，这个时候客户端就可以通过 connect 连接到目标 JVM 进行命令的发送，比如可以发送“load”命令来加载 Agent。如果 java_pid{pid}文件还不存在，则需要通过 sendQuitTo 方法向目标 JVM 发送一个“SIGBREAK”信号，让它初始化 Attach Listener 线程并准备接受客户端连接。可以看到，发送了信号之后客户端会循环等待 java_pid{pid}这个文件，之后再通过 connect 连接到目标 JVM 上。\n\n###### 2.3.3 load 命令的实现\n\n下面来分析一下，“load”命令在 JVM 层面的实现：\n\n```\nstatic jint load_agent(AttachOperation* op, outputStream* out) {\n  // get agent name and options\n  const char* agent = op->arg(0);\n  const char* absParam = op->arg(1);\n  const char* options = op->arg(2);\n  // If loading a java agent then need to ensure that the java.instrument module is loaded\n  if (strcmp(agent, \"instrument\") == 0) {\n    Thread* THREAD = Thread::current();\n    ResourceMark rm(THREAD);\n    HandleMark hm(THREAD);\n    JavaValue result(T_OBJECT);\n    Handle h_module_name = java_lang_String::create_from_str(\"java.instrument\", THREAD);\n    JavaCalls::call_static(&result,SystemDictionary::module_Modules_klass(),vmSymbols::loadModule_name(),\n                           vmSymbols::loadModule_signature(),h_module_name,THREAD);\n  }\n  return JvmtiExport::load_agent_library(agent, absParam, options, out);\n}\n```\n\n这个函数先确保加载了 java.instrument 模块，之后真正执行 Agent 加载的函数是 load_agent_library ,这个函数的套路就是加载 Agent 动态链接库，如果是通过 Java instrument API 实现的 Agent，则加载的是 libinstrument 动态链接库，然后通过 libinstrument 里面的代码实现运行 agentmain 方法的逻辑，这一部分内容和 libinstrument 实现 premain 方法运行的逻辑其实差不多，这里不再做分析。至此，我们对 Java Agent 技术已经有了一个全面而细致的了解。\n\n#### 3. 动态替换类字节码技术\n\n##### 3.1 动态字节码修改的限制\n\n上文中已经详细分析了 Agent 技术的实现，我们使用 Java Instrumentation API 来完成动态类修改的功能，在 Instrumentation 接口中，通过 addTransformer 方法来增加一个类转换器，类转换器由类 ClassFileTransformer 接口实现。ClassFileTransformer 接口中唯一的方法 transform 用于实现类转换，当类被加载的时候，就会调用 transform 方法，进行类转换。在运行时，我们可以通过 Instrumentation 的 redefineClasses 方法进行类重定义，在方法上有一段注释需要特别注意：\n\n- The redefinition may change method bodies, the constant pool and attributes.\n- The redefinition must not add, remove or rename fields or methods, change the\n- signatures of methods, or change inheritance. These restrictions maybe be\n- lifted in future versions. The class file bytes are not checked, verified and installed\n- until after the transformations have been applied, if the resultant bytes are in\n- error this method will throw an exception.\n  这里面提到，我们不可以增加、删除或者重命名字段和方法，改变方法的签名或者类的继承关系。认识到这一点很重要，当我们通过 ASM 获取到增强的字节码之后，如果增强后的字节码没有遵守这些规则，那么调用 redefineClasses 方法来进行类的重定义就会失败。那 redefineClasses 方法具体是怎么实现类的重定义的呢？它对运行时的 JVM 会造成什么样的影响呢？下面来分析 redefineClasses 的实现细节。\n\n##### 3.2 重定义类字节码的实现细节\n\n上文中我们提到，libinstrument 动态链接库中，JPLISAgent 不仅实现了 Agent 入口代码执行的路由，而且还是 Java 代码与 JVMTI 之间的一道桥梁。我们在 Java 代码中调用 Java Instrumentation API 的 redefineClasses，其实会调用 libinstrument 中的相关代码，我们来分析一下这条路径。\n\n```\npublic void redefineClasses(ClassDefinition... var1) throws ClassNotFoundException {\n    if (!this.isRedefineClassesSupported()) {\n        throw new UnsupportedOperationException(\"redefineClasses is not supported in this environment\");\n    } else if (var1 == null) {\n        throw new NullPointerException(\"null passed as 'definitions' in redefineClasses\");\n    } else {\n        for(int var2 = 0; var2 < var1.length; ++var2) {\n            if (var1[var2] == null) {\n                throw new NullPointerException(\"element of 'definitions' is null in redefineClasses\");\n            }\n        }\n        if (var1.length != 0) {\n            this.redefineClasses0(this.mNativeAgent, var1);\n        }\n    }\n}\nprivate native void redefineClasses0(long var1, ClassDefinition[] var3) throws ClassNotFoundException;\n```\n\n这是 InstrumentationImpl 中的 redefineClasses 实现，该方法的具体实现依赖一个 Native 方法 redefineClasses()，我们可以在 libinstrument 中找到这个 Native 方法的实现：\n\n```\nJNIEXPORT void JNICALL Java_sun_instrument_InstrumentationImpl_redefineClasses0\n  (JNIEnv * jnienv, jobject implThis, jlong agent, jobjectArray classDefinitions) {\n    redefineClasses(jnienv, (JPLISAgent*)(intptr_t)agent, classDefinitions);\n}\n```\n\nredefineClasses 这个函数的实现比较复杂，代码很长。下面是一段关键的代码片段：\n\n可以看到，其实是调用了 JVMTI 的 RetransformClasses 函数来完成类的重定义细节。\n\n```\n// class_count - pre-checked to be greater than or equal to 0\n// class_definitions - pre-checked for NULL\njvmtiError JvmtiEnv::RedefineClasses(jint class_count, const jvmtiClassDefinition* class_definitions) {\n//TODO: add locking\n  VM_RedefineClasses op(class_count, class_definitions, jvmti_class_load_kind_redefine);\n  VMThread::execute(&op);\n  return (op.check_error());\n} /* end RedefineClasses */\n```\n\n重定义类的请求会被 JVM 包装成一个 VM_RedefineClasses 类型的 VM_Operation，VM_Operation 是 JVM 内部的一些操作的基类，包括 GC 操作等。VM_Operation 由 VMThread 来执行，新的 VM_Operation 操作会被添加到 VMThread 的运行队列中去，VMThread 会不断从队列里面拉取 VM_Operation 并调用其 doit 等函数执行具体的操作。VM_RedefineClasses 函数的流程较为复杂，下面是 VM_RedefineClasses 的大致流程：\n\n加载新的字节码，合并常量池，并且对新的字节码进行校验工作\n// Load the caller's new class definition(s) into \\_scratch_classes.\n// Constant pool merging work is done here as needed. Also calls\n// compare_and_normalize_class_versions() to verify the class\n// definition(s).\njvmtiError load_new_class_versions(TRAPS);\n清除方法上的断点\n\n```\n  // Remove all breakpoints in methods of this class\n  JvmtiBreakpoints& jvmti_breakpoints = JvmtiCurrentBreakpoints::get_jvmti_breakpoints();\n  jvmti_breakpoints.clearall_in_class_at_safepoint(the_class());\nJIT逆优化\n\n  // Deoptimize all compiled code that depends on this class\n  flush_dependent_code(the_class, THREAD);\n```\n\n进行字节码替换工作，需要进行更新类 itable/vtable 等操作\n进行类重定义通知\n\n```\n SystemDictionary::notice_modification();\n```\n\nVM_RedefineClasses 实现比较复杂的，详细实现可以参考 RedefineClasses 的实现。\n\n#### 4. Java-debug-tool 设计与实现\n\nJava-debug-tool 是一个使用 Java Instrument API 来实现的动态调试工具，它通过在目标 JVM 上启动一个 TcpServer 来和调试客户端通信。\n调试客户端通过命令行来发送调试命令给 TcpServer，TcpServer 中有专门用来处理命令的 handler，handler 处理完命令之后会将结果发送回客户端，\n客户端通过处理将调试结果展示出来。下面将详细介绍 Java-debug-tool 的整体设计和实现。\n\n##### 4.1 Java-debug-tool 整体架构\n\nJava-debug-tool 包括一个 Java Agent 和一个用于处理调试命令的核心 API，核心 API 通过一个自定义的类加载器加载进来，以保证目标 JVM 的类不会被污染。\n整体上 Java-debug-tool 的设计是一个 Client-Server 的架构，命令客户端需要完整的完成一个命令之后才能继续执行下一个调试命令。\nJava-debug-tool 支持多人同时进行调试，下面是整体架构图：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE44pMzDfgj8Oe9fFbU2wHn35PjibaPxvOnFMmwx1Jzv9Tsy1kxn41Q7NQ/640)\n\n下面对每一层做简单介绍：\n\n- 交互层：负责将程序员的输入转换成调试交互协议，并且将调试信息呈现出来。\n\n- 连接管理层：负责管理客户端连接，从连接中读调试协议数据并解码，对调试结果编码并将其写到连接中去；同时将那些超时未活动的连接关闭。\n\n- 业务逻辑层：实现调试命令处理，包括命令分发、数据收集、数据处理等过程。\n\n- 基础实现层：Java-debug-tool 实现的底层依赖，通过 Java Instrumentation 提供的 API 进行类查找、类重定义等能力，Java Instrumentation 底层依赖 JVMTI 来完成具体的功能。\n\n在 Agent 被挂载到目标 JVM 上之后，Java-debug-tool 会安排一个 Spy 在目标 JVM 内活动，这个 Spy 负责将目标 JVM 内部的相关调试数据转移到命令处理模块，\n命令处理模块会处理这些数据，然后给客户端返回调试结果。命令处理模块会增强目标类的字节码来达到数据获取的目的\n，多个客户端可以共享一份增强过的字节码，无需重复增强。下面从 Java-debug-tool 的字节码增强方案、命令设计与实现等角度详细说明。\n\n##### 4.2 Java-debug-tool 的字节码增强方案\n\nJava-debug-tool 使用字节码增强来获取到方法运行时的信息，比如方法入参、出参等，可以在不同的字节码位置进行增强，这种行为可以称为“插桩”，\n每个“桩”用于获取数据并将他转储出去。Java-debug-tool 具备强大的插桩能力，不同的桩负责获取不同类别的数据，下面是 Java-debug-tool 目前所支持的“桩”：\n\n- 方法进入点：用于获取方法入参信息。\n\n- Fields 获取点 1：在方法执行前获取到对象的字段信息。\n\n- 变量存储点：获取局部变量信息。\n\n- Fields 获取点 2：在方法退出前获取到对象的字段信息。\n\n- 方法退出点：用于获取方法返回值。\n\n- 抛出异常点：用于获取方法抛出的异常信息。\n\n通过上面这些代码桩，Java-debug-tool 可以收集到丰富的方法执行信息，经过处理可以返回更加可视化的调试结果。\n\n###### 4.2.1 字节码增强\n\nJava-debug-tool 在实现上使用了 ASM 工具来进行字节码增强，并且每个插桩点都可以进行配置，如果不想要什么信息，则没必要进行对应的插桩操作。这种可配置的设计是非常有必要的，因为有时候我们仅仅是想要知道方法的入参和出参，但 Java-debug-tool 却给我们返回了所有的调试信息，这样我们就得在众多的输出中找到我们所关注的内容。如果可以进行配置，则除了入参点和出参点外其他的桩都不插，那么就可以快速看到我们想要的调试数据，这种设计的本质是为了让调试者更加专注。下面是 Java-debug-tool 的字节码增强工作方式：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4jIYWODnoWDfEAhWyia6LIsKKwIkT5FEMxEzrFKTUV5WGdAEMmlno0hA/640)\n\n\n图 4-2-1\n\n如图 4-2-1 所示，当调试者发出调试命令之后，Java-debug-tool 会识别命令并判断是否需要进行字节码增强，如果命令需要增强字节码，则判断当前类+当前方法是否已经被增强过。上文已经提到，字节码替换是有一定损耗的，这种具有损耗的操作发生的次数越少越好，所以字节码替换操作会被记录起来，后续命令直接使用即可，不需要重复进行字节码增强，字节码增强还涉及多个调试客户端的协同工作问题，当一个客户端增强了一个类的字节码之后，这个客户端就锁定了该字节码，其他客户端变成只读，无法对该类进行字节码增强，只有当持有锁的客户端主动释放锁或者断开连接之后，其他客户端才能继续增强该类的字节码。\n字节码增强模块收到字节码增强请求之后，会判断每个增强点是否需要插桩，这个判断的根据就是上文提到的插桩配置，之后字节码增强模块会生成新的字节码，Java-debug-tool 将执行字节码替换操作，之后就可以进行调试数据收集了。\n经过字节码增强之后，原来的方法中会插入收集运行时数据的代码，这些代码在方法被调用的时候执行，获取到诸如方法入参、局部变量等信息，这些信息将传递给数据收集装置进行处理。数据收集的工作通过 Advice 完成，每个客户端同一时间只能注册一个 Advice 到 Java-debug-tool 调试模块上，多个客户端可以同时注册自己的 Advice 到调试模块上。Advice 负责收集数据并进行判断，如果当前数据符合调试命令的要求，Java-debug-tool 就会卸载这个 Advice，Advice 的数据就会被转移到 Java-debug-tool 的命令结果处理模块进行处理，并将结果发送到客户端。\n\n###### 4.2.2 Advice 的工作方式\n\nAdvice 是调试数据收集器，不同的调试策略会对应不同的 Advice。Advice 是工作在目标 JVM 的线程内部的，它需要轻量级和高效，意味着 Advice 不能做太过于复杂的事情，它的核心接口“match”用来判断本次收集到的调试数据是否满足调试需求。如果满足，那么 Java-debug-tool 就会将其卸载，否则会继续让他收集调试数据，这种“加载 Advice” -> “卸载 Advice”的工作模式具备很好的灵活性。\n关于 Advice，需要说明的另外一点就是线程安全，因为它加载之后会运行在目标 JVM 的线程中，目标 JVM 的方法极有可能是多线程访问的，这也就是说，Advice 需要有能力处理多个线程同时访问方法的能力，如果 Advice 处理不当，则可能会收集到杂乱无章的调试数据。下面的图片展示了 Advice 和 Java-debug-tool 调试分析模块、目标方法执行以及调试客户端等模块的关系。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4icUzSicIdgKaWyBsIVgmiaOHEPR5mUvyqDOg3e6ELs0aFF1Ub23RjnNsQ/640)\n图 4-2-2\nAdvice 的首次挂载由 Java-debug-tool 的命令处理器完成，当一次调试数据收集完成之后，调试数据处理模块会自动卸载 Advice，然后进行判断，如果调试数据符合 Advice 的策略，则直接将数据交由数据处理模块进行处理，否则会清空调试数据，并再次将 Advice 挂载到目标方法上去，等待下一次调试数据。非首次挂载由调试数据处理模块进行，它借助 Advice 按需取数据，如果不符合需求，则继续挂载 Advice 来获取数据，否则对调试数据进行处理并返回给客户端。\n\n##### 4.3 Java-debug-tool 的命令设计与实现\n\n###### 4.3.1 命令执行\n\n上文已经完整的描述了 Java-debug-tool 的设计以及核心技术方案，本小节将详细介绍 Java-debug-tool 的命令设计与实现。首先需要将一个调试命令的执行流程描述清楚，下面是一张用来表示命令请求处理流程的图片：\n\n![](https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4NAFPL7rkntPMiaicJtbn84MnRNibQkPhUibZ5cuWpZpcibYxx0vR41PHNDw/640)\n图 4-3-1\n图 4-3-1 简单的描述了 Java-debug-tool 的命令处理方式，客户端连接到服务端之后，会进行一些协议解析、协议认证、协议填充等工作，之后将进行命令分发。服务端如果发现客户端的命令不合法，则会立即返回错误信息，否则再进行命令处理。命令处理属于典型的三段式处理，前置命令处理、命令处理以及后置命令处理，同时会对命令处理过程中的异常信息进行捕获处理，三段式处理的好处是命令处理被拆成了多个阶段，多个阶段负责不同的职责。前置命令处理用来做一些命令权限控制的工作，并填充一些类似命令处理开始时间戳等信息，命令处理就是通过字节码增强，挂载 Advice 进行数据收集，再经过数据处理来产生命令结果的过程，后置处理则用来处理一些连接关闭、字节码解锁等事项。\nJava-debug-tool 允许客户端设置一个命令执行超时时间，超过这个时间则认为命令没有结果，如果客户端没有设置自己的超时时间，就使用默认的超时时间进行超时控制。Java-debug-tool 通过设计了两阶段的超时检测机制来实现命令执行超时功能：首先，第一阶段超时触发，则 Java-debug-tool 会友好的警告命令处理模块处理时间已经超时，需要立即停止命令执行，这允许命令自己做一些现场清理工作，当然需要命令执行线程自己感知到这种超时警告；当第二阶段超时触发，则 Java-debug-tool 认为命令必须结束执行，会强行打断命令执行线程。超时机制的目的是为了不让命令执行太长时间，命令如果长时间没有收集到调试数据，则应该停止执行，并思考是否调试了一个错误的方法。当然，超时机制还可以定期清理那些因为未知原因断开连接的客户端持有的调试资源，比如字节码锁。\n\n###### 4.3.4 获取方法执行视图\n\nJava-debug-tool 通过下面的信息来向调试者呈现出一次方法执行的视图：\n正在调试的方法信息。\n\n方法调用堆栈。\n\n调试耗时，包括对目标 JVM 造成的 STW 时间。\n\n方法入参，包括入参的类型及参数值。\n\n方法的执行路径。\n\n代码执行耗时。\n\n局部变量信息。\n\n方法返回结果。\n\n方法抛出的异常。\n\n对象字段值快照。\n\n图 4-3-2 展示了 Java-debug-tool 获取到正在运行的方法的执行视图的信息。\n![](https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4TYKGnNuqCgHOSkZiabggzJUESbqSDMWRZM1OtVNGziasnSAiae7ibYicAKw/640?wx_fmt=png)\n\n图 4-3-2\n\n##### 4.4 Java-debug-tool 与同类产品对比分析\n\nJava-debug-tool 的同类产品主要是 greys，其他类似的工具大部分都是基于 greys 进行的二次开发，所以直接选择 greys 来和 Java-debug-tool 进行对比。\n\n#### 5. 总结\n\n本文详细剖析了 Java 动态调试关键技术的实现细节，并介绍了我们基于 Java 动态调试技术结合实际故障排查场景进行的一点探索实践；动态调试技术为研发人员进行线上问题排查提供了一种新的思路，我们基于动态调试技术解决了传统断点调试存在的问题，使得可以将断点调试这种技术应用在线上，以线下调试的思维来进行线上调试，提高问题排查效率。\n\n#### 6. 参考文献\n\nASM 4 guide\n\nJava Virtual Machine Specification\n\nJVM Tool Interface\n\nalibaba arthas\n\nopenjdk\n\n#### 摘自\n\nhttps://mp.weixin.qq.com/s/ZlNcvwJ_swspifWTLHA92Q\n","slug":"language/java/bytecode/Java动态调试技术原理及实践","published":1,"date":"2021-09-14T14:54:21.741Z","updated":"2021-09-14T14:54:21.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyj6003wu6uk010v8b6j","content":"<h3 id=\"Java动态调试技术原理及实践\"><a href=\"#Java动态调试技术原理及实践\" class=\"headerlink\" title=\"Java动态调试技术原理及实践\"></a>Java动态调试技术原理及实践</h3><h4 id=\"1-动态调试要解决的问题\"><a href=\"#1-动态调试要解决的问题\" class=\"headerlink\" title=\"1. 动态调试要解决的问题\"></a>1. 动态调试要解决的问题</h4><p>断点调试是我们最常使用的调试手段，它可以获取到方法执行过程中的变量信息，并可以观察到方法的执行路径。<br>但断点调试会在断点位置停顿，使得整个应用停止响应。在线上停顿应用是致命的，动态调试技术给了我们创造新的调试模式的想象空间。<br>本文将研究 Java 语言中的动态调试技术，首先概括 Java 动态调试所涉及的技术基础，接着介绍我们在 Java 动态调试领域的思考及实践，<br>通过结合实际业务场景，设计并实现了一种具备动态性的断点调试工具 Java-debug-tool，显著提高了故障排查效率。</p>\n<h4 id=\"2-Java-Agent-技术\"><a href=\"#2-Java-Agent-技术\" class=\"headerlink\" title=\"2. Java Agent 技术\"></a>2. Java Agent 技术</h4><p>JVMTI （JVM Tool Interface）是 Java 虚拟机对外提供的 Native 编程接口，通过 JVMTI，外部进程可以获取到运行时 JVM 的诸多信息，比如线程、GC 等。<br>Agent 是一个运行在目标 JVM 的特定程序，它的职责是负责从目标 JVM 中获取数据，然后将数据传递给外部进程。<br>加载 Agent 的时机可以是目标 JVM 启动之时，也可以是在目标 JVM 运行时进行加载，而在目标 JVM 运行时进行 Agent 加载具备动态性，<br>对于时机未知的 Debug 场景来说非常实用。下面将详细分析 Java Agent 技术的实现细节。</p>\n<h5 id=\"2-1-Agent-的实现模式\"><a href=\"#2-1-Agent-的实现模式\" class=\"headerlink\" title=\"2.1 Agent 的实现模式\"></a>2.1 Agent 的实现模式</h5><p>JVMTI 是一套 Native 接口，在 Java SE 5 之前，要实现一个 Agent 只能通过编写 Native 代码来实现。<br>从 Java SE 5 开始，可以使用 Java 的 Instrumentation 接口（java.lang.instrument）来编写 Agent。<br>无论是通过 Native 的方式还是通过 Java Instrumentation 接口的方式来编写 Agent，它们的工作都是借助 JVMTI 来进行完成，<br>下面介绍通过 Java Instrumentation 接口编写 Agent 的方法。</p>\n<h6 id=\"2-1-1-通过-Java-Instrumentation-API\"><a href=\"#2-1-1-通过-Java-Instrumentation-API\" class=\"headerlink\" title=\"2.1.1 通过 Java Instrumentation API\"></a>2.1.1 通过 Java Instrumentation API</h6><p>实现 Agent 启动方法</p>\n<p>Java Agent 支持目标 JVM 启动时加载，也支持在目标 JVM 运行时加载，这两种不同的加载模式会使用不同的入口函数，<br>如果需要在目标 JVM 启动的同时加载 Agent，那么可以选择实现下面的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1] public static void premain(String agentArgs, Instrumentation inst);</span><br><span class=\"line\">[2] public static void premain(String agentArgs);</span><br></pre></td></tr></table></figure>\n\n<p>JVM 将首先寻找[1]，如果没有发现[1]，再寻找[2]。如果希望在目标 JVM 运行时加载 Agent，则需要实现下面的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1] public static void agentmain(String agentArgs, Instrumentation inst);</span><br><span class=\"line\">[2] public static void agentmain(String agentArgs);</span><br></pre></td></tr></table></figure>\n\n<p>这两组方法的第一个参数 AgentArgs 是随同 “– javaagent”一起传入的程序参数，如果这个字符串代表了多个参数，就需要自己解析这些参数。<br>inst 是 Instrumentation 类型的对象，是 JVM 自动传入的，我们可以拿这个参数进行类增强等操作。</p>\n<p>指定 Main-Class<br>Agent 需要打包成一个 jar 包，在 ManiFest 属性中指定“Premain-Class”或者“Agent-Class”：<br>Premain-Class: class<br>Agent-Class: class<br>挂载到目标 JVM<br>将编写的 Agent 打成 jar 包后，就可以挂载到目标 JVM 上去了。如果选择在目标 JVM 启动时加载 Agent，则可以使用 “-javaagent:<jarpath>[=<option>]”，<br>具体的使用方法可以使用“Java -Help”来查看。如果想要在运行时挂载 Agent 到目标 JVM，就需要做一些额外的开发了。<br>com.sun.tools.attach.VirtualMachine 这个类代表一个 JVM 抽象，可以通过这个类找到目标 JVM，并且将 Agent 挂载到目标 JVM 上。<br>下面是使用 com.sun.tools.attach.VirtualMachine 进行动态挂载 Agent 的一般实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void attachAgentToTargetJVM() throws Exception &#123;</span><br><span class=\"line\">    List&lt;VirtualMachineDescriptor&gt; virtualMachineDescriptors = VirtualMachine.list();</span><br><span class=\"line\">    VirtualMachineDescriptor targetVM = null;</span><br><span class=\"line\">    for (VirtualMachineDescriptor descriptor : virtualMachineDescriptors) &#123;</span><br><span class=\"line\">        if (descriptor.id().equals(configure.getPid())) &#123;</span><br><span class=\"line\">            targetVM = descriptor;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (targetVM == null) &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;could not find the target jvm by process id:&quot; + configure.getPid());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    VirtualMachine virtualMachine = null;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        virtualMachine = VirtualMachine.attach(targetVM);</span><br><span class=\"line\">        virtualMachine.loadAgent(&quot;&#123;agent&#125;&quot;, &quot;&#123;params&#125;&quot;);</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        if (virtualMachine != null) &#123;</span><br><span class=\"line\">            virtualMachine.detach();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先通过指定的进程 ID 找到目标 JVM，然后通过 Attach 挂载到目标 JVM 上，执行加载 Agent 操作。<br>VirtualMachine 的 Attach 方法就是用来将 Agent 挂载到目标 JVM 上去的，而 Detach 则是将 Agent 从目标 JVM 卸载。关<br>于 Agent 是如何挂载到目标 JVM 上的具体技术细节，将在下文中进行分析。</p>\n<h5 id=\"2-2-启动时加载-Agent\"><a href=\"#2-2-启动时加载-Agent\" class=\"headerlink\" title=\"2.2 启动时加载 Agent\"></a>2.2 启动时加载 Agent</h5><h6 id=\"2-2-1-参数解析\"><a href=\"#2-2-1-参数解析\" class=\"headerlink\" title=\"2.2.1 参数解析\"></a>2.2.1 参数解析</h6><p>创建 JVM 时，JVM 会进行参数解析，即解析那些用来配置 JVM 启动的参数，比如堆大小、GC 等；本文主要关注解析的参数为-agentlib、 -agentpath、 -javaagent，这几个参数用来指定 Agent，JVM 会根据这几个参数加载 Agent。下面来分析一下 JVM 是如何解析这几个参数的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -agentlib and -agentpath</span><br><span class=\"line\">if (match_option(option, &quot;-agentlib:&quot;, &amp;tail) ||</span><br><span class=\"line\">        (is_absolute_path = match_option(option, &quot;-agentpath:&quot;, &amp;tail))) &#123;</span><br><span class=\"line\">    if(tail != NULL) &#123;</span><br><span class=\"line\">      const char* pos = strchr(tail, &#x27;=&#x27;);</span><br><span class=\"line\">      size_t len = (pos == NULL) ? strlen(tail) : pos - tail;</span><br><span class=\"line\">      char* name = strncpy(NEW_C_HEAP_ARRAY(char, len + 1, mtArguments), tail, len);</span><br><span class=\"line\">      name[len] = &#x27;\\0&#x27;;</span><br><span class=\"line\">      char *options = NULL;</span><br><span class=\"line\">      if(pos != NULL) &#123;</span><br><span class=\"line\">        options = os::strdup_check_oom(pos + 1, mtArguments);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #if !INCLUDE_JVMTI</span><br><span class=\"line\">      if (valid_jdwp_agent(name, is_absolute_path)) &#123;</span><br><span class=\"line\">        jio_fprintf(defaultStream::error_stream(),</span><br><span class=\"line\">          &quot;Debugging agents are not supported in this VM\\n&quot;);</span><br><span class=\"line\">        return JNI_ERR;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #endif // !INCLUDE_JVMTI</span><br><span class=\"line\">      add_init_agent(name, options, is_absolute_path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  // -javaagent</span><br><span class=\"line\">  &#125; else if (match_option(option, &quot;-javaagent:&quot;, &amp;tail)) &#123;</span><br><span class=\"line\">      #if !INCLUDE_JVMTI</span><br><span class=\"line\">    jio_fprintf(defaultStream::error_stream(),</span><br><span class=\"line\">      &quot;Instrumentation agents are not supported in this VM\\n&quot;);</span><br><span class=\"line\">    return JNI_ERR;</span><br><span class=\"line\">      #else</span><br><span class=\"line\">    if (tail != NULL) &#123;</span><br><span class=\"line\">      size_t length = strlen(tail) + 1;</span><br><span class=\"line\">      char *options = NEW_C_HEAP_ARRAY(char, length, mtArguments);</span><br><span class=\"line\">      jio_snprintf(options, length, &quot;%s&quot;, tail);</span><br><span class=\"line\">      add_init_agent(&quot;instrument&quot;, options, false);</span><br><span class=\"line\">      // java agents need module java.instrument</span><br><span class=\"line\">      if (!create_numbered_property(&quot;jdk.module.addmods&quot;, &quot;java.instrument&quot;, addmods_count++)) &#123;</span><br><span class=\"line\">        return JNI_ENOMEM;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      #endif // !INCLUDE_JVMTI</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码片段截取自 hotspot/src/share/vm/runtime/arguments.cpp 中的 Arguments::parse_each_vm_init_arg(const JavaVMInitArgs* args, bool* patch_mod_javabase, Flag::Flags origin) 函数，该函数用来解析一个具体的 JVM 参数。这段代码的主要功能是解析出需要加载的 Agent 路径，然后调用 add_init_agent 函数进行解析结果的存储。下面先看一下 add_init_agent 函数的具体实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -agentlib and -agentpath arguments</span><br><span class=\"line\">static AgentLibraryList _agentList;</span><br><span class=\"line\">static void add_init_agent(const char* name, char* options, bool absolute_path)</span><br><span class=\"line\">  &#123; _agentList.add(new AgentLibrary(name, options, absolute_path, NULL)); &#125;</span><br></pre></td></tr></table></figure>\n\n<p>AgentLibraryList 是一个简单的链表结构，add_init_agent 函数将解析好的、需要加载的 Agent 添加到这个链表中，等待后续的处理。</p>\n<p>这里需要注意，解析-javaagent 参数有一些特别之处，这个参数用来指定一个我们通过 Java Instrumentation API 来编写的 Agent，Java Instrumentation API 底层依赖的是 JVMTI，对-JavaAgent 的处理也说明了这一点，在调用 add_init_agent 函数时第一个参数是“instrument”，关于加载 Agent 这个问题在下一小节进行展开。到此，我们知道在启动 JVM 时指定的 Agent 已经被 JVM 解析完存放在了一个链表结构中。下面来分析一下 JVM 是如何加载这些 Agent 的。</p>\n<h6 id=\"2-2-2-执行加载操作\"><a href=\"#2-2-2-执行加载操作\" class=\"headerlink\" title=\"2.2.2 执行加载操作\"></a>2.2.2 执行加载操作</h6><p>在创建 JVM 进程的函数中，解析完 JVM 参数之后，下面的这段代码和加载 Agent 相关：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // Launch -agentlib/-agentpath and converted -Xrun agents</span><br><span class=\"line\">if (Arguments::init_agents_at_startup()) &#123;</span><br><span class=\"line\">  create_vm_init_agents();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">static bool init_agents_at_startup() &#123;</span><br><span class=\"line\">  return !_agentList.is_empty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 JVM 判断出上一小节中解析出来的 Agent 不为空的时候，就要去调用函数 create_vm_init_agents 来加载 Agent，下面来分析一下 create_vm_init_agents 函数是如何加载 Agent 的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void Threads::create_vm_init_agents() &#123;</span><br><span class=\"line\">  AgentLibrary* agent;</span><br><span class=\"line\">  for (agent = Arguments::agents(); agent != NULL; agent = agent-&gt;next()) &#123;</span><br><span class=\"line\">    OnLoadEntry_t  on_load_entry = lookup_agent_on_load(agent);</span><br><span class=\"line\">    if (on_load_entry != NULL) &#123;</span><br><span class=\"line\">      // Invoke the Agent_OnLoad function</span><br><span class=\"line\">      jint err = (*on_load_entry)(&amp;main_vm, agent-&gt;options(), NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>create_vm_init_agents 这个函数通过遍历 Agent 链表来逐个加载 Agent。通过这段代码可以看出，首先通过 lookup_agent_on_load 来加载 Agent 并且找到 Agent_OnLoad 函数，这个函数是 Agent 的入口函数。如果没找到这个函数，则认为是加载了一个不合法的 Agent，则什么也不做，否则调用这个函数，这样 Agent 的代码就开始执行起来了。对于使用 Java Instrumentation API 来编写 Agent 的方式来说，在解析阶段观察到在 add_init_agent 函数里面传递进去的是一个叫做”instrument”的字符串，其实这是一个动态链接库。在 Linux 里面，这个库叫做 libinstrument.so，在 BSD 系统中叫做 libinstrument.dylib，该动态链接库在{JAVA_HOME}/jre/lib/目录下。</p>\n<h6 id=\"2-2-3-Instrument-动态链接库\"><a href=\"#2-2-3-Instrument-动态链接库\" class=\"headerlink\" title=\"2.2.3 Instrument 动态链接库\"></a>2.2.3 Instrument 动态链接库</h6><p>libinstrument 用来支持使用 Java Instrumentation API 来编写 Agent，在 libinstrument 中有一个非常重要的类称为：JPLISAgent（Java Programming Language Instrumentation Services Agent），它的作用是初始化所有通过 Java Instrumentation API 编写的 Agent，并且也承担着通过 JVMTI 实现 Java Instrumentation 中暴露 API 的责任。<br>我们已经知道，在 JVM 启动的时候，JVM 会通过-javaagent 参数加载 Agent。最开始加载的是 libinstrument 动态链接库，然后在动态链接库里面找到 JVMTI 的入口方法：Agent_OnLoad。下面就来分析一下在 libinstrument 动态链接库中，Agent_OnLoad 函数是怎么实现的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JNIEXPORT jint JNICALL</span><br><span class=\"line\">DEF_Agent_OnLoad(JavaVM *vm, char *tail, void * reserved) &#123;</span><br><span class=\"line\">    initerror = createNewJPLISAgent(vm, &amp;agent);</span><br><span class=\"line\">    if ( initerror == JPLIS_INIT_ERROR_NONE ) &#123;</span><br><span class=\"line\">        if (parseArgumentTail(tail, &amp;jarfile, &amp;options) != 0) &#123;</span><br><span class=\"line\">            fprintf(stderr, &quot;-javaagent: memory allocation failure.\\n&quot;);</span><br><span class=\"line\">            return JNI_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        attributes = readAttributes(jarfile);</span><br><span class=\"line\">        premainClass = getAttribute(attributes, &quot;Premain-Class&quot;);</span><br><span class=\"line\">        /* Save the jarfile name */</span><br><span class=\"line\">        agent-&gt;mJarfile = jarfile;</span><br><span class=\"line\">        /*</span><br><span class=\"line\">         * Convert JAR attributes into agent capabilities</span><br><span class=\"line\">         */</span><br><span class=\"line\">        convertCapabilityAttributes(attributes, agent);</span><br><span class=\"line\">        /*</span><br><span class=\"line\">         * Track (record) the agent class name and options data</span><br><span class=\"line\">         */</span><br><span class=\"line\">        initerror = recordCommandLineData(agent, premainClass, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码片段是经过精简的 libinstrument 中 Agent_OnLoad 实现的，大概的流程就是：先创建一个 JPLISAgent，然后将 ManiFest 中设定的一些参数解析出来， 比如（Premain-Class）等。创建了 JPLISAgent 之后，调用 initializeJPLISAgent 对这个 Agent 进行初始化操作。跟进 initializeJPLISAgent 看一下是如何初始化的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JPLISInitializationError initializeJPLISAgent(JPLISAgent *agent, JavaVM *vm, jvmtiEnv *jvmtienv) &#123;</span><br><span class=\"line\">    /* check what capabilities are available */</span><br><span class=\"line\">    checkCapabilities(agent);</span><br><span class=\"line\">    /* check phase - if live phase then we don&#x27;t need the VMInit event */</span><br><span class=\"line\">    jvmtierror = (*jvmtienv)-&gt;GetPhase(jvmtienv, &amp;phase);</span><br><span class=\"line\">    /* now turn on the VMInit event */</span><br><span class=\"line\">    if ( jvmtierror == JVMTI_ERROR_NONE ) &#123;</span><br><span class=\"line\">        jvmtiEventCallbacks callbacks;</span><br><span class=\"line\">        memset(&amp;callbacks, 0, sizeof(callbacks));</span><br><span class=\"line\">        callbacks.VMInit = &amp;eventHandlerVMInit;</span><br><span class=\"line\">        jvmtierror = (*jvmtienv)-&gt;SetEventCallbacks(jvmtienv,&amp;callbacks,sizeof(callbacks));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if ( jvmtierror == JVMTI_ERROR_NONE ) &#123;</span><br><span class=\"line\">        jvmtierror = (*jvmtienv)-&gt;SetEventNotificationMode(jvmtienv,JVMTI_ENABLE,JVMTI_EVENT_VM_INIT,NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return (jvmtierror == JVMTI_ERROR_NONE)? JPLIS_INIT_ERROR_NONE : JPLIS_INIT_ERROR_FAILURE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们关注 callbacks.VMInit = &eventHandlerVMInit;这行代码，这里设置了一个 VMInit 事件的回调函数，表示在 JVM 初始化的时候会回调 eventHandlerVMInit 函数。下面来看一下这个函数的实现细节，猜测就是在这里调用了 Premain 方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void JNICALL  eventHandlerVMInit( jvmtiEnv *jvmtienv,JNIEnv *jnienv,jthread thread) &#123;</span><br><span class=\"line\">   // ...</span><br><span class=\"line\">   success = processJavaStart( environment-&gt;mAgent, jnienv);</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">jboolean  processJavaStart(JPLISAgent *agent,JNIEnv *jnienv) &#123;</span><br><span class=\"line\">    result = createInstrumentationImpl(jnienv, agent);</span><br><span class=\"line\">    /*</span><br><span class=\"line\">     *  Load the Java agent, and call the premain.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    if ( result ) &#123;</span><br><span class=\"line\">        result = startJavaAgent(agent, jnienv, agent-&gt;mAgentClassName, agent-&gt;mOptionsString, agent-&gt;mPremainCaller);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">jboolean startJavaAgent( JPLISAgent *agent,JNIEnv *jnienv,const char *classname,const char *optionsString,jmethodID agentMainMethod) &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  invokeJavaAgentMainMethod(jnienv,agent-&gt;mInstrumentationImpl,agentMainMethod, classNameObject,optionsStringObject);</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看到这里，Instrument 已经实例化，invokeJavaAgentMainMethod 这个方法将我们的 Premain 方法执行起来了。接着，我们就可以根据 Instrument 实例来做我们想要做的事情了。</p>\n<h5 id=\"2-3-运行时加载-Agent\"><a href=\"#2-3-运行时加载-Agent\" class=\"headerlink\" title=\"2.3 运行时加载 Agent\"></a>2.3 运行时加载 Agent</h5><p>比起 JVM 启动时加载 Agent，运行时加载 Agent 就比较有诱惑力了，因为运行时加载 Agent 的能力给我们提供了很强的动态性，我们可以在需要的时候加载 Agent 来进行一些工作。因为是动态的，我们可以按照需求来加载所需要的 Agent，下面来分析一下动态加载 Agent 的相关技术细节。</p>\n<h6 id=\"2-3-1-AttachListener\"><a href=\"#2-3-1-AttachListener\" class=\"headerlink\" title=\"2.3.1 AttachListener\"></a>2.3.1 AttachListener</h6><p>Attach 机制通过 Attach Listener 线程来进行相关事务的处理，下面来看一下 Attach Listener 线程是如何初始化的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Starts the Attach Listener thread</span><br><span class=\"line\">void AttachListener::init() &#123;</span><br><span class=\"line\">  // 创建线程相关部分代码被去掉了</span><br><span class=\"line\">  const char thread_name[] = &quot;Attach Listener&quot;;</span><br><span class=\"line\">  Handle string = java_lang_String::create_from_str(thread_name, THREAD);</span><br><span class=\"line\">  &#123; MutexLocker mu(Threads_lock);</span><br><span class=\"line\">    JavaThread* listener_thread = new JavaThread(&amp;attach_listener_thread_entry);</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们知道，一个线程启动之后都需要指定一个入口来执行代码，Attach Listener 线程的入口是 attach_listener_thread_entry，下面看一下这个函数的具体实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void attach_listener_thread_entry(JavaThread* thread, TRAPS) &#123;</span><br><span class=\"line\">  AttachListener::set_initialized();</span><br><span class=\"line\">  for (;;) &#123;</span><br><span class=\"line\">      AttachOperation* op = AttachListener::dequeue();</span><br><span class=\"line\">      // find the function to dispatch too</span><br><span class=\"line\">      AttachOperationFunctionInfo* info = NULL;</span><br><span class=\"line\">      for (int i=0; funcs[i].name != NULL; i++) &#123;</span><br><span class=\"line\">        const char* name = funcs[i].name;</span><br><span class=\"line\">        if (strcmp(op-&gt;name(), name) == 0) &#123;</span><br><span class=\"line\">          info = &amp;(funcs[i]); break;</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">       // dispatch to the function that implements this operation</span><br><span class=\"line\">        res = (info-&gt;func)(op, &amp;st);</span><br><span class=\"line\">      //...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>整个函数执行逻辑，大概是这样的：</p>\n<p>拉取一个需要执行的任务：AttachListener::dequeue。</p>\n<p>查询匹配的命令处理函数。</p>\n<p>执行匹配到的命令执行函数。</p>\n<p>其中第二步里面存在一个命令函数表，整个表如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static AttachOperationFunctionInfo funcs[] = &#123;</span><br><span class=\"line\">  &#123; &quot;agentProperties&quot;,  get_agent_properties &#125;,</span><br><span class=\"line\">  &#123; &quot;datadump&quot;,         data_dump &#125;,</span><br><span class=\"line\">  &#123; &quot;dumpheap&quot;,         dump_heap &#125;,</span><br><span class=\"line\">  &#123; &quot;load&quot;,             load_agent &#125;,</span><br><span class=\"line\">  &#123; &quot;properties&quot;,       get_system_properties &#125;,</span><br><span class=\"line\">  &#123; &quot;threaddump&quot;,       thread_dump &#125;,</span><br><span class=\"line\">  &#123; &quot;inspectheap&quot;,      heap_inspection &#125;,</span><br><span class=\"line\">  &#123; &quot;setflag&quot;,          set_flag &#125;,</span><br><span class=\"line\">  &#123; &quot;printflag&quot;,        print_flag &#125;,</span><br><span class=\"line\">  &#123; &quot;jcmd&quot;,             jcmd &#125;,</span><br><span class=\"line\">  &#123; NULL,               NULL &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>对于加载 Agent 来说，命令就是“load”。现在，我们知道了 Attach Listener 大概的工作模式，但是还是不太清楚任务从哪来，这个秘密就藏在 AttachListener::dequeue 这行代码里面，接下来我们来分析一下 dequeue 这个函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinuxAttachOperation* LinuxAttachListener::dequeue() &#123;</span><br><span class=\"line\">  for (;;) &#123;</span><br><span class=\"line\">    // wait for client to connect</span><br><span class=\"line\">    struct sockaddr addr;</span><br><span class=\"line\">    socklen_t len = sizeof(addr);</span><br><span class=\"line\">    RESTARTABLE(::accept(listener(), &amp;addr, &amp;len), s);</span><br><span class=\"line\">    // get the credentials of the peer and check the effective uid/guid</span><br><span class=\"line\">    // - check with jeff on this.</span><br><span class=\"line\">    struct ucred cred_info;</span><br><span class=\"line\">    socklen_t optlen = sizeof(cred_info);</span><br><span class=\"line\">    if (::getsockopt(s, SOL_SOCKET, SO_PEERCRED, (void*)&amp;cred_info, &amp;optlen) == -1) &#123;</span><br><span class=\"line\">      ::close(s);</span><br><span class=\"line\">      continue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // peer credential look okay so we read the request</span><br><span class=\"line\">    LinuxAttachOperation* op = read_request(s);</span><br><span class=\"line\">    return op;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是 Linux 上的实现，不同的操作系统实现方式不太一样。上面的代码表面，Attach Listener 在某个端口监听着，通过 accept 来接收一个连接，<br>然后从这个连接里面将请求读取出来，然后将请求包装成一个 AttachOperation 类型的对象，之后就会从表里查询对应的处理函数，然后进行处理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Attach Listener使用一种被称为“懒加载”的策略进行初始化，也就是说，JVM启动的时候Attach Listener并不一定会启动起来。下面我们来分析一下这种“懒加载”策略的具体实现方案。</span><br><span class=\"line\">  // Start Attach Listener if +StartAttachListener or it can&#x27;t be started lazily</span><br><span class=\"line\">  if (!DisableAttachMechanism) &#123;</span><br><span class=\"line\">    AttachListener::vm_start();</span><br><span class=\"line\">    if (StartAttachListener || AttachListener::init_at_startup()) &#123;</span><br><span class=\"line\">      AttachListener::init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">// Attach Listener is started lazily except in the case when</span><br><span class=\"line\">// +ReduseSignalUsage is used</span><br><span class=\"line\">bool AttachListener::init_at_startup() &#123;</span><br><span class=\"line\">  if (ReduceSignalUsage) &#123;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码截取自 create_vm 函数，DisableAttachMechanism、StartAttachListener 和 ReduceSignalUsage 这三个变量默认都是 false，所以 AttachListener::init();这行代码不会在 create_vm 的时候执行，而 vm_start 会执行。下面来看一下这个函数的实现细节：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void AttachListener::vm_start() &#123;</span><br><span class=\"line\">  char fn[UNIX_PATH_MAX];</span><br><span class=\"line\">  struct stat64 st;</span><br><span class=\"line\">  int ret;</span><br><span class=\"line\">  int n = snprintf(fn, UNIX_PATH_MAX, &quot;%s/.java_pid%d&quot;,</span><br><span class=\"line\">           os::get_temp_directory(), os::current_process_id());</span><br><span class=\"line\">  assert(n &lt; (int)UNIX_PATH_MAX, &quot;java_pid file name buffer overflow&quot;);</span><br><span class=\"line\">  RESTARTABLE(::stat64(fn, &amp;st), ret);</span><br><span class=\"line\">  if (ret == 0) &#123;</span><br><span class=\"line\">    ret = ::unlink(fn);</span><br><span class=\"line\">    if (ret == -1) &#123;</span><br><span class=\"line\">      log_debug(attach)(&quot;Failed to remove stale attach pid file at %s&quot;, fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是在 Linux 上的实现，是将/tmp/目录下的.java_pid{pid}文件删除，后面在创建 Attach Listener 线程的时候会创建出来这个文件。上面说到，AttachListener::init()这行代码不会在 create_vm 的时候执行，这行代码的实现已经在上文中分析了，就是创建 Attach Listener 线程，并监听其他 JVM 的命令请求。现在来分析一下这行代码是什么时候被调用的，也就是“懒加载”到底是怎么加载起来的。</p>\n<p>// Signal Dispatcher needs to be started before VMInit event is posted<br>os::signal_init();<br>这是 create_vm 中的一段代码，看起来跟信号相关，其实 Attach 机制就是使用信号来实现“懒加载“的。下面我们来仔细地分析一下这个过程。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void os::signal_init() &#123;</span><br><span class=\"line\">  if (!ReduceSignalUsage) &#123;</span><br><span class=\"line\">    // Setup JavaThread for processing signals</span><br><span class=\"line\">    EXCEPTION_MARK;</span><br><span class=\"line\">    Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::java_lang_Thread(), true, CHECK);</span><br><span class=\"line\">    instanceKlassHandle klass (THREAD, k);</span><br><span class=\"line\">    instanceHandle thread_oop = klass-&gt;allocate_instance_handle(CHECK);</span><br><span class=\"line\">    const char thread_name[] = &quot;Signal Dispatcher&quot;;</span><br><span class=\"line\">    Handle string = java_lang_String::create_from_str(thread_name, CHECK);</span><br><span class=\"line\">    // Initialize thread_oop to put it into the system threadGroup</span><br><span class=\"line\">    Handle thread_group (THREAD, Universe::system_thread_group());</span><br><span class=\"line\">    JavaValue result(T_VOID);</span><br><span class=\"line\">    JavaCalls::call_special(&amp;result, thread_oop,klass,vmSymbols::object_initializer_name(),vmSymbols::threadgroup_string_void_signature(),</span><br><span class=\"line\">                           thread_group,string,CHECK);</span><br><span class=\"line\">    KlassHandle group(THREAD, SystemDictionary::ThreadGroup_klass());</span><br><span class=\"line\">    JavaCalls::call_special(&amp;result,thread_group,group,vmSymbols::add_method_name(),vmSymbols::thread_void_signature(),thread_oop,CHECK);</span><br><span class=\"line\">    os::signal_init_pd();</span><br><span class=\"line\">    &#123; MutexLocker mu(Threads_lock);</span><br><span class=\"line\">      JavaThread* signal_thread = new JavaThread(&amp;signal_thread_entry);</span><br><span class=\"line\">     // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // Handle ^BREAK</span><br><span class=\"line\">    os::signal(SIGBREAK, os::user_handler());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JVM 创建了一个新的进程来实现信号处理，这个线程叫“Signal Dispatcher”，一个线程创建之后需要有一个入口，“Signal Dispatcher”的入口是 signal_thread_entry：</p>\n<p>这段代码截取自 signal_thread_entry 函数，截取中的内容是和 Attach 机制信号处理相关的代码。这段代码的意思是，当接收到“SIGBREAK”信号，就执行接下来的代码，这个信号是需要 Attach 到 JVM 上的信号发出来，这个后面会再分析。我们先来看一句关键的代码：AttachListener::is_init_trigger()：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool AttachListener::is_init_trigger() &#123;</span><br><span class=\"line\">  if (init_at_startup() || is_initialized()) &#123;</span><br><span class=\"line\">    return false;               // initialized at startup or already initialized</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  char fn[PATH_MAX+1];</span><br><span class=\"line\">  sprintf(fn, &quot;.attach_pid%d&quot;, os::current_process_id());</span><br><span class=\"line\">  int ret;</span><br><span class=\"line\">  struct stat64 st;</span><br><span class=\"line\">  RESTARTABLE(::stat64(fn, &amp;st), ret);</span><br><span class=\"line\">  if (ret == -1) &#123;</span><br><span class=\"line\">    log_trace(attach)(&quot;Failed to find attach file: %s, trying alternate&quot;, fn);</span><br><span class=\"line\">    snprintf(fn, sizeof(fn), &quot;%s/.attach_pid%d&quot;, os::get_temp_directory(), os::current_process_id());</span><br><span class=\"line\">    RESTARTABLE(::stat64(fn, &amp;st), ret);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (ret == 0) &#123;</span><br><span class=\"line\">    // simple check to avoid starting the attach mechanism when</span><br><span class=\"line\">    // a bogus user creates the file</span><br><span class=\"line\">    if (st.st_uid == geteuid()) &#123;</span><br><span class=\"line\">      init();</span><br><span class=\"line\">      return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先检查了一下是否在 JVM 启动时启动了 Attach Listener，或者是否已经启动过。如果没有，才继续执行，在/tmp 目录下创建一个叫做.attach_pid%d 的文件，然后执行 AttachListener 的 init 函数，这个函数就是用来创建 Attach Listener 线程的函数，上面已经提到多次并进行了分析。到此，我们知道 Attach 机制的奥秘所在，也就是 Attach Listener 线程的创建依靠 Signal Dispatcher 线程，Signal Dispatcher 是用来处理信号的线程，当 Signal Dispatcher 线程接收到“SIGBREAK”信号之后，就会执行初始化 Attach Listener 的工作。</p>\n<h6 id=\"2-3-2-运行时加载-Agent-的实现\"><a href=\"#2-3-2-运行时加载-Agent-的实现\" class=\"headerlink\" title=\"2.3.2 运行时加载 Agent 的实现\"></a>2.3.2 运行时加载 Agent 的实现</h6><p>我们继续分析，到底是如何将一个 Agent 挂载到运行着的目标 JVM 上，在上文中提到了一段代码，用来进行运行时挂载 Agent，可以参考上文中展示的关于“attachAgentToTargetJvm”方法的代码。这个方法里面的关键是调用 VirtualMachine 的 attach 方法进行 Agent 挂载的功能。下面我们就来分析一下 VirtualMachine 的 attach 方法具体是怎么实现的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static VirtualMachine attach(String var0) throws AttachNotSupportedException, IOException &#123;</span><br><span class=\"line\">    if (var0 == null) &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;id cannot be null&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        List var1 = AttachProvider.providers();</span><br><span class=\"line\">        if (var1.size() == 0) &#123;</span><br><span class=\"line\">            throw new AttachNotSupportedException(&quot;no providers installed&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            AttachNotSupportedException var2 = null;</span><br><span class=\"line\">            Iterator var3 = var1.iterator();</span><br><span class=\"line\">            while(var3.hasNext()) &#123;</span><br><span class=\"line\">                AttachProvider var4 = (AttachProvider)var3.next();</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    return var4.attachVirtualMachine(var0);</span><br><span class=\"line\">                &#125; catch (AttachNotSupportedException var6) &#123;</span><br><span class=\"line\">                    var2 = var6;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            throw var2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法通过 attachVirtualMachine 方法进行 attach 操作，在 MacOS 系统中，AttachProvider 的实现类是 BsdAttachProvider。我们来看一下 BsdAttachProvider 的 attachVirtualMachine 方法是如何实现的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public VirtualMachine attachVirtualMachine(String var1) throws AttachNotSupportedException, IOException &#123;</span><br><span class=\"line\">        this.checkAttachPermission();</span><br><span class=\"line\">        this.testAttachable(var1);</span><br><span class=\"line\">        return new BsdVirtualMachine(this, var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">BsdVirtualMachine(AttachProvider var1, String var2) throws AttachNotSupportedException, IOException &#123;</span><br><span class=\"line\">        int var3 = Integer.parseInt(var2);</span><br><span class=\"line\">        this.path = this.findSocketFile(var3);</span><br><span class=\"line\">        if (this.path == null) &#123;</span><br><span class=\"line\">            File var4 = new File(tmpdir, &quot;.attach_pid&quot; + var3);</span><br><span class=\"line\">            createAttachFile(var4.getPath());</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                sendQuitTo(var3);</span><br><span class=\"line\">                int var5 = 0;</span><br><span class=\"line\">                long var6 = 200L;</span><br><span class=\"line\">                int var8 = (int)(this.attachTimeout() / var6);</span><br><span class=\"line\">                do &#123;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        Thread.sleep(var6);</span><br><span class=\"line\">                    &#125; catch (InterruptedException var21) &#123;</span><br><span class=\"line\">                        ;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    this.path = this.findSocketFile(var3);</span><br><span class=\"line\">                    ++var5;</span><br><span class=\"line\">                &#125; while(var5 &lt;= var8 &amp;&amp; this.path == null);</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                var4.delete();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int var24 = socket();</span><br><span class=\"line\">        connect(var24, this.path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private String findSocketFile(int var1) &#123;</span><br><span class=\"line\">        String var2 = &quot;.java_pid&quot; + var1;</span><br><span class=\"line\">        File var3 = new File(tmpdir, var2);</span><br><span class=\"line\">        return var3.exists() ? var3.getPath() : null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>findSocketFile 方法用来查询目标 JVM 上是否已经启动了 Attach Listener，它通过检查”tmp/“目录下是否存在 java_pid{pid}来进行实现。如果已经存在了，则说明 Attach 机制已经准备就绪，可以接受客户端的命令了，这个时候客户端就可以通过 connect 连接到目标 JVM 进行命令的发送，比如可以发送“load”命令来加载 Agent。如果 java_pid{pid}文件还不存在，则需要通过 sendQuitTo 方法向目标 JVM 发送一个“SIGBREAK”信号，让它初始化 Attach Listener 线程并准备接受客户端连接。可以看到，发送了信号之后客户端会循环等待 java_pid{pid}这个文件，之后再通过 connect 连接到目标 JVM 上。</p>\n<h6 id=\"2-3-3-load-命令的实现\"><a href=\"#2-3-3-load-命令的实现\" class=\"headerlink\" title=\"2.3.3 load 命令的实现\"></a>2.3.3 load 命令的实现</h6><p>下面来分析一下，“load”命令在 JVM 层面的实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static jint load_agent(AttachOperation* op, outputStream* out) &#123;</span><br><span class=\"line\">  // get agent name and options</span><br><span class=\"line\">  const char* agent = op-&gt;arg(0);</span><br><span class=\"line\">  const char* absParam = op-&gt;arg(1);</span><br><span class=\"line\">  const char* options = op-&gt;arg(2);</span><br><span class=\"line\">  // If loading a java agent then need to ensure that the java.instrument module is loaded</span><br><span class=\"line\">  if (strcmp(agent, &quot;instrument&quot;) == 0) &#123;</span><br><span class=\"line\">    Thread* THREAD = Thread::current();</span><br><span class=\"line\">    ResourceMark rm(THREAD);</span><br><span class=\"line\">    HandleMark hm(THREAD);</span><br><span class=\"line\">    JavaValue result(T_OBJECT);</span><br><span class=\"line\">    Handle h_module_name = java_lang_String::create_from_str(&quot;java.instrument&quot;, THREAD);</span><br><span class=\"line\">    JavaCalls::call_static(&amp;result,SystemDictionary::module_Modules_klass(),vmSymbols::loadModule_name(),</span><br><span class=\"line\">                           vmSymbols::loadModule_signature(),h_module_name,THREAD);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return JvmtiExport::load_agent_library(agent, absParam, options, out);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个函数先确保加载了 java.instrument 模块，之后真正执行 Agent 加载的函数是 load_agent_library ,这个函数的套路就是加载 Agent 动态链接库，如果是通过 Java instrument API 实现的 Agent，则加载的是 libinstrument 动态链接库，然后通过 libinstrument 里面的代码实现运行 agentmain 方法的逻辑，这一部分内容和 libinstrument 实现 premain 方法运行的逻辑其实差不多，这里不再做分析。至此，我们对 Java Agent 技术已经有了一个全面而细致的了解。</p>\n<h4 id=\"3-动态替换类字节码技术\"><a href=\"#3-动态替换类字节码技术\" class=\"headerlink\" title=\"3. 动态替换类字节码技术\"></a>3. 动态替换类字节码技术</h4><h5 id=\"3-1-动态字节码修改的限制\"><a href=\"#3-1-动态字节码修改的限制\" class=\"headerlink\" title=\"3.1 动态字节码修改的限制\"></a>3.1 动态字节码修改的限制</h5><p>上文中已经详细分析了 Agent 技术的实现，我们使用 Java Instrumentation API 来完成动态类修改的功能，在 Instrumentation 接口中，通过 addTransformer 方法来增加一个类转换器，类转换器由类 ClassFileTransformer 接口实现。ClassFileTransformer 接口中唯一的方法 transform 用于实现类转换，当类被加载的时候，就会调用 transform 方法，进行类转换。在运行时，我们可以通过 Instrumentation 的 redefineClasses 方法进行类重定义，在方法上有一段注释需要特别注意：</p>\n<ul>\n<li>The redefinition may change method bodies, the constant pool and attributes.</li>\n<li>The redefinition must not add, remove or rename fields or methods, change the</li>\n<li>signatures of methods, or change inheritance. These restrictions maybe be</li>\n<li>lifted in future versions. The class file bytes are not checked, verified and installed</li>\n<li>until after the transformations have been applied, if the resultant bytes are in</li>\n<li>error this method will throw an exception.<br>这里面提到，我们不可以增加、删除或者重命名字段和方法，改变方法的签名或者类的继承关系。认识到这一点很重要，当我们通过 ASM 获取到增强的字节码之后，如果增强后的字节码没有遵守这些规则，那么调用 redefineClasses 方法来进行类的重定义就会失败。那 redefineClasses 方法具体是怎么实现类的重定义的呢？它对运行时的 JVM 会造成什么样的影响呢？下面来分析 redefineClasses 的实现细节。</li>\n</ul>\n<h5 id=\"3-2-重定义类字节码的实现细节\"><a href=\"#3-2-重定义类字节码的实现细节\" class=\"headerlink\" title=\"3.2 重定义类字节码的实现细节\"></a>3.2 重定义类字节码的实现细节</h5><p>上文中我们提到，libinstrument 动态链接库中，JPLISAgent 不仅实现了 Agent 入口代码执行的路由，而且还是 Java 代码与 JVMTI 之间的一道桥梁。我们在 Java 代码中调用 Java Instrumentation API 的 redefineClasses，其实会调用 libinstrument 中的相关代码，我们来分析一下这条路径。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void redefineClasses(ClassDefinition... var1) throws ClassNotFoundException &#123;</span><br><span class=\"line\">    if (!this.isRedefineClassesSupported()) &#123;</span><br><span class=\"line\">        throw new UnsupportedOperationException(&quot;redefineClasses is not supported in this environment&quot;);</span><br><span class=\"line\">    &#125; else if (var1 == null) &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;null passed as &#x27;definitions&#x27; in redefineClasses&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        for(int var2 = 0; var2 &lt; var1.length; ++var2) &#123;</span><br><span class=\"line\">            if (var1[var2] == null) &#123;</span><br><span class=\"line\">                throw new NullPointerException(&quot;element of &#x27;definitions&#x27; is null in redefineClasses&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (var1.length != 0) &#123;</span><br><span class=\"line\">            this.redefineClasses0(this.mNativeAgent, var1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private native void redefineClasses0(long var1, ClassDefinition[] var3) throws ClassNotFoundException;</span><br></pre></td></tr></table></figure>\n\n<p>这是 InstrumentationImpl 中的 redefineClasses 实现，该方法的具体实现依赖一个 Native 方法 redefineClasses()，我们可以在 libinstrument 中找到这个 Native 方法的实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JNIEXPORT void JNICALL Java_sun_instrument_InstrumentationImpl_redefineClasses0</span><br><span class=\"line\">  (JNIEnv * jnienv, jobject implThis, jlong agent, jobjectArray classDefinitions) &#123;</span><br><span class=\"line\">    redefineClasses(jnienv, (JPLISAgent*)(intptr_t)agent, classDefinitions);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>redefineClasses 这个函数的实现比较复杂，代码很长。下面是一段关键的代码片段：</p>\n<p>可以看到，其实是调用了 JVMTI 的 RetransformClasses 函数来完成类的重定义细节。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// class_count - pre-checked to be greater than or equal to 0</span><br><span class=\"line\">// class_definitions - pre-checked for NULL</span><br><span class=\"line\">jvmtiError JvmtiEnv::RedefineClasses(jint class_count, const jvmtiClassDefinition* class_definitions) &#123;</span><br><span class=\"line\">//TODO: add locking</span><br><span class=\"line\">  VM_RedefineClasses op(class_count, class_definitions, jvmti_class_load_kind_redefine);</span><br><span class=\"line\">  VMThread::execute(&amp;op);</span><br><span class=\"line\">  return (op.check_error());</span><br><span class=\"line\">&#125; /* end RedefineClasses */</span><br></pre></td></tr></table></figure>\n\n<p>重定义类的请求会被 JVM 包装成一个 VM_RedefineClasses 类型的 VM_Operation，VM_Operation 是 JVM 内部的一些操作的基类，包括 GC 操作等。VM_Operation 由 VMThread 来执行，新的 VM_Operation 操作会被添加到 VMThread 的运行队列中去，VMThread 会不断从队列里面拉取 VM_Operation 并调用其 doit 等函数执行具体的操作。VM_RedefineClasses 函数的流程较为复杂，下面是 VM_RedefineClasses 的大致流程：</p>\n<p>加载新的字节码，合并常量池，并且对新的字节码进行校验工作<br>// Load the caller’s new class definition(s) into _scratch_classes.<br>// Constant pool merging work is done here as needed. Also calls<br>// compare_and_normalize_class_versions() to verify the class<br>// definition(s).<br>jvmtiError load_new_class_versions(TRAPS);<br>清除方法上的断点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  // Remove all breakpoints in methods of this class</span><br><span class=\"line\">  JvmtiBreakpoints&amp; jvmti_breakpoints = JvmtiCurrentBreakpoints::get_jvmti_breakpoints();</span><br><span class=\"line\">  jvmti_breakpoints.clearall_in_class_at_safepoint(the_class());</span><br><span class=\"line\">JIT逆优化</span><br><span class=\"line\"></span><br><span class=\"line\">  // Deoptimize all compiled code that depends on this class</span><br><span class=\"line\">  flush_dependent_code(the_class, THREAD);</span><br></pre></td></tr></table></figure>\n\n<p>进行字节码替换工作，需要进行更新类 itable/vtable 等操作<br>进行类重定义通知</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SystemDictionary::notice_modification();</span><br></pre></td></tr></table></figure>\n\n<p>VM_RedefineClasses 实现比较复杂的，详细实现可以参考 RedefineClasses 的实现。</p>\n<h4 id=\"4-Java-debug-tool-设计与实现\"><a href=\"#4-Java-debug-tool-设计与实现\" class=\"headerlink\" title=\"4. Java-debug-tool 设计与实现\"></a>4. Java-debug-tool 设计与实现</h4><p>Java-debug-tool 是一个使用 Java Instrument API 来实现的动态调试工具，它通过在目标 JVM 上启动一个 TcpServer 来和调试客户端通信。<br>调试客户端通过命令行来发送调试命令给 TcpServer，TcpServer 中有专门用来处理命令的 handler，handler 处理完命令之后会将结果发送回客户端，<br>客户端通过处理将调试结果展示出来。下面将详细介绍 Java-debug-tool 的整体设计和实现。</p>\n<h5 id=\"4-1-Java-debug-tool-整体架构\"><a href=\"#4-1-Java-debug-tool-整体架构\" class=\"headerlink\" title=\"4.1 Java-debug-tool 整体架构\"></a>4.1 Java-debug-tool 整体架构</h5><p>Java-debug-tool 包括一个 Java Agent 和一个用于处理调试命令的核心 API，核心 API 通过一个自定义的类加载器加载进来，以保证目标 JVM 的类不会被污染。<br>整体上 Java-debug-tool 的设计是一个 Client-Server 的架构，命令客户端需要完整的完成一个命令之后才能继续执行下一个调试命令。<br>Java-debug-tool 支持多人同时进行调试，下面是整体架构图：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE44pMzDfgj8Oe9fFbU2wHn35PjibaPxvOnFMmwx1Jzv9Tsy1kxn41Q7NQ/640\"></p>\n<p>下面对每一层做简单介绍：</p>\n<ul>\n<li><p>交互层：负责将程序员的输入转换成调试交互协议，并且将调试信息呈现出来。</p>\n</li>\n<li><p>连接管理层：负责管理客户端连接，从连接中读调试协议数据并解码，对调试结果编码并将其写到连接中去；同时将那些超时未活动的连接关闭。</p>\n</li>\n<li><p>业务逻辑层：实现调试命令处理，包括命令分发、数据收集、数据处理等过程。</p>\n</li>\n<li><p>基础实现层：Java-debug-tool 实现的底层依赖，通过 Java Instrumentation 提供的 API 进行类查找、类重定义等能力，Java Instrumentation 底层依赖 JVMTI 来完成具体的功能。</p>\n</li>\n</ul>\n<p>在 Agent 被挂载到目标 JVM 上之后，Java-debug-tool 会安排一个 Spy 在目标 JVM 内活动，这个 Spy 负责将目标 JVM 内部的相关调试数据转移到命令处理模块，<br>命令处理模块会处理这些数据，然后给客户端返回调试结果。命令处理模块会增强目标类的字节码来达到数据获取的目的<br>，多个客户端可以共享一份增强过的字节码，无需重复增强。下面从 Java-debug-tool 的字节码增强方案、命令设计与实现等角度详细说明。</p>\n<h5 id=\"4-2-Java-debug-tool-的字节码增强方案\"><a href=\"#4-2-Java-debug-tool-的字节码增强方案\" class=\"headerlink\" title=\"4.2 Java-debug-tool 的字节码增强方案\"></a>4.2 Java-debug-tool 的字节码增强方案</h5><p>Java-debug-tool 使用字节码增强来获取到方法运行时的信息，比如方法入参、出参等，可以在不同的字节码位置进行增强，这种行为可以称为“插桩”，<br>每个“桩”用于获取数据并将他转储出去。Java-debug-tool 具备强大的插桩能力，不同的桩负责获取不同类别的数据，下面是 Java-debug-tool 目前所支持的“桩”：</p>\n<ul>\n<li><p>方法进入点：用于获取方法入参信息。</p>\n</li>\n<li><p>Fields 获取点 1：在方法执行前获取到对象的字段信息。</p>\n</li>\n<li><p>变量存储点：获取局部变量信息。</p>\n</li>\n<li><p>Fields 获取点 2：在方法退出前获取到对象的字段信息。</p>\n</li>\n<li><p>方法退出点：用于获取方法返回值。</p>\n</li>\n<li><p>抛出异常点：用于获取方法抛出的异常信息。</p>\n</li>\n</ul>\n<p>通过上面这些代码桩，Java-debug-tool 可以收集到丰富的方法执行信息，经过处理可以返回更加可视化的调试结果。</p>\n<h6 id=\"4-2-1-字节码增强\"><a href=\"#4-2-1-字节码增强\" class=\"headerlink\" title=\"4.2.1 字节码增强\"></a>4.2.1 字节码增强</h6><p>Java-debug-tool 在实现上使用了 ASM 工具来进行字节码增强，并且每个插桩点都可以进行配置，如果不想要什么信息，则没必要进行对应的插桩操作。这种可配置的设计是非常有必要的，因为有时候我们仅仅是想要知道方法的入参和出参，但 Java-debug-tool 却给我们返回了所有的调试信息，这样我们就得在众多的输出中找到我们所关注的内容。如果可以进行配置，则除了入参点和出参点外其他的桩都不插，那么就可以快速看到我们想要的调试数据，这种设计的本质是为了让调试者更加专注。下面是 Java-debug-tool 的字节码增强工作方式：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4jIYWODnoWDfEAhWyia6LIsKKwIkT5FEMxEzrFKTUV5WGdAEMmlno0hA/640\"></p>\n<p>图 4-2-1</p>\n<p>如图 4-2-1 所示，当调试者发出调试命令之后，Java-debug-tool 会识别命令并判断是否需要进行字节码增强，如果命令需要增强字节码，则判断当前类+当前方法是否已经被增强过。上文已经提到，字节码替换是有一定损耗的，这种具有损耗的操作发生的次数越少越好，所以字节码替换操作会被记录起来，后续命令直接使用即可，不需要重复进行字节码增强，字节码增强还涉及多个调试客户端的协同工作问题，当一个客户端增强了一个类的字节码之后，这个客户端就锁定了该字节码，其他客户端变成只读，无法对该类进行字节码增强，只有当持有锁的客户端主动释放锁或者断开连接之后，其他客户端才能继续增强该类的字节码。<br>字节码增强模块收到字节码增强请求之后，会判断每个增强点是否需要插桩，这个判断的根据就是上文提到的插桩配置，之后字节码增强模块会生成新的字节码，Java-debug-tool 将执行字节码替换操作，之后就可以进行调试数据收集了。<br>经过字节码增强之后，原来的方法中会插入收集运行时数据的代码，这些代码在方法被调用的时候执行，获取到诸如方法入参、局部变量等信息，这些信息将传递给数据收集装置进行处理。数据收集的工作通过 Advice 完成，每个客户端同一时间只能注册一个 Advice 到 Java-debug-tool 调试模块上，多个客户端可以同时注册自己的 Advice 到调试模块上。Advice 负责收集数据并进行判断，如果当前数据符合调试命令的要求，Java-debug-tool 就会卸载这个 Advice，Advice 的数据就会被转移到 Java-debug-tool 的命令结果处理模块进行处理，并将结果发送到客户端。</p>\n<h6 id=\"4-2-2-Advice-的工作方式\"><a href=\"#4-2-2-Advice-的工作方式\" class=\"headerlink\" title=\"4.2.2 Advice 的工作方式\"></a>4.2.2 Advice 的工作方式</h6><p>Advice 是调试数据收集器，不同的调试策略会对应不同的 Advice。Advice 是工作在目标 JVM 的线程内部的，它需要轻量级和高效，意味着 Advice 不能做太过于复杂的事情，它的核心接口“match”用来判断本次收集到的调试数据是否满足调试需求。如果满足，那么 Java-debug-tool 就会将其卸载，否则会继续让他收集调试数据，这种“加载 Advice” -&gt; “卸载 Advice”的工作模式具备很好的灵活性。<br>关于 Advice，需要说明的另外一点就是线程安全，因为它加载之后会运行在目标 JVM 的线程中，目标 JVM 的方法极有可能是多线程访问的，这也就是说，Advice 需要有能力处理多个线程同时访问方法的能力，如果 Advice 处理不当，则可能会收集到杂乱无章的调试数据。下面的图片展示了 Advice 和 Java-debug-tool 调试分析模块、目标方法执行以及调试客户端等模块的关系。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4icUzSicIdgKaWyBsIVgmiaOHEPR5mUvyqDOg3e6ELs0aFF1Ub23RjnNsQ/640\"><br>图 4-2-2<br>Advice 的首次挂载由 Java-debug-tool 的命令处理器完成，当一次调试数据收集完成之后，调试数据处理模块会自动卸载 Advice，然后进行判断，如果调试数据符合 Advice 的策略，则直接将数据交由数据处理模块进行处理，否则会清空调试数据，并再次将 Advice 挂载到目标方法上去，等待下一次调试数据。非首次挂载由调试数据处理模块进行，它借助 Advice 按需取数据，如果不符合需求，则继续挂载 Advice 来获取数据，否则对调试数据进行处理并返回给客户端。</p>\n<h5 id=\"4-3-Java-debug-tool-的命令设计与实现\"><a href=\"#4-3-Java-debug-tool-的命令设计与实现\" class=\"headerlink\" title=\"4.3 Java-debug-tool 的命令设计与实现\"></a>4.3 Java-debug-tool 的命令设计与实现</h5><h6 id=\"4-3-1-命令执行\"><a href=\"#4-3-1-命令执行\" class=\"headerlink\" title=\"4.3.1 命令执行\"></a>4.3.1 命令执行</h6><p>上文已经完整的描述了 Java-debug-tool 的设计以及核心技术方案，本小节将详细介绍 Java-debug-tool 的命令设计与实现。首先需要将一个调试命令的执行流程描述清楚，下面是一张用来表示命令请求处理流程的图片：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4NAFPL7rkntPMiaicJtbn84MnRNibQkPhUibZ5cuWpZpcibYxx0vR41PHNDw/640\"><br>图 4-3-1<br>图 4-3-1 简单的描述了 Java-debug-tool 的命令处理方式，客户端连接到服务端之后，会进行一些协议解析、协议认证、协议填充等工作，之后将进行命令分发。服务端如果发现客户端的命令不合法，则会立即返回错误信息，否则再进行命令处理。命令处理属于典型的三段式处理，前置命令处理、命令处理以及后置命令处理，同时会对命令处理过程中的异常信息进行捕获处理，三段式处理的好处是命令处理被拆成了多个阶段，多个阶段负责不同的职责。前置命令处理用来做一些命令权限控制的工作，并填充一些类似命令处理开始时间戳等信息，命令处理就是通过字节码增强，挂载 Advice 进行数据收集，再经过数据处理来产生命令结果的过程，后置处理则用来处理一些连接关闭、字节码解锁等事项。<br>Java-debug-tool 允许客户端设置一个命令执行超时时间，超过这个时间则认为命令没有结果，如果客户端没有设置自己的超时时间，就使用默认的超时时间进行超时控制。Java-debug-tool 通过设计了两阶段的超时检测机制来实现命令执行超时功能：首先，第一阶段超时触发，则 Java-debug-tool 会友好的警告命令处理模块处理时间已经超时，需要立即停止命令执行，这允许命令自己做一些现场清理工作，当然需要命令执行线程自己感知到这种超时警告；当第二阶段超时触发，则 Java-debug-tool 认为命令必须结束执行，会强行打断命令执行线程。超时机制的目的是为了不让命令执行太长时间，命令如果长时间没有收集到调试数据，则应该停止执行，并思考是否调试了一个错误的方法。当然，超时机制还可以定期清理那些因为未知原因断开连接的客户端持有的调试资源，比如字节码锁。</p>\n<h6 id=\"4-3-4-获取方法执行视图\"><a href=\"#4-3-4-获取方法执行视图\" class=\"headerlink\" title=\"4.3.4 获取方法执行视图\"></a>4.3.4 获取方法执行视图</h6><p>Java-debug-tool 通过下面的信息来向调试者呈现出一次方法执行的视图：<br>正在调试的方法信息。</p>\n<p>方法调用堆栈。</p>\n<p>调试耗时，包括对目标 JVM 造成的 STW 时间。</p>\n<p>方法入参，包括入参的类型及参数值。</p>\n<p>方法的执行路径。</p>\n<p>代码执行耗时。</p>\n<p>局部变量信息。</p>\n<p>方法返回结果。</p>\n<p>方法抛出的异常。</p>\n<p>对象字段值快照。</p>\n<p>图 4-3-2 展示了 Java-debug-tool 获取到正在运行的方法的执行视图的信息。<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4TYKGnNuqCgHOSkZiabggzJUESbqSDMWRZM1OtVNGziasnSAiae7ibYicAKw/640?wx_fmt=png\"></p>\n<p>图 4-3-2</p>\n<h5 id=\"4-4-Java-debug-tool-与同类产品对比分析\"><a href=\"#4-4-Java-debug-tool-与同类产品对比分析\" class=\"headerlink\" title=\"4.4 Java-debug-tool 与同类产品对比分析\"></a>4.4 Java-debug-tool 与同类产品对比分析</h5><p>Java-debug-tool 的同类产品主要是 greys，其他类似的工具大部分都是基于 greys 进行的二次开发，所以直接选择 greys 来和 Java-debug-tool 进行对比。</p>\n<h4 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h4><p>本文详细剖析了 Java 动态调试关键技术的实现细节，并介绍了我们基于 Java 动态调试技术结合实际故障排查场景进行的一点探索实践；动态调试技术为研发人员进行线上问题排查提供了一种新的思路，我们基于动态调试技术解决了传统断点调试存在的问题，使得可以将断点调试这种技术应用在线上，以线下调试的思维来进行线上调试，提高问题排查效率。</p>\n<h4 id=\"6-参考文献\"><a href=\"#6-参考文献\" class=\"headerlink\" title=\"6. 参考文献\"></a>6. 参考文献</h4><p>ASM 4 guide</p>\n<p>Java Virtual Machine Specification</p>\n<p>JVM Tool Interface</p>\n<p>alibaba arthas</p>\n<p>openjdk</p>\n<h4 id=\"摘自\"><a href=\"#摘自\" class=\"headerlink\" title=\"摘自\"></a>摘自</h4><p><a href=\"https://mp.weixin.qq.com/s/ZlNcvwJ_swspifWTLHA92Q\">https://mp.weixin.qq.com/s/ZlNcvwJ_swspifWTLHA92Q</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Java动态调试技术原理及实践\"><a href=\"#Java动态调试技术原理及实践\" class=\"headerlink\" title=\"Java动态调试技术原理及实践\"></a>Java动态调试技术原理及实践</h3><h4 id=\"1-动态调试要解决的问题\"><a href=\"#1-动态调试要解决的问题\" class=\"headerlink\" title=\"1. 动态调试要解决的问题\"></a>1. 动态调试要解决的问题</h4><p>断点调试是我们最常使用的调试手段，它可以获取到方法执行过程中的变量信息，并可以观察到方法的执行路径。<br>但断点调试会在断点位置停顿，使得整个应用停止响应。在线上停顿应用是致命的，动态调试技术给了我们创造新的调试模式的想象空间。<br>本文将研究 Java 语言中的动态调试技术，首先概括 Java 动态调试所涉及的技术基础，接着介绍我们在 Java 动态调试领域的思考及实践，<br>通过结合实际业务场景，设计并实现了一种具备动态性的断点调试工具 Java-debug-tool，显著提高了故障排查效率。</p>\n<h4 id=\"2-Java-Agent-技术\"><a href=\"#2-Java-Agent-技术\" class=\"headerlink\" title=\"2. Java Agent 技术\"></a>2. Java Agent 技术</h4><p>JVMTI （JVM Tool Interface）是 Java 虚拟机对外提供的 Native 编程接口，通过 JVMTI，外部进程可以获取到运行时 JVM 的诸多信息，比如线程、GC 等。<br>Agent 是一个运行在目标 JVM 的特定程序，它的职责是负责从目标 JVM 中获取数据，然后将数据传递给外部进程。<br>加载 Agent 的时机可以是目标 JVM 启动之时，也可以是在目标 JVM 运行时进行加载，而在目标 JVM 运行时进行 Agent 加载具备动态性，<br>对于时机未知的 Debug 场景来说非常实用。下面将详细分析 Java Agent 技术的实现细节。</p>\n<h5 id=\"2-1-Agent-的实现模式\"><a href=\"#2-1-Agent-的实现模式\" class=\"headerlink\" title=\"2.1 Agent 的实现模式\"></a>2.1 Agent 的实现模式</h5><p>JVMTI 是一套 Native 接口，在 Java SE 5 之前，要实现一个 Agent 只能通过编写 Native 代码来实现。<br>从 Java SE 5 开始，可以使用 Java 的 Instrumentation 接口（java.lang.instrument）来编写 Agent。<br>无论是通过 Native 的方式还是通过 Java Instrumentation 接口的方式来编写 Agent，它们的工作都是借助 JVMTI 来进行完成，<br>下面介绍通过 Java Instrumentation 接口编写 Agent 的方法。</p>\n<h6 id=\"2-1-1-通过-Java-Instrumentation-API\"><a href=\"#2-1-1-通过-Java-Instrumentation-API\" class=\"headerlink\" title=\"2.1.1 通过 Java Instrumentation API\"></a>2.1.1 通过 Java Instrumentation API</h6><p>实现 Agent 启动方法</p>\n<p>Java Agent 支持目标 JVM 启动时加载，也支持在目标 JVM 运行时加载，这两种不同的加载模式会使用不同的入口函数，<br>如果需要在目标 JVM 启动的同时加载 Agent，那么可以选择实现下面的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1] public static void premain(String agentArgs, Instrumentation inst);</span><br><span class=\"line\">[2] public static void premain(String agentArgs);</span><br></pre></td></tr></table></figure>\n\n<p>JVM 将首先寻找[1]，如果没有发现[1]，再寻找[2]。如果希望在目标 JVM 运行时加载 Agent，则需要实现下面的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1] public static void agentmain(String agentArgs, Instrumentation inst);</span><br><span class=\"line\">[2] public static void agentmain(String agentArgs);</span><br></pre></td></tr></table></figure>\n\n<p>这两组方法的第一个参数 AgentArgs 是随同 “– javaagent”一起传入的程序参数，如果这个字符串代表了多个参数，就需要自己解析这些参数。<br>inst 是 Instrumentation 类型的对象，是 JVM 自动传入的，我们可以拿这个参数进行类增强等操作。</p>\n<p>指定 Main-Class<br>Agent 需要打包成一个 jar 包，在 ManiFest 属性中指定“Premain-Class”或者“Agent-Class”：<br>Premain-Class: class<br>Agent-Class: class<br>挂载到目标 JVM<br>将编写的 Agent 打成 jar 包后，就可以挂载到目标 JVM 上去了。如果选择在目标 JVM 启动时加载 Agent，则可以使用 “-javaagent:<jarpath>[=<option>]”，<br>具体的使用方法可以使用“Java -Help”来查看。如果想要在运行时挂载 Agent 到目标 JVM，就需要做一些额外的开发了。<br>com.sun.tools.attach.VirtualMachine 这个类代表一个 JVM 抽象，可以通过这个类找到目标 JVM，并且将 Agent 挂载到目标 JVM 上。<br>下面是使用 com.sun.tools.attach.VirtualMachine 进行动态挂载 Agent 的一般实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void attachAgentToTargetJVM() throws Exception &#123;</span><br><span class=\"line\">    List&lt;VirtualMachineDescriptor&gt; virtualMachineDescriptors = VirtualMachine.list();</span><br><span class=\"line\">    VirtualMachineDescriptor targetVM = null;</span><br><span class=\"line\">    for (VirtualMachineDescriptor descriptor : virtualMachineDescriptors) &#123;</span><br><span class=\"line\">        if (descriptor.id().equals(configure.getPid())) &#123;</span><br><span class=\"line\">            targetVM = descriptor;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (targetVM == null) &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;could not find the target jvm by process id:&quot; + configure.getPid());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    VirtualMachine virtualMachine = null;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        virtualMachine = VirtualMachine.attach(targetVM);</span><br><span class=\"line\">        virtualMachine.loadAgent(&quot;&#123;agent&#125;&quot;, &quot;&#123;params&#125;&quot;);</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        if (virtualMachine != null) &#123;</span><br><span class=\"line\">            virtualMachine.detach();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先通过指定的进程 ID 找到目标 JVM，然后通过 Attach 挂载到目标 JVM 上，执行加载 Agent 操作。<br>VirtualMachine 的 Attach 方法就是用来将 Agent 挂载到目标 JVM 上去的，而 Detach 则是将 Agent 从目标 JVM 卸载。关<br>于 Agent 是如何挂载到目标 JVM 上的具体技术细节，将在下文中进行分析。</p>\n<h5 id=\"2-2-启动时加载-Agent\"><a href=\"#2-2-启动时加载-Agent\" class=\"headerlink\" title=\"2.2 启动时加载 Agent\"></a>2.2 启动时加载 Agent</h5><h6 id=\"2-2-1-参数解析\"><a href=\"#2-2-1-参数解析\" class=\"headerlink\" title=\"2.2.1 参数解析\"></a>2.2.1 参数解析</h6><p>创建 JVM 时，JVM 会进行参数解析，即解析那些用来配置 JVM 启动的参数，比如堆大小、GC 等；本文主要关注解析的参数为-agentlib、 -agentpath、 -javaagent，这几个参数用来指定 Agent，JVM 会根据这几个参数加载 Agent。下面来分析一下 JVM 是如何解析这几个参数的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -agentlib and -agentpath</span><br><span class=\"line\">if (match_option(option, &quot;-agentlib:&quot;, &amp;tail) ||</span><br><span class=\"line\">        (is_absolute_path = match_option(option, &quot;-agentpath:&quot;, &amp;tail))) &#123;</span><br><span class=\"line\">    if(tail != NULL) &#123;</span><br><span class=\"line\">      const char* pos = strchr(tail, &#x27;=&#x27;);</span><br><span class=\"line\">      size_t len = (pos == NULL) ? strlen(tail) : pos - tail;</span><br><span class=\"line\">      char* name = strncpy(NEW_C_HEAP_ARRAY(char, len + 1, mtArguments), tail, len);</span><br><span class=\"line\">      name[len] = &#x27;\\0&#x27;;</span><br><span class=\"line\">      char *options = NULL;</span><br><span class=\"line\">      if(pos != NULL) &#123;</span><br><span class=\"line\">        options = os::strdup_check_oom(pos + 1, mtArguments);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #if !INCLUDE_JVMTI</span><br><span class=\"line\">      if (valid_jdwp_agent(name, is_absolute_path)) &#123;</span><br><span class=\"line\">        jio_fprintf(defaultStream::error_stream(),</span><br><span class=\"line\">          &quot;Debugging agents are not supported in this VM\\n&quot;);</span><br><span class=\"line\">        return JNI_ERR;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #endif // !INCLUDE_JVMTI</span><br><span class=\"line\">      add_init_agent(name, options, is_absolute_path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  // -javaagent</span><br><span class=\"line\">  &#125; else if (match_option(option, &quot;-javaagent:&quot;, &amp;tail)) &#123;</span><br><span class=\"line\">      #if !INCLUDE_JVMTI</span><br><span class=\"line\">    jio_fprintf(defaultStream::error_stream(),</span><br><span class=\"line\">      &quot;Instrumentation agents are not supported in this VM\\n&quot;);</span><br><span class=\"line\">    return JNI_ERR;</span><br><span class=\"line\">      #else</span><br><span class=\"line\">    if (tail != NULL) &#123;</span><br><span class=\"line\">      size_t length = strlen(tail) + 1;</span><br><span class=\"line\">      char *options = NEW_C_HEAP_ARRAY(char, length, mtArguments);</span><br><span class=\"line\">      jio_snprintf(options, length, &quot;%s&quot;, tail);</span><br><span class=\"line\">      add_init_agent(&quot;instrument&quot;, options, false);</span><br><span class=\"line\">      // java agents need module java.instrument</span><br><span class=\"line\">      if (!create_numbered_property(&quot;jdk.module.addmods&quot;, &quot;java.instrument&quot;, addmods_count++)) &#123;</span><br><span class=\"line\">        return JNI_ENOMEM;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      #endif // !INCLUDE_JVMTI</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码片段截取自 hotspot/src/share/vm/runtime/arguments.cpp 中的 Arguments::parse_each_vm_init_arg(const JavaVMInitArgs* args, bool* patch_mod_javabase, Flag::Flags origin) 函数，该函数用来解析一个具体的 JVM 参数。这段代码的主要功能是解析出需要加载的 Agent 路径，然后调用 add_init_agent 函数进行解析结果的存储。下面先看一下 add_init_agent 函数的具体实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -agentlib and -agentpath arguments</span><br><span class=\"line\">static AgentLibraryList _agentList;</span><br><span class=\"line\">static void add_init_agent(const char* name, char* options, bool absolute_path)</span><br><span class=\"line\">  &#123; _agentList.add(new AgentLibrary(name, options, absolute_path, NULL)); &#125;</span><br></pre></td></tr></table></figure>\n\n<p>AgentLibraryList 是一个简单的链表结构，add_init_agent 函数将解析好的、需要加载的 Agent 添加到这个链表中，等待后续的处理。</p>\n<p>这里需要注意，解析-javaagent 参数有一些特别之处，这个参数用来指定一个我们通过 Java Instrumentation API 来编写的 Agent，Java Instrumentation API 底层依赖的是 JVMTI，对-JavaAgent 的处理也说明了这一点，在调用 add_init_agent 函数时第一个参数是“instrument”，关于加载 Agent 这个问题在下一小节进行展开。到此，我们知道在启动 JVM 时指定的 Agent 已经被 JVM 解析完存放在了一个链表结构中。下面来分析一下 JVM 是如何加载这些 Agent 的。</p>\n<h6 id=\"2-2-2-执行加载操作\"><a href=\"#2-2-2-执行加载操作\" class=\"headerlink\" title=\"2.2.2 执行加载操作\"></a>2.2.2 执行加载操作</h6><p>在创建 JVM 进程的函数中，解析完 JVM 参数之后，下面的这段代码和加载 Agent 相关：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // Launch -agentlib/-agentpath and converted -Xrun agents</span><br><span class=\"line\">if (Arguments::init_agents_at_startup()) &#123;</span><br><span class=\"line\">  create_vm_init_agents();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">static bool init_agents_at_startup() &#123;</span><br><span class=\"line\">  return !_agentList.is_empty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 JVM 判断出上一小节中解析出来的 Agent 不为空的时候，就要去调用函数 create_vm_init_agents 来加载 Agent，下面来分析一下 create_vm_init_agents 函数是如何加载 Agent 的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void Threads::create_vm_init_agents() &#123;</span><br><span class=\"line\">  AgentLibrary* agent;</span><br><span class=\"line\">  for (agent = Arguments::agents(); agent != NULL; agent = agent-&gt;next()) &#123;</span><br><span class=\"line\">    OnLoadEntry_t  on_load_entry = lookup_agent_on_load(agent);</span><br><span class=\"line\">    if (on_load_entry != NULL) &#123;</span><br><span class=\"line\">      // Invoke the Agent_OnLoad function</span><br><span class=\"line\">      jint err = (*on_load_entry)(&amp;main_vm, agent-&gt;options(), NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>create_vm_init_agents 这个函数通过遍历 Agent 链表来逐个加载 Agent。通过这段代码可以看出，首先通过 lookup_agent_on_load 来加载 Agent 并且找到 Agent_OnLoad 函数，这个函数是 Agent 的入口函数。如果没找到这个函数，则认为是加载了一个不合法的 Agent，则什么也不做，否则调用这个函数，这样 Agent 的代码就开始执行起来了。对于使用 Java Instrumentation API 来编写 Agent 的方式来说，在解析阶段观察到在 add_init_agent 函数里面传递进去的是一个叫做”instrument”的字符串，其实这是一个动态链接库。在 Linux 里面，这个库叫做 libinstrument.so，在 BSD 系统中叫做 libinstrument.dylib，该动态链接库在{JAVA_HOME}/jre/lib/目录下。</p>\n<h6 id=\"2-2-3-Instrument-动态链接库\"><a href=\"#2-2-3-Instrument-动态链接库\" class=\"headerlink\" title=\"2.2.3 Instrument 动态链接库\"></a>2.2.3 Instrument 动态链接库</h6><p>libinstrument 用来支持使用 Java Instrumentation API 来编写 Agent，在 libinstrument 中有一个非常重要的类称为：JPLISAgent（Java Programming Language Instrumentation Services Agent），它的作用是初始化所有通过 Java Instrumentation API 编写的 Agent，并且也承担着通过 JVMTI 实现 Java Instrumentation 中暴露 API 的责任。<br>我们已经知道，在 JVM 启动的时候，JVM 会通过-javaagent 参数加载 Agent。最开始加载的是 libinstrument 动态链接库，然后在动态链接库里面找到 JVMTI 的入口方法：Agent_OnLoad。下面就来分析一下在 libinstrument 动态链接库中，Agent_OnLoad 函数是怎么实现的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JNIEXPORT jint JNICALL</span><br><span class=\"line\">DEF_Agent_OnLoad(JavaVM *vm, char *tail, void * reserved) &#123;</span><br><span class=\"line\">    initerror = createNewJPLISAgent(vm, &amp;agent);</span><br><span class=\"line\">    if ( initerror == JPLIS_INIT_ERROR_NONE ) &#123;</span><br><span class=\"line\">        if (parseArgumentTail(tail, &amp;jarfile, &amp;options) != 0) &#123;</span><br><span class=\"line\">            fprintf(stderr, &quot;-javaagent: memory allocation failure.\\n&quot;);</span><br><span class=\"line\">            return JNI_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        attributes = readAttributes(jarfile);</span><br><span class=\"line\">        premainClass = getAttribute(attributes, &quot;Premain-Class&quot;);</span><br><span class=\"line\">        /* Save the jarfile name */</span><br><span class=\"line\">        agent-&gt;mJarfile = jarfile;</span><br><span class=\"line\">        /*</span><br><span class=\"line\">         * Convert JAR attributes into agent capabilities</span><br><span class=\"line\">         */</span><br><span class=\"line\">        convertCapabilityAttributes(attributes, agent);</span><br><span class=\"line\">        /*</span><br><span class=\"line\">         * Track (record) the agent class name and options data</span><br><span class=\"line\">         */</span><br><span class=\"line\">        initerror = recordCommandLineData(agent, premainClass, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码片段是经过精简的 libinstrument 中 Agent_OnLoad 实现的，大概的流程就是：先创建一个 JPLISAgent，然后将 ManiFest 中设定的一些参数解析出来， 比如（Premain-Class）等。创建了 JPLISAgent 之后，调用 initializeJPLISAgent 对这个 Agent 进行初始化操作。跟进 initializeJPLISAgent 看一下是如何初始化的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JPLISInitializationError initializeJPLISAgent(JPLISAgent *agent, JavaVM *vm, jvmtiEnv *jvmtienv) &#123;</span><br><span class=\"line\">    /* check what capabilities are available */</span><br><span class=\"line\">    checkCapabilities(agent);</span><br><span class=\"line\">    /* check phase - if live phase then we don&#x27;t need the VMInit event */</span><br><span class=\"line\">    jvmtierror = (*jvmtienv)-&gt;GetPhase(jvmtienv, &amp;phase);</span><br><span class=\"line\">    /* now turn on the VMInit event */</span><br><span class=\"line\">    if ( jvmtierror == JVMTI_ERROR_NONE ) &#123;</span><br><span class=\"line\">        jvmtiEventCallbacks callbacks;</span><br><span class=\"line\">        memset(&amp;callbacks, 0, sizeof(callbacks));</span><br><span class=\"line\">        callbacks.VMInit = &amp;eventHandlerVMInit;</span><br><span class=\"line\">        jvmtierror = (*jvmtienv)-&gt;SetEventCallbacks(jvmtienv,&amp;callbacks,sizeof(callbacks));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if ( jvmtierror == JVMTI_ERROR_NONE ) &#123;</span><br><span class=\"line\">        jvmtierror = (*jvmtienv)-&gt;SetEventNotificationMode(jvmtienv,JVMTI_ENABLE,JVMTI_EVENT_VM_INIT,NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return (jvmtierror == JVMTI_ERROR_NONE)? JPLIS_INIT_ERROR_NONE : JPLIS_INIT_ERROR_FAILURE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们关注 callbacks.VMInit = &eventHandlerVMInit;这行代码，这里设置了一个 VMInit 事件的回调函数，表示在 JVM 初始化的时候会回调 eventHandlerVMInit 函数。下面来看一下这个函数的实现细节，猜测就是在这里调用了 Premain 方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void JNICALL  eventHandlerVMInit( jvmtiEnv *jvmtienv,JNIEnv *jnienv,jthread thread) &#123;</span><br><span class=\"line\">   // ...</span><br><span class=\"line\">   success = processJavaStart( environment-&gt;mAgent, jnienv);</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">jboolean  processJavaStart(JPLISAgent *agent,JNIEnv *jnienv) &#123;</span><br><span class=\"line\">    result = createInstrumentationImpl(jnienv, agent);</span><br><span class=\"line\">    /*</span><br><span class=\"line\">     *  Load the Java agent, and call the premain.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    if ( result ) &#123;</span><br><span class=\"line\">        result = startJavaAgent(agent, jnienv, agent-&gt;mAgentClassName, agent-&gt;mOptionsString, agent-&gt;mPremainCaller);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">jboolean startJavaAgent( JPLISAgent *agent,JNIEnv *jnienv,const char *classname,const char *optionsString,jmethodID agentMainMethod) &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  invokeJavaAgentMainMethod(jnienv,agent-&gt;mInstrumentationImpl,agentMainMethod, classNameObject,optionsStringObject);</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看到这里，Instrument 已经实例化，invokeJavaAgentMainMethod 这个方法将我们的 Premain 方法执行起来了。接着，我们就可以根据 Instrument 实例来做我们想要做的事情了。</p>\n<h5 id=\"2-3-运行时加载-Agent\"><a href=\"#2-3-运行时加载-Agent\" class=\"headerlink\" title=\"2.3 运行时加载 Agent\"></a>2.3 运行时加载 Agent</h5><p>比起 JVM 启动时加载 Agent，运行时加载 Agent 就比较有诱惑力了，因为运行时加载 Agent 的能力给我们提供了很强的动态性，我们可以在需要的时候加载 Agent 来进行一些工作。因为是动态的，我们可以按照需求来加载所需要的 Agent，下面来分析一下动态加载 Agent 的相关技术细节。</p>\n<h6 id=\"2-3-1-AttachListener\"><a href=\"#2-3-1-AttachListener\" class=\"headerlink\" title=\"2.3.1 AttachListener\"></a>2.3.1 AttachListener</h6><p>Attach 机制通过 Attach Listener 线程来进行相关事务的处理，下面来看一下 Attach Listener 线程是如何初始化的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Starts the Attach Listener thread</span><br><span class=\"line\">void AttachListener::init() &#123;</span><br><span class=\"line\">  // 创建线程相关部分代码被去掉了</span><br><span class=\"line\">  const char thread_name[] = &quot;Attach Listener&quot;;</span><br><span class=\"line\">  Handle string = java_lang_String::create_from_str(thread_name, THREAD);</span><br><span class=\"line\">  &#123; MutexLocker mu(Threads_lock);</span><br><span class=\"line\">    JavaThread* listener_thread = new JavaThread(&amp;attach_listener_thread_entry);</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们知道，一个线程启动之后都需要指定一个入口来执行代码，Attach Listener 线程的入口是 attach_listener_thread_entry，下面看一下这个函数的具体实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void attach_listener_thread_entry(JavaThread* thread, TRAPS) &#123;</span><br><span class=\"line\">  AttachListener::set_initialized();</span><br><span class=\"line\">  for (;;) &#123;</span><br><span class=\"line\">      AttachOperation* op = AttachListener::dequeue();</span><br><span class=\"line\">      // find the function to dispatch too</span><br><span class=\"line\">      AttachOperationFunctionInfo* info = NULL;</span><br><span class=\"line\">      for (int i=0; funcs[i].name != NULL; i++) &#123;</span><br><span class=\"line\">        const char* name = funcs[i].name;</span><br><span class=\"line\">        if (strcmp(op-&gt;name(), name) == 0) &#123;</span><br><span class=\"line\">          info = &amp;(funcs[i]); break;</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">       // dispatch to the function that implements this operation</span><br><span class=\"line\">        res = (info-&gt;func)(op, &amp;st);</span><br><span class=\"line\">      //...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>整个函数执行逻辑，大概是这样的：</p>\n<p>拉取一个需要执行的任务：AttachListener::dequeue。</p>\n<p>查询匹配的命令处理函数。</p>\n<p>执行匹配到的命令执行函数。</p>\n<p>其中第二步里面存在一个命令函数表，整个表如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static AttachOperationFunctionInfo funcs[] = &#123;</span><br><span class=\"line\">  &#123; &quot;agentProperties&quot;,  get_agent_properties &#125;,</span><br><span class=\"line\">  &#123; &quot;datadump&quot;,         data_dump &#125;,</span><br><span class=\"line\">  &#123; &quot;dumpheap&quot;,         dump_heap &#125;,</span><br><span class=\"line\">  &#123; &quot;load&quot;,             load_agent &#125;,</span><br><span class=\"line\">  &#123; &quot;properties&quot;,       get_system_properties &#125;,</span><br><span class=\"line\">  &#123; &quot;threaddump&quot;,       thread_dump &#125;,</span><br><span class=\"line\">  &#123; &quot;inspectheap&quot;,      heap_inspection &#125;,</span><br><span class=\"line\">  &#123; &quot;setflag&quot;,          set_flag &#125;,</span><br><span class=\"line\">  &#123; &quot;printflag&quot;,        print_flag &#125;,</span><br><span class=\"line\">  &#123; &quot;jcmd&quot;,             jcmd &#125;,</span><br><span class=\"line\">  &#123; NULL,               NULL &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>对于加载 Agent 来说，命令就是“load”。现在，我们知道了 Attach Listener 大概的工作模式，但是还是不太清楚任务从哪来，这个秘密就藏在 AttachListener::dequeue 这行代码里面，接下来我们来分析一下 dequeue 这个函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinuxAttachOperation* LinuxAttachListener::dequeue() &#123;</span><br><span class=\"line\">  for (;;) &#123;</span><br><span class=\"line\">    // wait for client to connect</span><br><span class=\"line\">    struct sockaddr addr;</span><br><span class=\"line\">    socklen_t len = sizeof(addr);</span><br><span class=\"line\">    RESTARTABLE(::accept(listener(), &amp;addr, &amp;len), s);</span><br><span class=\"line\">    // get the credentials of the peer and check the effective uid/guid</span><br><span class=\"line\">    // - check with jeff on this.</span><br><span class=\"line\">    struct ucred cred_info;</span><br><span class=\"line\">    socklen_t optlen = sizeof(cred_info);</span><br><span class=\"line\">    if (::getsockopt(s, SOL_SOCKET, SO_PEERCRED, (void*)&amp;cred_info, &amp;optlen) == -1) &#123;</span><br><span class=\"line\">      ::close(s);</span><br><span class=\"line\">      continue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // peer credential look okay so we read the request</span><br><span class=\"line\">    LinuxAttachOperation* op = read_request(s);</span><br><span class=\"line\">    return op;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是 Linux 上的实现，不同的操作系统实现方式不太一样。上面的代码表面，Attach Listener 在某个端口监听着，通过 accept 来接收一个连接，<br>然后从这个连接里面将请求读取出来，然后将请求包装成一个 AttachOperation 类型的对象，之后就会从表里查询对应的处理函数，然后进行处理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Attach Listener使用一种被称为“懒加载”的策略进行初始化，也就是说，JVM启动的时候Attach Listener并不一定会启动起来。下面我们来分析一下这种“懒加载”策略的具体实现方案。</span><br><span class=\"line\">  // Start Attach Listener if +StartAttachListener or it can&#x27;t be started lazily</span><br><span class=\"line\">  if (!DisableAttachMechanism) &#123;</span><br><span class=\"line\">    AttachListener::vm_start();</span><br><span class=\"line\">    if (StartAttachListener || AttachListener::init_at_startup()) &#123;</span><br><span class=\"line\">      AttachListener::init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">// Attach Listener is started lazily except in the case when</span><br><span class=\"line\">// +ReduseSignalUsage is used</span><br><span class=\"line\">bool AttachListener::init_at_startup() &#123;</span><br><span class=\"line\">  if (ReduceSignalUsage) &#123;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码截取自 create_vm 函数，DisableAttachMechanism、StartAttachListener 和 ReduceSignalUsage 这三个变量默认都是 false，所以 AttachListener::init();这行代码不会在 create_vm 的时候执行，而 vm_start 会执行。下面来看一下这个函数的实现细节：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void AttachListener::vm_start() &#123;</span><br><span class=\"line\">  char fn[UNIX_PATH_MAX];</span><br><span class=\"line\">  struct stat64 st;</span><br><span class=\"line\">  int ret;</span><br><span class=\"line\">  int n = snprintf(fn, UNIX_PATH_MAX, &quot;%s/.java_pid%d&quot;,</span><br><span class=\"line\">           os::get_temp_directory(), os::current_process_id());</span><br><span class=\"line\">  assert(n &lt; (int)UNIX_PATH_MAX, &quot;java_pid file name buffer overflow&quot;);</span><br><span class=\"line\">  RESTARTABLE(::stat64(fn, &amp;st), ret);</span><br><span class=\"line\">  if (ret == 0) &#123;</span><br><span class=\"line\">    ret = ::unlink(fn);</span><br><span class=\"line\">    if (ret == -1) &#123;</span><br><span class=\"line\">      log_debug(attach)(&quot;Failed to remove stale attach pid file at %s&quot;, fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是在 Linux 上的实现，是将/tmp/目录下的.java_pid{pid}文件删除，后面在创建 Attach Listener 线程的时候会创建出来这个文件。上面说到，AttachListener::init()这行代码不会在 create_vm 的时候执行，这行代码的实现已经在上文中分析了，就是创建 Attach Listener 线程，并监听其他 JVM 的命令请求。现在来分析一下这行代码是什么时候被调用的，也就是“懒加载”到底是怎么加载起来的。</p>\n<p>// Signal Dispatcher needs to be started before VMInit event is posted<br>os::signal_init();<br>这是 create_vm 中的一段代码，看起来跟信号相关，其实 Attach 机制就是使用信号来实现“懒加载“的。下面我们来仔细地分析一下这个过程。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void os::signal_init() &#123;</span><br><span class=\"line\">  if (!ReduceSignalUsage) &#123;</span><br><span class=\"line\">    // Setup JavaThread for processing signals</span><br><span class=\"line\">    EXCEPTION_MARK;</span><br><span class=\"line\">    Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::java_lang_Thread(), true, CHECK);</span><br><span class=\"line\">    instanceKlassHandle klass (THREAD, k);</span><br><span class=\"line\">    instanceHandle thread_oop = klass-&gt;allocate_instance_handle(CHECK);</span><br><span class=\"line\">    const char thread_name[] = &quot;Signal Dispatcher&quot;;</span><br><span class=\"line\">    Handle string = java_lang_String::create_from_str(thread_name, CHECK);</span><br><span class=\"line\">    // Initialize thread_oop to put it into the system threadGroup</span><br><span class=\"line\">    Handle thread_group (THREAD, Universe::system_thread_group());</span><br><span class=\"line\">    JavaValue result(T_VOID);</span><br><span class=\"line\">    JavaCalls::call_special(&amp;result, thread_oop,klass,vmSymbols::object_initializer_name(),vmSymbols::threadgroup_string_void_signature(),</span><br><span class=\"line\">                           thread_group,string,CHECK);</span><br><span class=\"line\">    KlassHandle group(THREAD, SystemDictionary::ThreadGroup_klass());</span><br><span class=\"line\">    JavaCalls::call_special(&amp;result,thread_group,group,vmSymbols::add_method_name(),vmSymbols::thread_void_signature(),thread_oop,CHECK);</span><br><span class=\"line\">    os::signal_init_pd();</span><br><span class=\"line\">    &#123; MutexLocker mu(Threads_lock);</span><br><span class=\"line\">      JavaThread* signal_thread = new JavaThread(&amp;signal_thread_entry);</span><br><span class=\"line\">     // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // Handle ^BREAK</span><br><span class=\"line\">    os::signal(SIGBREAK, os::user_handler());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JVM 创建了一个新的进程来实现信号处理，这个线程叫“Signal Dispatcher”，一个线程创建之后需要有一个入口，“Signal Dispatcher”的入口是 signal_thread_entry：</p>\n<p>这段代码截取自 signal_thread_entry 函数，截取中的内容是和 Attach 机制信号处理相关的代码。这段代码的意思是，当接收到“SIGBREAK”信号，就执行接下来的代码，这个信号是需要 Attach 到 JVM 上的信号发出来，这个后面会再分析。我们先来看一句关键的代码：AttachListener::is_init_trigger()：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool AttachListener::is_init_trigger() &#123;</span><br><span class=\"line\">  if (init_at_startup() || is_initialized()) &#123;</span><br><span class=\"line\">    return false;               // initialized at startup or already initialized</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  char fn[PATH_MAX+1];</span><br><span class=\"line\">  sprintf(fn, &quot;.attach_pid%d&quot;, os::current_process_id());</span><br><span class=\"line\">  int ret;</span><br><span class=\"line\">  struct stat64 st;</span><br><span class=\"line\">  RESTARTABLE(::stat64(fn, &amp;st), ret);</span><br><span class=\"line\">  if (ret == -1) &#123;</span><br><span class=\"line\">    log_trace(attach)(&quot;Failed to find attach file: %s, trying alternate&quot;, fn);</span><br><span class=\"line\">    snprintf(fn, sizeof(fn), &quot;%s/.attach_pid%d&quot;, os::get_temp_directory(), os::current_process_id());</span><br><span class=\"line\">    RESTARTABLE(::stat64(fn, &amp;st), ret);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (ret == 0) &#123;</span><br><span class=\"line\">    // simple check to avoid starting the attach mechanism when</span><br><span class=\"line\">    // a bogus user creates the file</span><br><span class=\"line\">    if (st.st_uid == geteuid()) &#123;</span><br><span class=\"line\">      init();</span><br><span class=\"line\">      return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先检查了一下是否在 JVM 启动时启动了 Attach Listener，或者是否已经启动过。如果没有，才继续执行，在/tmp 目录下创建一个叫做.attach_pid%d 的文件，然后执行 AttachListener 的 init 函数，这个函数就是用来创建 Attach Listener 线程的函数，上面已经提到多次并进行了分析。到此，我们知道 Attach 机制的奥秘所在，也就是 Attach Listener 线程的创建依靠 Signal Dispatcher 线程，Signal Dispatcher 是用来处理信号的线程，当 Signal Dispatcher 线程接收到“SIGBREAK”信号之后，就会执行初始化 Attach Listener 的工作。</p>\n<h6 id=\"2-3-2-运行时加载-Agent-的实现\"><a href=\"#2-3-2-运行时加载-Agent-的实现\" class=\"headerlink\" title=\"2.3.2 运行时加载 Agent 的实现\"></a>2.3.2 运行时加载 Agent 的实现</h6><p>我们继续分析，到底是如何将一个 Agent 挂载到运行着的目标 JVM 上，在上文中提到了一段代码，用来进行运行时挂载 Agent，可以参考上文中展示的关于“attachAgentToTargetJvm”方法的代码。这个方法里面的关键是调用 VirtualMachine 的 attach 方法进行 Agent 挂载的功能。下面我们就来分析一下 VirtualMachine 的 attach 方法具体是怎么实现的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static VirtualMachine attach(String var0) throws AttachNotSupportedException, IOException &#123;</span><br><span class=\"line\">    if (var0 == null) &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;id cannot be null&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        List var1 = AttachProvider.providers();</span><br><span class=\"line\">        if (var1.size() == 0) &#123;</span><br><span class=\"line\">            throw new AttachNotSupportedException(&quot;no providers installed&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            AttachNotSupportedException var2 = null;</span><br><span class=\"line\">            Iterator var3 = var1.iterator();</span><br><span class=\"line\">            while(var3.hasNext()) &#123;</span><br><span class=\"line\">                AttachProvider var4 = (AttachProvider)var3.next();</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    return var4.attachVirtualMachine(var0);</span><br><span class=\"line\">                &#125; catch (AttachNotSupportedException var6) &#123;</span><br><span class=\"line\">                    var2 = var6;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            throw var2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法通过 attachVirtualMachine 方法进行 attach 操作，在 MacOS 系统中，AttachProvider 的实现类是 BsdAttachProvider。我们来看一下 BsdAttachProvider 的 attachVirtualMachine 方法是如何实现的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public VirtualMachine attachVirtualMachine(String var1) throws AttachNotSupportedException, IOException &#123;</span><br><span class=\"line\">        this.checkAttachPermission();</span><br><span class=\"line\">        this.testAttachable(var1);</span><br><span class=\"line\">        return new BsdVirtualMachine(this, var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">BsdVirtualMachine(AttachProvider var1, String var2) throws AttachNotSupportedException, IOException &#123;</span><br><span class=\"line\">        int var3 = Integer.parseInt(var2);</span><br><span class=\"line\">        this.path = this.findSocketFile(var3);</span><br><span class=\"line\">        if (this.path == null) &#123;</span><br><span class=\"line\">            File var4 = new File(tmpdir, &quot;.attach_pid&quot; + var3);</span><br><span class=\"line\">            createAttachFile(var4.getPath());</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                sendQuitTo(var3);</span><br><span class=\"line\">                int var5 = 0;</span><br><span class=\"line\">                long var6 = 200L;</span><br><span class=\"line\">                int var8 = (int)(this.attachTimeout() / var6);</span><br><span class=\"line\">                do &#123;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        Thread.sleep(var6);</span><br><span class=\"line\">                    &#125; catch (InterruptedException var21) &#123;</span><br><span class=\"line\">                        ;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    this.path = this.findSocketFile(var3);</span><br><span class=\"line\">                    ++var5;</span><br><span class=\"line\">                &#125; while(var5 &lt;= var8 &amp;&amp; this.path == null);</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                var4.delete();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int var24 = socket();</span><br><span class=\"line\">        connect(var24, this.path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private String findSocketFile(int var1) &#123;</span><br><span class=\"line\">        String var2 = &quot;.java_pid&quot; + var1;</span><br><span class=\"line\">        File var3 = new File(tmpdir, var2);</span><br><span class=\"line\">        return var3.exists() ? var3.getPath() : null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>findSocketFile 方法用来查询目标 JVM 上是否已经启动了 Attach Listener，它通过检查”tmp/“目录下是否存在 java_pid{pid}来进行实现。如果已经存在了，则说明 Attach 机制已经准备就绪，可以接受客户端的命令了，这个时候客户端就可以通过 connect 连接到目标 JVM 进行命令的发送，比如可以发送“load”命令来加载 Agent。如果 java_pid{pid}文件还不存在，则需要通过 sendQuitTo 方法向目标 JVM 发送一个“SIGBREAK”信号，让它初始化 Attach Listener 线程并准备接受客户端连接。可以看到，发送了信号之后客户端会循环等待 java_pid{pid}这个文件，之后再通过 connect 连接到目标 JVM 上。</p>\n<h6 id=\"2-3-3-load-命令的实现\"><a href=\"#2-3-3-load-命令的实现\" class=\"headerlink\" title=\"2.3.3 load 命令的实现\"></a>2.3.3 load 命令的实现</h6><p>下面来分析一下，“load”命令在 JVM 层面的实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static jint load_agent(AttachOperation* op, outputStream* out) &#123;</span><br><span class=\"line\">  // get agent name and options</span><br><span class=\"line\">  const char* agent = op-&gt;arg(0);</span><br><span class=\"line\">  const char* absParam = op-&gt;arg(1);</span><br><span class=\"line\">  const char* options = op-&gt;arg(2);</span><br><span class=\"line\">  // If loading a java agent then need to ensure that the java.instrument module is loaded</span><br><span class=\"line\">  if (strcmp(agent, &quot;instrument&quot;) == 0) &#123;</span><br><span class=\"line\">    Thread* THREAD = Thread::current();</span><br><span class=\"line\">    ResourceMark rm(THREAD);</span><br><span class=\"line\">    HandleMark hm(THREAD);</span><br><span class=\"line\">    JavaValue result(T_OBJECT);</span><br><span class=\"line\">    Handle h_module_name = java_lang_String::create_from_str(&quot;java.instrument&quot;, THREAD);</span><br><span class=\"line\">    JavaCalls::call_static(&amp;result,SystemDictionary::module_Modules_klass(),vmSymbols::loadModule_name(),</span><br><span class=\"line\">                           vmSymbols::loadModule_signature(),h_module_name,THREAD);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return JvmtiExport::load_agent_library(agent, absParam, options, out);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个函数先确保加载了 java.instrument 模块，之后真正执行 Agent 加载的函数是 load_agent_library ,这个函数的套路就是加载 Agent 动态链接库，如果是通过 Java instrument API 实现的 Agent，则加载的是 libinstrument 动态链接库，然后通过 libinstrument 里面的代码实现运行 agentmain 方法的逻辑，这一部分内容和 libinstrument 实现 premain 方法运行的逻辑其实差不多，这里不再做分析。至此，我们对 Java Agent 技术已经有了一个全面而细致的了解。</p>\n<h4 id=\"3-动态替换类字节码技术\"><a href=\"#3-动态替换类字节码技术\" class=\"headerlink\" title=\"3. 动态替换类字节码技术\"></a>3. 动态替换类字节码技术</h4><h5 id=\"3-1-动态字节码修改的限制\"><a href=\"#3-1-动态字节码修改的限制\" class=\"headerlink\" title=\"3.1 动态字节码修改的限制\"></a>3.1 动态字节码修改的限制</h5><p>上文中已经详细分析了 Agent 技术的实现，我们使用 Java Instrumentation API 来完成动态类修改的功能，在 Instrumentation 接口中，通过 addTransformer 方法来增加一个类转换器，类转换器由类 ClassFileTransformer 接口实现。ClassFileTransformer 接口中唯一的方法 transform 用于实现类转换，当类被加载的时候，就会调用 transform 方法，进行类转换。在运行时，我们可以通过 Instrumentation 的 redefineClasses 方法进行类重定义，在方法上有一段注释需要特别注意：</p>\n<ul>\n<li>The redefinition may change method bodies, the constant pool and attributes.</li>\n<li>The redefinition must not add, remove or rename fields or methods, change the</li>\n<li>signatures of methods, or change inheritance. These restrictions maybe be</li>\n<li>lifted in future versions. The class file bytes are not checked, verified and installed</li>\n<li>until after the transformations have been applied, if the resultant bytes are in</li>\n<li>error this method will throw an exception.<br>这里面提到，我们不可以增加、删除或者重命名字段和方法，改变方法的签名或者类的继承关系。认识到这一点很重要，当我们通过 ASM 获取到增强的字节码之后，如果增强后的字节码没有遵守这些规则，那么调用 redefineClasses 方法来进行类的重定义就会失败。那 redefineClasses 方法具体是怎么实现类的重定义的呢？它对运行时的 JVM 会造成什么样的影响呢？下面来分析 redefineClasses 的实现细节。</li>\n</ul>\n<h5 id=\"3-2-重定义类字节码的实现细节\"><a href=\"#3-2-重定义类字节码的实现细节\" class=\"headerlink\" title=\"3.2 重定义类字节码的实现细节\"></a>3.2 重定义类字节码的实现细节</h5><p>上文中我们提到，libinstrument 动态链接库中，JPLISAgent 不仅实现了 Agent 入口代码执行的路由，而且还是 Java 代码与 JVMTI 之间的一道桥梁。我们在 Java 代码中调用 Java Instrumentation API 的 redefineClasses，其实会调用 libinstrument 中的相关代码，我们来分析一下这条路径。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void redefineClasses(ClassDefinition... var1) throws ClassNotFoundException &#123;</span><br><span class=\"line\">    if (!this.isRedefineClassesSupported()) &#123;</span><br><span class=\"line\">        throw new UnsupportedOperationException(&quot;redefineClasses is not supported in this environment&quot;);</span><br><span class=\"line\">    &#125; else if (var1 == null) &#123;</span><br><span class=\"line\">        throw new NullPointerException(&quot;null passed as &#x27;definitions&#x27; in redefineClasses&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        for(int var2 = 0; var2 &lt; var1.length; ++var2) &#123;</span><br><span class=\"line\">            if (var1[var2] == null) &#123;</span><br><span class=\"line\">                throw new NullPointerException(&quot;element of &#x27;definitions&#x27; is null in redefineClasses&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (var1.length != 0) &#123;</span><br><span class=\"line\">            this.redefineClasses0(this.mNativeAgent, var1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private native void redefineClasses0(long var1, ClassDefinition[] var3) throws ClassNotFoundException;</span><br></pre></td></tr></table></figure>\n\n<p>这是 InstrumentationImpl 中的 redefineClasses 实现，该方法的具体实现依赖一个 Native 方法 redefineClasses()，我们可以在 libinstrument 中找到这个 Native 方法的实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JNIEXPORT void JNICALL Java_sun_instrument_InstrumentationImpl_redefineClasses0</span><br><span class=\"line\">  (JNIEnv * jnienv, jobject implThis, jlong agent, jobjectArray classDefinitions) &#123;</span><br><span class=\"line\">    redefineClasses(jnienv, (JPLISAgent*)(intptr_t)agent, classDefinitions);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>redefineClasses 这个函数的实现比较复杂，代码很长。下面是一段关键的代码片段：</p>\n<p>可以看到，其实是调用了 JVMTI 的 RetransformClasses 函数来完成类的重定义细节。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// class_count - pre-checked to be greater than or equal to 0</span><br><span class=\"line\">// class_definitions - pre-checked for NULL</span><br><span class=\"line\">jvmtiError JvmtiEnv::RedefineClasses(jint class_count, const jvmtiClassDefinition* class_definitions) &#123;</span><br><span class=\"line\">//TODO: add locking</span><br><span class=\"line\">  VM_RedefineClasses op(class_count, class_definitions, jvmti_class_load_kind_redefine);</span><br><span class=\"line\">  VMThread::execute(&amp;op);</span><br><span class=\"line\">  return (op.check_error());</span><br><span class=\"line\">&#125; /* end RedefineClasses */</span><br></pre></td></tr></table></figure>\n\n<p>重定义类的请求会被 JVM 包装成一个 VM_RedefineClasses 类型的 VM_Operation，VM_Operation 是 JVM 内部的一些操作的基类，包括 GC 操作等。VM_Operation 由 VMThread 来执行，新的 VM_Operation 操作会被添加到 VMThread 的运行队列中去，VMThread 会不断从队列里面拉取 VM_Operation 并调用其 doit 等函数执行具体的操作。VM_RedefineClasses 函数的流程较为复杂，下面是 VM_RedefineClasses 的大致流程：</p>\n<p>加载新的字节码，合并常量池，并且对新的字节码进行校验工作<br>// Load the caller’s new class definition(s) into _scratch_classes.<br>// Constant pool merging work is done here as needed. Also calls<br>// compare_and_normalize_class_versions() to verify the class<br>// definition(s).<br>jvmtiError load_new_class_versions(TRAPS);<br>清除方法上的断点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  // Remove all breakpoints in methods of this class</span><br><span class=\"line\">  JvmtiBreakpoints&amp; jvmti_breakpoints = JvmtiCurrentBreakpoints::get_jvmti_breakpoints();</span><br><span class=\"line\">  jvmti_breakpoints.clearall_in_class_at_safepoint(the_class());</span><br><span class=\"line\">JIT逆优化</span><br><span class=\"line\"></span><br><span class=\"line\">  // Deoptimize all compiled code that depends on this class</span><br><span class=\"line\">  flush_dependent_code(the_class, THREAD);</span><br></pre></td></tr></table></figure>\n\n<p>进行字节码替换工作，需要进行更新类 itable/vtable 等操作<br>进行类重定义通知</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SystemDictionary::notice_modification();</span><br></pre></td></tr></table></figure>\n\n<p>VM_RedefineClasses 实现比较复杂的，详细实现可以参考 RedefineClasses 的实现。</p>\n<h4 id=\"4-Java-debug-tool-设计与实现\"><a href=\"#4-Java-debug-tool-设计与实现\" class=\"headerlink\" title=\"4. Java-debug-tool 设计与实现\"></a>4. Java-debug-tool 设计与实现</h4><p>Java-debug-tool 是一个使用 Java Instrument API 来实现的动态调试工具，它通过在目标 JVM 上启动一个 TcpServer 来和调试客户端通信。<br>调试客户端通过命令行来发送调试命令给 TcpServer，TcpServer 中有专门用来处理命令的 handler，handler 处理完命令之后会将结果发送回客户端，<br>客户端通过处理将调试结果展示出来。下面将详细介绍 Java-debug-tool 的整体设计和实现。</p>\n<h5 id=\"4-1-Java-debug-tool-整体架构\"><a href=\"#4-1-Java-debug-tool-整体架构\" class=\"headerlink\" title=\"4.1 Java-debug-tool 整体架构\"></a>4.1 Java-debug-tool 整体架构</h5><p>Java-debug-tool 包括一个 Java Agent 和一个用于处理调试命令的核心 API，核心 API 通过一个自定义的类加载器加载进来，以保证目标 JVM 的类不会被污染。<br>整体上 Java-debug-tool 的设计是一个 Client-Server 的架构，命令客户端需要完整的完成一个命令之后才能继续执行下一个调试命令。<br>Java-debug-tool 支持多人同时进行调试，下面是整体架构图：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE44pMzDfgj8Oe9fFbU2wHn35PjibaPxvOnFMmwx1Jzv9Tsy1kxn41Q7NQ/640\"></p>\n<p>下面对每一层做简单介绍：</p>\n<ul>\n<li><p>交互层：负责将程序员的输入转换成调试交互协议，并且将调试信息呈现出来。</p>\n</li>\n<li><p>连接管理层：负责管理客户端连接，从连接中读调试协议数据并解码，对调试结果编码并将其写到连接中去；同时将那些超时未活动的连接关闭。</p>\n</li>\n<li><p>业务逻辑层：实现调试命令处理，包括命令分发、数据收集、数据处理等过程。</p>\n</li>\n<li><p>基础实现层：Java-debug-tool 实现的底层依赖，通过 Java Instrumentation 提供的 API 进行类查找、类重定义等能力，Java Instrumentation 底层依赖 JVMTI 来完成具体的功能。</p>\n</li>\n</ul>\n<p>在 Agent 被挂载到目标 JVM 上之后，Java-debug-tool 会安排一个 Spy 在目标 JVM 内活动，这个 Spy 负责将目标 JVM 内部的相关调试数据转移到命令处理模块，<br>命令处理模块会处理这些数据，然后给客户端返回调试结果。命令处理模块会增强目标类的字节码来达到数据获取的目的<br>，多个客户端可以共享一份增强过的字节码，无需重复增强。下面从 Java-debug-tool 的字节码增强方案、命令设计与实现等角度详细说明。</p>\n<h5 id=\"4-2-Java-debug-tool-的字节码增强方案\"><a href=\"#4-2-Java-debug-tool-的字节码增强方案\" class=\"headerlink\" title=\"4.2 Java-debug-tool 的字节码增强方案\"></a>4.2 Java-debug-tool 的字节码增强方案</h5><p>Java-debug-tool 使用字节码增强来获取到方法运行时的信息，比如方法入参、出参等，可以在不同的字节码位置进行增强，这种行为可以称为“插桩”，<br>每个“桩”用于获取数据并将他转储出去。Java-debug-tool 具备强大的插桩能力，不同的桩负责获取不同类别的数据，下面是 Java-debug-tool 目前所支持的“桩”：</p>\n<ul>\n<li><p>方法进入点：用于获取方法入参信息。</p>\n</li>\n<li><p>Fields 获取点 1：在方法执行前获取到对象的字段信息。</p>\n</li>\n<li><p>变量存储点：获取局部变量信息。</p>\n</li>\n<li><p>Fields 获取点 2：在方法退出前获取到对象的字段信息。</p>\n</li>\n<li><p>方法退出点：用于获取方法返回值。</p>\n</li>\n<li><p>抛出异常点：用于获取方法抛出的异常信息。</p>\n</li>\n</ul>\n<p>通过上面这些代码桩，Java-debug-tool 可以收集到丰富的方法执行信息，经过处理可以返回更加可视化的调试结果。</p>\n<h6 id=\"4-2-1-字节码增强\"><a href=\"#4-2-1-字节码增强\" class=\"headerlink\" title=\"4.2.1 字节码增强\"></a>4.2.1 字节码增强</h6><p>Java-debug-tool 在实现上使用了 ASM 工具来进行字节码增强，并且每个插桩点都可以进行配置，如果不想要什么信息，则没必要进行对应的插桩操作。这种可配置的设计是非常有必要的，因为有时候我们仅仅是想要知道方法的入参和出参，但 Java-debug-tool 却给我们返回了所有的调试信息，这样我们就得在众多的输出中找到我们所关注的内容。如果可以进行配置，则除了入参点和出参点外其他的桩都不插，那么就可以快速看到我们想要的调试数据，这种设计的本质是为了让调试者更加专注。下面是 Java-debug-tool 的字节码增强工作方式：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4jIYWODnoWDfEAhWyia6LIsKKwIkT5FEMxEzrFKTUV5WGdAEMmlno0hA/640\"></p>\n<p>图 4-2-1</p>\n<p>如图 4-2-1 所示，当调试者发出调试命令之后，Java-debug-tool 会识别命令并判断是否需要进行字节码增强，如果命令需要增强字节码，则判断当前类+当前方法是否已经被增强过。上文已经提到，字节码替换是有一定损耗的，这种具有损耗的操作发生的次数越少越好，所以字节码替换操作会被记录起来，后续命令直接使用即可，不需要重复进行字节码增强，字节码增强还涉及多个调试客户端的协同工作问题，当一个客户端增强了一个类的字节码之后，这个客户端就锁定了该字节码，其他客户端变成只读，无法对该类进行字节码增强，只有当持有锁的客户端主动释放锁或者断开连接之后，其他客户端才能继续增强该类的字节码。<br>字节码增强模块收到字节码增强请求之后，会判断每个增强点是否需要插桩，这个判断的根据就是上文提到的插桩配置，之后字节码增强模块会生成新的字节码，Java-debug-tool 将执行字节码替换操作，之后就可以进行调试数据收集了。<br>经过字节码增强之后，原来的方法中会插入收集运行时数据的代码，这些代码在方法被调用的时候执行，获取到诸如方法入参、局部变量等信息，这些信息将传递给数据收集装置进行处理。数据收集的工作通过 Advice 完成，每个客户端同一时间只能注册一个 Advice 到 Java-debug-tool 调试模块上，多个客户端可以同时注册自己的 Advice 到调试模块上。Advice 负责收集数据并进行判断，如果当前数据符合调试命令的要求，Java-debug-tool 就会卸载这个 Advice，Advice 的数据就会被转移到 Java-debug-tool 的命令结果处理模块进行处理，并将结果发送到客户端。</p>\n<h6 id=\"4-2-2-Advice-的工作方式\"><a href=\"#4-2-2-Advice-的工作方式\" class=\"headerlink\" title=\"4.2.2 Advice 的工作方式\"></a>4.2.2 Advice 的工作方式</h6><p>Advice 是调试数据收集器，不同的调试策略会对应不同的 Advice。Advice 是工作在目标 JVM 的线程内部的，它需要轻量级和高效，意味着 Advice 不能做太过于复杂的事情，它的核心接口“match”用来判断本次收集到的调试数据是否满足调试需求。如果满足，那么 Java-debug-tool 就会将其卸载，否则会继续让他收集调试数据，这种“加载 Advice” -&gt; “卸载 Advice”的工作模式具备很好的灵活性。<br>关于 Advice，需要说明的另外一点就是线程安全，因为它加载之后会运行在目标 JVM 的线程中，目标 JVM 的方法极有可能是多线程访问的，这也就是说，Advice 需要有能力处理多个线程同时访问方法的能力，如果 Advice 处理不当，则可能会收集到杂乱无章的调试数据。下面的图片展示了 Advice 和 Java-debug-tool 调试分析模块、目标方法执行以及调试客户端等模块的关系。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4icUzSicIdgKaWyBsIVgmiaOHEPR5mUvyqDOg3e6ELs0aFF1Ub23RjnNsQ/640\"><br>图 4-2-2<br>Advice 的首次挂载由 Java-debug-tool 的命令处理器完成，当一次调试数据收集完成之后，调试数据处理模块会自动卸载 Advice，然后进行判断，如果调试数据符合 Advice 的策略，则直接将数据交由数据处理模块进行处理，否则会清空调试数据，并再次将 Advice 挂载到目标方法上去，等待下一次调试数据。非首次挂载由调试数据处理模块进行，它借助 Advice 按需取数据，如果不符合需求，则继续挂载 Advice 来获取数据，否则对调试数据进行处理并返回给客户端。</p>\n<h5 id=\"4-3-Java-debug-tool-的命令设计与实现\"><a href=\"#4-3-Java-debug-tool-的命令设计与实现\" class=\"headerlink\" title=\"4.3 Java-debug-tool 的命令设计与实现\"></a>4.3 Java-debug-tool 的命令设计与实现</h5><h6 id=\"4-3-1-命令执行\"><a href=\"#4-3-1-命令执行\" class=\"headerlink\" title=\"4.3.1 命令执行\"></a>4.3.1 命令执行</h6><p>上文已经完整的描述了 Java-debug-tool 的设计以及核心技术方案，本小节将详细介绍 Java-debug-tool 的命令设计与实现。首先需要将一个调试命令的执行流程描述清楚，下面是一张用来表示命令请求处理流程的图片：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4NAFPL7rkntPMiaicJtbn84MnRNibQkPhUibZ5cuWpZpcibYxx0vR41PHNDw/640\"><br>图 4-3-1<br>图 4-3-1 简单的描述了 Java-debug-tool 的命令处理方式，客户端连接到服务端之后，会进行一些协议解析、协议认证、协议填充等工作，之后将进行命令分发。服务端如果发现客户端的命令不合法，则会立即返回错误信息，否则再进行命令处理。命令处理属于典型的三段式处理，前置命令处理、命令处理以及后置命令处理，同时会对命令处理过程中的异常信息进行捕获处理，三段式处理的好处是命令处理被拆成了多个阶段，多个阶段负责不同的职责。前置命令处理用来做一些命令权限控制的工作，并填充一些类似命令处理开始时间戳等信息，命令处理就是通过字节码增强，挂载 Advice 进行数据收集，再经过数据处理来产生命令结果的过程，后置处理则用来处理一些连接关闭、字节码解锁等事项。<br>Java-debug-tool 允许客户端设置一个命令执行超时时间，超过这个时间则认为命令没有结果，如果客户端没有设置自己的超时时间，就使用默认的超时时间进行超时控制。Java-debug-tool 通过设计了两阶段的超时检测机制来实现命令执行超时功能：首先，第一阶段超时触发，则 Java-debug-tool 会友好的警告命令处理模块处理时间已经超时，需要立即停止命令执行，这允许命令自己做一些现场清理工作，当然需要命令执行线程自己感知到这种超时警告；当第二阶段超时触发，则 Java-debug-tool 认为命令必须结束执行，会强行打断命令执行线程。超时机制的目的是为了不让命令执行太长时间，命令如果长时间没有收集到调试数据，则应该停止执行，并思考是否调试了一个错误的方法。当然，超时机制还可以定期清理那些因为未知原因断开连接的客户端持有的调试资源，比如字节码锁。</p>\n<h6 id=\"4-3-4-获取方法执行视图\"><a href=\"#4-3-4-获取方法执行视图\" class=\"headerlink\" title=\"4.3.4 获取方法执行视图\"></a>4.3.4 获取方法执行视图</h6><p>Java-debug-tool 通过下面的信息来向调试者呈现出一次方法执行的视图：<br>正在调试的方法信息。</p>\n<p>方法调用堆栈。</p>\n<p>调试耗时，包括对目标 JVM 造成的 STW 时间。</p>\n<p>方法入参，包括入参的类型及参数值。</p>\n<p>方法的执行路径。</p>\n<p>代码执行耗时。</p>\n<p>局部变量信息。</p>\n<p>方法返回结果。</p>\n<p>方法抛出的异常。</p>\n<p>对象字段值快照。</p>\n<p>图 4-3-2 展示了 Java-debug-tool 获取到正在运行的方法的执行视图的信息。<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXwHv2oFu6vZbZ2VriafkoE4TYKGnNuqCgHOSkZiabggzJUESbqSDMWRZM1OtVNGziasnSAiae7ibYicAKw/640?wx_fmt=png\"></p>\n<p>图 4-3-2</p>\n<h5 id=\"4-4-Java-debug-tool-与同类产品对比分析\"><a href=\"#4-4-Java-debug-tool-与同类产品对比分析\" class=\"headerlink\" title=\"4.4 Java-debug-tool 与同类产品对比分析\"></a>4.4 Java-debug-tool 与同类产品对比分析</h5><p>Java-debug-tool 的同类产品主要是 greys，其他类似的工具大部分都是基于 greys 进行的二次开发，所以直接选择 greys 来和 Java-debug-tool 进行对比。</p>\n<h4 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h4><p>本文详细剖析了 Java 动态调试关键技术的实现细节，并介绍了我们基于 Java 动态调试技术结合实际故障排查场景进行的一点探索实践；动态调试技术为研发人员进行线上问题排查提供了一种新的思路，我们基于动态调试技术解决了传统断点调试存在的问题，使得可以将断点调试这种技术应用在线上，以线下调试的思维来进行线上调试，提高问题排查效率。</p>\n<h4 id=\"6-参考文献\"><a href=\"#6-参考文献\" class=\"headerlink\" title=\"6. 参考文献\"></a>6. 参考文献</h4><p>ASM 4 guide</p>\n<p>Java Virtual Machine Specification</p>\n<p>JVM Tool Interface</p>\n<p>alibaba arthas</p>\n<p>openjdk</p>\n<h4 id=\"摘自\"><a href=\"#摘自\" class=\"headerlink\" title=\"摘自\"></a>摘自</h4><p><a href=\"https://mp.weixin.qq.com/s/ZlNcvwJ_swspifWTLHA92Q\">https://mp.weixin.qq.com/s/ZlNcvwJ_swspifWTLHA92Q</a></p>\n"},{"title":"bytebuddy实现aop","_content":"\n## 1.背景\n最近业务服务需要做一些组件第三方组件监控的事，需要用到字节码修改相关的技术，bytebuddy就是其中一种，\n网上找了一下bytebuddy相关资料，不少大佬写的不错的帖子就直接拿过来了，下方备注参考连接\n\n本文主要介绍 bytebuddy-aop相关操作\n\n## 2.ByteBuddy简介\n\nByte Buddy 是一个代码生成和操作库，用于在 Java 应用程序运行时创建和修改 Java 类，无需编译器的帮助。\n除了Java 类库附带的代码生成实用程序，Byte Buddy 允许创建任意类，并且不限于实现用于创建运行时代理的接口。\n此外，Byte Buddy 提供了一个方便的 API，用于手动、使用 Java 代理或在构建期间更改类。\n\n简单来说，ByteBuddy是一个可以在运行时动态生成java class的类库。在这篇文章中，\n我们将会使用ByteBuddy这个框架操作已经存在的类，创建指定的新类，甚至拦截方法调用。\n\n官网：https://bytebuddy.net/#/\n\n* 代码地址参考：https://github.com/wuhaocn/jcode-simple.git\n\n## 3.AOP注解实现\n### 3.1 依赖引入\n 依赖byte-buddy、byte-buddy-agent相关类\n\n```\ndependencies {\n  implementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.11.8'\n}\n\n```\n\n### 3.2 定义相关类\n定义 注解类、业务类、监听类;\n\n* 注解类\n\n```\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Monitor {\n}\n```\n\n* 业务类\n此处定义监控方法并加上Monitor注解\n```\npublic class BizAnnotationService {\n\t@Monitor\n    public int foo(int value) {\n        System.out.println(\"foo: \" + value);\n        return value;\n    }\n\n    public int bar(int value) {\n        System.out.println(\"bar: \" + value);\n        return value;\n    }\n}\n```\n* 监听类\n 实现 @Advice.OnMethodEnter    @Advice.OnMethodExit 监听业务\n```\nclass MonitorAnnotationAdvisor {\n    @Advice.OnMethodEnter\n    public static void onMethodEnter(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments) {\n\t\tif (method.getAnnotation(Monitor.class) != null) {\n\t\t\tSystem.out.println(\"onMethodEnter \" + method.getName() + \" with arguments: \" + Arrays.toString(arguments));\n\t\t}\n    }\n\n    @Advice.OnMethodExit\n    public static void onMethodExit(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments, @Advice.Return Object ret) {\n\t\tif (method.getAnnotation(Monitor.class) != null) {\n\t\t\tSystem.out.println(\"onMethodExit \" + method.getName() + \" with arguments: \" + Arrays.toString(arguments));\n\t\t}\n    }\n}\n```\n  \n* 测试类\n\n测试注解生效\n\n```\npublic class BizAnnotationTest {\n\tpublic static void main(String[] args) throws Exception {\n\t\tBizAnnotationService service = new ByteBuddy()\n\t\t\t\t.subclass(BizAnnotationService.class)\n\t\t\t\t.method(ElementMatchers.any())\n\t\t\t\t.intercept(Advice.to(MonitorAnnotationAdvisor.class))\n\t\t\t\t.make()\n\t\t\t\t.load(BizAnnotationService.class.getClassLoader())\n\t\t\t\t.getLoaded()\n\t\t\t\t.newInstance();\n\t\tservice.bar(11111);\n\t\tservice.foo(99999);\n\t}\n\n}\n```\n\n* 结果输出\n\n```\n> Task :code-gen:bytebuddy:BizAnnotationTest.main()\nbar: 11111\nonMethodEnter foo with arguments: [99999]\nfoo: 99999\nonMethodExit foo with arguments: [99999]\n\n```\n\n\n## 4.AOP监听第三方组件\n### 4.1 定义相关类\n\n定义 业务类、监听类、测试类;\n\n主要原因是调用代码无法增加注解\n\n* 业务类\n  此处定义监控方法并加上未添加注解\n```\npublic class BizService {\n    public int foo(int value) {\n        System.out.println(\"foo: \" + value);\n        return value;\n    }\n\n    public int bar(int value) {\n        System.out.println(\"bar: \" + value);\n        return value;\n    }\n}\n```\n* 监听类\n  实现 @Advice.OnMethodEnter    @Advice.OnMethodExit 监听业务\n```\nclass MonitorAdvisor {\n    @Advice.OnMethodEnter\n    public static void onMethodEnter(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments) {\n\t\tSystem.out.println(\"onMethodEnter \" + method.getName() + \" with arguments: \" + Arrays.toString(arguments));\n    }\n\n    @Advice.OnMethodExit\n    public static void onMethodExit(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments, @Advice.Return Object ret) {\n\t\tSystem.out.println(\"onMethodExit \" + method.getName() + \" with arguments: \" + Arrays.toString(arguments) + \" return: \" + ret);\n    }\n}\n```\n\n* 测试类\n\n测试不添加注解验证\n\n```\npublic class BizServiceTest {\n\tpublic static void main(String[] args) throws Exception {\n\t\tBizService service = new ByteBuddy()\n\t\t\t\t.subclass(BizService.class)\n\t\t\t\t.method(ElementMatchers.any())\n\t\t\t\t.intercept(Advice.to(MonitorAdvisor.class))\n\t\t\t\t.make()\n\t\t\t\t.load(BizService.class.getClassLoader())\n\t\t\t\t.getLoaded()\n\t\t\t\t.newInstance();\n\t\tservice.bar(00000);\n\t\tservice.foo(99999);\n\t}\n\n}\n```\n\n* 结果输出\n\n```\n> Task :code-gen:bytebuddy:BizServiceTest.main()\nonMethodEnter bar with arguments: [11111]\nbar: 11111\nonMethodExit bar with arguments: [11111] return: 11111\nonMethodEnter foo with arguments: [99999]\nfoo: 99999\nonMethodExit foo with arguments: [99999] return: 99999\n```\n\n## 5.监控耗时\n### 5.1 定义相关类\n* 业务类\n耗时处理\n```\npublic class CostService {\n    public int play(int value) throws Exception {\n        System.out.println(\"foo: \" + value);\n        Thread.sleep(1000);\n        return value;\n    }\n\n}\n```\n\n* 监控类\n实现\t@RuntimeType通过 Object intercept(@SuperCall Callable<?> callable)返回处理结果\n```\npublic class CostMonitorAdvisor {\n\t@RuntimeType\n\tpublic static Object intercept(@SuperCall Callable<?> callable) throws Exception {\n\t\tlong start = System.currentTimeMillis();\n\t\ttry {\n\t\t\treturn callable.call();\n\t\t} finally {\n\t\t\tSystem.out.println(\"方法耗时：\" + (System.currentTimeMillis() - start) + \"ms\");\n\t\t}\n\t}\n}\n```\n\n* 测试类\n\n通过方法委托实现 ByteBuddy#intercept(MethodDelegation.to(CostMonitorAdvisor.class))\n\n```\npublic class CostServiceTest {\n\tpublic static void main(String[] args) throws Exception {\n\t\tCostService service = new ByteBuddy()\n\t\t\t\t.subclass(CostService.class)\n\t\t\t\t.method(ElementMatchers.any())\n\t\t\t\t.intercept(MethodDelegation.to(CostMonitorAdvisor.class))\n\t\t\t\t.make()\n\t\t\t\t.load(CostService.class.getClassLoader())\n\t\t\t\t.getLoaded()\n\t\t\t\t.newInstance();\n\t\tservice.play(11111);\n\t}\n\n}\n```\n\n* 结果输出\n\n```\n> Task :code-gen:bytebuddy:CostServiceTest.main()\nplay: 11111\n方法耗时：35ms\n\n```\n\n* 带参传递\n部分构造函数携带参数，这里以redis为例简单写了下带参数传递的类\n```\nByteBuddy byteBuddy = new ByteBuddy();\nClass aClass = byteBuddy.subclass(Jedis.class)\n        .method(ElementMatchers.any())\n        .intercept(MethodDelegation.to(RedisMonitorAdvisor.class))\n        .make()\n        .load(Jedis.class.getClassLoader())\n        .getLoaded();\nClass[] p = {String.class, int.class};\nConstructor<Jedis> classDeclaredConstructor = aClass.getDeclaredConstructor(p);\nJedis jedis = classDeclaredConstructor.newInstance(\"10.3.4.111\", 6379);\n        \n```\n\n\n\n## 6.总结\n\n* 通过ByteBuddy创建实例，并注入切面可实现横切\n    * 可执行onMethodEnter onMethodExit相关操作\n    * RuntimeType监听方法耗时\n* 对象创建需要通过ByteBuddy创建，自己创建类无法实现\n\n* 无法监控静态对象\n\n## 7.注解含义\n\n 注解 |\t说明\n-----|-----\n@Argument\t| 绑定单个参数\n@AllArguments |\t绑定所有参数的数组\n@This\t| 当前被拦截的、动态生成的那个对象\n@Super\t| 当前被拦截的、动态生成的那个对象的父类对象\n@Origin\t| 可以绑定到以下类型的参数：Method 被调用的原始方法 Constructor 被调用的原始构造器 Class 当前动态创建的类 MethodHandle MethodType String 动态类的toString()的返回值 int 动态方法的修饰符\n@DefaultCall  |\t调用默认方法而非super的方法\n@SuperCall  |\t用于调用父类版本的方法\n@Super  |\t注入父类型对象，可以是接口，从而调用它的任何方法\n@RuntimeType  |\t可以用在返回值、参数上，提示ByteBuddy禁用严格的类型检查\n@Empty  |\t注入参数的类型的默认值\n@StubValue  |\t注入一个存根值。对于返回引用、void的方法，注入null；对于返回原始类型的方法，注入0\n@FieldValue  |\t注入被拦截对象的一个字段的值\n@Morph |\t类似于@SuperCall，但是允许指定调用参数\n\n* 代码参考:\n  https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy\n  \n## 8.参考\n\nhttps://zhuanlan.zhihu.com/p/151843984\nhttps://bytebuddy.net/#/\nhttps://www.jianshu.com/p/be2efc2b0e4c\nhttps://blog.csdn.net/generalfu/article/details/106086475","source":"_posts/language/java/bytecode/bytebuddy-aop.md","raw":"---\ntitle: bytebuddy实现aop\ncategories:\n- java\n\n---\n\n## 1.背景\n最近业务服务需要做一些组件第三方组件监控的事，需要用到字节码修改相关的技术，bytebuddy就是其中一种，\n网上找了一下bytebuddy相关资料，不少大佬写的不错的帖子就直接拿过来了，下方备注参考连接\n\n本文主要介绍 bytebuddy-aop相关操作\n\n## 2.ByteBuddy简介\n\nByte Buddy 是一个代码生成和操作库，用于在 Java 应用程序运行时创建和修改 Java 类，无需编译器的帮助。\n除了Java 类库附带的代码生成实用程序，Byte Buddy 允许创建任意类，并且不限于实现用于创建运行时代理的接口。\n此外，Byte Buddy 提供了一个方便的 API，用于手动、使用 Java 代理或在构建期间更改类。\n\n简单来说，ByteBuddy是一个可以在运行时动态生成java class的类库。在这篇文章中，\n我们将会使用ByteBuddy这个框架操作已经存在的类，创建指定的新类，甚至拦截方法调用。\n\n官网：https://bytebuddy.net/#/\n\n* 代码地址参考：https://github.com/wuhaocn/jcode-simple.git\n\n## 3.AOP注解实现\n### 3.1 依赖引入\n 依赖byte-buddy、byte-buddy-agent相关类\n\n```\ndependencies {\n  implementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.11.8'\n}\n\n```\n\n### 3.2 定义相关类\n定义 注解类、业务类、监听类;\n\n* 注解类\n\n```\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Monitor {\n}\n```\n\n* 业务类\n此处定义监控方法并加上Monitor注解\n```\npublic class BizAnnotationService {\n\t@Monitor\n    public int foo(int value) {\n        System.out.println(\"foo: \" + value);\n        return value;\n    }\n\n    public int bar(int value) {\n        System.out.println(\"bar: \" + value);\n        return value;\n    }\n}\n```\n* 监听类\n 实现 @Advice.OnMethodEnter    @Advice.OnMethodExit 监听业务\n```\nclass MonitorAnnotationAdvisor {\n    @Advice.OnMethodEnter\n    public static void onMethodEnter(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments) {\n\t\tif (method.getAnnotation(Monitor.class) != null) {\n\t\t\tSystem.out.println(\"onMethodEnter \" + method.getName() + \" with arguments: \" + Arrays.toString(arguments));\n\t\t}\n    }\n\n    @Advice.OnMethodExit\n    public static void onMethodExit(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments, @Advice.Return Object ret) {\n\t\tif (method.getAnnotation(Monitor.class) != null) {\n\t\t\tSystem.out.println(\"onMethodExit \" + method.getName() + \" with arguments: \" + Arrays.toString(arguments));\n\t\t}\n    }\n}\n```\n  \n* 测试类\n\n测试注解生效\n\n```\npublic class BizAnnotationTest {\n\tpublic static void main(String[] args) throws Exception {\n\t\tBizAnnotationService service = new ByteBuddy()\n\t\t\t\t.subclass(BizAnnotationService.class)\n\t\t\t\t.method(ElementMatchers.any())\n\t\t\t\t.intercept(Advice.to(MonitorAnnotationAdvisor.class))\n\t\t\t\t.make()\n\t\t\t\t.load(BizAnnotationService.class.getClassLoader())\n\t\t\t\t.getLoaded()\n\t\t\t\t.newInstance();\n\t\tservice.bar(11111);\n\t\tservice.foo(99999);\n\t}\n\n}\n```\n\n* 结果输出\n\n```\n> Task :code-gen:bytebuddy:BizAnnotationTest.main()\nbar: 11111\nonMethodEnter foo with arguments: [99999]\nfoo: 99999\nonMethodExit foo with arguments: [99999]\n\n```\n\n\n## 4.AOP监听第三方组件\n### 4.1 定义相关类\n\n定义 业务类、监听类、测试类;\n\n主要原因是调用代码无法增加注解\n\n* 业务类\n  此处定义监控方法并加上未添加注解\n```\npublic class BizService {\n    public int foo(int value) {\n        System.out.println(\"foo: \" + value);\n        return value;\n    }\n\n    public int bar(int value) {\n        System.out.println(\"bar: \" + value);\n        return value;\n    }\n}\n```\n* 监听类\n  实现 @Advice.OnMethodEnter    @Advice.OnMethodExit 监听业务\n```\nclass MonitorAdvisor {\n    @Advice.OnMethodEnter\n    public static void onMethodEnter(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments) {\n\t\tSystem.out.println(\"onMethodEnter \" + method.getName() + \" with arguments: \" + Arrays.toString(arguments));\n    }\n\n    @Advice.OnMethodExit\n    public static void onMethodExit(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments, @Advice.Return Object ret) {\n\t\tSystem.out.println(\"onMethodExit \" + method.getName() + \" with arguments: \" + Arrays.toString(arguments) + \" return: \" + ret);\n    }\n}\n```\n\n* 测试类\n\n测试不添加注解验证\n\n```\npublic class BizServiceTest {\n\tpublic static void main(String[] args) throws Exception {\n\t\tBizService service = new ByteBuddy()\n\t\t\t\t.subclass(BizService.class)\n\t\t\t\t.method(ElementMatchers.any())\n\t\t\t\t.intercept(Advice.to(MonitorAdvisor.class))\n\t\t\t\t.make()\n\t\t\t\t.load(BizService.class.getClassLoader())\n\t\t\t\t.getLoaded()\n\t\t\t\t.newInstance();\n\t\tservice.bar(00000);\n\t\tservice.foo(99999);\n\t}\n\n}\n```\n\n* 结果输出\n\n```\n> Task :code-gen:bytebuddy:BizServiceTest.main()\nonMethodEnter bar with arguments: [11111]\nbar: 11111\nonMethodExit bar with arguments: [11111] return: 11111\nonMethodEnter foo with arguments: [99999]\nfoo: 99999\nonMethodExit foo with arguments: [99999] return: 99999\n```\n\n## 5.监控耗时\n### 5.1 定义相关类\n* 业务类\n耗时处理\n```\npublic class CostService {\n    public int play(int value) throws Exception {\n        System.out.println(\"foo: \" + value);\n        Thread.sleep(1000);\n        return value;\n    }\n\n}\n```\n\n* 监控类\n实现\t@RuntimeType通过 Object intercept(@SuperCall Callable<?> callable)返回处理结果\n```\npublic class CostMonitorAdvisor {\n\t@RuntimeType\n\tpublic static Object intercept(@SuperCall Callable<?> callable) throws Exception {\n\t\tlong start = System.currentTimeMillis();\n\t\ttry {\n\t\t\treturn callable.call();\n\t\t} finally {\n\t\t\tSystem.out.println(\"方法耗时：\" + (System.currentTimeMillis() - start) + \"ms\");\n\t\t}\n\t}\n}\n```\n\n* 测试类\n\n通过方法委托实现 ByteBuddy#intercept(MethodDelegation.to(CostMonitorAdvisor.class))\n\n```\npublic class CostServiceTest {\n\tpublic static void main(String[] args) throws Exception {\n\t\tCostService service = new ByteBuddy()\n\t\t\t\t.subclass(CostService.class)\n\t\t\t\t.method(ElementMatchers.any())\n\t\t\t\t.intercept(MethodDelegation.to(CostMonitorAdvisor.class))\n\t\t\t\t.make()\n\t\t\t\t.load(CostService.class.getClassLoader())\n\t\t\t\t.getLoaded()\n\t\t\t\t.newInstance();\n\t\tservice.play(11111);\n\t}\n\n}\n```\n\n* 结果输出\n\n```\n> Task :code-gen:bytebuddy:CostServiceTest.main()\nplay: 11111\n方法耗时：35ms\n\n```\n\n* 带参传递\n部分构造函数携带参数，这里以redis为例简单写了下带参数传递的类\n```\nByteBuddy byteBuddy = new ByteBuddy();\nClass aClass = byteBuddy.subclass(Jedis.class)\n        .method(ElementMatchers.any())\n        .intercept(MethodDelegation.to(RedisMonitorAdvisor.class))\n        .make()\n        .load(Jedis.class.getClassLoader())\n        .getLoaded();\nClass[] p = {String.class, int.class};\nConstructor<Jedis> classDeclaredConstructor = aClass.getDeclaredConstructor(p);\nJedis jedis = classDeclaredConstructor.newInstance(\"10.3.4.111\", 6379);\n        \n```\n\n\n\n## 6.总结\n\n* 通过ByteBuddy创建实例，并注入切面可实现横切\n    * 可执行onMethodEnter onMethodExit相关操作\n    * RuntimeType监听方法耗时\n* 对象创建需要通过ByteBuddy创建，自己创建类无法实现\n\n* 无法监控静态对象\n\n## 7.注解含义\n\n 注解 |\t说明\n-----|-----\n@Argument\t| 绑定单个参数\n@AllArguments |\t绑定所有参数的数组\n@This\t| 当前被拦截的、动态生成的那个对象\n@Super\t| 当前被拦截的、动态生成的那个对象的父类对象\n@Origin\t| 可以绑定到以下类型的参数：Method 被调用的原始方法 Constructor 被调用的原始构造器 Class 当前动态创建的类 MethodHandle MethodType String 动态类的toString()的返回值 int 动态方法的修饰符\n@DefaultCall  |\t调用默认方法而非super的方法\n@SuperCall  |\t用于调用父类版本的方法\n@Super  |\t注入父类型对象，可以是接口，从而调用它的任何方法\n@RuntimeType  |\t可以用在返回值、参数上，提示ByteBuddy禁用严格的类型检查\n@Empty  |\t注入参数的类型的默认值\n@StubValue  |\t注入一个存根值。对于返回引用、void的方法，注入null；对于返回原始类型的方法，注入0\n@FieldValue  |\t注入被拦截对象的一个字段的值\n@Morph |\t类似于@SuperCall，但是允许指定调用参数\n\n* 代码参考:\n  https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy\n  \n## 8.参考\n\nhttps://zhuanlan.zhihu.com/p/151843984\nhttps://bytebuddy.net/#/\nhttps://www.jianshu.com/p/be2efc2b0e4c\nhttps://blog.csdn.net/generalfu/article/details/106086475","slug":"language/java/bytecode/bytebuddy-aop","published":1,"date":"2021-09-06T14:29:47.097Z","updated":"2021-09-06T14:29:47.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyj6003yu6uk00bp4wjg","content":"<h2 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1.背景\"></a>1.背景</h2><p>最近业务服务需要做一些组件第三方组件监控的事，需要用到字节码修改相关的技术，bytebuddy就是其中一种，<br>网上找了一下bytebuddy相关资料，不少大佬写的不错的帖子就直接拿过来了，下方备注参考连接</p>\n<p>本文主要介绍 bytebuddy-aop相关操作</p>\n<h2 id=\"2-ByteBuddy简介\"><a href=\"#2-ByteBuddy简介\" class=\"headerlink\" title=\"2.ByteBuddy简介\"></a>2.ByteBuddy简介</h2><p>Byte Buddy 是一个代码生成和操作库，用于在 Java 应用程序运行时创建和修改 Java 类，无需编译器的帮助。<br>除了Java 类库附带的代码生成实用程序，Byte Buddy 允许创建任意类，并且不限于实现用于创建运行时代理的接口。<br>此外，Byte Buddy 提供了一个方便的 API，用于手动、使用 Java 代理或在构建期间更改类。</p>\n<p>简单来说，ByteBuddy是一个可以在运行时动态生成java class的类库。在这篇文章中，<br>我们将会使用ByteBuddy这个框架操作已经存在的类，创建指定的新类，甚至拦截方法调用。</p>\n<p>官网：<a href=\"https://bytebuddy.net/#/\">https://bytebuddy.net/#/</a></p>\n<ul>\n<li>代码地址参考：<a href=\"https://github.com/wuhaocn/jcode-simple.git\">https://github.com/wuhaocn/jcode-simple.git</a></li>\n</ul>\n<h2 id=\"3-AOP注解实现\"><a href=\"#3-AOP注解实现\" class=\"headerlink\" title=\"3.AOP注解实现\"></a>3.AOP注解实现</h2><h3 id=\"3-1-依赖引入\"><a href=\"#3-1-依赖引入\" class=\"headerlink\" title=\"3.1 依赖引入\"></a>3.1 依赖引入</h3><p> 依赖byte-buddy、byte-buddy-agent相关类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  implementation group: &#x27;net.bytebuddy&#x27;, name: &#x27;byte-buddy&#x27;, version: &#x27;1.11.8&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-定义相关类\"><a href=\"#3-2-定义相关类\" class=\"headerlink\" title=\"3.2 定义相关类\"></a>3.2 定义相关类</h3><p>定义 注解类、业务类、监听类;</p>\n<ul>\n<li>注解类</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">public @interface Monitor &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>业务类<br>此处定义监控方法并加上Monitor注解<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BizAnnotationService &#123;</span><br><span class=\"line\">\t@Monitor</span><br><span class=\"line\">    public int foo(int value) &#123;</span><br><span class=\"line\">        System.out.println(&quot;foo: &quot; + value);</span><br><span class=\"line\">        return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int bar(int value) &#123;</span><br><span class=\"line\">        System.out.println(&quot;bar: &quot; + value);</span><br><span class=\"line\">        return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>监听类<br>实现 @Advice.OnMethodEnter    @Advice.OnMethodExit 监听业务<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MonitorAnnotationAdvisor &#123;</span><br><span class=\"line\">    @Advice.OnMethodEnter</span><br><span class=\"line\">    public static void onMethodEnter(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments) &#123;</span><br><span class=\"line\">\t\tif (method.getAnnotation(Monitor.class) != null) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;onMethodEnter &quot; + method.getName() + &quot; with arguments: &quot; + Arrays.toString(arguments));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Advice.OnMethodExit</span><br><span class=\"line\">    public static void onMethodExit(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments, @Advice.Return Object ret) &#123;</span><br><span class=\"line\">\t\tif (method.getAnnotation(Monitor.class) != null) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;onMethodExit &quot; + method.getName() + &quot; with arguments: &quot; + Arrays.toString(arguments));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>测试类</li>\n</ul>\n<p>测试注解生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BizAnnotationTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tBizAnnotationService service = new ByteBuddy()</span><br><span class=\"line\">\t\t\t\t.subclass(BizAnnotationService.class)</span><br><span class=\"line\">\t\t\t\t.method(ElementMatchers.any())</span><br><span class=\"line\">\t\t\t\t.intercept(Advice.to(MonitorAnnotationAdvisor.class))</span><br><span class=\"line\">\t\t\t\t.make()</span><br><span class=\"line\">\t\t\t\t.load(BizAnnotationService.class.getClassLoader())</span><br><span class=\"line\">\t\t\t\t.getLoaded()</span><br><span class=\"line\">\t\t\t\t.newInstance();</span><br><span class=\"line\">\t\tservice.bar(11111);</span><br><span class=\"line\">\t\tservice.foo(99999);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果输出</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Task :code-gen:bytebuddy:BizAnnotationTest.main()</span><br><span class=\"line\">bar: 11111</span><br><span class=\"line\">onMethodEnter foo with arguments: [99999]</span><br><span class=\"line\">foo: 99999</span><br><span class=\"line\">onMethodExit foo with arguments: [99999]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"4-AOP监听第三方组件\"><a href=\"#4-AOP监听第三方组件\" class=\"headerlink\" title=\"4.AOP监听第三方组件\"></a>4.AOP监听第三方组件</h2><h3 id=\"4-1-定义相关类\"><a href=\"#4-1-定义相关类\" class=\"headerlink\" title=\"4.1 定义相关类\"></a>4.1 定义相关类</h3><p>定义 业务类、监听类、测试类;</p>\n<p>主要原因是调用代码无法增加注解</p>\n<ul>\n<li><p>业务类<br>此处定义监控方法并加上未添加注解</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BizService &#123;</span><br><span class=\"line\">    public int foo(int value) &#123;</span><br><span class=\"line\">        System.out.println(&quot;foo: &quot; + value);</span><br><span class=\"line\">        return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int bar(int value) &#123;</span><br><span class=\"line\">        System.out.println(&quot;bar: &quot; + value);</span><br><span class=\"line\">        return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>监听类<br>实现 @Advice.OnMethodEnter    @Advice.OnMethodExit 监听业务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MonitorAdvisor &#123;</span><br><span class=\"line\">    @Advice.OnMethodEnter</span><br><span class=\"line\">    public static void onMethodEnter(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;onMethodEnter &quot; + method.getName() + &quot; with arguments: &quot; + Arrays.toString(arguments));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Advice.OnMethodExit</span><br><span class=\"line\">    public static void onMethodExit(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments, @Advice.Return Object ret) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;onMethodExit &quot; + method.getName() + &quot; with arguments: &quot; + Arrays.toString(arguments) + &quot; return: &quot; + ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>测试类</p>\n</li>\n</ul>\n<p>测试不添加注解验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BizServiceTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tBizService service = new ByteBuddy()</span><br><span class=\"line\">\t\t\t\t.subclass(BizService.class)</span><br><span class=\"line\">\t\t\t\t.method(ElementMatchers.any())</span><br><span class=\"line\">\t\t\t\t.intercept(Advice.to(MonitorAdvisor.class))</span><br><span class=\"line\">\t\t\t\t.make()</span><br><span class=\"line\">\t\t\t\t.load(BizService.class.getClassLoader())</span><br><span class=\"line\">\t\t\t\t.getLoaded()</span><br><span class=\"line\">\t\t\t\t.newInstance();</span><br><span class=\"line\">\t\tservice.bar(00000);</span><br><span class=\"line\">\t\tservice.foo(99999);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果输出</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Task :code-gen:bytebuddy:BizServiceTest.main()</span><br><span class=\"line\">onMethodEnter bar with arguments: [11111]</span><br><span class=\"line\">bar: 11111</span><br><span class=\"line\">onMethodExit bar with arguments: [11111] return: 11111</span><br><span class=\"line\">onMethodEnter foo with arguments: [99999]</span><br><span class=\"line\">foo: 99999</span><br><span class=\"line\">onMethodExit foo with arguments: [99999] return: 99999</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-监控耗时\"><a href=\"#5-监控耗时\" class=\"headerlink\" title=\"5.监控耗时\"></a>5.监控耗时</h2><h3 id=\"5-1-定义相关类\"><a href=\"#5-1-定义相关类\" class=\"headerlink\" title=\"5.1 定义相关类\"></a>5.1 定义相关类</h3><ul>\n<li><p>业务类<br>耗时处理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CostService &#123;</span><br><span class=\"line\">    public int play(int value) throws Exception &#123;</span><br><span class=\"line\">        System.out.println(&quot;foo: &quot; + value);</span><br><span class=\"line\">        Thread.sleep(1000);</span><br><span class=\"line\">        return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>监控类<br>实现    @RuntimeType通过 Object intercept(@SuperCall Callable&lt;?&gt; callable)返回处理结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CostMonitorAdvisor &#123;</span><br><span class=\"line\">\t@RuntimeType</span><br><span class=\"line\">\tpublic static Object intercept(@SuperCall Callable&lt;?&gt; callable) throws Exception &#123;</span><br><span class=\"line\">\t\tlong start = System.currentTimeMillis();</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\treturn callable.call();</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;方法耗时：&quot; + (System.currentTimeMillis() - start) + &quot;ms&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>测试类</p>\n</li>\n</ul>\n<p>通过方法委托实现 ByteBuddy#intercept(MethodDelegation.to(CostMonitorAdvisor.class))</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CostServiceTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tCostService service = new ByteBuddy()</span><br><span class=\"line\">\t\t\t\t.subclass(CostService.class)</span><br><span class=\"line\">\t\t\t\t.method(ElementMatchers.any())</span><br><span class=\"line\">\t\t\t\t.intercept(MethodDelegation.to(CostMonitorAdvisor.class))</span><br><span class=\"line\">\t\t\t\t.make()</span><br><span class=\"line\">\t\t\t\t.load(CostService.class.getClassLoader())</span><br><span class=\"line\">\t\t\t\t.getLoaded()</span><br><span class=\"line\">\t\t\t\t.newInstance();</span><br><span class=\"line\">\t\tservice.play(11111);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果输出</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Task :code-gen:bytebuddy:CostServiceTest.main()</span><br><span class=\"line\">play: 11111</span><br><span class=\"line\">方法耗时：35ms</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>带参传递<br>部分构造函数携带参数，这里以redis为例简单写了下带参数传递的类<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuddy byteBuddy = new ByteBuddy();</span><br><span class=\"line\">Class aClass = byteBuddy.subclass(Jedis.class)</span><br><span class=\"line\">        .method(ElementMatchers.any())</span><br><span class=\"line\">        .intercept(MethodDelegation.to(RedisMonitorAdvisor.class))</span><br><span class=\"line\">        .make()</span><br><span class=\"line\">        .load(Jedis.class.getClassLoader())</span><br><span class=\"line\">        .getLoaded();</span><br><span class=\"line\">Class[] p = &#123;String.class, int.class&#125;;</span><br><span class=\"line\">Constructor&lt;Jedis&gt; classDeclaredConstructor = aClass.getDeclaredConstructor(p);</span><br><span class=\"line\">Jedis jedis = classDeclaredConstructor.newInstance(&quot;10.3.4.111&quot;, 6379);</span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6.总结\"></a>6.总结</h2><ul>\n<li><p>通过ByteBuddy创建实例，并注入切面可实现横切</p>\n<ul>\n<li>可执行onMethodEnter onMethodExit相关操作</li>\n<li>RuntimeType监听方法耗时</li>\n</ul>\n</li>\n<li><p>对象创建需要通过ByteBuddy创建，自己创建类无法实现</p>\n</li>\n<li><p>无法监控静态对象</p>\n</li>\n</ul>\n<h2 id=\"7-注解含义\"><a href=\"#7-注解含义\" class=\"headerlink\" title=\"7.注解含义\"></a>7.注解含义</h2><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Argument</td>\n<td>绑定单个参数</td>\n</tr>\n<tr>\n<td>@AllArguments</td>\n<td>绑定所有参数的数组</td>\n</tr>\n<tr>\n<td>@This</td>\n<td>当前被拦截的、动态生成的那个对象</td>\n</tr>\n<tr>\n<td>@Super</td>\n<td>当前被拦截的、动态生成的那个对象的父类对象</td>\n</tr>\n<tr>\n<td>@Origin</td>\n<td>可以绑定到以下类型的参数：Method 被调用的原始方法 Constructor 被调用的原始构造器 Class 当前动态创建的类 MethodHandle MethodType String 动态类的toString()的返回值 int 动态方法的修饰符</td>\n</tr>\n<tr>\n<td>@DefaultCall</td>\n<td>调用默认方法而非super的方法</td>\n</tr>\n<tr>\n<td>@SuperCall</td>\n<td>用于调用父类版本的方法</td>\n</tr>\n<tr>\n<td>@Super</td>\n<td>注入父类型对象，可以是接口，从而调用它的任何方法</td>\n</tr>\n<tr>\n<td>@RuntimeType</td>\n<td>可以用在返回值、参数上，提示ByteBuddy禁用严格的类型检查</td>\n</tr>\n<tr>\n<td>@Empty</td>\n<td>注入参数的类型的默认值</td>\n</tr>\n<tr>\n<td>@StubValue</td>\n<td>注入一个存根值。对于返回引用、void的方法，注入null；对于返回原始类型的方法，注入0</td>\n</tr>\n<tr>\n<td>@FieldValue</td>\n<td>注入被拦截对象的一个字段的值</td>\n</tr>\n<tr>\n<td>@Morph</td>\n<td>类似于@SuperCall，但是允许指定调用参数</td>\n</tr>\n</tbody></table>\n<ul>\n<li>代码参考:<br><a href=\"https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy\">https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy</a></li>\n</ul>\n<h2 id=\"8-参考\"><a href=\"#8-参考\" class=\"headerlink\" title=\"8.参考\"></a>8.参考</h2><p><a href=\"https://zhuanlan.zhihu.com/p/151843984\">https://zhuanlan.zhihu.com/p/151843984</a><br><a href=\"https://bytebuddy.net/#/\">https://bytebuddy.net/#/</a><br><a href=\"https://www.jianshu.com/p/be2efc2b0e4c\">https://www.jianshu.com/p/be2efc2b0e4c</a><br><a href=\"https://blog.csdn.net/generalfu/article/details/106086475\">https://blog.csdn.net/generalfu/article/details/106086475</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1.背景\"></a>1.背景</h2><p>最近业务服务需要做一些组件第三方组件监控的事，需要用到字节码修改相关的技术，bytebuddy就是其中一种，<br>网上找了一下bytebuddy相关资料，不少大佬写的不错的帖子就直接拿过来了，下方备注参考连接</p>\n<p>本文主要介绍 bytebuddy-aop相关操作</p>\n<h2 id=\"2-ByteBuddy简介\"><a href=\"#2-ByteBuddy简介\" class=\"headerlink\" title=\"2.ByteBuddy简介\"></a>2.ByteBuddy简介</h2><p>Byte Buddy 是一个代码生成和操作库，用于在 Java 应用程序运行时创建和修改 Java 类，无需编译器的帮助。<br>除了Java 类库附带的代码生成实用程序，Byte Buddy 允许创建任意类，并且不限于实现用于创建运行时代理的接口。<br>此外，Byte Buddy 提供了一个方便的 API，用于手动、使用 Java 代理或在构建期间更改类。</p>\n<p>简单来说，ByteBuddy是一个可以在运行时动态生成java class的类库。在这篇文章中，<br>我们将会使用ByteBuddy这个框架操作已经存在的类，创建指定的新类，甚至拦截方法调用。</p>\n<p>官网：<a href=\"https://bytebuddy.net/#/\">https://bytebuddy.net/#/</a></p>\n<ul>\n<li>代码地址参考：<a href=\"https://github.com/wuhaocn/jcode-simple.git\">https://github.com/wuhaocn/jcode-simple.git</a></li>\n</ul>\n<h2 id=\"3-AOP注解实现\"><a href=\"#3-AOP注解实现\" class=\"headerlink\" title=\"3.AOP注解实现\"></a>3.AOP注解实现</h2><h3 id=\"3-1-依赖引入\"><a href=\"#3-1-依赖引入\" class=\"headerlink\" title=\"3.1 依赖引入\"></a>3.1 依赖引入</h3><p> 依赖byte-buddy、byte-buddy-agent相关类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  implementation group: &#x27;net.bytebuddy&#x27;, name: &#x27;byte-buddy&#x27;, version: &#x27;1.11.8&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-定义相关类\"><a href=\"#3-2-定义相关类\" class=\"headerlink\" title=\"3.2 定义相关类\"></a>3.2 定义相关类</h3><p>定义 注解类、业务类、监听类;</p>\n<ul>\n<li>注解类</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">public @interface Monitor &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>业务类<br>此处定义监控方法并加上Monitor注解<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BizAnnotationService &#123;</span><br><span class=\"line\">\t@Monitor</span><br><span class=\"line\">    public int foo(int value) &#123;</span><br><span class=\"line\">        System.out.println(&quot;foo: &quot; + value);</span><br><span class=\"line\">        return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int bar(int value) &#123;</span><br><span class=\"line\">        System.out.println(&quot;bar: &quot; + value);</span><br><span class=\"line\">        return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>监听类<br>实现 @Advice.OnMethodEnter    @Advice.OnMethodExit 监听业务<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MonitorAnnotationAdvisor &#123;</span><br><span class=\"line\">    @Advice.OnMethodEnter</span><br><span class=\"line\">    public static void onMethodEnter(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments) &#123;</span><br><span class=\"line\">\t\tif (method.getAnnotation(Monitor.class) != null) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;onMethodEnter &quot; + method.getName() + &quot; with arguments: &quot; + Arrays.toString(arguments));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Advice.OnMethodExit</span><br><span class=\"line\">    public static void onMethodExit(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments, @Advice.Return Object ret) &#123;</span><br><span class=\"line\">\t\tif (method.getAnnotation(Monitor.class) != null) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;onMethodExit &quot; + method.getName() + &quot; with arguments: &quot; + Arrays.toString(arguments));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>测试类</li>\n</ul>\n<p>测试注解生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BizAnnotationTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tBizAnnotationService service = new ByteBuddy()</span><br><span class=\"line\">\t\t\t\t.subclass(BizAnnotationService.class)</span><br><span class=\"line\">\t\t\t\t.method(ElementMatchers.any())</span><br><span class=\"line\">\t\t\t\t.intercept(Advice.to(MonitorAnnotationAdvisor.class))</span><br><span class=\"line\">\t\t\t\t.make()</span><br><span class=\"line\">\t\t\t\t.load(BizAnnotationService.class.getClassLoader())</span><br><span class=\"line\">\t\t\t\t.getLoaded()</span><br><span class=\"line\">\t\t\t\t.newInstance();</span><br><span class=\"line\">\t\tservice.bar(11111);</span><br><span class=\"line\">\t\tservice.foo(99999);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果输出</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Task :code-gen:bytebuddy:BizAnnotationTest.main()</span><br><span class=\"line\">bar: 11111</span><br><span class=\"line\">onMethodEnter foo with arguments: [99999]</span><br><span class=\"line\">foo: 99999</span><br><span class=\"line\">onMethodExit foo with arguments: [99999]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"4-AOP监听第三方组件\"><a href=\"#4-AOP监听第三方组件\" class=\"headerlink\" title=\"4.AOP监听第三方组件\"></a>4.AOP监听第三方组件</h2><h3 id=\"4-1-定义相关类\"><a href=\"#4-1-定义相关类\" class=\"headerlink\" title=\"4.1 定义相关类\"></a>4.1 定义相关类</h3><p>定义 业务类、监听类、测试类;</p>\n<p>主要原因是调用代码无法增加注解</p>\n<ul>\n<li><p>业务类<br>此处定义监控方法并加上未添加注解</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BizService &#123;</span><br><span class=\"line\">    public int foo(int value) &#123;</span><br><span class=\"line\">        System.out.println(&quot;foo: &quot; + value);</span><br><span class=\"line\">        return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int bar(int value) &#123;</span><br><span class=\"line\">        System.out.println(&quot;bar: &quot; + value);</span><br><span class=\"line\">        return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>监听类<br>实现 @Advice.OnMethodEnter    @Advice.OnMethodExit 监听业务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MonitorAdvisor &#123;</span><br><span class=\"line\">    @Advice.OnMethodEnter</span><br><span class=\"line\">    public static void onMethodEnter(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;onMethodEnter &quot; + method.getName() + &quot; with arguments: &quot; + Arrays.toString(arguments));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Advice.OnMethodExit</span><br><span class=\"line\">    public static void onMethodExit(@Advice.Origin Method method, @Advice.AllArguments Object[] arguments, @Advice.Return Object ret) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;onMethodExit &quot; + method.getName() + &quot; with arguments: &quot; + Arrays.toString(arguments) + &quot; return: &quot; + ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>测试类</p>\n</li>\n</ul>\n<p>测试不添加注解验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BizServiceTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tBizService service = new ByteBuddy()</span><br><span class=\"line\">\t\t\t\t.subclass(BizService.class)</span><br><span class=\"line\">\t\t\t\t.method(ElementMatchers.any())</span><br><span class=\"line\">\t\t\t\t.intercept(Advice.to(MonitorAdvisor.class))</span><br><span class=\"line\">\t\t\t\t.make()</span><br><span class=\"line\">\t\t\t\t.load(BizService.class.getClassLoader())</span><br><span class=\"line\">\t\t\t\t.getLoaded()</span><br><span class=\"line\">\t\t\t\t.newInstance();</span><br><span class=\"line\">\t\tservice.bar(00000);</span><br><span class=\"line\">\t\tservice.foo(99999);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果输出</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Task :code-gen:bytebuddy:BizServiceTest.main()</span><br><span class=\"line\">onMethodEnter bar with arguments: [11111]</span><br><span class=\"line\">bar: 11111</span><br><span class=\"line\">onMethodExit bar with arguments: [11111] return: 11111</span><br><span class=\"line\">onMethodEnter foo with arguments: [99999]</span><br><span class=\"line\">foo: 99999</span><br><span class=\"line\">onMethodExit foo with arguments: [99999] return: 99999</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-监控耗时\"><a href=\"#5-监控耗时\" class=\"headerlink\" title=\"5.监控耗时\"></a>5.监控耗时</h2><h3 id=\"5-1-定义相关类\"><a href=\"#5-1-定义相关类\" class=\"headerlink\" title=\"5.1 定义相关类\"></a>5.1 定义相关类</h3><ul>\n<li><p>业务类<br>耗时处理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CostService &#123;</span><br><span class=\"line\">    public int play(int value) throws Exception &#123;</span><br><span class=\"line\">        System.out.println(&quot;foo: &quot; + value);</span><br><span class=\"line\">        Thread.sleep(1000);</span><br><span class=\"line\">        return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>监控类<br>实现    @RuntimeType通过 Object intercept(@SuperCall Callable&lt;?&gt; callable)返回处理结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CostMonitorAdvisor &#123;</span><br><span class=\"line\">\t@RuntimeType</span><br><span class=\"line\">\tpublic static Object intercept(@SuperCall Callable&lt;?&gt; callable) throws Exception &#123;</span><br><span class=\"line\">\t\tlong start = System.currentTimeMillis();</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\treturn callable.call();</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;方法耗时：&quot; + (System.currentTimeMillis() - start) + &quot;ms&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>测试类</p>\n</li>\n</ul>\n<p>通过方法委托实现 ByteBuddy#intercept(MethodDelegation.to(CostMonitorAdvisor.class))</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CostServiceTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tCostService service = new ByteBuddy()</span><br><span class=\"line\">\t\t\t\t.subclass(CostService.class)</span><br><span class=\"line\">\t\t\t\t.method(ElementMatchers.any())</span><br><span class=\"line\">\t\t\t\t.intercept(MethodDelegation.to(CostMonitorAdvisor.class))</span><br><span class=\"line\">\t\t\t\t.make()</span><br><span class=\"line\">\t\t\t\t.load(CostService.class.getClassLoader())</span><br><span class=\"line\">\t\t\t\t.getLoaded()</span><br><span class=\"line\">\t\t\t\t.newInstance();</span><br><span class=\"line\">\t\tservice.play(11111);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果输出</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Task :code-gen:bytebuddy:CostServiceTest.main()</span><br><span class=\"line\">play: 11111</span><br><span class=\"line\">方法耗时：35ms</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>带参传递<br>部分构造函数携带参数，这里以redis为例简单写了下带参数传递的类<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuddy byteBuddy = new ByteBuddy();</span><br><span class=\"line\">Class aClass = byteBuddy.subclass(Jedis.class)</span><br><span class=\"line\">        .method(ElementMatchers.any())</span><br><span class=\"line\">        .intercept(MethodDelegation.to(RedisMonitorAdvisor.class))</span><br><span class=\"line\">        .make()</span><br><span class=\"line\">        .load(Jedis.class.getClassLoader())</span><br><span class=\"line\">        .getLoaded();</span><br><span class=\"line\">Class[] p = &#123;String.class, int.class&#125;;</span><br><span class=\"line\">Constructor&lt;Jedis&gt; classDeclaredConstructor = aClass.getDeclaredConstructor(p);</span><br><span class=\"line\">Jedis jedis = classDeclaredConstructor.newInstance(&quot;10.3.4.111&quot;, 6379);</span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6.总结\"></a>6.总结</h2><ul>\n<li><p>通过ByteBuddy创建实例，并注入切面可实现横切</p>\n<ul>\n<li>可执行onMethodEnter onMethodExit相关操作</li>\n<li>RuntimeType监听方法耗时</li>\n</ul>\n</li>\n<li><p>对象创建需要通过ByteBuddy创建，自己创建类无法实现</p>\n</li>\n<li><p>无法监控静态对象</p>\n</li>\n</ul>\n<h2 id=\"7-注解含义\"><a href=\"#7-注解含义\" class=\"headerlink\" title=\"7.注解含义\"></a>7.注解含义</h2><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Argument</td>\n<td>绑定单个参数</td>\n</tr>\n<tr>\n<td>@AllArguments</td>\n<td>绑定所有参数的数组</td>\n</tr>\n<tr>\n<td>@This</td>\n<td>当前被拦截的、动态生成的那个对象</td>\n</tr>\n<tr>\n<td>@Super</td>\n<td>当前被拦截的、动态生成的那个对象的父类对象</td>\n</tr>\n<tr>\n<td>@Origin</td>\n<td>可以绑定到以下类型的参数：Method 被调用的原始方法 Constructor 被调用的原始构造器 Class 当前动态创建的类 MethodHandle MethodType String 动态类的toString()的返回值 int 动态方法的修饰符</td>\n</tr>\n<tr>\n<td>@DefaultCall</td>\n<td>调用默认方法而非super的方法</td>\n</tr>\n<tr>\n<td>@SuperCall</td>\n<td>用于调用父类版本的方法</td>\n</tr>\n<tr>\n<td>@Super</td>\n<td>注入父类型对象，可以是接口，从而调用它的任何方法</td>\n</tr>\n<tr>\n<td>@RuntimeType</td>\n<td>可以用在返回值、参数上，提示ByteBuddy禁用严格的类型检查</td>\n</tr>\n<tr>\n<td>@Empty</td>\n<td>注入参数的类型的默认值</td>\n</tr>\n<tr>\n<td>@StubValue</td>\n<td>注入一个存根值。对于返回引用、void的方法，注入null；对于返回原始类型的方法，注入0</td>\n</tr>\n<tr>\n<td>@FieldValue</td>\n<td>注入被拦截对象的一个字段的值</td>\n</tr>\n<tr>\n<td>@Morph</td>\n<td>类似于@SuperCall，但是允许指定调用参数</td>\n</tr>\n</tbody></table>\n<ul>\n<li>代码参考:<br><a href=\"https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy\">https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy</a></li>\n</ul>\n<h2 id=\"8-参考\"><a href=\"#8-参考\" class=\"headerlink\" title=\"8.参考\"></a>8.参考</h2><p><a href=\"https://zhuanlan.zhihu.com/p/151843984\">https://zhuanlan.zhihu.com/p/151843984</a><br><a href=\"https://bytebuddy.net/#/\">https://bytebuddy.net/#/</a><br><a href=\"https://www.jianshu.com/p/be2efc2b0e4c\">https://www.jianshu.com/p/be2efc2b0e4c</a><br><a href=\"https://blog.csdn.net/generalfu/article/details/106086475\">https://blog.csdn.net/generalfu/article/details/106086475</a></p>\n"},{"title":"bytebuddy介绍","_content":"\n\n# 字节码增强技术-Byte Buddy\n\n## 1.为什么需要在运行时生成代码？\n\nJava 是一个强类型语言系统，要求变量和对象都有一个确定的类型，不兼容类型赋值都会造成转换异常，通常情况下这种错误都会被编译器检查出来，\n如此严格的类型在大多数情况下是比较令人满意的，这对构建具有非常强可读性和稳定性的应用有很大的帮助，这也是 Java 能在企业编程中的普及的一个原因之一。\n然而，因为起强类型的检查，限制了其他领域语言应用范围。比如在编写一个框架是，通常我们并不知道应用程序定义的类型，因为当这个库被编译时， 我们还不知道这些类型，为了能在这种情况下能调用或者访问应用程序的方法或者变量，Java\n类库提供了一套反射 API。使用这套反射 API， 我们就可以反省为知类型，进而调用方法或者访问属性。但是，Java 反射有如下缺点：\n\n* 需要执行一个相当昂贵的方法查找来获取描述特定方法的对象，因此，相比硬编码的方法调用，使用 反射 API 非常慢。\n* 反射 API 能绕过类型安全检查，可能会因为使用不当照成意想不到的问题，这样就错失了 Java 编程语言的一大特性。\n\n## 2.简介\n\n正如官网说的：Byte Buddy 是一个代码生成和操作库，用于在Java应用程序运行时创建和修改Java类，而无需编译器的帮助。 除了Java类库附带的代码生成实用程序外，Byte\nBuddy还允许创建任意类，并且不限于实现用于创建运行时代理的接口。 此外，Byte Buddy提供了一种方便的API，可以使用Java代理或在构建过程中手动更改类。Byte Buddy 相比其他字节码操作库有如下优势：\n\n* 无需理解字节码格式，即可操作，简单易行的 API 能很容易操作字节码。\n* 支持 Java 任何版本，库轻量，仅取决于Java字节代码解析器库ASM的访问者API，它本身不需要任何其他依赖项。\n* 比起JDK动态代理、cglib、Javassist，Byte Buddy在性能上具有优势。\n\n### 3.性能\n\n在选择字节码操作库时，往往需要考虑库本身的性能。对于许多应用程序，生成代码的运行时特性更有可能确定最佳选择。而 在生成的代码本身的运行时间之外，用于创建动态类的运行时也是一个问题。官网对库进行了性能测试，给出以下结果图：\n\n![](https://user-gold-cdn.xitu.io/2019/10/13/16dc4ade119d5610?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n图中的每一行分别为，类的创建、接口实现、方法调用、类型扩展、父类方法调用的性能结果。 从性能报告中可以看出，Byte Buddy 的主要侧重点在于以最少的运行时生成代码，需要注意的是，我们这些衡量 Java 代码性能的测试， 都由 Java\n虚拟机即时编译器优化过，如果你的代码只是偶尔运行，没有得到虚拟机的优化，可能性能会有所偏差。 所以我们在使用 Byte Buddy 开发时，我们希望监控这些指标，以避免在添加新功能时造成性能损失。\n\n## 4.Hello world代码\n\n```\nClass<?> dynamicType = new ByteBuddy()\n                .subclass(Object.class)\n                .method(ElementMatchers.named(\"toString\"))\n                .intercept(FixedValue.value(\"Hello World\"))\n                .make()\n                .load(HelloWorldBuddy.class.getClassLoader())\n                .getLoaded();\n\n        Object instance = dynamicType.newInstance();\n        String toString = instance.toString();\n        System.out.println(toString);\n        System.out.println(instance.getClass().getCanonicalName());\n```\n\n从例子中看到，操作创建一个类如此的简单。正如 ByteBuddy 说明的，ByteBuddy 提供了一个领域特定语言，这样就可以尽可能地提高人类可读性简单易行的 API， 可能能让你在初次使用的过程中就能不需要查阅 API\n的前提下完成编码。这也真是 ByteBuddy 能完爆其他同类型库的一个原因。 上面的示例中使用的默认ByteBuddy配置会以最新版本的类文件格式创建Java类，该类文件格式可以被正在处理的Java虚拟机理解。 subclass\n指定了新创建的类的父类，同时 method 指定了 Object 的 toString 方法，intercept 拦截了 toString 方法并返回固定的 value ， 最后 make 方法生产字节码，有类加载器加载到虚拟机中。\n此外，Byte Buddy不仅限于创建子类和操作类，还可以转换现有代码。Byte Buddy 还提供了一个方便的 API，用于定义所谓的 Java 代理， 该代理允许在任何 Java\n应用程序的运行期间进行代码转换，代理会在下篇单独写一篇文章讲解。\n\n## 5.创建一个类\n\n任何一个由 ByteBuddy 创建的类型都是通过 ByteBuddy 类的实例来完成的。通过简单地调用 new ByteBuddy() 就可以创建一个新实例。\n\n```\nDynamicType.Unloaded<?> dynamicType = new ByteBuddy()\n    .subclass(Object.class)\n    .make();\n```\n\n上面的示例代码会创建一个继承至 Object 类型的类。这个动态创建的类型与直接扩展 Object 并且没有实现任何方法、属性和构造函数的类型是等价的 。该列子没有命名动态生成的类型，但是在定义 Java\n类时却是必须的，所以很容易的你会想到，ByteBuddy 会有默认的策略给我们生成。 当然，你也可以很容易地明确地命名这个类型。\n\n```\nDynamicType.Unloaded<?> dynamicType = new ByteBuddy()\n.subclass(Object.class)\n.name(\"example.Type\")\n.make();\n```\n\n那么默认的策略是如何做的呢？这个将与 ByteBuddy 与 约定大于配置息息相关，它提供了我们认为比较全面的默认配置。 至于类型命名，ByteBuddy 的默认配置提供了\nNamingStrategy，它基于动态类型的超类名称来随机生成类名。 此外，名称定义在与父类相同的包下，这样父类的包级访问权限的方法对动态类型也可见。如果你将示例子类命名为 example.Foo， 那么生成的名称将会类似于\nexample.FooByteBuddy1376491271，这里的数字序列是随机的。\n\n此外，在一些需要指定类型的场景中，可以通过重写 NamingStrategy 的方法来实现，或者使用 ByteBuddy 内置的NamingStrategy.SuffixingRandom 来实现。\n\n同时需要注意的是，我们编码时需要遵守所谓的领域特定语言和不变性原则，这是说明意思呢？就是说在 ByteBuddy 中， 几乎所有的类都被构建成不可变的；极少数情况，我们不可能把对象构建成不可变的。请看下面一个例子：\n\n```\nByteBuddy byteBuddy = new ByteBuddy();\nbyteBuddy.with(new NamingStrategy.SuffixingRandom(\"suffix\"));\nDynamicType.Unloaded<?> dynamicType1 = byteBuddy.subclass(Object.class).make();\n```\n\n上述例子你会发现类的命名策略还是默认的，其根本原因就是没有遵守上述原则导致的。所以在编码过程中要基于此原则进行。\n\n## 6.加载类\n\n上节创建的 DynamicType.Unloaded，代表一个尚未加载的类，顾名思义，这些类型不会加载到 Java 虚拟机中，它仅仅表示创建好了类的字节码， 通过 DynamicType.Unloaded 中的 getBytes\n方法你可以获取到该字节码，在你的应用程序中， 你可能需要将该字节码保存到文件，或者注入的现在的 jar 文件中，因此该类型还提供了一个 saveIn(File) 方法， 可以将类存储在给定的文件夹中； inject(File)\n方法将类注入到现有的 Jar 文件中， 另外你只需要将该字节码直接加载到虚拟机使用，你可以通过 ClassLoadingStrategy 来加载。\n\n如果不指定ClassLoadingStrategy，Byte Buffer根据你提供的ClassLoader来推导出一个策略，内置的策略定义在枚举ClassLoadingStrategy.Default中\n\nWRAPPER：创建一个新的Wrapping类加载器 CHILD_FIRST：类似上面，但是子加载器优先负责加载目标类 INJECTION：利用反射机制注入动态类型 示例\n\n```\nClass<?> type = new ByteBuddy()\n.subclass(Object.class)\n.make()\n.load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)\n.getLoaded()\n```\n\n这样我们创建并加载了一个类。我们使用 WRAPPER 策略来加载适合大多数情况的类。getLoaded 方法返回一个 Java Class 的实例，它就表示现在加载的动态类。\n\n重新加载类 得益于JVM的HostSwap特性，已加载的类可以被重新定义：\n\n// 安装Byte Buddy的Agent，除了通过-javaagent静态安装，还可以：\n\n```\nByteBuddyAgent.install();\nFoo foo = new Foo();\n    new ByteBuddy()\n    .redefine(Bar.class)\n    .name(Foo.class.getName())\n    .make()\n    .load(Foo.class.getClassLoader(), ClassReloadingStrategy.fromInstalledAgent());\n    assertThat(foo.m(), is(\"bar\"));\n```\n\n可以看到，即使时已经存在的对象，也会受到类Reloading的影响。但是需要注意的是HostSwap具有限制：\n\n类再重新载入前后，必须具有相同的Schema，也就是方法、字段不能减少（可以增加） 不支持具有静态初始化块的类 修改类 redefine 重定义一个类时，Byte Buddy\n可以对一个已有的类添加属性和方法，或者删除已经存在的方法实现。新添加的方法，如果签名和原有方法一致，则原有方法会消失。\n\nrebase 类似于redefine，但是原有的方法不会消失，而是被重命名，添加后缀 $original，这样，就没有实现会被丢失。重定义的方法可以继续通过它们重命名过的名称调用原来的方法，例如类：\n\n```\nclass Foo {\n    String bar() { return \"bar\"; }\n}\n```\n\nrebase 之后：\n\n```\nclass Foo {\n    String bar() { return \"foo\" + bar$original(); }\n    private String bar$original() { return \"bar\"; }\n}\n```\n\n## 7.方法拦截\n\n通过匹配模式拦截 ByteBuddy 提供了很多用于匹配方法的 DSL，如下例子：\n\n```\nFoo dynamicFoo = new ByteBuddy()\n    .subclass(Foo.class)\n    // 匹配由Foo.class声明的方法\n    .method(isDeclaredBy(Foo.class)).intercept(FixedValue.value(\"One!\"))\n    // 匹配名为foo的方法\n    .method(named(\"foo\")).intercept(FixedValue.value(\"Two!\"))\n    // 匹配名为foo，入参数量为1的方法\n    .method(named(\"foo\").and(takesArguments(1))).intercept(FixedValue.value(\"Three!\"))\n    .make()\n    .load(getClass().getClassLoader())\n    .getLoaded()\n    .newInstance();\n```\n\nByteBuddy 通过 net.bytebuddy.matcher.ElementMatcher 来定义配置策略，可以通过此接口实现自己定义的匹配策略。库本身提供的 Matcher 非常多。Uploading file...\n\n## 8.方法委托\n\n使用MethodDelegation可以将方法调用委托给任意POJO。Byte Buddy不要求Source（被委托类）、Target类的方法名一致\n\n```\nclass Source {\n    public String hello(String name) { return null; }\n}\n\nclass Target {\n    public static String hello(String name) {\n        return \"Hello \" + name + \"!\";\n    }\n}\n\nString helloWorld = new ByteBuddy()\n    .subclass(Source.class)\n    .method(named(\"hello\")).intercept(MethodDelegation.to(Target.class))\n    .make()\n    .load(getClass().getClassLoader())\n    .getLoaded()\n    .newInstance()\n    .hello(\"World\");\n```\n\n其中 Target 还可以如下实现：\n\n```\nclass Target {\n    public static String intercept(String name) { return \"Hello \" + name + \"!\"; }\n    public static String intercept(int i) { return Integer.toString(i); }\n    public static String intercept(Object o) { return o.toString(); }\n}\n```\n\n前一个实现因为只有一个方法，而且类型也匹配，很好理解，那么后一个呢，Byte Buddy到底会委托给哪个方法？Byte Buddy遵循一个最接近原则：\n\nintercept(int)因为参数类型不匹配，直接Pass 另外两个方法参数都匹配，但是 intercept(String)类型更加接近，因此会委托给它 同时需要注意的是被拦截的方法需要声明为\npublic，否则没法进行拦截增强。除此之外，还可以使用 @RuntimeType 注解来标注方法\n\n```\n@RuntimeType\npublic static Object intercept(@RuntimeType Object value) {\n    System.out.println(\"Invoked method with: \" + value);\n    return value;\n}\n```\n\n## 9.参数绑定\n\n可以在拦截器（Target）的拦截方法 intercept 中使用注解注入参数，ByteBuddy 会根据注解给我们注入对于的参数值。比如：\n\n```\nvoid intercept(Object o1, Object o2)\n// 等同于\nvoid intercept(@Argument(0) Object o1, @Argument(1) Object o2)复制代码\n常用的注解如下表：\n```\n\n注解   | 描述\n----- | -----\n@Argument |    绑定单个参数\n@AllArguments     | 绑定所有参数的数组\n@This     | 当前被拦截的、动态生成的那个对象\n@DefaultCall |    调用默认方法而非super的方法\n@SuperCall |    用于调用父类版本的方法\n@RuntimeType |    可以用在返回值、参数上，提示ByteBuddy禁用严格的类型检查\n@Super |    当前被拦截的、动态生成的那个对象的父类对象\n@FieldValue |    注入被拦截对象的一个字段的值\n\n## 10.字段属性\n\n```\npublic class UserType {\n  public String doSomething() { return null; }\n}\n\npublic interface Interceptor {\n  String doSomethingElse();\n}\n\npublic interface InterceptionAccessor {\n  Interceptor getInterceptor();\n  void setInterceptor(Interceptor interceptor);\n}\n\npublic interface InstanceCreator {\n  Object makeInstance();\n}\n\npublic class HelloWorldInterceptor implements Interceptor {\n  @Override\n  public String doSomethingElse() {\n    return \"Hello World!\";\n  }\n}\n\nClass<? extends UserType> dynamicUserType = new ByteBuddy()\n  .subclass(UserType.class)\n    .method(not(isDeclaredBy(Object.class))) // 非父类 Object 声明的方法\n    .intercept(MethodDelegation.toField(\"interceptor\")) // 拦截委托给属性字段 interceptor\n  .defineField(\"interceptor\", Interceptor.class, Visibility.PRIVATE) // 定义一个属性字段\n  .implement(InterceptionAccessor.class).intercept(FieldAccessor.ofBeanProperty()) // 实现 InterceptionAccessor 接口\n  .make()\n  .load(getClass().getClassLoader())\n  .getLoaded();\n    \nInstanceCreator factory = new ByteBuddy()\n  .subclass(InstanceCreator.class)\n    .method(not(isDeclaredBy(Object.class))) // 非父类 Object 声明的方法\n    .intercept(MethodDelegation.toConstructor(dynamicUserType)) // 委托拦截的方法来调用提供的类型的构造函数\n  .make()\n  .load(dynamicUserType.getClassLoader())\n  .getLoaded().newInstance();\n\nUserType userType = (UserType) factory.makeInstance();\n((InterceptionAccessor) userType).setInterceptor(new HelloWorldInterceptor());\nString s = userType.doSomething();\nSystem.out.println(s); // Hello World!\n```\n\n上述例子将 UserType 类实现了 InterceptionAccessor 接口，同时使用 MethodDelegation.toField 可以使拦截的方法可以委托给新增的字段。\n\n* 代码参考:\n  https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy\n  \n## 11.参考\n\nhttps://juejin.cn/post/6844903965553852423\nhttps://www.cnblogs.com/yungyu16/p/13167240.html","source":"_posts/language/java/bytecode/bytebuddy-code.md","raw":"---\ntitle: bytebuddy介绍\ncategories:\n- java\ntag:\n- 字节码\n---\n\n\n# 字节码增强技术-Byte Buddy\n\n## 1.为什么需要在运行时生成代码？\n\nJava 是一个强类型语言系统，要求变量和对象都有一个确定的类型，不兼容类型赋值都会造成转换异常，通常情况下这种错误都会被编译器检查出来，\n如此严格的类型在大多数情况下是比较令人满意的，这对构建具有非常强可读性和稳定性的应用有很大的帮助，这也是 Java 能在企业编程中的普及的一个原因之一。\n然而，因为起强类型的检查，限制了其他领域语言应用范围。比如在编写一个框架是，通常我们并不知道应用程序定义的类型，因为当这个库被编译时， 我们还不知道这些类型，为了能在这种情况下能调用或者访问应用程序的方法或者变量，Java\n类库提供了一套反射 API。使用这套反射 API， 我们就可以反省为知类型，进而调用方法或者访问属性。但是，Java 反射有如下缺点：\n\n* 需要执行一个相当昂贵的方法查找来获取描述特定方法的对象，因此，相比硬编码的方法调用，使用 反射 API 非常慢。\n* 反射 API 能绕过类型安全检查，可能会因为使用不当照成意想不到的问题，这样就错失了 Java 编程语言的一大特性。\n\n## 2.简介\n\n正如官网说的：Byte Buddy 是一个代码生成和操作库，用于在Java应用程序运行时创建和修改Java类，而无需编译器的帮助。 除了Java类库附带的代码生成实用程序外，Byte\nBuddy还允许创建任意类，并且不限于实现用于创建运行时代理的接口。 此外，Byte Buddy提供了一种方便的API，可以使用Java代理或在构建过程中手动更改类。Byte Buddy 相比其他字节码操作库有如下优势：\n\n* 无需理解字节码格式，即可操作，简单易行的 API 能很容易操作字节码。\n* 支持 Java 任何版本，库轻量，仅取决于Java字节代码解析器库ASM的访问者API，它本身不需要任何其他依赖项。\n* 比起JDK动态代理、cglib、Javassist，Byte Buddy在性能上具有优势。\n\n### 3.性能\n\n在选择字节码操作库时，往往需要考虑库本身的性能。对于许多应用程序，生成代码的运行时特性更有可能确定最佳选择。而 在生成的代码本身的运行时间之外，用于创建动态类的运行时也是一个问题。官网对库进行了性能测试，给出以下结果图：\n\n![](https://user-gold-cdn.xitu.io/2019/10/13/16dc4ade119d5610?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n图中的每一行分别为，类的创建、接口实现、方法调用、类型扩展、父类方法调用的性能结果。 从性能报告中可以看出，Byte Buddy 的主要侧重点在于以最少的运行时生成代码，需要注意的是，我们这些衡量 Java 代码性能的测试， 都由 Java\n虚拟机即时编译器优化过，如果你的代码只是偶尔运行，没有得到虚拟机的优化，可能性能会有所偏差。 所以我们在使用 Byte Buddy 开发时，我们希望监控这些指标，以避免在添加新功能时造成性能损失。\n\n## 4.Hello world代码\n\n```\nClass<?> dynamicType = new ByteBuddy()\n                .subclass(Object.class)\n                .method(ElementMatchers.named(\"toString\"))\n                .intercept(FixedValue.value(\"Hello World\"))\n                .make()\n                .load(HelloWorldBuddy.class.getClassLoader())\n                .getLoaded();\n\n        Object instance = dynamicType.newInstance();\n        String toString = instance.toString();\n        System.out.println(toString);\n        System.out.println(instance.getClass().getCanonicalName());\n```\n\n从例子中看到，操作创建一个类如此的简单。正如 ByteBuddy 说明的，ByteBuddy 提供了一个领域特定语言，这样就可以尽可能地提高人类可读性简单易行的 API， 可能能让你在初次使用的过程中就能不需要查阅 API\n的前提下完成编码。这也真是 ByteBuddy 能完爆其他同类型库的一个原因。 上面的示例中使用的默认ByteBuddy配置会以最新版本的类文件格式创建Java类，该类文件格式可以被正在处理的Java虚拟机理解。 subclass\n指定了新创建的类的父类，同时 method 指定了 Object 的 toString 方法，intercept 拦截了 toString 方法并返回固定的 value ， 最后 make 方法生产字节码，有类加载器加载到虚拟机中。\n此外，Byte Buddy不仅限于创建子类和操作类，还可以转换现有代码。Byte Buddy 还提供了一个方便的 API，用于定义所谓的 Java 代理， 该代理允许在任何 Java\n应用程序的运行期间进行代码转换，代理会在下篇单独写一篇文章讲解。\n\n## 5.创建一个类\n\n任何一个由 ByteBuddy 创建的类型都是通过 ByteBuddy 类的实例来完成的。通过简单地调用 new ByteBuddy() 就可以创建一个新实例。\n\n```\nDynamicType.Unloaded<?> dynamicType = new ByteBuddy()\n    .subclass(Object.class)\n    .make();\n```\n\n上面的示例代码会创建一个继承至 Object 类型的类。这个动态创建的类型与直接扩展 Object 并且没有实现任何方法、属性和构造函数的类型是等价的 。该列子没有命名动态生成的类型，但是在定义 Java\n类时却是必须的，所以很容易的你会想到，ByteBuddy 会有默认的策略给我们生成。 当然，你也可以很容易地明确地命名这个类型。\n\n```\nDynamicType.Unloaded<?> dynamicType = new ByteBuddy()\n.subclass(Object.class)\n.name(\"example.Type\")\n.make();\n```\n\n那么默认的策略是如何做的呢？这个将与 ByteBuddy 与 约定大于配置息息相关，它提供了我们认为比较全面的默认配置。 至于类型命名，ByteBuddy 的默认配置提供了\nNamingStrategy，它基于动态类型的超类名称来随机生成类名。 此外，名称定义在与父类相同的包下，这样父类的包级访问权限的方法对动态类型也可见。如果你将示例子类命名为 example.Foo， 那么生成的名称将会类似于\nexample.FooByteBuddy1376491271，这里的数字序列是随机的。\n\n此外，在一些需要指定类型的场景中，可以通过重写 NamingStrategy 的方法来实现，或者使用 ByteBuddy 内置的NamingStrategy.SuffixingRandom 来实现。\n\n同时需要注意的是，我们编码时需要遵守所谓的领域特定语言和不变性原则，这是说明意思呢？就是说在 ByteBuddy 中， 几乎所有的类都被构建成不可变的；极少数情况，我们不可能把对象构建成不可变的。请看下面一个例子：\n\n```\nByteBuddy byteBuddy = new ByteBuddy();\nbyteBuddy.with(new NamingStrategy.SuffixingRandom(\"suffix\"));\nDynamicType.Unloaded<?> dynamicType1 = byteBuddy.subclass(Object.class).make();\n```\n\n上述例子你会发现类的命名策略还是默认的，其根本原因就是没有遵守上述原则导致的。所以在编码过程中要基于此原则进行。\n\n## 6.加载类\n\n上节创建的 DynamicType.Unloaded，代表一个尚未加载的类，顾名思义，这些类型不会加载到 Java 虚拟机中，它仅仅表示创建好了类的字节码， 通过 DynamicType.Unloaded 中的 getBytes\n方法你可以获取到该字节码，在你的应用程序中， 你可能需要将该字节码保存到文件，或者注入的现在的 jar 文件中，因此该类型还提供了一个 saveIn(File) 方法， 可以将类存储在给定的文件夹中； inject(File)\n方法将类注入到现有的 Jar 文件中， 另外你只需要将该字节码直接加载到虚拟机使用，你可以通过 ClassLoadingStrategy 来加载。\n\n如果不指定ClassLoadingStrategy，Byte Buffer根据你提供的ClassLoader来推导出一个策略，内置的策略定义在枚举ClassLoadingStrategy.Default中\n\nWRAPPER：创建一个新的Wrapping类加载器 CHILD_FIRST：类似上面，但是子加载器优先负责加载目标类 INJECTION：利用反射机制注入动态类型 示例\n\n```\nClass<?> type = new ByteBuddy()\n.subclass(Object.class)\n.make()\n.load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)\n.getLoaded()\n```\n\n这样我们创建并加载了一个类。我们使用 WRAPPER 策略来加载适合大多数情况的类。getLoaded 方法返回一个 Java Class 的实例，它就表示现在加载的动态类。\n\n重新加载类 得益于JVM的HostSwap特性，已加载的类可以被重新定义：\n\n// 安装Byte Buddy的Agent，除了通过-javaagent静态安装，还可以：\n\n```\nByteBuddyAgent.install();\nFoo foo = new Foo();\n    new ByteBuddy()\n    .redefine(Bar.class)\n    .name(Foo.class.getName())\n    .make()\n    .load(Foo.class.getClassLoader(), ClassReloadingStrategy.fromInstalledAgent());\n    assertThat(foo.m(), is(\"bar\"));\n```\n\n可以看到，即使时已经存在的对象，也会受到类Reloading的影响。但是需要注意的是HostSwap具有限制：\n\n类再重新载入前后，必须具有相同的Schema，也就是方法、字段不能减少（可以增加） 不支持具有静态初始化块的类 修改类 redefine 重定义一个类时，Byte Buddy\n可以对一个已有的类添加属性和方法，或者删除已经存在的方法实现。新添加的方法，如果签名和原有方法一致，则原有方法会消失。\n\nrebase 类似于redefine，但是原有的方法不会消失，而是被重命名，添加后缀 $original，这样，就没有实现会被丢失。重定义的方法可以继续通过它们重命名过的名称调用原来的方法，例如类：\n\n```\nclass Foo {\n    String bar() { return \"bar\"; }\n}\n```\n\nrebase 之后：\n\n```\nclass Foo {\n    String bar() { return \"foo\" + bar$original(); }\n    private String bar$original() { return \"bar\"; }\n}\n```\n\n## 7.方法拦截\n\n通过匹配模式拦截 ByteBuddy 提供了很多用于匹配方法的 DSL，如下例子：\n\n```\nFoo dynamicFoo = new ByteBuddy()\n    .subclass(Foo.class)\n    // 匹配由Foo.class声明的方法\n    .method(isDeclaredBy(Foo.class)).intercept(FixedValue.value(\"One!\"))\n    // 匹配名为foo的方法\n    .method(named(\"foo\")).intercept(FixedValue.value(\"Two!\"))\n    // 匹配名为foo，入参数量为1的方法\n    .method(named(\"foo\").and(takesArguments(1))).intercept(FixedValue.value(\"Three!\"))\n    .make()\n    .load(getClass().getClassLoader())\n    .getLoaded()\n    .newInstance();\n```\n\nByteBuddy 通过 net.bytebuddy.matcher.ElementMatcher 来定义配置策略，可以通过此接口实现自己定义的匹配策略。库本身提供的 Matcher 非常多。Uploading file...\n\n## 8.方法委托\n\n使用MethodDelegation可以将方法调用委托给任意POJO。Byte Buddy不要求Source（被委托类）、Target类的方法名一致\n\n```\nclass Source {\n    public String hello(String name) { return null; }\n}\n\nclass Target {\n    public static String hello(String name) {\n        return \"Hello \" + name + \"!\";\n    }\n}\n\nString helloWorld = new ByteBuddy()\n    .subclass(Source.class)\n    .method(named(\"hello\")).intercept(MethodDelegation.to(Target.class))\n    .make()\n    .load(getClass().getClassLoader())\n    .getLoaded()\n    .newInstance()\n    .hello(\"World\");\n```\n\n其中 Target 还可以如下实现：\n\n```\nclass Target {\n    public static String intercept(String name) { return \"Hello \" + name + \"!\"; }\n    public static String intercept(int i) { return Integer.toString(i); }\n    public static String intercept(Object o) { return o.toString(); }\n}\n```\n\n前一个实现因为只有一个方法，而且类型也匹配，很好理解，那么后一个呢，Byte Buddy到底会委托给哪个方法？Byte Buddy遵循一个最接近原则：\n\nintercept(int)因为参数类型不匹配，直接Pass 另外两个方法参数都匹配，但是 intercept(String)类型更加接近，因此会委托给它 同时需要注意的是被拦截的方法需要声明为\npublic，否则没法进行拦截增强。除此之外，还可以使用 @RuntimeType 注解来标注方法\n\n```\n@RuntimeType\npublic static Object intercept(@RuntimeType Object value) {\n    System.out.println(\"Invoked method with: \" + value);\n    return value;\n}\n```\n\n## 9.参数绑定\n\n可以在拦截器（Target）的拦截方法 intercept 中使用注解注入参数，ByteBuddy 会根据注解给我们注入对于的参数值。比如：\n\n```\nvoid intercept(Object o1, Object o2)\n// 等同于\nvoid intercept(@Argument(0) Object o1, @Argument(1) Object o2)复制代码\n常用的注解如下表：\n```\n\n注解   | 描述\n----- | -----\n@Argument |    绑定单个参数\n@AllArguments     | 绑定所有参数的数组\n@This     | 当前被拦截的、动态生成的那个对象\n@DefaultCall |    调用默认方法而非super的方法\n@SuperCall |    用于调用父类版本的方法\n@RuntimeType |    可以用在返回值、参数上，提示ByteBuddy禁用严格的类型检查\n@Super |    当前被拦截的、动态生成的那个对象的父类对象\n@FieldValue |    注入被拦截对象的一个字段的值\n\n## 10.字段属性\n\n```\npublic class UserType {\n  public String doSomething() { return null; }\n}\n\npublic interface Interceptor {\n  String doSomethingElse();\n}\n\npublic interface InterceptionAccessor {\n  Interceptor getInterceptor();\n  void setInterceptor(Interceptor interceptor);\n}\n\npublic interface InstanceCreator {\n  Object makeInstance();\n}\n\npublic class HelloWorldInterceptor implements Interceptor {\n  @Override\n  public String doSomethingElse() {\n    return \"Hello World!\";\n  }\n}\n\nClass<? extends UserType> dynamicUserType = new ByteBuddy()\n  .subclass(UserType.class)\n    .method(not(isDeclaredBy(Object.class))) // 非父类 Object 声明的方法\n    .intercept(MethodDelegation.toField(\"interceptor\")) // 拦截委托给属性字段 interceptor\n  .defineField(\"interceptor\", Interceptor.class, Visibility.PRIVATE) // 定义一个属性字段\n  .implement(InterceptionAccessor.class).intercept(FieldAccessor.ofBeanProperty()) // 实现 InterceptionAccessor 接口\n  .make()\n  .load(getClass().getClassLoader())\n  .getLoaded();\n    \nInstanceCreator factory = new ByteBuddy()\n  .subclass(InstanceCreator.class)\n    .method(not(isDeclaredBy(Object.class))) // 非父类 Object 声明的方法\n    .intercept(MethodDelegation.toConstructor(dynamicUserType)) // 委托拦截的方法来调用提供的类型的构造函数\n  .make()\n  .load(dynamicUserType.getClassLoader())\n  .getLoaded().newInstance();\n\nUserType userType = (UserType) factory.makeInstance();\n((InterceptionAccessor) userType).setInterceptor(new HelloWorldInterceptor());\nString s = userType.doSomething();\nSystem.out.println(s); // Hello World!\n```\n\n上述例子将 UserType 类实现了 InterceptionAccessor 接口，同时使用 MethodDelegation.toField 可以使拦截的方法可以委托给新增的字段。\n\n* 代码参考:\n  https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy\n  \n## 11.参考\n\nhttps://juejin.cn/post/6844903965553852423\nhttps://www.cnblogs.com/yungyu16/p/13167240.html","slug":"language/java/bytecode/bytebuddy-code","published":1,"date":"2021-09-06T14:29:47.097Z","updated":"2021-09-06T14:29:47.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyj80041u6uke4g5h53l","content":"<h1 id=\"字节码增强技术-Byte-Buddy\"><a href=\"#字节码增强技术-Byte-Buddy\" class=\"headerlink\" title=\"字节码增强技术-Byte Buddy\"></a>字节码增强技术-Byte Buddy</h1><h2 id=\"1-为什么需要在运行时生成代码？\"><a href=\"#1-为什么需要在运行时生成代码？\" class=\"headerlink\" title=\"1.为什么需要在运行时生成代码？\"></a>1.为什么需要在运行时生成代码？</h2><p>Java 是一个强类型语言系统，要求变量和对象都有一个确定的类型，不兼容类型赋值都会造成转换异常，通常情况下这种错误都会被编译器检查出来，<br>如此严格的类型在大多数情况下是比较令人满意的，这对构建具有非常强可读性和稳定性的应用有很大的帮助，这也是 Java 能在企业编程中的普及的一个原因之一。<br>然而，因为起强类型的检查，限制了其他领域语言应用范围。比如在编写一个框架是，通常我们并不知道应用程序定义的类型，因为当这个库被编译时， 我们还不知道这些类型，为了能在这种情况下能调用或者访问应用程序的方法或者变量，Java<br>类库提供了一套反射 API。使用这套反射 API， 我们就可以反省为知类型，进而调用方法或者访问属性。但是，Java 反射有如下缺点：</p>\n<ul>\n<li>需要执行一个相当昂贵的方法查找来获取描述特定方法的对象，因此，相比硬编码的方法调用，使用 反射 API 非常慢。</li>\n<li>反射 API 能绕过类型安全检查，可能会因为使用不当照成意想不到的问题，这样就错失了 Java 编程语言的一大特性。</li>\n</ul>\n<h2 id=\"2-简介\"><a href=\"#2-简介\" class=\"headerlink\" title=\"2.简介\"></a>2.简介</h2><p>正如官网说的：Byte Buddy 是一个代码生成和操作库，用于在Java应用程序运行时创建和修改Java类，而无需编译器的帮助。 除了Java类库附带的代码生成实用程序外，Byte<br>Buddy还允许创建任意类，并且不限于实现用于创建运行时代理的接口。 此外，Byte Buddy提供了一种方便的API，可以使用Java代理或在构建过程中手动更改类。Byte Buddy 相比其他字节码操作库有如下优势：</p>\n<ul>\n<li>无需理解字节码格式，即可操作，简单易行的 API 能很容易操作字节码。</li>\n<li>支持 Java 任何版本，库轻量，仅取决于Java字节代码解析器库ASM的访问者API，它本身不需要任何其他依赖项。</li>\n<li>比起JDK动态代理、cglib、Javassist，Byte Buddy在性能上具有优势。</li>\n</ul>\n<h3 id=\"3-性能\"><a href=\"#3-性能\" class=\"headerlink\" title=\"3.性能\"></a>3.性能</h3><p>在选择字节码操作库时，往往需要考虑库本身的性能。对于许多应用程序，生成代码的运行时特性更有可能确定最佳选择。而 在生成的代码本身的运行时间之外，用于创建动态类的运行时也是一个问题。官网对库进行了性能测试，给出以下结果图：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/10/13/16dc4ade119d5610?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"></p>\n<p>图中的每一行分别为，类的创建、接口实现、方法调用、类型扩展、父类方法调用的性能结果。 从性能报告中可以看出，Byte Buddy 的主要侧重点在于以最少的运行时生成代码，需要注意的是，我们这些衡量 Java 代码性能的测试， 都由 Java<br>虚拟机即时编译器优化过，如果你的代码只是偶尔运行，没有得到虚拟机的优化，可能性能会有所偏差。 所以我们在使用 Byte Buddy 开发时，我们希望监控这些指标，以避免在添加新功能时造成性能损失。</p>\n<h2 id=\"4-Hello-world代码\"><a href=\"#4-Hello-world代码\" class=\"headerlink\" title=\"4.Hello world代码\"></a>4.Hello world代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;?&gt; dynamicType = new ByteBuddy()</span><br><span class=\"line\">                .subclass(Object.class)</span><br><span class=\"line\">                .method(ElementMatchers.named(&quot;toString&quot;))</span><br><span class=\"line\">                .intercept(FixedValue.value(&quot;Hello World&quot;))</span><br><span class=\"line\">                .make()</span><br><span class=\"line\">                .load(HelloWorldBuddy.class.getClassLoader())</span><br><span class=\"line\">                .getLoaded();</span><br><span class=\"line\"></span><br><span class=\"line\">        Object instance = dynamicType.newInstance();</span><br><span class=\"line\">        String toString = instance.toString();</span><br><span class=\"line\">        System.out.println(toString);</span><br><span class=\"line\">        System.out.println(instance.getClass().getCanonicalName());</span><br></pre></td></tr></table></figure>\n\n<p>从例子中看到，操作创建一个类如此的简单。正如 ByteBuddy 说明的，ByteBuddy 提供了一个领域特定语言，这样就可以尽可能地提高人类可读性简单易行的 API， 可能能让你在初次使用的过程中就能不需要查阅 API<br>的前提下完成编码。这也真是 ByteBuddy 能完爆其他同类型库的一个原因。 上面的示例中使用的默认ByteBuddy配置会以最新版本的类文件格式创建Java类，该类文件格式可以被正在处理的Java虚拟机理解。 subclass<br>指定了新创建的类的父类，同时 method 指定了 Object 的 toString 方法，intercept 拦截了 toString 方法并返回固定的 value ， 最后 make 方法生产字节码，有类加载器加载到虚拟机中。<br>此外，Byte Buddy不仅限于创建子类和操作类，还可以转换现有代码。Byte Buddy 还提供了一个方便的 API，用于定义所谓的 Java 代理， 该代理允许在任何 Java<br>应用程序的运行期间进行代码转换，代理会在下篇单独写一篇文章讲解。</p>\n<h2 id=\"5-创建一个类\"><a href=\"#5-创建一个类\" class=\"headerlink\" title=\"5.创建一个类\"></a>5.创建一个类</h2><p>任何一个由 ByteBuddy 创建的类型都是通过 ByteBuddy 类的实例来完成的。通过简单地调用 new ByteBuddy() 就可以创建一个新实例。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DynamicType.Unloaded&lt;?&gt; dynamicType = new ByteBuddy()</span><br><span class=\"line\">    .subclass(Object.class)</span><br><span class=\"line\">    .make();</span><br></pre></td></tr></table></figure>\n\n<p>上面的示例代码会创建一个继承至 Object 类型的类。这个动态创建的类型与直接扩展 Object 并且没有实现任何方法、属性和构造函数的类型是等价的 。该列子没有命名动态生成的类型，但是在定义 Java<br>类时却是必须的，所以很容易的你会想到，ByteBuddy 会有默认的策略给我们生成。 当然，你也可以很容易地明确地命名这个类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DynamicType.Unloaded&lt;?&gt; dynamicType = new ByteBuddy()</span><br><span class=\"line\">.subclass(Object.class)</span><br><span class=\"line\">.name(&quot;example.Type&quot;)</span><br><span class=\"line\">.make();</span><br></pre></td></tr></table></figure>\n\n<p>那么默认的策略是如何做的呢？这个将与 ByteBuddy 与 约定大于配置息息相关，它提供了我们认为比较全面的默认配置。 至于类型命名，ByteBuddy 的默认配置提供了<br>NamingStrategy，它基于动态类型的超类名称来随机生成类名。 此外，名称定义在与父类相同的包下，这样父类的包级访问权限的方法对动态类型也可见。如果你将示例子类命名为 example.Foo， 那么生成的名称将会类似于<br>example.FooByteBuddy1376491271，这里的数字序列是随机的。</p>\n<p>此外，在一些需要指定类型的场景中，可以通过重写 NamingStrategy 的方法来实现，或者使用 ByteBuddy 内置的NamingStrategy.SuffixingRandom 来实现。</p>\n<p>同时需要注意的是，我们编码时需要遵守所谓的领域特定语言和不变性原则，这是说明意思呢？就是说在 ByteBuddy 中， 几乎所有的类都被构建成不可变的；极少数情况，我们不可能把对象构建成不可变的。请看下面一个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuddy byteBuddy = new ByteBuddy();</span><br><span class=\"line\">byteBuddy.with(new NamingStrategy.SuffixingRandom(&quot;suffix&quot;));</span><br><span class=\"line\">DynamicType.Unloaded&lt;?&gt; dynamicType1 = byteBuddy.subclass(Object.class).make();</span><br></pre></td></tr></table></figure>\n\n<p>上述例子你会发现类的命名策略还是默认的，其根本原因就是没有遵守上述原则导致的。所以在编码过程中要基于此原则进行。</p>\n<h2 id=\"6-加载类\"><a href=\"#6-加载类\" class=\"headerlink\" title=\"6.加载类\"></a>6.加载类</h2><p>上节创建的 DynamicType.Unloaded，代表一个尚未加载的类，顾名思义，这些类型不会加载到 Java 虚拟机中，它仅仅表示创建好了类的字节码， 通过 DynamicType.Unloaded 中的 getBytes<br>方法你可以获取到该字节码，在你的应用程序中， 你可能需要将该字节码保存到文件，或者注入的现在的 jar 文件中，因此该类型还提供了一个 saveIn(File) 方法， 可以将类存储在给定的文件夹中； inject(File)<br>方法将类注入到现有的 Jar 文件中， 另外你只需要将该字节码直接加载到虚拟机使用，你可以通过 ClassLoadingStrategy 来加载。</p>\n<p>如果不指定ClassLoadingStrategy，Byte Buffer根据你提供的ClassLoader来推导出一个策略，内置的策略定义在枚举ClassLoadingStrategy.Default中</p>\n<p>WRAPPER：创建一个新的Wrapping类加载器 CHILD_FIRST：类似上面，但是子加载器优先负责加载目标类 INJECTION：利用反射机制注入动态类型 示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;?&gt; type = new ByteBuddy()</span><br><span class=\"line\">.subclass(Object.class)</span><br><span class=\"line\">.make()</span><br><span class=\"line\">.load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)</span><br><span class=\"line\">.getLoaded()</span><br></pre></td></tr></table></figure>\n\n<p>这样我们创建并加载了一个类。我们使用 WRAPPER 策略来加载适合大多数情况的类。getLoaded 方法返回一个 Java Class 的实例，它就表示现在加载的动态类。</p>\n<p>重新加载类 得益于JVM的HostSwap特性，已加载的类可以被重新定义：</p>\n<p>// 安装Byte Buddy的Agent，除了通过-javaagent静态安装，还可以：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuddyAgent.install();</span><br><span class=\"line\">Foo foo = new Foo();</span><br><span class=\"line\">    new ByteBuddy()</span><br><span class=\"line\">    .redefine(Bar.class)</span><br><span class=\"line\">    .name(Foo.class.getName())</span><br><span class=\"line\">    .make()</span><br><span class=\"line\">    .load(Foo.class.getClassLoader(), ClassReloadingStrategy.fromInstalledAgent());</span><br><span class=\"line\">    assertThat(foo.m(), is(&quot;bar&quot;));</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，即使时已经存在的对象，也会受到类Reloading的影响。但是需要注意的是HostSwap具有限制：</p>\n<p>类再重新载入前后，必须具有相同的Schema，也就是方法、字段不能减少（可以增加） 不支持具有静态初始化块的类 修改类 redefine 重定义一个类时，Byte Buddy<br>可以对一个已有的类添加属性和方法，或者删除已经存在的方法实现。新添加的方法，如果签名和原有方法一致，则原有方法会消失。</p>\n<p>rebase 类似于redefine，但是原有的方法不会消失，而是被重命名，添加后缀 $original，这样，就没有实现会被丢失。重定义的方法可以继续通过它们重命名过的名称调用原来的方法，例如类：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">    String bar() &#123; return &quot;bar&quot;; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>rebase 之后：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">    String bar() &#123; return &quot;foo&quot; + bar$original(); &#125;</span><br><span class=\"line\">    private String bar$original() &#123; return &quot;bar&quot;; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-方法拦截\"><a href=\"#7-方法拦截\" class=\"headerlink\" title=\"7.方法拦截\"></a>7.方法拦截</h2><p>通过匹配模式拦截 ByteBuddy 提供了很多用于匹配方法的 DSL，如下例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo dynamicFoo = new ByteBuddy()</span><br><span class=\"line\">    .subclass(Foo.class)</span><br><span class=\"line\">    // 匹配由Foo.class声明的方法</span><br><span class=\"line\">    .method(isDeclaredBy(Foo.class)).intercept(FixedValue.value(&quot;One!&quot;))</span><br><span class=\"line\">    // 匹配名为foo的方法</span><br><span class=\"line\">    .method(named(&quot;foo&quot;)).intercept(FixedValue.value(&quot;Two!&quot;))</span><br><span class=\"line\">    // 匹配名为foo，入参数量为1的方法</span><br><span class=\"line\">    .method(named(&quot;foo&quot;).and(takesArguments(1))).intercept(FixedValue.value(&quot;Three!&quot;))</span><br><span class=\"line\">    .make()</span><br><span class=\"line\">    .load(getClass().getClassLoader())</span><br><span class=\"line\">    .getLoaded()</span><br><span class=\"line\">    .newInstance();</span><br></pre></td></tr></table></figure>\n\n<p>ByteBuddy 通过 net.bytebuddy.matcher.ElementMatcher 来定义配置策略，可以通过此接口实现自己定义的匹配策略。库本身提供的 Matcher 非常多。Uploading file…</p>\n<h2 id=\"8-方法委托\"><a href=\"#8-方法委托\" class=\"headerlink\" title=\"8.方法委托\"></a>8.方法委托</h2><p>使用MethodDelegation可以将方法调用委托给任意POJO。Byte Buddy不要求Source（被委托类）、Target类的方法名一致</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Source &#123;</span><br><span class=\"line\">    public String hello(String name) &#123; return null; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Target &#123;</span><br><span class=\"line\">    public static String hello(String name) &#123;</span><br><span class=\"line\">        return &quot;Hello &quot; + name + &quot;!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">String helloWorld = new ByteBuddy()</span><br><span class=\"line\">    .subclass(Source.class)</span><br><span class=\"line\">    .method(named(&quot;hello&quot;)).intercept(MethodDelegation.to(Target.class))</span><br><span class=\"line\">    .make()</span><br><span class=\"line\">    .load(getClass().getClassLoader())</span><br><span class=\"line\">    .getLoaded()</span><br><span class=\"line\">    .newInstance()</span><br><span class=\"line\">    .hello(&quot;World&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>其中 Target 还可以如下实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Target &#123;</span><br><span class=\"line\">    public static String intercept(String name) &#123; return &quot;Hello &quot; + name + &quot;!&quot;; &#125;</span><br><span class=\"line\">    public static String intercept(int i) &#123; return Integer.toString(i); &#125;</span><br><span class=\"line\">    public static String intercept(Object o) &#123; return o.toString(); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>前一个实现因为只有一个方法，而且类型也匹配，很好理解，那么后一个呢，Byte Buddy到底会委托给哪个方法？Byte Buddy遵循一个最接近原则：</p>\n<p>intercept(int)因为参数类型不匹配，直接Pass 另外两个方法参数都匹配，但是 intercept(String)类型更加接近，因此会委托给它 同时需要注意的是被拦截的方法需要声明为<br>public，否则没法进行拦截增强。除此之外，还可以使用 @RuntimeType 注解来标注方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RuntimeType</span><br><span class=\"line\">public static Object intercept(@RuntimeType Object value) &#123;</span><br><span class=\"line\">    System.out.println(&quot;Invoked method with: &quot; + value);</span><br><span class=\"line\">    return value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-参数绑定\"><a href=\"#9-参数绑定\" class=\"headerlink\" title=\"9.参数绑定\"></a>9.参数绑定</h2><p>可以在拦截器（Target）的拦截方法 intercept 中使用注解注入参数，ByteBuddy 会根据注解给我们注入对于的参数值。比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void intercept(Object o1, Object o2)</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\">void intercept(@Argument(0) Object o1, @Argument(1) Object o2)复制代码</span><br><span class=\"line\">常用的注解如下表：</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Argument</td>\n<td>绑定单个参数</td>\n</tr>\n<tr>\n<td>@AllArguments</td>\n<td>绑定所有参数的数组</td>\n</tr>\n<tr>\n<td>@This</td>\n<td>当前被拦截的、动态生成的那个对象</td>\n</tr>\n<tr>\n<td>@DefaultCall</td>\n<td>调用默认方法而非super的方法</td>\n</tr>\n<tr>\n<td>@SuperCall</td>\n<td>用于调用父类版本的方法</td>\n</tr>\n<tr>\n<td>@RuntimeType</td>\n<td>可以用在返回值、参数上，提示ByteBuddy禁用严格的类型检查</td>\n</tr>\n<tr>\n<td>@Super</td>\n<td>当前被拦截的、动态生成的那个对象的父类对象</td>\n</tr>\n<tr>\n<td>@FieldValue</td>\n<td>注入被拦截对象的一个字段的值</td>\n</tr>\n</tbody></table>\n<h2 id=\"10-字段属性\"><a href=\"#10-字段属性\" class=\"headerlink\" title=\"10.字段属性\"></a>10.字段属性</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class UserType &#123;</span><br><span class=\"line\">  public String doSomething() &#123; return null; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface Interceptor &#123;</span><br><span class=\"line\">  String doSomethingElse();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface InterceptionAccessor &#123;</span><br><span class=\"line\">  Interceptor getInterceptor();</span><br><span class=\"line\">  void setInterceptor(Interceptor interceptor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface InstanceCreator &#123;</span><br><span class=\"line\">  Object makeInstance();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class HelloWorldInterceptor implements Interceptor &#123;</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public String doSomethingElse() &#123;</span><br><span class=\"line\">    return &quot;Hello World!&quot;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class&lt;? extends UserType&gt; dynamicUserType = new ByteBuddy()</span><br><span class=\"line\">  .subclass(UserType.class)</span><br><span class=\"line\">    .method(not(isDeclaredBy(Object.class))) // 非父类 Object 声明的方法</span><br><span class=\"line\">    .intercept(MethodDelegation.toField(&quot;interceptor&quot;)) // 拦截委托给属性字段 interceptor</span><br><span class=\"line\">  .defineField(&quot;interceptor&quot;, Interceptor.class, Visibility.PRIVATE) // 定义一个属性字段</span><br><span class=\"line\">  .implement(InterceptionAccessor.class).intercept(FieldAccessor.ofBeanProperty()) // 实现 InterceptionAccessor 接口</span><br><span class=\"line\">  .make()</span><br><span class=\"line\">  .load(getClass().getClassLoader())</span><br><span class=\"line\">  .getLoaded();</span><br><span class=\"line\">    </span><br><span class=\"line\">InstanceCreator factory = new ByteBuddy()</span><br><span class=\"line\">  .subclass(InstanceCreator.class)</span><br><span class=\"line\">    .method(not(isDeclaredBy(Object.class))) // 非父类 Object 声明的方法</span><br><span class=\"line\">    .intercept(MethodDelegation.toConstructor(dynamicUserType)) // 委托拦截的方法来调用提供的类型的构造函数</span><br><span class=\"line\">  .make()</span><br><span class=\"line\">  .load(dynamicUserType.getClassLoader())</span><br><span class=\"line\">  .getLoaded().newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">UserType userType = (UserType) factory.makeInstance();</span><br><span class=\"line\">((InterceptionAccessor) userType).setInterceptor(new HelloWorldInterceptor());</span><br><span class=\"line\">String s = userType.doSomething();</span><br><span class=\"line\">System.out.println(s); // Hello World!</span><br></pre></td></tr></table></figure>\n\n<p>上述例子将 UserType 类实现了 InterceptionAccessor 接口，同时使用 MethodDelegation.toField 可以使拦截的方法可以委托给新增的字段。</p>\n<ul>\n<li>代码参考:<br><a href=\"https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy\">https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy</a></li>\n</ul>\n<h2 id=\"11-参考\"><a href=\"#11-参考\" class=\"headerlink\" title=\"11.参考\"></a>11.参考</h2><p><a href=\"https://juejin.cn/post/6844903965553852423\">https://juejin.cn/post/6844903965553852423</a><br><a href=\"https://www.cnblogs.com/yungyu16/p/13167240.html\">https://www.cnblogs.com/yungyu16/p/13167240.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"字节码增强技术-Byte-Buddy\"><a href=\"#字节码增强技术-Byte-Buddy\" class=\"headerlink\" title=\"字节码增强技术-Byte Buddy\"></a>字节码增强技术-Byte Buddy</h1><h2 id=\"1-为什么需要在运行时生成代码？\"><a href=\"#1-为什么需要在运行时生成代码？\" class=\"headerlink\" title=\"1.为什么需要在运行时生成代码？\"></a>1.为什么需要在运行时生成代码？</h2><p>Java 是一个强类型语言系统，要求变量和对象都有一个确定的类型，不兼容类型赋值都会造成转换异常，通常情况下这种错误都会被编译器检查出来，<br>如此严格的类型在大多数情况下是比较令人满意的，这对构建具有非常强可读性和稳定性的应用有很大的帮助，这也是 Java 能在企业编程中的普及的一个原因之一。<br>然而，因为起强类型的检查，限制了其他领域语言应用范围。比如在编写一个框架是，通常我们并不知道应用程序定义的类型，因为当这个库被编译时， 我们还不知道这些类型，为了能在这种情况下能调用或者访问应用程序的方法或者变量，Java<br>类库提供了一套反射 API。使用这套反射 API， 我们就可以反省为知类型，进而调用方法或者访问属性。但是，Java 反射有如下缺点：</p>\n<ul>\n<li>需要执行一个相当昂贵的方法查找来获取描述特定方法的对象，因此，相比硬编码的方法调用，使用 反射 API 非常慢。</li>\n<li>反射 API 能绕过类型安全检查，可能会因为使用不当照成意想不到的问题，这样就错失了 Java 编程语言的一大特性。</li>\n</ul>\n<h2 id=\"2-简介\"><a href=\"#2-简介\" class=\"headerlink\" title=\"2.简介\"></a>2.简介</h2><p>正如官网说的：Byte Buddy 是一个代码生成和操作库，用于在Java应用程序运行时创建和修改Java类，而无需编译器的帮助。 除了Java类库附带的代码生成实用程序外，Byte<br>Buddy还允许创建任意类，并且不限于实现用于创建运行时代理的接口。 此外，Byte Buddy提供了一种方便的API，可以使用Java代理或在构建过程中手动更改类。Byte Buddy 相比其他字节码操作库有如下优势：</p>\n<ul>\n<li>无需理解字节码格式，即可操作，简单易行的 API 能很容易操作字节码。</li>\n<li>支持 Java 任何版本，库轻量，仅取决于Java字节代码解析器库ASM的访问者API，它本身不需要任何其他依赖项。</li>\n<li>比起JDK动态代理、cglib、Javassist，Byte Buddy在性能上具有优势。</li>\n</ul>\n<h3 id=\"3-性能\"><a href=\"#3-性能\" class=\"headerlink\" title=\"3.性能\"></a>3.性能</h3><p>在选择字节码操作库时，往往需要考虑库本身的性能。对于许多应用程序，生成代码的运行时特性更有可能确定最佳选择。而 在生成的代码本身的运行时间之外，用于创建动态类的运行时也是一个问题。官网对库进行了性能测试，给出以下结果图：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/10/13/16dc4ade119d5610?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"></p>\n<p>图中的每一行分别为，类的创建、接口实现、方法调用、类型扩展、父类方法调用的性能结果。 从性能报告中可以看出，Byte Buddy 的主要侧重点在于以最少的运行时生成代码，需要注意的是，我们这些衡量 Java 代码性能的测试， 都由 Java<br>虚拟机即时编译器优化过，如果你的代码只是偶尔运行，没有得到虚拟机的优化，可能性能会有所偏差。 所以我们在使用 Byte Buddy 开发时，我们希望监控这些指标，以避免在添加新功能时造成性能损失。</p>\n<h2 id=\"4-Hello-world代码\"><a href=\"#4-Hello-world代码\" class=\"headerlink\" title=\"4.Hello world代码\"></a>4.Hello world代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;?&gt; dynamicType = new ByteBuddy()</span><br><span class=\"line\">                .subclass(Object.class)</span><br><span class=\"line\">                .method(ElementMatchers.named(&quot;toString&quot;))</span><br><span class=\"line\">                .intercept(FixedValue.value(&quot;Hello World&quot;))</span><br><span class=\"line\">                .make()</span><br><span class=\"line\">                .load(HelloWorldBuddy.class.getClassLoader())</span><br><span class=\"line\">                .getLoaded();</span><br><span class=\"line\"></span><br><span class=\"line\">        Object instance = dynamicType.newInstance();</span><br><span class=\"line\">        String toString = instance.toString();</span><br><span class=\"line\">        System.out.println(toString);</span><br><span class=\"line\">        System.out.println(instance.getClass().getCanonicalName());</span><br></pre></td></tr></table></figure>\n\n<p>从例子中看到，操作创建一个类如此的简单。正如 ByteBuddy 说明的，ByteBuddy 提供了一个领域特定语言，这样就可以尽可能地提高人类可读性简单易行的 API， 可能能让你在初次使用的过程中就能不需要查阅 API<br>的前提下完成编码。这也真是 ByteBuddy 能完爆其他同类型库的一个原因。 上面的示例中使用的默认ByteBuddy配置会以最新版本的类文件格式创建Java类，该类文件格式可以被正在处理的Java虚拟机理解。 subclass<br>指定了新创建的类的父类，同时 method 指定了 Object 的 toString 方法，intercept 拦截了 toString 方法并返回固定的 value ， 最后 make 方法生产字节码，有类加载器加载到虚拟机中。<br>此外，Byte Buddy不仅限于创建子类和操作类，还可以转换现有代码。Byte Buddy 还提供了一个方便的 API，用于定义所谓的 Java 代理， 该代理允许在任何 Java<br>应用程序的运行期间进行代码转换，代理会在下篇单独写一篇文章讲解。</p>\n<h2 id=\"5-创建一个类\"><a href=\"#5-创建一个类\" class=\"headerlink\" title=\"5.创建一个类\"></a>5.创建一个类</h2><p>任何一个由 ByteBuddy 创建的类型都是通过 ByteBuddy 类的实例来完成的。通过简单地调用 new ByteBuddy() 就可以创建一个新实例。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DynamicType.Unloaded&lt;?&gt; dynamicType = new ByteBuddy()</span><br><span class=\"line\">    .subclass(Object.class)</span><br><span class=\"line\">    .make();</span><br></pre></td></tr></table></figure>\n\n<p>上面的示例代码会创建一个继承至 Object 类型的类。这个动态创建的类型与直接扩展 Object 并且没有实现任何方法、属性和构造函数的类型是等价的 。该列子没有命名动态生成的类型，但是在定义 Java<br>类时却是必须的，所以很容易的你会想到，ByteBuddy 会有默认的策略给我们生成。 当然，你也可以很容易地明确地命名这个类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DynamicType.Unloaded&lt;?&gt; dynamicType = new ByteBuddy()</span><br><span class=\"line\">.subclass(Object.class)</span><br><span class=\"line\">.name(&quot;example.Type&quot;)</span><br><span class=\"line\">.make();</span><br></pre></td></tr></table></figure>\n\n<p>那么默认的策略是如何做的呢？这个将与 ByteBuddy 与 约定大于配置息息相关，它提供了我们认为比较全面的默认配置。 至于类型命名，ByteBuddy 的默认配置提供了<br>NamingStrategy，它基于动态类型的超类名称来随机生成类名。 此外，名称定义在与父类相同的包下，这样父类的包级访问权限的方法对动态类型也可见。如果你将示例子类命名为 example.Foo， 那么生成的名称将会类似于<br>example.FooByteBuddy1376491271，这里的数字序列是随机的。</p>\n<p>此外，在一些需要指定类型的场景中，可以通过重写 NamingStrategy 的方法来实现，或者使用 ByteBuddy 内置的NamingStrategy.SuffixingRandom 来实现。</p>\n<p>同时需要注意的是，我们编码时需要遵守所谓的领域特定语言和不变性原则，这是说明意思呢？就是说在 ByteBuddy 中， 几乎所有的类都被构建成不可变的；极少数情况，我们不可能把对象构建成不可变的。请看下面一个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuddy byteBuddy = new ByteBuddy();</span><br><span class=\"line\">byteBuddy.with(new NamingStrategy.SuffixingRandom(&quot;suffix&quot;));</span><br><span class=\"line\">DynamicType.Unloaded&lt;?&gt; dynamicType1 = byteBuddy.subclass(Object.class).make();</span><br></pre></td></tr></table></figure>\n\n<p>上述例子你会发现类的命名策略还是默认的，其根本原因就是没有遵守上述原则导致的。所以在编码过程中要基于此原则进行。</p>\n<h2 id=\"6-加载类\"><a href=\"#6-加载类\" class=\"headerlink\" title=\"6.加载类\"></a>6.加载类</h2><p>上节创建的 DynamicType.Unloaded，代表一个尚未加载的类，顾名思义，这些类型不会加载到 Java 虚拟机中，它仅仅表示创建好了类的字节码， 通过 DynamicType.Unloaded 中的 getBytes<br>方法你可以获取到该字节码，在你的应用程序中， 你可能需要将该字节码保存到文件，或者注入的现在的 jar 文件中，因此该类型还提供了一个 saveIn(File) 方法， 可以将类存储在给定的文件夹中； inject(File)<br>方法将类注入到现有的 Jar 文件中， 另外你只需要将该字节码直接加载到虚拟机使用，你可以通过 ClassLoadingStrategy 来加载。</p>\n<p>如果不指定ClassLoadingStrategy，Byte Buffer根据你提供的ClassLoader来推导出一个策略，内置的策略定义在枚举ClassLoadingStrategy.Default中</p>\n<p>WRAPPER：创建一个新的Wrapping类加载器 CHILD_FIRST：类似上面，但是子加载器优先负责加载目标类 INJECTION：利用反射机制注入动态类型 示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;?&gt; type = new ByteBuddy()</span><br><span class=\"line\">.subclass(Object.class)</span><br><span class=\"line\">.make()</span><br><span class=\"line\">.load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)</span><br><span class=\"line\">.getLoaded()</span><br></pre></td></tr></table></figure>\n\n<p>这样我们创建并加载了一个类。我们使用 WRAPPER 策略来加载适合大多数情况的类。getLoaded 方法返回一个 Java Class 的实例，它就表示现在加载的动态类。</p>\n<p>重新加载类 得益于JVM的HostSwap特性，已加载的类可以被重新定义：</p>\n<p>// 安装Byte Buddy的Agent，除了通过-javaagent静态安装，还可以：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuddyAgent.install();</span><br><span class=\"line\">Foo foo = new Foo();</span><br><span class=\"line\">    new ByteBuddy()</span><br><span class=\"line\">    .redefine(Bar.class)</span><br><span class=\"line\">    .name(Foo.class.getName())</span><br><span class=\"line\">    .make()</span><br><span class=\"line\">    .load(Foo.class.getClassLoader(), ClassReloadingStrategy.fromInstalledAgent());</span><br><span class=\"line\">    assertThat(foo.m(), is(&quot;bar&quot;));</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，即使时已经存在的对象，也会受到类Reloading的影响。但是需要注意的是HostSwap具有限制：</p>\n<p>类再重新载入前后，必须具有相同的Schema，也就是方法、字段不能减少（可以增加） 不支持具有静态初始化块的类 修改类 redefine 重定义一个类时，Byte Buddy<br>可以对一个已有的类添加属性和方法，或者删除已经存在的方法实现。新添加的方法，如果签名和原有方法一致，则原有方法会消失。</p>\n<p>rebase 类似于redefine，但是原有的方法不会消失，而是被重命名，添加后缀 $original，这样，就没有实现会被丢失。重定义的方法可以继续通过它们重命名过的名称调用原来的方法，例如类：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">    String bar() &#123; return &quot;bar&quot;; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>rebase 之后：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">    String bar() &#123; return &quot;foo&quot; + bar$original(); &#125;</span><br><span class=\"line\">    private String bar$original() &#123; return &quot;bar&quot;; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-方法拦截\"><a href=\"#7-方法拦截\" class=\"headerlink\" title=\"7.方法拦截\"></a>7.方法拦截</h2><p>通过匹配模式拦截 ByteBuddy 提供了很多用于匹配方法的 DSL，如下例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo dynamicFoo = new ByteBuddy()</span><br><span class=\"line\">    .subclass(Foo.class)</span><br><span class=\"line\">    // 匹配由Foo.class声明的方法</span><br><span class=\"line\">    .method(isDeclaredBy(Foo.class)).intercept(FixedValue.value(&quot;One!&quot;))</span><br><span class=\"line\">    // 匹配名为foo的方法</span><br><span class=\"line\">    .method(named(&quot;foo&quot;)).intercept(FixedValue.value(&quot;Two!&quot;))</span><br><span class=\"line\">    // 匹配名为foo，入参数量为1的方法</span><br><span class=\"line\">    .method(named(&quot;foo&quot;).and(takesArguments(1))).intercept(FixedValue.value(&quot;Three!&quot;))</span><br><span class=\"line\">    .make()</span><br><span class=\"line\">    .load(getClass().getClassLoader())</span><br><span class=\"line\">    .getLoaded()</span><br><span class=\"line\">    .newInstance();</span><br></pre></td></tr></table></figure>\n\n<p>ByteBuddy 通过 net.bytebuddy.matcher.ElementMatcher 来定义配置策略，可以通过此接口实现自己定义的匹配策略。库本身提供的 Matcher 非常多。Uploading file…</p>\n<h2 id=\"8-方法委托\"><a href=\"#8-方法委托\" class=\"headerlink\" title=\"8.方法委托\"></a>8.方法委托</h2><p>使用MethodDelegation可以将方法调用委托给任意POJO。Byte Buddy不要求Source（被委托类）、Target类的方法名一致</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Source &#123;</span><br><span class=\"line\">    public String hello(String name) &#123; return null; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Target &#123;</span><br><span class=\"line\">    public static String hello(String name) &#123;</span><br><span class=\"line\">        return &quot;Hello &quot; + name + &quot;!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">String helloWorld = new ByteBuddy()</span><br><span class=\"line\">    .subclass(Source.class)</span><br><span class=\"line\">    .method(named(&quot;hello&quot;)).intercept(MethodDelegation.to(Target.class))</span><br><span class=\"line\">    .make()</span><br><span class=\"line\">    .load(getClass().getClassLoader())</span><br><span class=\"line\">    .getLoaded()</span><br><span class=\"line\">    .newInstance()</span><br><span class=\"line\">    .hello(&quot;World&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>其中 Target 还可以如下实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Target &#123;</span><br><span class=\"line\">    public static String intercept(String name) &#123; return &quot;Hello &quot; + name + &quot;!&quot;; &#125;</span><br><span class=\"line\">    public static String intercept(int i) &#123; return Integer.toString(i); &#125;</span><br><span class=\"line\">    public static String intercept(Object o) &#123; return o.toString(); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>前一个实现因为只有一个方法，而且类型也匹配，很好理解，那么后一个呢，Byte Buddy到底会委托给哪个方法？Byte Buddy遵循一个最接近原则：</p>\n<p>intercept(int)因为参数类型不匹配，直接Pass 另外两个方法参数都匹配，但是 intercept(String)类型更加接近，因此会委托给它 同时需要注意的是被拦截的方法需要声明为<br>public，否则没法进行拦截增强。除此之外，还可以使用 @RuntimeType 注解来标注方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RuntimeType</span><br><span class=\"line\">public static Object intercept(@RuntimeType Object value) &#123;</span><br><span class=\"line\">    System.out.println(&quot;Invoked method with: &quot; + value);</span><br><span class=\"line\">    return value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-参数绑定\"><a href=\"#9-参数绑定\" class=\"headerlink\" title=\"9.参数绑定\"></a>9.参数绑定</h2><p>可以在拦截器（Target）的拦截方法 intercept 中使用注解注入参数，ByteBuddy 会根据注解给我们注入对于的参数值。比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void intercept(Object o1, Object o2)</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\">void intercept(@Argument(0) Object o1, @Argument(1) Object o2)复制代码</span><br><span class=\"line\">常用的注解如下表：</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Argument</td>\n<td>绑定单个参数</td>\n</tr>\n<tr>\n<td>@AllArguments</td>\n<td>绑定所有参数的数组</td>\n</tr>\n<tr>\n<td>@This</td>\n<td>当前被拦截的、动态生成的那个对象</td>\n</tr>\n<tr>\n<td>@DefaultCall</td>\n<td>调用默认方法而非super的方法</td>\n</tr>\n<tr>\n<td>@SuperCall</td>\n<td>用于调用父类版本的方法</td>\n</tr>\n<tr>\n<td>@RuntimeType</td>\n<td>可以用在返回值、参数上，提示ByteBuddy禁用严格的类型检查</td>\n</tr>\n<tr>\n<td>@Super</td>\n<td>当前被拦截的、动态生成的那个对象的父类对象</td>\n</tr>\n<tr>\n<td>@FieldValue</td>\n<td>注入被拦截对象的一个字段的值</td>\n</tr>\n</tbody></table>\n<h2 id=\"10-字段属性\"><a href=\"#10-字段属性\" class=\"headerlink\" title=\"10.字段属性\"></a>10.字段属性</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class UserType &#123;</span><br><span class=\"line\">  public String doSomething() &#123; return null; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface Interceptor &#123;</span><br><span class=\"line\">  String doSomethingElse();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface InterceptionAccessor &#123;</span><br><span class=\"line\">  Interceptor getInterceptor();</span><br><span class=\"line\">  void setInterceptor(Interceptor interceptor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface InstanceCreator &#123;</span><br><span class=\"line\">  Object makeInstance();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class HelloWorldInterceptor implements Interceptor &#123;</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public String doSomethingElse() &#123;</span><br><span class=\"line\">    return &quot;Hello World!&quot;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class&lt;? extends UserType&gt; dynamicUserType = new ByteBuddy()</span><br><span class=\"line\">  .subclass(UserType.class)</span><br><span class=\"line\">    .method(not(isDeclaredBy(Object.class))) // 非父类 Object 声明的方法</span><br><span class=\"line\">    .intercept(MethodDelegation.toField(&quot;interceptor&quot;)) // 拦截委托给属性字段 interceptor</span><br><span class=\"line\">  .defineField(&quot;interceptor&quot;, Interceptor.class, Visibility.PRIVATE) // 定义一个属性字段</span><br><span class=\"line\">  .implement(InterceptionAccessor.class).intercept(FieldAccessor.ofBeanProperty()) // 实现 InterceptionAccessor 接口</span><br><span class=\"line\">  .make()</span><br><span class=\"line\">  .load(getClass().getClassLoader())</span><br><span class=\"line\">  .getLoaded();</span><br><span class=\"line\">    </span><br><span class=\"line\">InstanceCreator factory = new ByteBuddy()</span><br><span class=\"line\">  .subclass(InstanceCreator.class)</span><br><span class=\"line\">    .method(not(isDeclaredBy(Object.class))) // 非父类 Object 声明的方法</span><br><span class=\"line\">    .intercept(MethodDelegation.toConstructor(dynamicUserType)) // 委托拦截的方法来调用提供的类型的构造函数</span><br><span class=\"line\">  .make()</span><br><span class=\"line\">  .load(dynamicUserType.getClassLoader())</span><br><span class=\"line\">  .getLoaded().newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">UserType userType = (UserType) factory.makeInstance();</span><br><span class=\"line\">((InterceptionAccessor) userType).setInterceptor(new HelloWorldInterceptor());</span><br><span class=\"line\">String s = userType.doSomething();</span><br><span class=\"line\">System.out.println(s); // Hello World!</span><br></pre></td></tr></table></figure>\n\n<p>上述例子将 UserType 类实现了 InterceptionAccessor 接口，同时使用 MethodDelegation.toField 可以使拦截的方法可以委托给新增的字段。</p>\n<ul>\n<li>代码参考:<br><a href=\"https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy\">https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy</a></li>\n</ul>\n<h2 id=\"11-参考\"><a href=\"#11-参考\" class=\"headerlink\" title=\"11.参考\"></a>11.参考</h2><p><a href=\"https://juejin.cn/post/6844903965553852423\">https://juejin.cn/post/6844903965553852423</a><br><a href=\"https://www.cnblogs.com/yungyu16/p/13167240.html\">https://www.cnblogs.com/yungyu16/p/13167240.html</a></p>\n"},{"title":"bytebuddy替换类实现","_content":"\n\n## bytebuddy-替换类实现\n\n## 1.依赖\n\n```\ndependencies {\n  implementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.11.8'\n  implementation group: 'net.bytebuddy', name: 'byte-buddy-agent', version: '1.11.8'\n}\n```\n\n## 2.测试类被替换类\n\n```\npackage org.coral.jcode.simple.bytebuddy.reload;\n\npublic class Log {\n\n    public static void log(String a) {\n\n        System.out.println(\"Log: \" + a);\n    }\n\n}\n```\n\n## 3.测试类替换目的类\n\n```\npackage org.coral.jcode.simple.bytebuddy.reload;\n\npublic class Log4j {\n\n    /**\n     * 注意代理类要和原实现类的方法声明保持一致\n     * @param a\n     */\n    public static void log(String a) {\n        System.err.println(\"Log4j: \" + a);\n    }\n\n}\n```\n\n## 4.测试验证类\n\n```\npackage org.coral.jcode.simple.bytebuddy.reload;\n\nimport net.bytebuddy.ByteBuddy;\nimport net.bytebuddy.agent.ByteBuddyAgent;\nimport net.bytebuddy.dynamic.loading.ClassReloadingStrategy;\nimport net.bytebuddy.implementation.MethodDelegation;\nimport net.bytebuddy.matcher.ElementMatchers;\n\npublic class LogMain {\n\n    public static void main(String[] args) {\n        // 替换\n        ByteBuddyAgent.install();\n        new ByteBuddy().redefine(Log.class)\n                .method(ElementMatchers.named(\"log\"))\n                .intercept(MethodDelegation.to(Log4j.class))\n                .make()\n                .load(Thread.currentThread().getContextClassLoader(), ClassReloadingStrategy.fromInstalledAgent());\n\n        // 调用\n        Log.log(\"hello\");\n    }\n\n}\n```\n\n```\nLog4j: hello\n```\n\n* 代码参考:\n  https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy\n  \n## 5.参考\n\nhttps://houbb.github.io/2019/10/30/bytecode-byte-buddy-02-replace","source":"_posts/language/java/bytecode/bytebuddy-替换类实现.md","raw":"---\ntitle: bytebuddy替换类实现\ncategories:\n- java\ntag:\n- 字节码\n---\n\n\n## bytebuddy-替换类实现\n\n## 1.依赖\n\n```\ndependencies {\n  implementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.11.8'\n  implementation group: 'net.bytebuddy', name: 'byte-buddy-agent', version: '1.11.8'\n}\n```\n\n## 2.测试类被替换类\n\n```\npackage org.coral.jcode.simple.bytebuddy.reload;\n\npublic class Log {\n\n    public static void log(String a) {\n\n        System.out.println(\"Log: \" + a);\n    }\n\n}\n```\n\n## 3.测试类替换目的类\n\n```\npackage org.coral.jcode.simple.bytebuddy.reload;\n\npublic class Log4j {\n\n    /**\n     * 注意代理类要和原实现类的方法声明保持一致\n     * @param a\n     */\n    public static void log(String a) {\n        System.err.println(\"Log4j: \" + a);\n    }\n\n}\n```\n\n## 4.测试验证类\n\n```\npackage org.coral.jcode.simple.bytebuddy.reload;\n\nimport net.bytebuddy.ByteBuddy;\nimport net.bytebuddy.agent.ByteBuddyAgent;\nimport net.bytebuddy.dynamic.loading.ClassReloadingStrategy;\nimport net.bytebuddy.implementation.MethodDelegation;\nimport net.bytebuddy.matcher.ElementMatchers;\n\npublic class LogMain {\n\n    public static void main(String[] args) {\n        // 替换\n        ByteBuddyAgent.install();\n        new ByteBuddy().redefine(Log.class)\n                .method(ElementMatchers.named(\"log\"))\n                .intercept(MethodDelegation.to(Log4j.class))\n                .make()\n                .load(Thread.currentThread().getContextClassLoader(), ClassReloadingStrategy.fromInstalledAgent());\n\n        // 调用\n        Log.log(\"hello\");\n    }\n\n}\n```\n\n```\nLog4j: hello\n```\n\n* 代码参考:\n  https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy\n  \n## 5.参考\n\nhttps://houbb.github.io/2019/10/30/bytecode-byte-buddy-02-replace","slug":"language/java/bytecode/bytebuddy-替换类实现","published":1,"date":"2021-09-06T14:29:47.097Z","updated":"2021-09-06T14:29:47.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyj80043u6ukgrpd4vje","content":"<h2 id=\"bytebuddy-替换类实现\"><a href=\"#bytebuddy-替换类实现\" class=\"headerlink\" title=\"bytebuddy-替换类实现\"></a>bytebuddy-替换类实现</h2><h2 id=\"1-依赖\"><a href=\"#1-依赖\" class=\"headerlink\" title=\"1.依赖\"></a>1.依赖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  implementation group: &#x27;net.bytebuddy&#x27;, name: &#x27;byte-buddy&#x27;, version: &#x27;1.11.8&#x27;</span><br><span class=\"line\">  implementation group: &#x27;net.bytebuddy&#x27;, name: &#x27;byte-buddy-agent&#x27;, version: &#x27;1.11.8&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-测试类被替换类\"><a href=\"#2-测试类被替换类\" class=\"headerlink\" title=\"2.测试类被替换类\"></a>2.测试类被替换类</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package org.coral.jcode.simple.bytebuddy.reload;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Log &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void log(String a) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;Log: &quot; + a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-测试类替换目的类\"><a href=\"#3-测试类替换目的类\" class=\"headerlink\" title=\"3.测试类替换目的类\"></a>3.测试类替换目的类</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package org.coral.jcode.simple.bytebuddy.reload;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Log4j &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 注意代理类要和原实现类的方法声明保持一致</span><br><span class=\"line\">     * @param a</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void log(String a) &#123;</span><br><span class=\"line\">        System.err.println(&quot;Log4j: &quot; + a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-测试验证类\"><a href=\"#4-测试验证类\" class=\"headerlink\" title=\"4.测试验证类\"></a>4.测试验证类</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package org.coral.jcode.simple.bytebuddy.reload;</span><br><span class=\"line\"></span><br><span class=\"line\">import net.bytebuddy.ByteBuddy;</span><br><span class=\"line\">import net.bytebuddy.agent.ByteBuddyAgent;</span><br><span class=\"line\">import net.bytebuddy.dynamic.loading.ClassReloadingStrategy;</span><br><span class=\"line\">import net.bytebuddy.implementation.MethodDelegation;</span><br><span class=\"line\">import net.bytebuddy.matcher.ElementMatchers;</span><br><span class=\"line\"></span><br><span class=\"line\">public class LogMain &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 替换</span><br><span class=\"line\">        ByteBuddyAgent.install();</span><br><span class=\"line\">        new ByteBuddy().redefine(Log.class)</span><br><span class=\"line\">                .method(ElementMatchers.named(&quot;log&quot;))</span><br><span class=\"line\">                .intercept(MethodDelegation.to(Log4j.class))</span><br><span class=\"line\">                .make()</span><br><span class=\"line\">                .load(Thread.currentThread().getContextClassLoader(), ClassReloadingStrategy.fromInstalledAgent());</span><br><span class=\"line\"></span><br><span class=\"line\">        // 调用</span><br><span class=\"line\">        Log.log(&quot;hello&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log4j: hello</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>代码参考:<br><a href=\"https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy\">https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy</a></li>\n</ul>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5.参考\"></a>5.参考</h2><p><a href=\"https://houbb.github.io/2019/10/30/bytecode-byte-buddy-02-replace\">https://houbb.github.io/2019/10/30/bytecode-byte-buddy-02-replace</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"bytebuddy-替换类实现\"><a href=\"#bytebuddy-替换类实现\" class=\"headerlink\" title=\"bytebuddy-替换类实现\"></a>bytebuddy-替换类实现</h2><h2 id=\"1-依赖\"><a href=\"#1-依赖\" class=\"headerlink\" title=\"1.依赖\"></a>1.依赖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  implementation group: &#x27;net.bytebuddy&#x27;, name: &#x27;byte-buddy&#x27;, version: &#x27;1.11.8&#x27;</span><br><span class=\"line\">  implementation group: &#x27;net.bytebuddy&#x27;, name: &#x27;byte-buddy-agent&#x27;, version: &#x27;1.11.8&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-测试类被替换类\"><a href=\"#2-测试类被替换类\" class=\"headerlink\" title=\"2.测试类被替换类\"></a>2.测试类被替换类</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package org.coral.jcode.simple.bytebuddy.reload;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Log &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void log(String a) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(&quot;Log: &quot; + a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-测试类替换目的类\"><a href=\"#3-测试类替换目的类\" class=\"headerlink\" title=\"3.测试类替换目的类\"></a>3.测试类替换目的类</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package org.coral.jcode.simple.bytebuddy.reload;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Log4j &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 注意代理类要和原实现类的方法声明保持一致</span><br><span class=\"line\">     * @param a</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void log(String a) &#123;</span><br><span class=\"line\">        System.err.println(&quot;Log4j: &quot; + a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-测试验证类\"><a href=\"#4-测试验证类\" class=\"headerlink\" title=\"4.测试验证类\"></a>4.测试验证类</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package org.coral.jcode.simple.bytebuddy.reload;</span><br><span class=\"line\"></span><br><span class=\"line\">import net.bytebuddy.ByteBuddy;</span><br><span class=\"line\">import net.bytebuddy.agent.ByteBuddyAgent;</span><br><span class=\"line\">import net.bytebuddy.dynamic.loading.ClassReloadingStrategy;</span><br><span class=\"line\">import net.bytebuddy.implementation.MethodDelegation;</span><br><span class=\"line\">import net.bytebuddy.matcher.ElementMatchers;</span><br><span class=\"line\"></span><br><span class=\"line\">public class LogMain &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 替换</span><br><span class=\"line\">        ByteBuddyAgent.install();</span><br><span class=\"line\">        new ByteBuddy().redefine(Log.class)</span><br><span class=\"line\">                .method(ElementMatchers.named(&quot;log&quot;))</span><br><span class=\"line\">                .intercept(MethodDelegation.to(Log4j.class))</span><br><span class=\"line\">                .make()</span><br><span class=\"line\">                .load(Thread.currentThread().getContextClassLoader(), ClassReloadingStrategy.fromInstalledAgent());</span><br><span class=\"line\"></span><br><span class=\"line\">        // 调用</span><br><span class=\"line\">        Log.log(&quot;hello&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log4j: hello</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>代码参考:<br><a href=\"https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy\">https://github.com/wuhaocn/jcode-simple/tree/master/code-gen/bytebuddy</a></li>\n</ul>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5.参考\"></a>5.参考</h2><p><a href=\"https://houbb.github.io/2019/10/30/bytecode-byte-buddy-02-replace\">https://houbb.github.io/2019/10/30/bytecode-byte-buddy-02-replace</a></p>\n"},{"title":"java字节码增强","_content":"\n## Java 字节码增强探秘\n\n### 1.字节码\n\n#### 1.1 什么是字节码？\n\nJava 之所以可以“一次编译，到处运行”，一是因为 JVM 针对各种操作系统、平台都进行了定制，二是因为无论在什么平台，\n都可以编译生成固定格式的字节码（.class 文件）供 JVM 使用。因此，也可以看出字节码对于 Java 生态的重要性。\n之所以被称之为字节码，是因为字节码文件由十六进制值组成，而 JVM 以两个十六进制值为一组，即以字节为单位进行读取。\n在 Java 中一般是用 javac 命令编译源代码为字节码文件，一个.java 文件从编译到运行的示例如图 1 所示。\n![](https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXqfPalgmiaaEZfk4KZOLicKFDrLKCYe5sPz3eKut7ryeKrerKgBPLaFQamge0TibUBpIjicibpucrO5Lg/640)\n\n\n对于开发人员，了解字节码可以更准确、直观地理解 Java 语言中更深层次的东西，比如通过字节码，可以很直观地看到 Volatile 关键字如何在字节码上生效。\n另外，字节码增强技术在 Spring AOP、各种 ORM 框架、热部署中的应用屡见不鲜，深入理解其原理对于我们来说大有裨益。除此之外，由于 JVM 规范的存在，\n只要最终可以生成符合规范的字节码就可以在 JVM 上运行，因此这就给了各种运行在 JVM 上的语言（如 Scala、Groovy、Kotlin）一种契机，\n可以扩展 Java 所没有的特性或者实现各种语法糖。理解字节码后再学习这些语言，可以“逆流而上”，从字节码视角看它的设计思路，学习起来也“易如反掌”。\n本文重点着眼于字节码增强技术，从字节码开始逐层向上，由 JVM 字节码操作集合到 Java 中操作字节码的框架，再到我们熟悉的各类框架原理及应用，也都会一一进行介绍。\n\n## 参考\n","source":"_posts/language/java/bytecode/java字节码增强.md","raw":"---\ntitle: java字节码增强\ncategories:\n- java\ntag:\n- 字节码\n---\n\n## Java 字节码增强探秘\n\n### 1.字节码\n\n#### 1.1 什么是字节码？\n\nJava 之所以可以“一次编译，到处运行”，一是因为 JVM 针对各种操作系统、平台都进行了定制，二是因为无论在什么平台，\n都可以编译生成固定格式的字节码（.class 文件）供 JVM 使用。因此，也可以看出字节码对于 Java 生态的重要性。\n之所以被称之为字节码，是因为字节码文件由十六进制值组成，而 JVM 以两个十六进制值为一组，即以字节为单位进行读取。\n在 Java 中一般是用 javac 命令编译源代码为字节码文件，一个.java 文件从编译到运行的示例如图 1 所示。\n![](https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXqfPalgmiaaEZfk4KZOLicKFDrLKCYe5sPz3eKut7ryeKrerKgBPLaFQamge0TibUBpIjicibpucrO5Lg/640)\n\n\n对于开发人员，了解字节码可以更准确、直观地理解 Java 语言中更深层次的东西，比如通过字节码，可以很直观地看到 Volatile 关键字如何在字节码上生效。\n另外，字节码增强技术在 Spring AOP、各种 ORM 框架、热部署中的应用屡见不鲜，深入理解其原理对于我们来说大有裨益。除此之外，由于 JVM 规范的存在，\n只要最终可以生成符合规范的字节码就可以在 JVM 上运行，因此这就给了各种运行在 JVM 上的语言（如 Scala、Groovy、Kotlin）一种契机，\n可以扩展 Java 所没有的特性或者实现各种语法糖。理解字节码后再学习这些语言，可以“逆流而上”，从字节码视角看它的设计思路，学习起来也“易如反掌”。\n本文重点着眼于字节码增强技术，从字节码开始逐层向上，由 JVM 字节码操作集合到 Java 中操作字节码的框架，再到我们熟悉的各类框架原理及应用，也都会一一进行介绍。\n\n## 参考\n","slug":"language/java/bytecode/java字节码增强","published":1,"date":"2021-09-06T14:29:47.097Z","updated":"2021-09-06T14:29:47.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyj90046u6uk2qfb0a8p","content":"<h2 id=\"Java-字节码增强探秘\"><a href=\"#Java-字节码增强探秘\" class=\"headerlink\" title=\"Java 字节码增强探秘\"></a>Java 字节码增强探秘</h2><h3 id=\"1-字节码\"><a href=\"#1-字节码\" class=\"headerlink\" title=\"1.字节码\"></a>1.字节码</h3><h4 id=\"1-1-什么是字节码？\"><a href=\"#1-1-什么是字节码？\" class=\"headerlink\" title=\"1.1 什么是字节码？\"></a>1.1 什么是字节码？</h4><p>Java 之所以可以“一次编译，到处运行”，一是因为 JVM 针对各种操作系统、平台都进行了定制，二是因为无论在什么平台，<br>都可以编译生成固定格式的字节码（.class 文件）供 JVM 使用。因此，也可以看出字节码对于 Java 生态的重要性。<br>之所以被称之为字节码，是因为字节码文件由十六进制值组成，而 JVM 以两个十六进制值为一组，即以字节为单位进行读取。<br>在 Java 中一般是用 javac 命令编译源代码为字节码文件，一个.java 文件从编译到运行的示例如图 1 所示。<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXqfPalgmiaaEZfk4KZOLicKFDrLKCYe5sPz3eKut7ryeKrerKgBPLaFQamge0TibUBpIjicibpucrO5Lg/640\"></p>\n<p>对于开发人员，了解字节码可以更准确、直观地理解 Java 语言中更深层次的东西，比如通过字节码，可以很直观地看到 Volatile 关键字如何在字节码上生效。<br>另外，字节码增强技术在 Spring AOP、各种 ORM 框架、热部署中的应用屡见不鲜，深入理解其原理对于我们来说大有裨益。除此之外，由于 JVM 规范的存在，<br>只要最终可以生成符合规范的字节码就可以在 JVM 上运行，因此这就给了各种运行在 JVM 上的语言（如 Scala、Groovy、Kotlin）一种契机，<br>可以扩展 Java 所没有的特性或者实现各种语法糖。理解字节码后再学习这些语言，可以“逆流而上”，从字节码视角看它的设计思路，学习起来也“易如反掌”。<br>本文重点着眼于字节码增强技术，从字节码开始逐层向上，由 JVM 字节码操作集合到 Java 中操作字节码的框架，再到我们熟悉的各类框架原理及应用，也都会一一进行介绍。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java-字节码增强探秘\"><a href=\"#Java-字节码增强探秘\" class=\"headerlink\" title=\"Java 字节码增强探秘\"></a>Java 字节码增强探秘</h2><h3 id=\"1-字节码\"><a href=\"#1-字节码\" class=\"headerlink\" title=\"1.字节码\"></a>1.字节码</h3><h4 id=\"1-1-什么是字节码？\"><a href=\"#1-1-什么是字节码？\" class=\"headerlink\" title=\"1.1 什么是字节码？\"></a>1.1 什么是字节码？</h4><p>Java 之所以可以“一次编译，到处运行”，一是因为 JVM 针对各种操作系统、平台都进行了定制，二是因为无论在什么平台，<br>都可以编译生成固定格式的字节码（.class 文件）供 JVM 使用。因此，也可以看出字节码对于 Java 生态的重要性。<br>之所以被称之为字节码，是因为字节码文件由十六进制值组成，而 JVM 以两个十六进制值为一组，即以字节为单位进行读取。<br>在 Java 中一般是用 javac 命令编译源代码为字节码文件，一个.java 文件从编译到运行的示例如图 1 所示。<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsXqfPalgmiaaEZfk4KZOLicKFDrLKCYe5sPz3eKut7ryeKrerKgBPLaFQamge0TibUBpIjicibpucrO5Lg/640\"></p>\n<p>对于开发人员，了解字节码可以更准确、直观地理解 Java 语言中更深层次的东西，比如通过字节码，可以很直观地看到 Volatile 关键字如何在字节码上生效。<br>另外，字节码增强技术在 Spring AOP、各种 ORM 框架、热部署中的应用屡见不鲜，深入理解其原理对于我们来说大有裨益。除此之外，由于 JVM 规范的存在，<br>只要最终可以生成符合规范的字节码就可以在 JVM 上运行，因此这就给了各种运行在 JVM 上的语言（如 Scala、Groovy、Kotlin）一种契机，<br>可以扩展 Java 所没有的特性或者实现各种语法糖。理解字节码后再学习这些语言，可以“逆流而上”，从字节码视角看它的设计思路，学习起来也“易如反掌”。<br>本文重点着眼于字节码增强技术，从字节码开始逐层向上，由 JVM 字节码操作集合到 Java 中操作字节码的框架，再到我们熟悉的各类框架原理及应用，也都会一一进行介绍。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2>"},{"_content":"### docker 打包运行参照\n\n#### 1. 目录结构\n\n![docker打包项目目录结构](resources/images/docker-build.jpg)\n\n#### 2. 打包流程\n\n##### 2.1. docker 本地打包规范\n\n    参照docker常用套路,需具备以下基本条件\n    1. docker基础环境\n    1. Dockerfile：用于打包特定镜像\n    2. run.sh：用于启动服务\n    3. build.gradle (java服务必须)\n    4. docker-clean-build.sh (快捷打包)\n    5. docker-xxx-dev.sh （快捷运行）\n\n##### 2.2. docker 基础环境\n\n    2.2.1 安装（可自行搜索）\n        yum install docker (centos7)\n        apt-get install docker (ubuntu)\n        下载安装包（windows 、mac）\n    2.2.2.1 配置私服【linux】\n        修改/etc/docker/daemon.json文件\n        #vi /etc/docker/daemon.json\n        { \"insecure-registries\": [\"10.10.208.193:5000\"] }\n        重启docker\n    2.2.2.2 配置私服【mac】\n\n![docker打包项目目录结构](resources/images/docker-setting.jpg)\n\n##### 2.3. Dockerfile\n\nDockerfile 示例 1\n\n```\n//官方基础镜像，打包之后目录未分开\n#基础镜像\nFROM java:8\n\nVOLUME [\"/tmp\"]\nADD ./* /home/servicename/\n\n#指定时区\nRUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo 'Asia/Shanghai' >/etc/timezone\n\nENTRYPOINT [\"/home/servicename/run.sh\"]\n```\n\nDockerfile 示例 2\n\n```\n//基于官方镜像二次封装，包含基础工具，打包之后目录分开\n#基础镜像\nFROM 10.10.208.193:5000/urcs/java:8\n\n#ARG是Docker1.9 版本才新加入的指令,如果不支持该命令则直接赋值\nARG appName=urcs-service-group\n\nVOLUME [\"/tmp\"]\n#ADD ./* /home/$appName/\n\n#docker打包时配置文件分离/和helium目录结构保持一致\nADD config /home/$appName/config/\n\nADD *.jar /home/$appName/lib/\n\nADD ./*.xml /home/$appName/\n\nADD ./*.sh /home/$appName/\n\n#指定时区\nRUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo 'Asia/Shanghai' >/etc/timezone\nENTRYPOINT [\"/home/$appName/run.sh\"]\n```\n\n##### 2.4 run.sh\n\n启动脚本\n\n```\n#!/bin/bash\n\nulimit -c unlimited\nulimit -n 32768\n\n\nbasePath=$(cd \"$(dirname \"$0\")\";pwd)\nSERVICE_HOME=$basePath\n\nSERVICE_LIBS=\"$SERVICE_HOME/\"\n\nSERVICE_MAIN=\"mainClass\"\ndeclare -a JAVA_ARGS\nJAVA_ARGS[0]=\"-Xmx256m\"\nJAVA_ARGS[1]=\"-Xms256m\"\n\nexec $JAVA_HOME/bin/java -Duser.dir=$SERVICE_HOME ${JAVA_ARGS[@]} -classpath $SERVICE_HOME:$SERVICE_LIBS/* $SERVICE_MAIN\n```\n\n##### 2.5 build.gradle\n\n启动脚本\n\n```\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        //添加依赖jar包\n        classpath 'se.transmode.gradle:gradle-docker:1.2'\n    }\n}\n\n\napply plugin: 'docker'\n\n//build构造jar文件\njar {\n    manifest {\n        attributes 'Manifest-Version': 1.0\n        attributes 'Main-Class': 'mainClass'\n    }\n    enabled = true\n\n}\n//打包可运行jar包\ntask buildRunJar(type:Copy, dependsOn: build) {\n    from configurations.runtime\n    from 'src/main/resources'\n    into 'build/libs' // 目标位置\n\n}\n\n//打包docker\ntask buildDocker(type: Docker, dependsOn: buildRunJar) {\n    push = true\n    //TODO 前面为服务器期名 + 后面为服务名【以后修改最好不把服务器名打进去】\n    tag = \"10.10.208.193:5000/\" + \"servicename\"\n    applicationName = jar.baseName\n    dockerfile = file('src/main/docker/Dockerfile')\n    doFirst {\n        copy {\n            from 'build/libs'\n            into stageDir\n        }\n    }\n}\n\n\ndependencies {\n   ....\n}\n```\n\n##### 2.6. docker-clean-build.sh\n\n```\ndocker rm `docker ps -a -q`\ndocker rmi --force `docker images | grep servicename | awk '{print $3}'`\ngradle clean\ngradle buildDocker -x test\n```\n\n##### 2.7. docker-run.sh\n\n```\ndocker stop servicename\n\ndocker rm `docker ps -a -q`\n\ndocker run \\\n    --env PRIVATE_IP=0.0.0.0 \\\n    --env REG_IP=10.10.208.194 \\\n    --env ZK_HOSTS=10.10.208.194:7998 \\\n    --env HTTP_PORT=8011 \\\n    --env HTTP_DASH_PORT=8111 \\\n    --env RPC_PORT=6011 \\\n    --env RPC_STACK=rpc-stack \\\n    --env HTTP_STACK=http-stack \\\n    --env HTTP_DASH_STACK=http-dash-stack \\\n    --env KAFKA_HOST=10.10.208.194 \\\n    --privileged=true \\\n    -p 8011:8011 \\\n    -p 8111:8111 \\\n    -p 6011:6011 \\\n    -d --name servicename1.0 \\\n    10.10.208.193:5000/servicename1.0.0-1902151423\n```\n\n##### 3 常见问题\n\n    1.docker容器时间与宿主机时间不一至,容器时间为UTC时间\n    1.1.解决：Dockerfile增加\n    #指定时区\n    RUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo 'Asia/Shanghai' >/etc/timezone\n\n    2.docker基础镜像中安装常用功能,例如vim\n\n##### 4 常用命令\n\n        docker run -p 8888:8888 $name tag\n        docker stop $name\n        docker rm $name\n        docker inspect $name\n        docker ps -a | -l\n        docker logs [-f] [-t] [-tail] $name\n        -f –follows=true | false，默认是false，显示更新\n        -t –timestamps=true | false，默认是false，显示时间戳\n        –tail=“all” | 行数，显示最新行数的日志\n","source":"_posts/devops/docker/docker-package/docker-build-java.md","raw":"### docker 打包运行参照\n\n#### 1. 目录结构\n\n![docker打包项目目录结构](resources/images/docker-build.jpg)\n\n#### 2. 打包流程\n\n##### 2.1. docker 本地打包规范\n\n    参照docker常用套路,需具备以下基本条件\n    1. docker基础环境\n    1. Dockerfile：用于打包特定镜像\n    2. run.sh：用于启动服务\n    3. build.gradle (java服务必须)\n    4. docker-clean-build.sh (快捷打包)\n    5. docker-xxx-dev.sh （快捷运行）\n\n##### 2.2. docker 基础环境\n\n    2.2.1 安装（可自行搜索）\n        yum install docker (centos7)\n        apt-get install docker (ubuntu)\n        下载安装包（windows 、mac）\n    2.2.2.1 配置私服【linux】\n        修改/etc/docker/daemon.json文件\n        #vi /etc/docker/daemon.json\n        { \"insecure-registries\": [\"10.10.208.193:5000\"] }\n        重启docker\n    2.2.2.2 配置私服【mac】\n\n![docker打包项目目录结构](resources/images/docker-setting.jpg)\n\n##### 2.3. Dockerfile\n\nDockerfile 示例 1\n\n```\n//官方基础镜像，打包之后目录未分开\n#基础镜像\nFROM java:8\n\nVOLUME [\"/tmp\"]\nADD ./* /home/servicename/\n\n#指定时区\nRUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo 'Asia/Shanghai' >/etc/timezone\n\nENTRYPOINT [\"/home/servicename/run.sh\"]\n```\n\nDockerfile 示例 2\n\n```\n//基于官方镜像二次封装，包含基础工具，打包之后目录分开\n#基础镜像\nFROM 10.10.208.193:5000/urcs/java:8\n\n#ARG是Docker1.9 版本才新加入的指令,如果不支持该命令则直接赋值\nARG appName=urcs-service-group\n\nVOLUME [\"/tmp\"]\n#ADD ./* /home/$appName/\n\n#docker打包时配置文件分离/和helium目录结构保持一致\nADD config /home/$appName/config/\n\nADD *.jar /home/$appName/lib/\n\nADD ./*.xml /home/$appName/\n\nADD ./*.sh /home/$appName/\n\n#指定时区\nRUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo 'Asia/Shanghai' >/etc/timezone\nENTRYPOINT [\"/home/$appName/run.sh\"]\n```\n\n##### 2.4 run.sh\n\n启动脚本\n\n```\n#!/bin/bash\n\nulimit -c unlimited\nulimit -n 32768\n\n\nbasePath=$(cd \"$(dirname \"$0\")\";pwd)\nSERVICE_HOME=$basePath\n\nSERVICE_LIBS=\"$SERVICE_HOME/\"\n\nSERVICE_MAIN=\"mainClass\"\ndeclare -a JAVA_ARGS\nJAVA_ARGS[0]=\"-Xmx256m\"\nJAVA_ARGS[1]=\"-Xms256m\"\n\nexec $JAVA_HOME/bin/java -Duser.dir=$SERVICE_HOME ${JAVA_ARGS[@]} -classpath $SERVICE_HOME:$SERVICE_LIBS/* $SERVICE_MAIN\n```\n\n##### 2.5 build.gradle\n\n启动脚本\n\n```\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        //添加依赖jar包\n        classpath 'se.transmode.gradle:gradle-docker:1.2'\n    }\n}\n\n\napply plugin: 'docker'\n\n//build构造jar文件\njar {\n    manifest {\n        attributes 'Manifest-Version': 1.0\n        attributes 'Main-Class': 'mainClass'\n    }\n    enabled = true\n\n}\n//打包可运行jar包\ntask buildRunJar(type:Copy, dependsOn: build) {\n    from configurations.runtime\n    from 'src/main/resources'\n    into 'build/libs' // 目标位置\n\n}\n\n//打包docker\ntask buildDocker(type: Docker, dependsOn: buildRunJar) {\n    push = true\n    //TODO 前面为服务器期名 + 后面为服务名【以后修改最好不把服务器名打进去】\n    tag = \"10.10.208.193:5000/\" + \"servicename\"\n    applicationName = jar.baseName\n    dockerfile = file('src/main/docker/Dockerfile')\n    doFirst {\n        copy {\n            from 'build/libs'\n            into stageDir\n        }\n    }\n}\n\n\ndependencies {\n   ....\n}\n```\n\n##### 2.6. docker-clean-build.sh\n\n```\ndocker rm `docker ps -a -q`\ndocker rmi --force `docker images | grep servicename | awk '{print $3}'`\ngradle clean\ngradle buildDocker -x test\n```\n\n##### 2.7. docker-run.sh\n\n```\ndocker stop servicename\n\ndocker rm `docker ps -a -q`\n\ndocker run \\\n    --env PRIVATE_IP=0.0.0.0 \\\n    --env REG_IP=10.10.208.194 \\\n    --env ZK_HOSTS=10.10.208.194:7998 \\\n    --env HTTP_PORT=8011 \\\n    --env HTTP_DASH_PORT=8111 \\\n    --env RPC_PORT=6011 \\\n    --env RPC_STACK=rpc-stack \\\n    --env HTTP_STACK=http-stack \\\n    --env HTTP_DASH_STACK=http-dash-stack \\\n    --env KAFKA_HOST=10.10.208.194 \\\n    --privileged=true \\\n    -p 8011:8011 \\\n    -p 8111:8111 \\\n    -p 6011:6011 \\\n    -d --name servicename1.0 \\\n    10.10.208.193:5000/servicename1.0.0-1902151423\n```\n\n##### 3 常见问题\n\n    1.docker容器时间与宿主机时间不一至,容器时间为UTC时间\n    1.1.解决：Dockerfile增加\n    #指定时区\n    RUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo 'Asia/Shanghai' >/etc/timezone\n\n    2.docker基础镜像中安装常用功能,例如vim\n\n##### 4 常用命令\n\n        docker run -p 8888:8888 $name tag\n        docker stop $name\n        docker rm $name\n        docker inspect $name\n        docker ps -a | -l\n        docker logs [-f] [-t] [-tail] $name\n        -f –follows=true | false，默认是false，显示更新\n        -t –timestamps=true | false，默认是false，显示时间戳\n        –tail=“all” | 行数，显示最新行数的日志\n","slug":"devops/docker/docker-package/docker-build-java","published":1,"date":"2021-09-06T14:29:47.071Z","updated":"2021-09-06T14:29:47.071Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyja0049u6ukgw6hfxi1","content":"<h3 id=\"docker-打包运行参照\"><a href=\"#docker-打包运行参照\" class=\"headerlink\" title=\"docker 打包运行参照\"></a>docker 打包运行参照</h3><h4 id=\"1-目录结构\"><a href=\"#1-目录结构\" class=\"headerlink\" title=\"1. 目录结构\"></a>1. 目录结构</h4><p><img src=\"resources/images/docker-build.jpg\" alt=\"docker打包项目目录结构\"></p>\n<h4 id=\"2-打包流程\"><a href=\"#2-打包流程\" class=\"headerlink\" title=\"2. 打包流程\"></a>2. 打包流程</h4><h5 id=\"2-1-docker-本地打包规范\"><a href=\"#2-1-docker-本地打包规范\" class=\"headerlink\" title=\"2.1. docker 本地打包规范\"></a>2.1. docker 本地打包规范</h5><pre><code>参照docker常用套路,需具备以下基本条件\n1. docker基础环境\n1. Dockerfile：用于打包特定镜像\n2. run.sh：用于启动服务\n3. build.gradle (java服务必须)\n4. docker-clean-build.sh (快捷打包)\n5. docker-xxx-dev.sh （快捷运行）\n</code></pre>\n<h5 id=\"2-2-docker-基础环境\"><a href=\"#2-2-docker-基础环境\" class=\"headerlink\" title=\"2.2. docker 基础环境\"></a>2.2. docker 基础环境</h5><pre><code>2.2.1 安装（可自行搜索）\n    yum install docker (centos7)\n    apt-get install docker (ubuntu)\n    下载安装包（windows 、mac）\n2.2.2.1 配置私服【linux】\n    修改/etc/docker/daemon.json文件\n    #vi /etc/docker/daemon.json\n    &#123; &quot;insecure-registries&quot;: [&quot;10.10.208.193:5000&quot;] &#125;\n    重启docker\n2.2.2.2 配置私服【mac】\n</code></pre>\n<p><img src=\"resources/images/docker-setting.jpg\" alt=\"docker打包项目目录结构\"></p>\n<h5 id=\"2-3-Dockerfile\"><a href=\"#2-3-Dockerfile\" class=\"headerlink\" title=\"2.3. Dockerfile\"></a>2.3. Dockerfile</h5><p>Dockerfile 示例 1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//官方基础镜像，打包之后目录未分开</span><br><span class=\"line\">#基础镜像</span><br><span class=\"line\">FROM java:8</span><br><span class=\"line\"></span><br><span class=\"line\">VOLUME [&quot;/tmp&quot;]</span><br><span class=\"line\">ADD ./* /home/servicename/</span><br><span class=\"line\"></span><br><span class=\"line\">#指定时区</span><br><span class=\"line\">RUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &#x27;Asia/Shanghai&#x27; &gt;/etc/timezone</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [&quot;/home/servicename/run.sh&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>Dockerfile 示例 2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//基于官方镜像二次封装，包含基础工具，打包之后目录分开</span><br><span class=\"line\">#基础镜像</span><br><span class=\"line\">FROM 10.10.208.193:5000/urcs/java:8</span><br><span class=\"line\"></span><br><span class=\"line\">#ARG是Docker1.9 版本才新加入的指令,如果不支持该命令则直接赋值</span><br><span class=\"line\">ARG appName=urcs-service-group</span><br><span class=\"line\"></span><br><span class=\"line\">VOLUME [&quot;/tmp&quot;]</span><br><span class=\"line\">#ADD ./* /home/$appName/</span><br><span class=\"line\"></span><br><span class=\"line\">#docker打包时配置文件分离/和helium目录结构保持一致</span><br><span class=\"line\">ADD config /home/$appName/config/</span><br><span class=\"line\"></span><br><span class=\"line\">ADD *.jar /home/$appName/lib/</span><br><span class=\"line\"></span><br><span class=\"line\">ADD ./*.xml /home/$appName/</span><br><span class=\"line\"></span><br><span class=\"line\">ADD ./*.sh /home/$appName/</span><br><span class=\"line\"></span><br><span class=\"line\">#指定时区</span><br><span class=\"line\">RUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &#x27;Asia/Shanghai&#x27; &gt;/etc/timezone</span><br><span class=\"line\">ENTRYPOINT [&quot;/home/$appName/run.sh&quot;]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-4-run-sh\"><a href=\"#2-4-run-sh\" class=\"headerlink\" title=\"2.4 run.sh\"></a>2.4 run.sh</h5><p>启动脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">ulimit -c unlimited</span><br><span class=\"line\">ulimit -n 32768</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">basePath=$(cd &quot;$(dirname &quot;$0&quot;)&quot;;pwd)</span><br><span class=\"line\">SERVICE_HOME=$basePath</span><br><span class=\"line\"></span><br><span class=\"line\">SERVICE_LIBS=&quot;$SERVICE_HOME/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">SERVICE_MAIN=&quot;mainClass&quot;</span><br><span class=\"line\">declare -a JAVA_ARGS</span><br><span class=\"line\">JAVA_ARGS[0]=&quot;-Xmx256m&quot;</span><br><span class=\"line\">JAVA_ARGS[1]=&quot;-Xms256m&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">exec $JAVA_HOME/bin/java -Duser.dir=$SERVICE_HOME $&#123;JAVA_ARGS[@]&#125; -classpath $SERVICE_HOME:$SERVICE_LIBS/* $SERVICE_MAIN</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-5-build-gradle\"><a href=\"#2-5-build-gradle\" class=\"headerlink\" title=\"2.5 build.gradle\"></a>2.5 build.gradle</h5><p>启动脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenCentral()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        //添加依赖jar包</span><br><span class=\"line\">        classpath &#x27;se.transmode.gradle:gradle-docker:1.2&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &#x27;docker&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">//build构造jar文件</span><br><span class=\"line\">jar &#123;</span><br><span class=\"line\">    manifest &#123;</span><br><span class=\"line\">        attributes &#x27;Manifest-Version&#x27;: 1.0</span><br><span class=\"line\">        attributes &#x27;Main-Class&#x27;: &#x27;mainClass&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    enabled = true</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//打包可运行jar包</span><br><span class=\"line\">task buildRunJar(type:Copy, dependsOn: build) &#123;</span><br><span class=\"line\">    from configurations.runtime</span><br><span class=\"line\">    from &#x27;src/main/resources&#x27;</span><br><span class=\"line\">    into &#x27;build/libs&#x27; // 目标位置</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//打包docker</span><br><span class=\"line\">task buildDocker(type: Docker, dependsOn: buildRunJar) &#123;</span><br><span class=\"line\">    push = true</span><br><span class=\"line\">    //TODO 前面为服务器期名 + 后面为服务名【以后修改最好不把服务器名打进去】</span><br><span class=\"line\">    tag = &quot;10.10.208.193:5000/&quot; + &quot;servicename&quot;</span><br><span class=\"line\">    applicationName = jar.baseName</span><br><span class=\"line\">    dockerfile = file(&#x27;src/main/docker/Dockerfile&#x27;)</span><br><span class=\"line\">    doFirst &#123;</span><br><span class=\"line\">        copy &#123;</span><br><span class=\"line\">            from &#x27;build/libs&#x27;</span><br><span class=\"line\">            into stageDir</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">   ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-6-docker-clean-build-sh\"><a href=\"#2-6-docker-clean-build-sh\" class=\"headerlink\" title=\"2.6. docker-clean-build.sh\"></a>2.6. docker-clean-build.sh</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm `docker ps -a -q`</span><br><span class=\"line\">docker rmi --force `docker images | grep servicename | awk &#x27;&#123;print $3&#125;&#x27;`</span><br><span class=\"line\">gradle clean</span><br><span class=\"line\">gradle buildDocker -x test</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-7-docker-run-sh\"><a href=\"#2-7-docker-run-sh\" class=\"headerlink\" title=\"2.7. docker-run.sh\"></a>2.7. docker-run.sh</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop servicename</span><br><span class=\"line\"></span><br><span class=\"line\">docker rm `docker ps -a -q`</span><br><span class=\"line\"></span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">    --env PRIVATE_IP=0.0.0.0 \\</span><br><span class=\"line\">    --env REG_IP=10.10.208.194 \\</span><br><span class=\"line\">    --env ZK_HOSTS=10.10.208.194:7998 \\</span><br><span class=\"line\">    --env HTTP_PORT=8011 \\</span><br><span class=\"line\">    --env HTTP_DASH_PORT=8111 \\</span><br><span class=\"line\">    --env RPC_PORT=6011 \\</span><br><span class=\"line\">    --env RPC_STACK=rpc-stack \\</span><br><span class=\"line\">    --env HTTP_STACK=http-stack \\</span><br><span class=\"line\">    --env HTTP_DASH_STACK=http-dash-stack \\</span><br><span class=\"line\">    --env KAFKA_HOST=10.10.208.194 \\</span><br><span class=\"line\">    --privileged=true \\</span><br><span class=\"line\">    -p 8011:8011 \\</span><br><span class=\"line\">    -p 8111:8111 \\</span><br><span class=\"line\">    -p 6011:6011 \\</span><br><span class=\"line\">    -d --name servicename1.0 \\</span><br><span class=\"line\">    10.10.208.193:5000/servicename1.0.0-1902151423</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-常见问题\"><a href=\"#3-常见问题\" class=\"headerlink\" title=\"3 常见问题\"></a>3 常见问题</h5><pre><code>1.docker容器时间与宿主机时间不一至,容器时间为UTC时间\n1.1.解决：Dockerfile增加\n#指定时区\nRUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &#39;Asia/Shanghai&#39; &gt;/etc/timezone\n\n2.docker基础镜像中安装常用功能,例如vim\n</code></pre>\n<h5 id=\"4-常用命令\"><a href=\"#4-常用命令\" class=\"headerlink\" title=\"4 常用命令\"></a>4 常用命令</h5><pre><code>    docker run -p 8888:8888 $name tag\n    docker stop $name\n    docker rm $name\n    docker inspect $name\n    docker ps -a | -l\n    docker logs [-f] [-t] [-tail] $name\n    -f –follows=true | false，默认是false，显示更新\n    -t –timestamps=true | false，默认是false，显示时间戳\n    –tail=“all” | 行数，显示最新行数的日志\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"docker-打包运行参照\"><a href=\"#docker-打包运行参照\" class=\"headerlink\" title=\"docker 打包运行参照\"></a>docker 打包运行参照</h3><h4 id=\"1-目录结构\"><a href=\"#1-目录结构\" class=\"headerlink\" title=\"1. 目录结构\"></a>1. 目录结构</h4><p><img src=\"resources/images/docker-build.jpg\" alt=\"docker打包项目目录结构\"></p>\n<h4 id=\"2-打包流程\"><a href=\"#2-打包流程\" class=\"headerlink\" title=\"2. 打包流程\"></a>2. 打包流程</h4><h5 id=\"2-1-docker-本地打包规范\"><a href=\"#2-1-docker-本地打包规范\" class=\"headerlink\" title=\"2.1. docker 本地打包规范\"></a>2.1. docker 本地打包规范</h5><pre><code>参照docker常用套路,需具备以下基本条件\n1. docker基础环境\n1. Dockerfile：用于打包特定镜像\n2. run.sh：用于启动服务\n3. build.gradle (java服务必须)\n4. docker-clean-build.sh (快捷打包)\n5. docker-xxx-dev.sh （快捷运行）\n</code></pre>\n<h5 id=\"2-2-docker-基础环境\"><a href=\"#2-2-docker-基础环境\" class=\"headerlink\" title=\"2.2. docker 基础环境\"></a>2.2. docker 基础环境</h5><pre><code>2.2.1 安装（可自行搜索）\n    yum install docker (centos7)\n    apt-get install docker (ubuntu)\n    下载安装包（windows 、mac）\n2.2.2.1 配置私服【linux】\n    修改/etc/docker/daemon.json文件\n    #vi /etc/docker/daemon.json\n    &#123; &quot;insecure-registries&quot;: [&quot;10.10.208.193:5000&quot;] &#125;\n    重启docker\n2.2.2.2 配置私服【mac】\n</code></pre>\n<p><img src=\"resources/images/docker-setting.jpg\" alt=\"docker打包项目目录结构\"></p>\n<h5 id=\"2-3-Dockerfile\"><a href=\"#2-3-Dockerfile\" class=\"headerlink\" title=\"2.3. Dockerfile\"></a>2.3. Dockerfile</h5><p>Dockerfile 示例 1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//官方基础镜像，打包之后目录未分开</span><br><span class=\"line\">#基础镜像</span><br><span class=\"line\">FROM java:8</span><br><span class=\"line\"></span><br><span class=\"line\">VOLUME [&quot;/tmp&quot;]</span><br><span class=\"line\">ADD ./* /home/servicename/</span><br><span class=\"line\"></span><br><span class=\"line\">#指定时区</span><br><span class=\"line\">RUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &#x27;Asia/Shanghai&#x27; &gt;/etc/timezone</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [&quot;/home/servicename/run.sh&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>Dockerfile 示例 2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//基于官方镜像二次封装，包含基础工具，打包之后目录分开</span><br><span class=\"line\">#基础镜像</span><br><span class=\"line\">FROM 10.10.208.193:5000/urcs/java:8</span><br><span class=\"line\"></span><br><span class=\"line\">#ARG是Docker1.9 版本才新加入的指令,如果不支持该命令则直接赋值</span><br><span class=\"line\">ARG appName=urcs-service-group</span><br><span class=\"line\"></span><br><span class=\"line\">VOLUME [&quot;/tmp&quot;]</span><br><span class=\"line\">#ADD ./* /home/$appName/</span><br><span class=\"line\"></span><br><span class=\"line\">#docker打包时配置文件分离/和helium目录结构保持一致</span><br><span class=\"line\">ADD config /home/$appName/config/</span><br><span class=\"line\"></span><br><span class=\"line\">ADD *.jar /home/$appName/lib/</span><br><span class=\"line\"></span><br><span class=\"line\">ADD ./*.xml /home/$appName/</span><br><span class=\"line\"></span><br><span class=\"line\">ADD ./*.sh /home/$appName/</span><br><span class=\"line\"></span><br><span class=\"line\">#指定时区</span><br><span class=\"line\">RUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &#x27;Asia/Shanghai&#x27; &gt;/etc/timezone</span><br><span class=\"line\">ENTRYPOINT [&quot;/home/$appName/run.sh&quot;]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-4-run-sh\"><a href=\"#2-4-run-sh\" class=\"headerlink\" title=\"2.4 run.sh\"></a>2.4 run.sh</h5><p>启动脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">ulimit -c unlimited</span><br><span class=\"line\">ulimit -n 32768</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">basePath=$(cd &quot;$(dirname &quot;$0&quot;)&quot;;pwd)</span><br><span class=\"line\">SERVICE_HOME=$basePath</span><br><span class=\"line\"></span><br><span class=\"line\">SERVICE_LIBS=&quot;$SERVICE_HOME/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">SERVICE_MAIN=&quot;mainClass&quot;</span><br><span class=\"line\">declare -a JAVA_ARGS</span><br><span class=\"line\">JAVA_ARGS[0]=&quot;-Xmx256m&quot;</span><br><span class=\"line\">JAVA_ARGS[1]=&quot;-Xms256m&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">exec $JAVA_HOME/bin/java -Duser.dir=$SERVICE_HOME $&#123;JAVA_ARGS[@]&#125; -classpath $SERVICE_HOME:$SERVICE_LIBS/* $SERVICE_MAIN</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-5-build-gradle\"><a href=\"#2-5-build-gradle\" class=\"headerlink\" title=\"2.5 build.gradle\"></a>2.5 build.gradle</h5><p>启动脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenCentral()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        //添加依赖jar包</span><br><span class=\"line\">        classpath &#x27;se.transmode.gradle:gradle-docker:1.2&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &#x27;docker&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">//build构造jar文件</span><br><span class=\"line\">jar &#123;</span><br><span class=\"line\">    manifest &#123;</span><br><span class=\"line\">        attributes &#x27;Manifest-Version&#x27;: 1.0</span><br><span class=\"line\">        attributes &#x27;Main-Class&#x27;: &#x27;mainClass&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    enabled = true</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//打包可运行jar包</span><br><span class=\"line\">task buildRunJar(type:Copy, dependsOn: build) &#123;</span><br><span class=\"line\">    from configurations.runtime</span><br><span class=\"line\">    from &#x27;src/main/resources&#x27;</span><br><span class=\"line\">    into &#x27;build/libs&#x27; // 目标位置</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//打包docker</span><br><span class=\"line\">task buildDocker(type: Docker, dependsOn: buildRunJar) &#123;</span><br><span class=\"line\">    push = true</span><br><span class=\"line\">    //TODO 前面为服务器期名 + 后面为服务名【以后修改最好不把服务器名打进去】</span><br><span class=\"line\">    tag = &quot;10.10.208.193:5000/&quot; + &quot;servicename&quot;</span><br><span class=\"line\">    applicationName = jar.baseName</span><br><span class=\"line\">    dockerfile = file(&#x27;src/main/docker/Dockerfile&#x27;)</span><br><span class=\"line\">    doFirst &#123;</span><br><span class=\"line\">        copy &#123;</span><br><span class=\"line\">            from &#x27;build/libs&#x27;</span><br><span class=\"line\">            into stageDir</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">   ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-6-docker-clean-build-sh\"><a href=\"#2-6-docker-clean-build-sh\" class=\"headerlink\" title=\"2.6. docker-clean-build.sh\"></a>2.6. docker-clean-build.sh</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm `docker ps -a -q`</span><br><span class=\"line\">docker rmi --force `docker images | grep servicename | awk &#x27;&#123;print $3&#125;&#x27;`</span><br><span class=\"line\">gradle clean</span><br><span class=\"line\">gradle buildDocker -x test</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-7-docker-run-sh\"><a href=\"#2-7-docker-run-sh\" class=\"headerlink\" title=\"2.7. docker-run.sh\"></a>2.7. docker-run.sh</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop servicename</span><br><span class=\"line\"></span><br><span class=\"line\">docker rm `docker ps -a -q`</span><br><span class=\"line\"></span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">    --env PRIVATE_IP=0.0.0.0 \\</span><br><span class=\"line\">    --env REG_IP=10.10.208.194 \\</span><br><span class=\"line\">    --env ZK_HOSTS=10.10.208.194:7998 \\</span><br><span class=\"line\">    --env HTTP_PORT=8011 \\</span><br><span class=\"line\">    --env HTTP_DASH_PORT=8111 \\</span><br><span class=\"line\">    --env RPC_PORT=6011 \\</span><br><span class=\"line\">    --env RPC_STACK=rpc-stack \\</span><br><span class=\"line\">    --env HTTP_STACK=http-stack \\</span><br><span class=\"line\">    --env HTTP_DASH_STACK=http-dash-stack \\</span><br><span class=\"line\">    --env KAFKA_HOST=10.10.208.194 \\</span><br><span class=\"line\">    --privileged=true \\</span><br><span class=\"line\">    -p 8011:8011 \\</span><br><span class=\"line\">    -p 8111:8111 \\</span><br><span class=\"line\">    -p 6011:6011 \\</span><br><span class=\"line\">    -d --name servicename1.0 \\</span><br><span class=\"line\">    10.10.208.193:5000/servicename1.0.0-1902151423</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-常见问题\"><a href=\"#3-常见问题\" class=\"headerlink\" title=\"3 常见问题\"></a>3 常见问题</h5><pre><code>1.docker容器时间与宿主机时间不一至,容器时间为UTC时间\n1.1.解决：Dockerfile增加\n#指定时区\nRUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &#39;Asia/Shanghai&#39; &gt;/etc/timezone\n\n2.docker基础镜像中安装常用功能,例如vim\n</code></pre>\n<h5 id=\"4-常用命令\"><a href=\"#4-常用命令\" class=\"headerlink\" title=\"4 常用命令\"></a>4 常用命令</h5><pre><code>    docker run -p 8888:8888 $name tag\n    docker stop $name\n    docker rm $name\n    docker inspect $name\n    docker ps -a | -l\n    docker logs [-f] [-t] [-tail] $name\n    -f –follows=true | false，默认是false，显示更新\n    -t –timestamps=true | false，默认是false，显示时间戳\n    –tail=“all” | 行数，显示最新行数的日志\n</code></pre>\n"},{"title":"AtomicBoolean","_content":"\n\n### 源码导读\n\n    java.util.concurrent.atomic.AtomicBoolean类提供了可以原子读取和写入的底层布尔值的操作，并且还包含高级原子操作。\n    AtomicBoolean支持基础布尔变量上的原子操作。 它具有获取和设置方法，如在volatile变量上的读取和写入。\n    也就是说，一个集合与同一变量上的任何后续get相关联。 原子compareAndSet方法也具有这些内存一致性功能。\n\n    一般情况下，我们使用 AtomicBoolean 高效并发处理 “只初始化一次” 的功能要求\n    采用volatile int value类型原子变量保证内存可见性\n    采用Unsafe类 compareAndSwapInt方法实现变量值valueOffset的修改\n\n    知识参考点：Unsafe类/ volatile 关键字/ CAS\n\n### 源码参考\n\n```java\npackage java.util.concurrent.atomic;\nimport sun.misc.Unsafe;\n\n/**\n * A {@code boolean} value that may be updated atomically. See the\n * {@link java.util.concurrent.atomic} package specification for\n * description of the properties of atomic variables. An\n * {@code AtomicBoolean} is used in applications such as atomically\n * updated flags, and cannot be used as a replacement for a\n * {@link java.lang.Boolean}.\n *\n * @since 1.5\n * @author Doug Lea\n */\npublic class AtomicBoolean implements java.io.Serializable {\n    private static final long serialVersionUID = 4654671469794556979L;\n    // setup to use Unsafe.compareAndSwapInt for updates\n    private static final Unsafe unsafe = Unsafe.getUnsafe();\n    private static final long valueOffset;\n\n    static {\n        try {\n            valueOffset = unsafe.objectFieldOffset\n                (AtomicBoolean.class.getDeclaredField(\"value\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n\n    private volatile int value;\n\n    /**\n     * Creates a new {@code AtomicBoolean} with the given initial value.\n     *\n     * @param initialValue the initial value\n     */\n    public AtomicBoolean(boolean initialValue) {\n        value = initialValue ? 1 : 0;\n    }\n\n    /**\n     * Creates a new {@code AtomicBoolean} with initial value {@code false}.\n     */\n    public AtomicBoolean() {\n    }\n\n    /**\n     * Returns the current value.\n     *\n     * @return the current value\n     */\n    public final boolean get() {\n        return value != 0;\n    }\n\n    /**\n     * Atomically sets the value to the given updated value\n     * if the current value {@code ==} the expected value.\n     *\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful. False return indicates that\n     * the actual value was not equal to the expected value.\n     */\n    public final boolean compareAndSet(boolean expect, boolean update) {\n        int e = expect ? 1 : 0;\n        int u = update ? 1 : 0;\n        return unsafe.compareAndSwapInt(this, valueOffset, e, u);\n    }\n\n    /**\n     * Atomically sets the value to the given updated value\n     * if the current value {@code ==} the expected value.\n     *\n     * <p><a href=\"package-summary.html#weakCompareAndSet\">May fail\n     * spuriously and does not provide ordering guarantees</a>, so is\n     * only rarely an appropriate alternative to {@code compareAndSet}.\n     *\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful\n     */\n    public boolean weakCompareAndSet(boolean expect, boolean update) {\n        int e = expect ? 1 : 0;\n        int u = update ? 1 : 0;\n        return unsafe.compareAndSwapInt(this, valueOffset, e, u);\n    }\n\n    /**\n     * Unconditionally sets to the given value.\n     *\n     * @param newValue the new value\n     */\n    public final void set(boolean newValue) {\n        value = newValue ? 1 : 0;\n    }\n\n    /**\n     * Eventually sets to the given value.\n     *\n     * @param newValue the new value\n     * @since 1.6\n     */\n    public final void lazySet(boolean newValue) {\n        int v = newValue ? 1 : 0;\n        unsafe.putOrderedInt(this, valueOffset, v);\n    }\n\n    /**\n     * Atomically sets to the given value and returns the previous value.\n     *\n     * @param newValue the new value\n     * @return the previous value\n     */\n    public final boolean getAndSet(boolean newValue) {\n        boolean prev;\n        do {\n            prev = get();\n        } while (!compareAndSet(prev, newValue));\n        return prev;\n    }\n\n    /**\n     * Returns the String representation of the current value.\n     * @return the String representation of the current value\n     */\n    public String toString() {\n        return Boolean.toString(get());\n    }\n\n}\n```\n","source":"_posts/language/java/juc/atomic/AtomicBoolean.md","raw":"---\ntitle: AtomicBoolean\ncategories:\n- java\ntag:\n- atomic\n---\n\n\n### 源码导读\n\n    java.util.concurrent.atomic.AtomicBoolean类提供了可以原子读取和写入的底层布尔值的操作，并且还包含高级原子操作。\n    AtomicBoolean支持基础布尔变量上的原子操作。 它具有获取和设置方法，如在volatile变量上的读取和写入。\n    也就是说，一个集合与同一变量上的任何后续get相关联。 原子compareAndSet方法也具有这些内存一致性功能。\n\n    一般情况下，我们使用 AtomicBoolean 高效并发处理 “只初始化一次” 的功能要求\n    采用volatile int value类型原子变量保证内存可见性\n    采用Unsafe类 compareAndSwapInt方法实现变量值valueOffset的修改\n\n    知识参考点：Unsafe类/ volatile 关键字/ CAS\n\n### 源码参考\n\n```java\npackage java.util.concurrent.atomic;\nimport sun.misc.Unsafe;\n\n/**\n * A {@code boolean} value that may be updated atomically. See the\n * {@link java.util.concurrent.atomic} package specification for\n * description of the properties of atomic variables. An\n * {@code AtomicBoolean} is used in applications such as atomically\n * updated flags, and cannot be used as a replacement for a\n * {@link java.lang.Boolean}.\n *\n * @since 1.5\n * @author Doug Lea\n */\npublic class AtomicBoolean implements java.io.Serializable {\n    private static final long serialVersionUID = 4654671469794556979L;\n    // setup to use Unsafe.compareAndSwapInt for updates\n    private static final Unsafe unsafe = Unsafe.getUnsafe();\n    private static final long valueOffset;\n\n    static {\n        try {\n            valueOffset = unsafe.objectFieldOffset\n                (AtomicBoolean.class.getDeclaredField(\"value\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n\n    private volatile int value;\n\n    /**\n     * Creates a new {@code AtomicBoolean} with the given initial value.\n     *\n     * @param initialValue the initial value\n     */\n    public AtomicBoolean(boolean initialValue) {\n        value = initialValue ? 1 : 0;\n    }\n\n    /**\n     * Creates a new {@code AtomicBoolean} with initial value {@code false}.\n     */\n    public AtomicBoolean() {\n    }\n\n    /**\n     * Returns the current value.\n     *\n     * @return the current value\n     */\n    public final boolean get() {\n        return value != 0;\n    }\n\n    /**\n     * Atomically sets the value to the given updated value\n     * if the current value {@code ==} the expected value.\n     *\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful. False return indicates that\n     * the actual value was not equal to the expected value.\n     */\n    public final boolean compareAndSet(boolean expect, boolean update) {\n        int e = expect ? 1 : 0;\n        int u = update ? 1 : 0;\n        return unsafe.compareAndSwapInt(this, valueOffset, e, u);\n    }\n\n    /**\n     * Atomically sets the value to the given updated value\n     * if the current value {@code ==} the expected value.\n     *\n     * <p><a href=\"package-summary.html#weakCompareAndSet\">May fail\n     * spuriously and does not provide ordering guarantees</a>, so is\n     * only rarely an appropriate alternative to {@code compareAndSet}.\n     *\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful\n     */\n    public boolean weakCompareAndSet(boolean expect, boolean update) {\n        int e = expect ? 1 : 0;\n        int u = update ? 1 : 0;\n        return unsafe.compareAndSwapInt(this, valueOffset, e, u);\n    }\n\n    /**\n     * Unconditionally sets to the given value.\n     *\n     * @param newValue the new value\n     */\n    public final void set(boolean newValue) {\n        value = newValue ? 1 : 0;\n    }\n\n    /**\n     * Eventually sets to the given value.\n     *\n     * @param newValue the new value\n     * @since 1.6\n     */\n    public final void lazySet(boolean newValue) {\n        int v = newValue ? 1 : 0;\n        unsafe.putOrderedInt(this, valueOffset, v);\n    }\n\n    /**\n     * Atomically sets to the given value and returns the previous value.\n     *\n     * @param newValue the new value\n     * @return the previous value\n     */\n    public final boolean getAndSet(boolean newValue) {\n        boolean prev;\n        do {\n            prev = get();\n        } while (!compareAndSet(prev, newValue));\n        return prev;\n    }\n\n    /**\n     * Returns the String representation of the current value.\n     * @return the String representation of the current value\n     */\n    public String toString() {\n        return Boolean.toString(get());\n    }\n\n}\n```\n","slug":"language/java/juc/atomic/AtomicBoolean","published":1,"date":"2021-09-14T14:56:14.658Z","updated":"2021-09-14T14:56:14.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyjb004du6uk6wnj7ulx","content":"<h3 id=\"源码导读\"><a href=\"#源码导读\" class=\"headerlink\" title=\"源码导读\"></a>源码导读</h3><pre><code>java.util.concurrent.atomic.AtomicBoolean类提供了可以原子读取和写入的底层布尔值的操作，并且还包含高级原子操作。\nAtomicBoolean支持基础布尔变量上的原子操作。 它具有获取和设置方法，如在volatile变量上的读取和写入。\n也就是说，一个集合与同一变量上的任何后续get相关联。 原子compareAndSet方法也具有这些内存一致性功能。\n\n一般情况下，我们使用 AtomicBoolean 高效并发处理 “只初始化一次” 的功能要求\n采用volatile int value类型原子变量保证内存可见性\n采用Unsafe类 compareAndSwapInt方法实现变量值valueOffset的修改\n\n知识参考点：Unsafe类/ volatile 关键字/ CAS\n</code></pre>\n<h3 id=\"源码参考\"><a href=\"#源码参考\" class=\"headerlink\" title=\"源码参考\"></a>源码参考</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.util.concurrent.atomic;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.Unsafe;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A &#123;<span class=\"doctag\">@code</span> boolean&#125; value that may be updated atomically. See the</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> java.util.concurrent.atomic&#125; package specification for</span></span><br><span class=\"line\"><span class=\"comment\"> * description of the properties of atomic variables. An</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> AtomicBoolean&#125; is used in applications such as atomically</span></span><br><span class=\"line\"><span class=\"comment\"> * updated flags, and cannot be used as a replacement for a</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> java.lang.Boolean&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.5</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Doug Lea</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicBoolean</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">4654671469794556979L</span>;</span><br><span class=\"line\">    <span class=\"comment\">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> valueOffset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            valueOffset = unsafe.objectFieldOffset</span><br><span class=\"line\">                (AtomicBoolean.class.getDeclaredField(<span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a new &#123;<span class=\"doctag\">@code</span> AtomicBoolean&#125; with the given initial value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> initialValue the initial value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AtomicBoolean</span><span class=\"params\">(<span class=\"keyword\">boolean</span> initialValue)</span> </span>&#123;</span><br><span class=\"line\">        value = initialValue ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a new &#123;<span class=\"doctag\">@code</span> AtomicBoolean&#125; with initial value &#123;<span class=\"doctag\">@code</span> false&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AtomicBoolean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the current value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value != <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically sets the value to the given updated value</span></span><br><span class=\"line\"><span class=\"comment\">     * if the current value &#123;<span class=\"doctag\">@code</span> ==&#125; the expected value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> expect the expected value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> update the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if successful. False return indicates that</span></span><br><span class=\"line\"><span class=\"comment\">     * the actual value was not equal to the expected value.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(<span class=\"keyword\">boolean</span> expect, <span class=\"keyword\">boolean</span> update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> e = expect ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = update ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, valueOffset, e, u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically sets the value to the given updated value</span></span><br><span class=\"line\"><span class=\"comment\">     * if the current value &#123;<span class=\"doctag\">@code</span> ==&#125; the expected value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;&lt;a href=&quot;package-summary.html#weakCompareAndSet&quot;&gt;May fail</span></span><br><span class=\"line\"><span class=\"comment\">     * spuriously and does not provide ordering guarantees&lt;/a&gt;, so is</span></span><br><span class=\"line\"><span class=\"comment\">     * only rarely an appropriate alternative to &#123;<span class=\"doctag\">@code</span> compareAndSet&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> expect the expected value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> update the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if successful</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">weakCompareAndSet</span><span class=\"params\">(<span class=\"keyword\">boolean</span> expect, <span class=\"keyword\">boolean</span> update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> e = expect ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = update ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, valueOffset, e, u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Unconditionally sets to the given value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue the new value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        value = newValue ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Eventually sets to the given value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">lazySet</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = newValue ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        unsafe.putOrderedInt(<span class=\"keyword\">this</span>, valueOffset, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically sets to the given value and returns the previous value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getAndSet</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> prev;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            prev = get();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!compareAndSet(prev, newValue));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the String representation of the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the String representation of the current value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Boolean.toString(get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"源码导读\"><a href=\"#源码导读\" class=\"headerlink\" title=\"源码导读\"></a>源码导读</h3><pre><code>java.util.concurrent.atomic.AtomicBoolean类提供了可以原子读取和写入的底层布尔值的操作，并且还包含高级原子操作。\nAtomicBoolean支持基础布尔变量上的原子操作。 它具有获取和设置方法，如在volatile变量上的读取和写入。\n也就是说，一个集合与同一变量上的任何后续get相关联。 原子compareAndSet方法也具有这些内存一致性功能。\n\n一般情况下，我们使用 AtomicBoolean 高效并发处理 “只初始化一次” 的功能要求\n采用volatile int value类型原子变量保证内存可见性\n采用Unsafe类 compareAndSwapInt方法实现变量值valueOffset的修改\n\n知识参考点：Unsafe类/ volatile 关键字/ CAS\n</code></pre>\n<h3 id=\"源码参考\"><a href=\"#源码参考\" class=\"headerlink\" title=\"源码参考\"></a>源码参考</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.util.concurrent.atomic;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.Unsafe;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A &#123;<span class=\"doctag\">@code</span> boolean&#125; value that may be updated atomically. See the</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> java.util.concurrent.atomic&#125; package specification for</span></span><br><span class=\"line\"><span class=\"comment\"> * description of the properties of atomic variables. An</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> AtomicBoolean&#125; is used in applications such as atomically</span></span><br><span class=\"line\"><span class=\"comment\"> * updated flags, and cannot be used as a replacement for a</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> java.lang.Boolean&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.5</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Doug Lea</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicBoolean</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">4654671469794556979L</span>;</span><br><span class=\"line\">    <span class=\"comment\">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> valueOffset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            valueOffset = unsafe.objectFieldOffset</span><br><span class=\"line\">                (AtomicBoolean.class.getDeclaredField(<span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a new &#123;<span class=\"doctag\">@code</span> AtomicBoolean&#125; with the given initial value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> initialValue the initial value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AtomicBoolean</span><span class=\"params\">(<span class=\"keyword\">boolean</span> initialValue)</span> </span>&#123;</span><br><span class=\"line\">        value = initialValue ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a new &#123;<span class=\"doctag\">@code</span> AtomicBoolean&#125; with initial value &#123;<span class=\"doctag\">@code</span> false&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AtomicBoolean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the current value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value != <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically sets the value to the given updated value</span></span><br><span class=\"line\"><span class=\"comment\">     * if the current value &#123;<span class=\"doctag\">@code</span> ==&#125; the expected value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> expect the expected value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> update the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if successful. False return indicates that</span></span><br><span class=\"line\"><span class=\"comment\">     * the actual value was not equal to the expected value.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(<span class=\"keyword\">boolean</span> expect, <span class=\"keyword\">boolean</span> update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> e = expect ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = update ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, valueOffset, e, u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically sets the value to the given updated value</span></span><br><span class=\"line\"><span class=\"comment\">     * if the current value &#123;<span class=\"doctag\">@code</span> ==&#125; the expected value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;&lt;a href=&quot;package-summary.html#weakCompareAndSet&quot;&gt;May fail</span></span><br><span class=\"line\"><span class=\"comment\">     * spuriously and does not provide ordering guarantees&lt;/a&gt;, so is</span></span><br><span class=\"line\"><span class=\"comment\">     * only rarely an appropriate alternative to &#123;<span class=\"doctag\">@code</span> compareAndSet&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> expect the expected value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> update the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if successful</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">weakCompareAndSet</span><span class=\"params\">(<span class=\"keyword\">boolean</span> expect, <span class=\"keyword\">boolean</span> update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> e = expect ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = update ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, valueOffset, e, u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Unconditionally sets to the given value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue the new value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        value = newValue ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Eventually sets to the given value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">lazySet</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = newValue ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        unsafe.putOrderedInt(<span class=\"keyword\">this</span>, valueOffset, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically sets to the given value and returns the previous value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getAndSet</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> prev;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            prev = get();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!compareAndSet(prev, newValue));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the String representation of the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the String representation of the current value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Boolean.toString(get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"AtomicInteger","_content":"\n\n### 源码导读\n\n    AtomicInteger，应该是atomic框架中用得最多的原子类了。顾名思义，\n    AtomicInteger是Integer类型的线程安全原子类，可以在应用程序中以原子的方式更新int值。\n\n     采用volatile int value类型原子变量保证内存可见性\n     采用Unsafe类 compareAndSwapInt方法实现变量值valueOffset的修改\n\n    知识参考点：Unsafe类/ volatile 关键字/ CAS\n\n### 源码参考\n\n```java\n/*\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n * Written by Doug Lea with assistance from members of JCP JSR-166\n * Expert Group and released to the public domain, as explained at\n * http://creativecommons.org/publicdomain/zero/1.0/\n */\n\npackage java.util.concurrent.atomic;\nimport java.util.function.IntUnaryOperator;\nimport java.util.function.IntBinaryOperator;\nimport sun.misc.Unsafe;\n\n/**\n * An {@code int} value that may be updated atomically.  See the\n * {@link java.util.concurrent.atomic} package specification for\n * description of the properties of atomic variables. An\n * {@code AtomicInteger} is used in applications such as atomically\n * incremented counters, and cannot be used as a replacement for an\n * {@link java.lang.Integer}. However, this class does extend\n * {@code Number} to allow uniform access by tools and utilities that\n * deal with numerically-based classes.\n *\n * @since 1.5\n * @author Doug Lea\n*/\npublic class AtomicInteger extends Number implements java.io.Serializable {\n    private static final long serialVersionUID = 6214790243416807050L;\n\n    // setup to use Unsafe.compareAndSwapInt for updates\n    private static final Unsafe unsafe = Unsafe.getUnsafe();\n    private static final long valueOffset;\n\n    static {\n        try {\n            valueOffset = unsafe.objectFieldOffset\n                (AtomicInteger.class.getDeclaredField(\"value\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n\n    private volatile int value;\n\n    /**\n     * Creates a new AtomicInteger with the given initial value.\n     *\n     * @param initialValue the initial value\n     */\n    public AtomicInteger(int initialValue) {\n        value = initialValue;\n    }\n\n    /**\n     * Creates a new AtomicInteger with initial value {@code 0}.\n     */\n    public AtomicInteger() {\n    }\n\n    /**\n     * Gets the current value.\n     *\n     * @return the current value\n     */\n    public final int get() {\n        return value;\n    }\n\n    /**\n     * Sets to the given value.\n     *\n     * @param newValue the new value\n     */\n    public final void set(int newValue) {\n        value = newValue;\n    }\n\n    /**\n     * Eventually sets to the given value.\n     *\n     * @param newValue the new value\n     * @since 1.6\n     */\n    public final void lazySet(int newValue) {\n        unsafe.putOrderedInt(this, valueOffset, newValue);\n    }\n\n    /**\n     * Atomically sets to the given value and returns the old value.\n     *\n     * @param newValue the new value\n     * @return the previous value\n     */\n    public final int getAndSet(int newValue) {\n        return unsafe.getAndSetInt(this, valueOffset, newValue);\n    }\n\n    /**\n     * Atomically sets the value to the given updated value\n     * if the current value {@code ==} the expected value.\n     *\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful. False return indicates that\n     * the actual value was not equal to the expected value.\n     */\n    public final boolean compareAndSet(int expect, int update) {\n        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);\n    }\n\n    /**\n     * Atomically sets the value to the given updated value\n     * if the current value {@code ==} the expected value.\n     *\n     * <p><a href=\"package-summary.html#weakCompareAndSet\">May fail\n     * spuriously and does not provide ordering guarantees</a>, so is\n     * only rarely an appropriate alternative to {@code compareAndSet}.\n     *\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful\n     */\n    public final boolean weakCompareAndSet(int expect, int update) {\n        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);\n    }\n\n    /**\n     * Atomically increments by one the current value.\n     *\n     * @return the previous value\n     */\n    public final int getAndIncrement() {\n        return unsafe.getAndAddInt(this, valueOffset, 1);\n    }\n\n    /**\n     * Atomically decrements by one the current value.\n     *\n     * @return the previous value\n     */\n    public final int getAndDecrement() {\n        return unsafe.getAndAddInt(this, valueOffset, -1);\n    }\n\n    /**\n     * Atomically adds the given value to the current value.\n     *\n     * @param delta the value to add\n     * @return the previous value\n     */\n    public final int getAndAdd(int delta) {\n        return unsafe.getAndAddInt(this, valueOffset, delta);\n    }\n\n    /**\n     * Atomically increments by one the current value.\n     *\n     * @return the updated value\n     */\n    public final int incrementAndGet() {\n        return unsafe.getAndAddInt(this, valueOffset, 1) + 1;\n    }\n\n    /**\n     * Atomically decrements by one the current value.\n     *\n     * @return the updated value\n     */\n    public final int decrementAndGet() {\n        return unsafe.getAndAddInt(this, valueOffset, -1) - 1;\n    }\n\n    /**\n     * Atomically adds the given value to the current value.\n     *\n     * @param delta the value to add\n     * @return the updated value\n     */\n    public final int addAndGet(int delta) {\n        return unsafe.getAndAddInt(this, valueOffset, delta) + delta;\n    }\n\n    /**\n     * Atomically updates the current value with the results of\n     * applying the given function, returning the previous value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param updateFunction a side-effect-free function\n     * @return the previous value\n     * @since 1.8\n     */\n    public final int getAndUpdate(IntUnaryOperator updateFunction) {\n        int prev, next;\n        do {\n            prev = get();\n            next = updateFunction.applyAsInt(prev);\n        } while (!compareAndSet(prev, next));\n        return prev;\n    }\n\n    /**\n     * Atomically updates the current value with the results of\n     * applying the given function, returning the updated value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param updateFunction a side-effect-free function\n     * @return the updated value\n     * @since 1.8\n     */\n    public final int updateAndGet(IntUnaryOperator updateFunction) {\n        int prev, next;\n        do {\n            prev = get();\n            next = updateFunction.applyAsInt(prev);\n        } while (!compareAndSet(prev, next));\n        return next;\n    }\n\n    /**\n     * Atomically updates the current value with the results of\n     * applying the given function to the current and given values,\n     * returning the previous value. The function should be\n     * side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function\n     * is applied with the current value as its first argument,\n     * and the given update as the second argument.\n     *\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the previous value\n     * @since 1.8\n     */\n    public final int getAndAccumulate(int x,\n                                      IntBinaryOperator accumulatorFunction) {\n        int prev, next;\n        do {\n            prev = get();\n            next = accumulatorFunction.applyAsInt(prev, x);\n        } while (!compareAndSet(prev, next));\n        return prev;\n    }\n\n    /**\n     * Atomically updates the current value with the results of\n     * applying the given function to the current and given values,\n     * returning the updated value. The function should be\n     * side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function\n     * is applied with the current value as its first argument,\n     * and the given update as the second argument.\n     *\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the updated value\n     * @since 1.8\n     */\n    public final int accumulateAndGet(int x,\n                                      IntBinaryOperator accumulatorFunction) {\n        int prev, next;\n        do {\n            prev = get();\n            next = accumulatorFunction.applyAsInt(prev, x);\n        } while (!compareAndSet(prev, next));\n        return next;\n    }\n\n    /**\n     * Returns the String representation of the current value.\n     * @return the String representation of the current value\n     */\n    public String toString() {\n        return Integer.toString(get());\n    }\n\n    /**\n     * Returns the value of this {@code AtomicInteger} as an {@code int}.\n     */\n    public int intValue() {\n        return get();\n    }\n\n    /**\n     * Returns the value of this {@code AtomicInteger} as a {@code long}\n     * after a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversions\n     */\n    public long longValue() {\n        return (long)get();\n    }\n\n    /**\n     * Returns the value of this {@code AtomicInteger} as a {@code float}\n     * after a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversions\n     */\n    public float floatValue() {\n        return (float)get();\n    }\n\n    /**\n     * Returns the value of this {@code AtomicInteger} as a {@code double}\n     * after a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversions\n     */\n    public double doubleValue() {\n        return (double)get();\n    }\n\n}\n```\n","source":"_posts/language/java/juc/atomic/AtomicInteger.md","raw":"---\ntitle: AtomicInteger\ncategories:\n- java\ntag:\n- atomic\n---\n\n\n### 源码导读\n\n    AtomicInteger，应该是atomic框架中用得最多的原子类了。顾名思义，\n    AtomicInteger是Integer类型的线程安全原子类，可以在应用程序中以原子的方式更新int值。\n\n     采用volatile int value类型原子变量保证内存可见性\n     采用Unsafe类 compareAndSwapInt方法实现变量值valueOffset的修改\n\n    知识参考点：Unsafe类/ volatile 关键字/ CAS\n\n### 源码参考\n\n```java\n/*\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n * Written by Doug Lea with assistance from members of JCP JSR-166\n * Expert Group and released to the public domain, as explained at\n * http://creativecommons.org/publicdomain/zero/1.0/\n */\n\npackage java.util.concurrent.atomic;\nimport java.util.function.IntUnaryOperator;\nimport java.util.function.IntBinaryOperator;\nimport sun.misc.Unsafe;\n\n/**\n * An {@code int} value that may be updated atomically.  See the\n * {@link java.util.concurrent.atomic} package specification for\n * description of the properties of atomic variables. An\n * {@code AtomicInteger} is used in applications such as atomically\n * incremented counters, and cannot be used as a replacement for an\n * {@link java.lang.Integer}. However, this class does extend\n * {@code Number} to allow uniform access by tools and utilities that\n * deal with numerically-based classes.\n *\n * @since 1.5\n * @author Doug Lea\n*/\npublic class AtomicInteger extends Number implements java.io.Serializable {\n    private static final long serialVersionUID = 6214790243416807050L;\n\n    // setup to use Unsafe.compareAndSwapInt for updates\n    private static final Unsafe unsafe = Unsafe.getUnsafe();\n    private static final long valueOffset;\n\n    static {\n        try {\n            valueOffset = unsafe.objectFieldOffset\n                (AtomicInteger.class.getDeclaredField(\"value\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n\n    private volatile int value;\n\n    /**\n     * Creates a new AtomicInteger with the given initial value.\n     *\n     * @param initialValue the initial value\n     */\n    public AtomicInteger(int initialValue) {\n        value = initialValue;\n    }\n\n    /**\n     * Creates a new AtomicInteger with initial value {@code 0}.\n     */\n    public AtomicInteger() {\n    }\n\n    /**\n     * Gets the current value.\n     *\n     * @return the current value\n     */\n    public final int get() {\n        return value;\n    }\n\n    /**\n     * Sets to the given value.\n     *\n     * @param newValue the new value\n     */\n    public final void set(int newValue) {\n        value = newValue;\n    }\n\n    /**\n     * Eventually sets to the given value.\n     *\n     * @param newValue the new value\n     * @since 1.6\n     */\n    public final void lazySet(int newValue) {\n        unsafe.putOrderedInt(this, valueOffset, newValue);\n    }\n\n    /**\n     * Atomically sets to the given value and returns the old value.\n     *\n     * @param newValue the new value\n     * @return the previous value\n     */\n    public final int getAndSet(int newValue) {\n        return unsafe.getAndSetInt(this, valueOffset, newValue);\n    }\n\n    /**\n     * Atomically sets the value to the given updated value\n     * if the current value {@code ==} the expected value.\n     *\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful. False return indicates that\n     * the actual value was not equal to the expected value.\n     */\n    public final boolean compareAndSet(int expect, int update) {\n        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);\n    }\n\n    /**\n     * Atomically sets the value to the given updated value\n     * if the current value {@code ==} the expected value.\n     *\n     * <p><a href=\"package-summary.html#weakCompareAndSet\">May fail\n     * spuriously and does not provide ordering guarantees</a>, so is\n     * only rarely an appropriate alternative to {@code compareAndSet}.\n     *\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful\n     */\n    public final boolean weakCompareAndSet(int expect, int update) {\n        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);\n    }\n\n    /**\n     * Atomically increments by one the current value.\n     *\n     * @return the previous value\n     */\n    public final int getAndIncrement() {\n        return unsafe.getAndAddInt(this, valueOffset, 1);\n    }\n\n    /**\n     * Atomically decrements by one the current value.\n     *\n     * @return the previous value\n     */\n    public final int getAndDecrement() {\n        return unsafe.getAndAddInt(this, valueOffset, -1);\n    }\n\n    /**\n     * Atomically adds the given value to the current value.\n     *\n     * @param delta the value to add\n     * @return the previous value\n     */\n    public final int getAndAdd(int delta) {\n        return unsafe.getAndAddInt(this, valueOffset, delta);\n    }\n\n    /**\n     * Atomically increments by one the current value.\n     *\n     * @return the updated value\n     */\n    public final int incrementAndGet() {\n        return unsafe.getAndAddInt(this, valueOffset, 1) + 1;\n    }\n\n    /**\n     * Atomically decrements by one the current value.\n     *\n     * @return the updated value\n     */\n    public final int decrementAndGet() {\n        return unsafe.getAndAddInt(this, valueOffset, -1) - 1;\n    }\n\n    /**\n     * Atomically adds the given value to the current value.\n     *\n     * @param delta the value to add\n     * @return the updated value\n     */\n    public final int addAndGet(int delta) {\n        return unsafe.getAndAddInt(this, valueOffset, delta) + delta;\n    }\n\n    /**\n     * Atomically updates the current value with the results of\n     * applying the given function, returning the previous value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param updateFunction a side-effect-free function\n     * @return the previous value\n     * @since 1.8\n     */\n    public final int getAndUpdate(IntUnaryOperator updateFunction) {\n        int prev, next;\n        do {\n            prev = get();\n            next = updateFunction.applyAsInt(prev);\n        } while (!compareAndSet(prev, next));\n        return prev;\n    }\n\n    /**\n     * Atomically updates the current value with the results of\n     * applying the given function, returning the updated value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param updateFunction a side-effect-free function\n     * @return the updated value\n     * @since 1.8\n     */\n    public final int updateAndGet(IntUnaryOperator updateFunction) {\n        int prev, next;\n        do {\n            prev = get();\n            next = updateFunction.applyAsInt(prev);\n        } while (!compareAndSet(prev, next));\n        return next;\n    }\n\n    /**\n     * Atomically updates the current value with the results of\n     * applying the given function to the current and given values,\n     * returning the previous value. The function should be\n     * side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function\n     * is applied with the current value as its first argument,\n     * and the given update as the second argument.\n     *\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the previous value\n     * @since 1.8\n     */\n    public final int getAndAccumulate(int x,\n                                      IntBinaryOperator accumulatorFunction) {\n        int prev, next;\n        do {\n            prev = get();\n            next = accumulatorFunction.applyAsInt(prev, x);\n        } while (!compareAndSet(prev, next));\n        return prev;\n    }\n\n    /**\n     * Atomically updates the current value with the results of\n     * applying the given function to the current and given values,\n     * returning the updated value. The function should be\n     * side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function\n     * is applied with the current value as its first argument,\n     * and the given update as the second argument.\n     *\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the updated value\n     * @since 1.8\n     */\n    public final int accumulateAndGet(int x,\n                                      IntBinaryOperator accumulatorFunction) {\n        int prev, next;\n        do {\n            prev = get();\n            next = accumulatorFunction.applyAsInt(prev, x);\n        } while (!compareAndSet(prev, next));\n        return next;\n    }\n\n    /**\n     * Returns the String representation of the current value.\n     * @return the String representation of the current value\n     */\n    public String toString() {\n        return Integer.toString(get());\n    }\n\n    /**\n     * Returns the value of this {@code AtomicInteger} as an {@code int}.\n     */\n    public int intValue() {\n        return get();\n    }\n\n    /**\n     * Returns the value of this {@code AtomicInteger} as a {@code long}\n     * after a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversions\n     */\n    public long longValue() {\n        return (long)get();\n    }\n\n    /**\n     * Returns the value of this {@code AtomicInteger} as a {@code float}\n     * after a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversions\n     */\n    public float floatValue() {\n        return (float)get();\n    }\n\n    /**\n     * Returns the value of this {@code AtomicInteger} as a {@code double}\n     * after a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversions\n     */\n    public double doubleValue() {\n        return (double)get();\n    }\n\n}\n```\n","slug":"language/java/juc/atomic/AtomicInteger","published":1,"date":"2021-09-14T14:56:14.663Z","updated":"2021-09-14T14:56:14.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyjb004gu6ukanrqa2u8","content":"<h3 id=\"源码导读\"><a href=\"#源码导读\" class=\"headerlink\" title=\"源码导读\"></a>源码导读</h3><pre><code>AtomicInteger，应该是atomic框架中用得最多的原子类了。顾名思义，\nAtomicInteger是Integer类型的线程安全原子类，可以在应用程序中以原子的方式更新int值。\n\n 采用volatile int value类型原子变量保证内存可见性\n 采用Unsafe类 compareAndSwapInt方法实现变量值valueOffset的修改\n\n知识参考点：Unsafe类/ volatile 关键字/ CAS\n</code></pre>\n<h3 id=\"源码参考\"><a href=\"#源码参考\" class=\"headerlink\" title=\"源码参考\"></a>源码参考</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Written by Doug Lea with assistance from members of JCP JSR-166</span></span><br><span class=\"line\"><span class=\"comment\"> * Expert Group and released to the public domain, as explained at</span></span><br><span class=\"line\"><span class=\"comment\"> * http://creativecommons.org/publicdomain/zero/1.0/</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> java.util.concurrent.atomic;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.IntUnaryOperator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.IntBinaryOperator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.Unsafe;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * An &#123;<span class=\"doctag\">@code</span> int&#125; value that may be updated atomically.  See the</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> java.util.concurrent.atomic&#125; package specification for</span></span><br><span class=\"line\"><span class=\"comment\"> * description of the properties of atomic variables. An</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> AtomicInteger&#125; is used in applications such as atomically</span></span><br><span class=\"line\"><span class=\"comment\"> * incremented counters, and cannot be used as a replacement for an</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> java.lang.Integer&#125;. However, this class does extend</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> Number&#125; to allow uniform access by tools and utilities that</span></span><br><span class=\"line\"><span class=\"comment\"> * deal with numerically-based classes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.5</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Doug Lea</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicInteger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6214790243416807050L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> valueOffset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            valueOffset = unsafe.objectFieldOffset</span><br><span class=\"line\">                (AtomicInteger.class.getDeclaredField(<span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a new AtomicInteger with the given initial value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> initialValue the initial value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AtomicInteger</span><span class=\"params\">(<span class=\"keyword\">int</span> initialValue)</span> </span>&#123;</span><br><span class=\"line\">        value = initialValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a new AtomicInteger with initial value &#123;<span class=\"doctag\">@code</span> 0&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AtomicInteger</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Gets the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the current value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sets to the given value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue the new value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        value = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Eventually sets to the given value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">lazySet</span><span class=\"params\">(<span class=\"keyword\">int</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        unsafe.putOrderedInt(<span class=\"keyword\">this</span>, valueOffset, newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically sets to the given value and returns the old value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndSetInt(<span class=\"keyword\">this</span>, valueOffset, newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically sets the value to the given updated value</span></span><br><span class=\"line\"><span class=\"comment\">     * if the current value &#123;<span class=\"doctag\">@code</span> ==&#125; the expected value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> expect the expected value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> update the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if successful. False return indicates that</span></span><br><span class=\"line\"><span class=\"comment\">     * the actual value was not equal to the expected value.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, valueOffset, expect, update);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically sets the value to the given updated value</span></span><br><span class=\"line\"><span class=\"comment\">     * if the current value &#123;<span class=\"doctag\">@code</span> ==&#125; the expected value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;&lt;a href=&quot;package-summary.html#weakCompareAndSet&quot;&gt;May fail</span></span><br><span class=\"line\"><span class=\"comment\">     * spuriously and does not provide ordering guarantees&lt;/a&gt;, so is</span></span><br><span class=\"line\"><span class=\"comment\">     * only rarely an appropriate alternative to &#123;<span class=\"doctag\">@code</span> compareAndSet&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> expect the expected value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> update the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if successful</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">weakCompareAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, valueOffset, expect, update);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically increments by one the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndIncrement</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically decrements by one the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndDecrement</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, -<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically adds the given value to the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delta the value to add</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> delta)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, delta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically increments by one the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the updated value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">incrementAndGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically decrements by one the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the updated value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">decrementAndGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, -<span class=\"number\">1</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically adds the given value to the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delta the value to add</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the updated value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">addAndGet</span><span class=\"params\">(<span class=\"keyword\">int</span> delta)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, delta) + delta;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically updates the current value with the results of</span></span><br><span class=\"line\"><span class=\"comment\">     * applying the given function, returning the previous value. The</span></span><br><span class=\"line\"><span class=\"comment\">     * function should be side-effect-free, since it may be re-applied</span></span><br><span class=\"line\"><span class=\"comment\">     * when attempted updates fail due to contention among threads.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> updateFunction a side-effect-free function</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndUpdate</span><span class=\"params\">(IntUnaryOperator updateFunction)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> prev, next;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            prev = get();</span><br><span class=\"line\">            next = updateFunction.applyAsInt(prev);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!compareAndSet(prev, next));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically updates the current value with the results of</span></span><br><span class=\"line\"><span class=\"comment\">     * applying the given function, returning the updated value. The</span></span><br><span class=\"line\"><span class=\"comment\">     * function should be side-effect-free, since it may be re-applied</span></span><br><span class=\"line\"><span class=\"comment\">     * when attempted updates fail due to contention among threads.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> updateFunction a side-effect-free function</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the updated value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">updateAndGet</span><span class=\"params\">(IntUnaryOperator updateFunction)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> prev, next;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            prev = get();</span><br><span class=\"line\">            next = updateFunction.applyAsInt(prev);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!compareAndSet(prev, next));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically updates the current value with the results of</span></span><br><span class=\"line\"><span class=\"comment\">     * applying the given function to the current and given values,</span></span><br><span class=\"line\"><span class=\"comment\">     * returning the previous value. The function should be</span></span><br><span class=\"line\"><span class=\"comment\">     * side-effect-free, since it may be re-applied when attempted</span></span><br><span class=\"line\"><span class=\"comment\">     * updates fail due to contention among threads.  The function</span></span><br><span class=\"line\"><span class=\"comment\">     * is applied with the current value as its first argument,</span></span><br><span class=\"line\"><span class=\"comment\">     * and the given update as the second argument.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> x the update value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> accumulatorFunction a side-effect-free function of two arguments</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndAccumulate</span><span class=\"params\">(<span class=\"keyword\">int</span> x,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                      IntBinaryOperator accumulatorFunction)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> prev, next;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            prev = get();</span><br><span class=\"line\">            next = accumulatorFunction.applyAsInt(prev, x);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!compareAndSet(prev, next));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically updates the current value with the results of</span></span><br><span class=\"line\"><span class=\"comment\">     * applying the given function to the current and given values,</span></span><br><span class=\"line\"><span class=\"comment\">     * returning the updated value. The function should be</span></span><br><span class=\"line\"><span class=\"comment\">     * side-effect-free, since it may be re-applied when attempted</span></span><br><span class=\"line\"><span class=\"comment\">     * updates fail due to contention among threads.  The function</span></span><br><span class=\"line\"><span class=\"comment\">     * is applied with the current value as its first argument,</span></span><br><span class=\"line\"><span class=\"comment\">     * and the given update as the second argument.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> x the update value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> accumulatorFunction a side-effect-free function of two arguments</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the updated value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">accumulateAndGet</span><span class=\"params\">(<span class=\"keyword\">int</span> x,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                      IntBinaryOperator accumulatorFunction)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> prev, next;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            prev = get();</span><br><span class=\"line\">            next = accumulatorFunction.applyAsInt(prev, x);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!compareAndSet(prev, next));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the String representation of the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the String representation of the current value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.toString(get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the value of this &#123;<span class=\"doctag\">@code</span> AtomicInteger&#125; as an &#123;<span class=\"doctag\">@code</span> int&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">intValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the value of this &#123;<span class=\"doctag\">@code</span> AtomicInteger&#125; as a &#123;<span class=\"doctag\">@code</span> long&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * after a widening primitive conversion.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@jls</span> 5.1.2 Widening Primitive Conversions</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">longValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">long</span>)get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the value of this &#123;<span class=\"doctag\">@code</span> AtomicInteger&#125; as a &#123;<span class=\"doctag\">@code</span> float&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * after a widening primitive conversion.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@jls</span> 5.1.2 Widening Primitive Conversions</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">floatValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">float</span>)get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the value of this &#123;<span class=\"doctag\">@code</span> AtomicInteger&#125; as a &#123;<span class=\"doctag\">@code</span> double&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * after a widening primitive conversion.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@jls</span> 5.1.2 Widening Primitive Conversions</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">doubleValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"源码导读\"><a href=\"#源码导读\" class=\"headerlink\" title=\"源码导读\"></a>源码导读</h3><pre><code>AtomicInteger，应该是atomic框架中用得最多的原子类了。顾名思义，\nAtomicInteger是Integer类型的线程安全原子类，可以在应用程序中以原子的方式更新int值。\n\n 采用volatile int value类型原子变量保证内存可见性\n 采用Unsafe类 compareAndSwapInt方法实现变量值valueOffset的修改\n\n知识参考点：Unsafe类/ volatile 关键字/ CAS\n</code></pre>\n<h3 id=\"源码参考\"><a href=\"#源码参考\" class=\"headerlink\" title=\"源码参考\"></a>源码参考</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Written by Doug Lea with assistance from members of JCP JSR-166</span></span><br><span class=\"line\"><span class=\"comment\"> * Expert Group and released to the public domain, as explained at</span></span><br><span class=\"line\"><span class=\"comment\"> * http://creativecommons.org/publicdomain/zero/1.0/</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> java.util.concurrent.atomic;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.IntUnaryOperator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.IntBinaryOperator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.Unsafe;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * An &#123;<span class=\"doctag\">@code</span> int&#125; value that may be updated atomically.  See the</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> java.util.concurrent.atomic&#125; package specification for</span></span><br><span class=\"line\"><span class=\"comment\"> * description of the properties of atomic variables. An</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> AtomicInteger&#125; is used in applications such as atomically</span></span><br><span class=\"line\"><span class=\"comment\"> * incremented counters, and cannot be used as a replacement for an</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> java.lang.Integer&#125;. However, this class does extend</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> Number&#125; to allow uniform access by tools and utilities that</span></span><br><span class=\"line\"><span class=\"comment\"> * deal with numerically-based classes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.5</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Doug Lea</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicInteger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6214790243416807050L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> valueOffset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            valueOffset = unsafe.objectFieldOffset</span><br><span class=\"line\">                (AtomicInteger.class.getDeclaredField(<span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a new AtomicInteger with the given initial value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> initialValue the initial value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AtomicInteger</span><span class=\"params\">(<span class=\"keyword\">int</span> initialValue)</span> </span>&#123;</span><br><span class=\"line\">        value = initialValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a new AtomicInteger with initial value &#123;<span class=\"doctag\">@code</span> 0&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AtomicInteger</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Gets the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the current value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sets to the given value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue the new value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        value = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Eventually sets to the given value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">lazySet</span><span class=\"params\">(<span class=\"keyword\">int</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        unsafe.putOrderedInt(<span class=\"keyword\">this</span>, valueOffset, newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically sets to the given value and returns the old value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newValue the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> newValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndSetInt(<span class=\"keyword\">this</span>, valueOffset, newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically sets the value to the given updated value</span></span><br><span class=\"line\"><span class=\"comment\">     * if the current value &#123;<span class=\"doctag\">@code</span> ==&#125; the expected value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> expect the expected value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> update the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if successful. False return indicates that</span></span><br><span class=\"line\"><span class=\"comment\">     * the actual value was not equal to the expected value.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, valueOffset, expect, update);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically sets the value to the given updated value</span></span><br><span class=\"line\"><span class=\"comment\">     * if the current value &#123;<span class=\"doctag\">@code</span> ==&#125; the expected value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;&lt;a href=&quot;package-summary.html#weakCompareAndSet&quot;&gt;May fail</span></span><br><span class=\"line\"><span class=\"comment\">     * spuriously and does not provide ordering guarantees&lt;/a&gt;, so is</span></span><br><span class=\"line\"><span class=\"comment\">     * only rarely an appropriate alternative to &#123;<span class=\"doctag\">@code</span> compareAndSet&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> expect the expected value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> update the new value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if successful</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">weakCompareAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, valueOffset, expect, update);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically increments by one the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndIncrement</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically decrements by one the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndDecrement</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, -<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically adds the given value to the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delta the value to add</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> delta)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, delta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically increments by one the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the updated value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">incrementAndGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically decrements by one the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the updated value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">decrementAndGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, -<span class=\"number\">1</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically adds the given value to the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delta the value to add</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the updated value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">addAndGet</span><span class=\"params\">(<span class=\"keyword\">int</span> delta)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, delta) + delta;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically updates the current value with the results of</span></span><br><span class=\"line\"><span class=\"comment\">     * applying the given function, returning the previous value. The</span></span><br><span class=\"line\"><span class=\"comment\">     * function should be side-effect-free, since it may be re-applied</span></span><br><span class=\"line\"><span class=\"comment\">     * when attempted updates fail due to contention among threads.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> updateFunction a side-effect-free function</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndUpdate</span><span class=\"params\">(IntUnaryOperator updateFunction)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> prev, next;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            prev = get();</span><br><span class=\"line\">            next = updateFunction.applyAsInt(prev);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!compareAndSet(prev, next));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically updates the current value with the results of</span></span><br><span class=\"line\"><span class=\"comment\">     * applying the given function, returning the updated value. The</span></span><br><span class=\"line\"><span class=\"comment\">     * function should be side-effect-free, since it may be re-applied</span></span><br><span class=\"line\"><span class=\"comment\">     * when attempted updates fail due to contention among threads.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> updateFunction a side-effect-free function</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the updated value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">updateAndGet</span><span class=\"params\">(IntUnaryOperator updateFunction)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> prev, next;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            prev = get();</span><br><span class=\"line\">            next = updateFunction.applyAsInt(prev);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!compareAndSet(prev, next));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically updates the current value with the results of</span></span><br><span class=\"line\"><span class=\"comment\">     * applying the given function to the current and given values,</span></span><br><span class=\"line\"><span class=\"comment\">     * returning the previous value. The function should be</span></span><br><span class=\"line\"><span class=\"comment\">     * side-effect-free, since it may be re-applied when attempted</span></span><br><span class=\"line\"><span class=\"comment\">     * updates fail due to contention among threads.  The function</span></span><br><span class=\"line\"><span class=\"comment\">     * is applied with the current value as its first argument,</span></span><br><span class=\"line\"><span class=\"comment\">     * and the given update as the second argument.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> x the update value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> accumulatorFunction a side-effect-free function of two arguments</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndAccumulate</span><span class=\"params\">(<span class=\"keyword\">int</span> x,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                      IntBinaryOperator accumulatorFunction)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> prev, next;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            prev = get();</span><br><span class=\"line\">            next = accumulatorFunction.applyAsInt(prev, x);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!compareAndSet(prev, next));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Atomically updates the current value with the results of</span></span><br><span class=\"line\"><span class=\"comment\">     * applying the given function to the current and given values,</span></span><br><span class=\"line\"><span class=\"comment\">     * returning the updated value. The function should be</span></span><br><span class=\"line\"><span class=\"comment\">     * side-effect-free, since it may be re-applied when attempted</span></span><br><span class=\"line\"><span class=\"comment\">     * updates fail due to contention among threads.  The function</span></span><br><span class=\"line\"><span class=\"comment\">     * is applied with the current value as its first argument,</span></span><br><span class=\"line\"><span class=\"comment\">     * and the given update as the second argument.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> x the update value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> accumulatorFunction a side-effect-free function of two arguments</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the updated value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">accumulateAndGet</span><span class=\"params\">(<span class=\"keyword\">int</span> x,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                      IntBinaryOperator accumulatorFunction)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> prev, next;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            prev = get();</span><br><span class=\"line\">            next = accumulatorFunction.applyAsInt(prev, x);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!compareAndSet(prev, next));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the String representation of the current value.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the String representation of the current value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.toString(get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the value of this &#123;<span class=\"doctag\">@code</span> AtomicInteger&#125; as an &#123;<span class=\"doctag\">@code</span> int&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">intValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the value of this &#123;<span class=\"doctag\">@code</span> AtomicInteger&#125; as a &#123;<span class=\"doctag\">@code</span> long&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * after a widening primitive conversion.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@jls</span> 5.1.2 Widening Primitive Conversions</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">longValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">long</span>)get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the value of this &#123;<span class=\"doctag\">@code</span> AtomicInteger&#125; as a &#123;<span class=\"doctag\">@code</span> float&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * after a widening primitive conversion.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@jls</span> 5.1.2 Widening Primitive Conversions</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">floatValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">float</span>)get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the value of this &#123;<span class=\"doctag\">@code</span> AtomicInteger&#125; as a &#123;<span class=\"doctag\">@code</span> double&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * after a widening primitive conversion.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@jls</span> 5.1.2 Widening Primitive Conversions</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">doubleValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"LogAdder","_content":"\n### 问题\n\n（1）java8 中为什么要新增 LongAdder？\n\n（2）LongAdder 的实现方式？\n\n（3）LongAdder 与 AtomicLong 的对比？\n\n### 简介\n\nLongAdder 是 java8 中新增的原子类，在多线程环境中，它比 AtomicLong 性能要高出不少，特别是写多的场景。\n\n它是怎么实现的呢？让我们一起来学习吧。\n\n### 原理\n\nLongAdder 的原理是，在最初无竞争时，只更新 base 的值，当有多线程竞争时通过分段的思想，让不同的线程更新不同的段，最后把这些段相加就得到了完整的 LongAdder 存储的值。\n\nLongAdder\n\n### 源码分析\n\nLongAdder 继承自 Striped64 抽象类，Striped64 中定义了 Cell 内部类和各重要属性。\n\n#### 主要内部类\n\n// Striped64 中的内部类，使用@sun.misc.Contended 注解，说明里面的值消除伪共享\n\n```\n@sun.misc.Contended static final class Cell {\n    // 存储元素的值，使用volatile修饰保证可见性\n    volatile long value;\n    Cell(long x) { value = x; }\n    // CAS更新value的值\n    final boolean cas(long cmp, long val) {\n        return UNSAFE.compareAndSwapLong(this, valueOffset, cmp, val);\n    }\n\n    // Unsafe实例\n    private static final sun.misc.Unsafe UNSAFE;\n    // value字段的偏移量\n    private static final long valueOffset;\n    static {\n        try {\n            UNSAFE = sun.misc.Unsafe.getUnsafe();\n            Class<?> ak = Cell.class;\n            valueOffset = UNSAFE.objectFieldOffset\n                (ak.getDeclaredField(\"value\"));\n        } catch (Exception e) {\n            throw new Error(e);\n        }\n    }\n}\n```\n\nCell 类使用[@sun.misc.Contended 注解](Java8的@sun.misc.Contended注解.md)，说明是要避免伪共享的。\n\n使用 Unsafe 的 CAS 更新 value 的值，其中 value 的值使用 volatile 修饰，保证可见性。\n\n关于 Unsafe 的介绍请查看【死磕 java 魔法类之 Unsafe 解析】。\n\n关于伪共享的介绍请查看【杂谈 什么是伪共享（false sharing）？】。\n[一篇对伪共享、缓存行填充和 CPU 缓存讲的很透彻的文章](https://blog.csdn.net/qq_27680317/article/details/78486220)\n\n主要属性\n\n```\n// 这三个属性都在Striped64中\n// cells数组，存储各个段的值\ntransient volatile Cell[] cells;\n// 最初无竞争时使用的，也算一个特殊的段\ntransient volatile long base;\n// 标记当前是否有线程在创建或扩容cells，或者在创建Cell\n// 通过CAS更新该值，相当于是一个锁\ntransient volatile int cellsBusy;\n```\n\n最初无竞争或有其它线程在创建 cells 数组时使用 base 更新值，有过竞争时使用 cells 更新值。\n最初无竞争是指一开始没有线程之间的竞争，但也有可能是多线程在操作，只是这些线程没有同时去更新 base 的值。\n有过竞争是指只要出现过竞争不管后面有没有竞争都使用 cells 更新值，规则是不同的线程 hash 到不同的 cell 上去更新，减少竞争。\n\n#### add(x)方法\n\nadd(x)方法是 LongAdder 的主要方法，使用它可以使 LongAdder 中存储的值增加 x，x 可为正可为负。\n\n```\npublic void add(long x) {\n    // as是Striped64中的cells属性\n    // b是Striped64中的base属性\n    // v是当前线程hash到的Cell中存储的值\n    // m是cells的长度减1，hash时作为掩码使用\n    // a是当前线程hash到的Cell\n    Cell[] as; long b, v; int m; Cell a;\n    // 条件1：cells不为空，说明出现过竞争，cells已经创建\n    // 条件2：cas操作base失败，说明其它线程先一步修改了base，正在出现竞争\n    if ((as = cells) != null || !casBase(b = base, b + x)) {\n        // true表示当前竞争还不激烈\n        // false表示竞争激烈，多个线程hash到同一个Cell，可能要扩容\n        boolean uncontended = true;\n        // 条件1：cells为空，说明正在出现竞争，上面是从条件2过来的\n        // 条件2：应该不会出现\n        // 条件3：当前线程所在的Cell为空，说明当前线程还没有更新过Cell，应初始化一个Cell\n        // 条件4：更新当前线程所在的Cell失败，说明现在竞争很激烈，多个线程hash到了同一个Cell，应扩容\n        if (as == null || (m = as.length - 1) < 0 ||\n            // getProbe()方法返回的是线程中的threadLocalRandomProbe字段\n            // 它是通过随机数生成的一个值，对于一个确定的线程这个值是固定的\n            // 除非刻意修改它\n            (a = as[getProbe() & m]) == null ||\n            !(uncontended = a.cas(v = a.value, v + x)))\n            // 调用Striped64中的方法处理\n            longAccumulate(x, null, uncontended);\n    }\n}\n```\n\n\\*（1）最初无竞争时只更新 base；\n\n\\*（2）直到更新 base 失败时，创建 cells 数组；\n\n\\*（3）当多个线程竞争同一个 Cell 比较激烈时，可能要扩容；\n\n#### longAccumulate()方法\n\n```\nfinal void longAccumulate(long x, LongBinaryOperator fn,\n                              boolean wasUncontended) {\n    // 存储线程的probe值\n    int h;\n    // 如果getProbe()方法返回0，说明随机数未初始化\n    if ((h = getProbe()) == 0) {\n        // 强制初始化\n        ThreadLocalRandom.current(); // force initialization\n        // 重新获取probe值\n        h = getProbe();\n        // 都未初始化，肯定还不存在竞争激烈\n        wasUncontended = true;\n    }\n    // 是否发生碰撞\n    boolean collide = false;                // True if last slot nonempty\n    for (;;) {\n        Cell[] as; Cell a; int n; long v;\n        // cells已经初始化过\n        if ((as = cells) != null && (n = as.length) > 0) {\n            // 当前线程所在的Cell未初始化\n            if ((a = as[(n - 1) & h]) == null) {\n                // 当前无其它线程在创建或扩容cells，也没有线程在创建Cell\n                if (cellsBusy == 0) {       // Try to attach new Cell\n                    // 新建一个Cell，值为当前需要增加的值\n                    Cell r = new Cell(x);   // Optimistically create\n                    // 再次检测cellsBusy，并尝试更新它为1\n                    // 相当于当前线程加锁\n                    if (cellsBusy == 0 && casCellsBusy()) {\n                        // 是否创建成功\n                        boolean created = false;\n                        try {               // Recheck under lock\n                            Cell[] rs; int m, j;\n                            // 重新获取cells，并找到当前线程hash到cells数组中的位置\n                            // 这里一定要重新获取cells，因为as并不在锁定范围内\n                            // 有可能已经扩容了，这里要重新获取\n                            if ((rs = cells) != null &&\n                                (m = rs.length) > 0 &&\n                                rs[j = (m - 1) & h] == null) {\n                                // 把上面新建的Cell放在cells的j位置处\n                                rs[j] = r;\n                                // 创建成功\n                                created = true;\n                            }\n                        } finally {\n                            // 相当于释放锁\n                            cellsBusy = 0;\n                        }\n                        // 创建成功了就返回\n                        // 值已经放在新建的Cell里面了\n                        if (created)\n                            break;\n                        continue;           // Slot is now non-empty\n                    }\n                }\n                // 标记当前未出现冲突\n                collide = false;\n            }\n            // 当前线程所在的Cell不为空，且更新失败了\n            // 这里简单地设为true，相当于简单地自旋一次\n            // 通过下面的语句修改线程的probe再重新尝试\n            else if (!wasUncontended)       // CAS already known to fail\n                wasUncontended = true;      // Continue after rehash\n            // 再次尝试CAS更新当前线程所在Cell的值，如果成功了就返回\n            else if (a.cas(v = a.value, ((fn == null) ? v + x :\n                                         fn.applyAsLong(v, x))))\n                break;\n            // 如果cells数组的长度达到了CPU核心数，或者cells扩容了\n            // 设置collide为false并通过下面的语句修改线程的probe再重新尝试\n            else if (n >= NCPU || cells != as)\n                collide = false;            // At max size or stale\n            // 上上个elseif都更新失败了，且上个条件不成立，说明出现冲突了\n            else if (!collide)\n                collide = true;\n            // 明确出现冲突了，尝试占有锁，并扩容\n            else if (cellsBusy == 0 && casCellsBusy()) {\n                try {\n                    // 检查是否有其它线程已经扩容过了\n                    if (cells == as) {      // Expand table unless stale\n                        // 新数组为原数组的两倍\n                        Cell[] rs = new Cell[n << 1];\n                        // 把旧数组元素拷贝到新数组中\n                        for (int i = 0; i < n; ++i)\n                            rs[i] = as[i];\n                        // 重新赋值cells为新数组\n                        cells = rs;\n                    }\n                } finally {\n                    // 释放锁\n                    cellsBusy = 0;\n                }\n                // 已解决冲突\n                collide = false;\n                // 使用扩容后的新数组重新尝试\n                continue;                   // Retry with expanded table\n            }\n            // 更新失败或者达到了CPU核心数，重新生成probe，并重试\n            h = advanceProbe(h);\n        }\n        // 未初始化过cells数组，尝试占有锁并初始化cells数组\n        else if (cellsBusy == 0 && cells == as && casCellsBusy()) {\n            // 是否初始化成功\n            boolean init = false;\n            try {                           // Initialize table\n                // 检测是否有其它线程初始化过\n                if (cells == as) {\n                    // 新建一个大小为2的Cell数组\n                    Cell[] rs = new Cell[2];\n                    // 找到当前线程hash到数组中的位置并创建其对应的Cell\n                    rs[h & 1] = new Cell(x);\n                    // 赋值给cells数组\n                    cells = rs;\n                    // 初始化成功\n                    init = true;\n                }\n            } finally {\n                // 释放锁\n                cellsBusy = 0;\n            }\n            // 初始化成功直接返回\n            // 因为增加的值已经同时创建到Cell中了\n            if (init)\n                break;\n        }\n        // 如果有其它线程在初始化cells数组中，就尝试更新base\n        // 如果成功了就返回\n        else if (casBase(v = base, ((fn == null) ? v + x :\n                                    fn.applyAsLong(v, x))))\n            break;                          // Fall back on using base\n    }\n}\n```\n\n\\*（1）如果 cells 数组未初始化，当前线程会尝试占有 cellsBusy 锁并创建 cells 数组；\n\n\\*（2）如果当前线程尝试创建 cells 数组时，发现有其它线程已经在创建了，就尝试更新 base，如果成功就返回；\n\n\\*（3）通过线程的 probe 值找到当前线程应该更新 cells 数组中的哪个 Cell；\n\n\\*（4）如果当前线程所在的 Cell 未初始化，就占有占有 cellsBusy 锁并在相应的位置创建一个 Cell；\n\n\\*（5）尝试 CAS 更新当前线程所在的 Cell，如果成功就返回，如果失败说明出现冲突；\n\n\\*（5）当前线程更新 Cell 失败后并不是立即扩容，而是尝试更新 probe 值后再重试一次；\n\n\\*（6）如果在重试的时候还是更新失败，就扩容；\n\n\\*（7）扩容时当前线程占有 cellsBusy 锁，并把数组容量扩大到两倍，再迁移原 cells 数组中元素到新数组中；\n\n\\*（8）cellsBusy 在创建 cells 数组、创建 Cell、扩容 cells 数组三个地方用到；\n\n#### sum()方法\n\nsum()方法是获取 LongAdder 中真正存储的值的大小，通过把 base 和所有段相加得到。\n\n```\npublic long sum() {\n    Cell[] as = cells; Cell a;\n    // sum初始等于base\n    long sum = base;\n    // 如果cells不为空\n    if (as != null) {\n        // 遍历所有的Cell\n        for (int i = 0; i < as.length; ++i) {\n            // 如果所在的Cell不为空，就把它的value累加到sum中\n            if ((a = as[i]) != null)\n                sum += a.value;\n        }\n    }\n    // 返回sum\n    return sum;\n}\n```\n\n可以看到 sum()方法是把 base 和所有段的值相加得到，那么，这里有一个问题，如果前面已经累加到 sum 上的 Cell 的 value 有修改，不是就没法计算到了么？\n\n答案确实如此，所以 LongAdder 可以说不是强一致性的，它是最终一致性的。\n\n#### LongAdder VS AtomicLong\n\n直接上代码：\n\n```\npublic class LongAdderVSAtomicLongTest {\n    public static void main(String[] args){\n        testAtomicLongVSLongAdder(1, 10000000);\n        testAtomicLongVSLongAdder(10, 10000000);\n        testAtomicLongVSLongAdder(20, 10000000);\n        testAtomicLongVSLongAdder(40, 10000000);\n        testAtomicLongVSLongAdder(80, 10000000);\n    }\n\n    static void testAtomicLongVSLongAdder(final int threadCount, final int times){\n        try {\n            System.out.println(\"threadCount：\" + threadCount + \", times：\" + times);\n            long start = System.currentTimeMillis();\n            testLongAdder(threadCount, times);\n            System.out.println(\"LongAdder elapse：\" + (System.currentTimeMillis() - start) + \"ms\");\n\n            long start2 = System.currentTimeMillis();\n            testAtomicLong(threadCount, times);\n            System.out.println(\"AtomicLong elapse：\" + (System.currentTimeMillis() - start2) + \"ms\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    static void testAtomicLong(final int threadCount, final int times) throws InterruptedException {\n        AtomicLong atomicLong = new AtomicLong();\n        List<Thread> list = new ArrayList<>();\n        for (int i=0;i<threadCount;i++){\n            list.add(new Thread(() -> {\n                for (int j = 0; j<times; j++){\n                    atomicLong.incrementAndGet();\n                }\n            }));\n        }\n\n        for (Thread thread : list){\n            thread.start();\n        }\n\n        for (Thread thread : list){\n            thread.join();\n        }\n    }\n\n    static void testLongAdder(final int threadCount, final int times) throws InterruptedException {\n        LongAdder longAdder = new LongAdder();\n        List<Thread> list = new ArrayList<>();\n        for (int i=0;i<threadCount;i++){\n            list.add(new Thread(() -> {\n                for (int j = 0; j<times; j++){\n                    longAdder.add(1);\n                }\n            }));\n        }\n\n        for (Thread thread : list){\n            thread.start();\n        }\n\n        for (Thread thread : list){\n            thread.join();\n        }\n    }\n}\n```\n\n运行结果如下：\n\n```\nthreadCount：1, times：10000000\nLongAdder elapse：158ms\nAtomicLong elapse：64ms\nthreadCount：10, times：10000000\nLongAdder elapse：206ms\nAtomicLong elapse：2449ms\nthreadCount：20, times：10000000\nLongAdder elapse：429ms\nAtomicLong elapse：5142ms\nthreadCount：40, times：10000000\nLongAdder elapse：840ms\nAtomicLong elapse：10506ms\nthreadCount：80, times：10000000\nLongAdder elapse：1369ms\nAtomicLong elapse：20482ms\n```\n\n可以看到当只有一个线程的时候，AtomicLong 反而性能更高，随着线程越来越多，AtomicLong 的性能急剧下降，而 LongAdder 的性能影响很小。\n\n### 总结\n\n\\*（1）LongAdder 通过 base 和 cells 数组来存储值；\n\n\\*（2）不同的线程会 hash 到不同的 cell 上去更新，减少了竞争；\n\n\\*（3）LongAdder 的性能非常高，最终会达到一种无竞争的状态；\n\n在 longAccumulate()方法中有个条件是 n >= NCPU 就不会走到扩容逻辑了，而 n 是 2 的倍数，那是不是代表 cells 数组最大只能达到大于等于 NCPU 的最小 2 次方？\n答案是明确的。因为同一个 CPU 核心同时只会运行一个线程，而更新失败了说明有两个不同的核心更新了同一个 Cell，\n这时会重新设置更新失败的那个线程的 probe 值，这样下一次它所在的 Cell 很大概率会发生改变，如果运行的时间足够长，\n最终会出现同一个核心的所有线程都会 hash 到同一个 Cell（大概率，但不一定全在一个 Cell 上）上去更新，\n所以，这里 cells 数组中长度并不需要太长，达到 CPU 核心数足够了。\n比如，笔者的电脑是 8 核的，所以这里 cells 的数组最大只会到 8，达到 8 就不会扩容了。\n","source":"_posts/language/java/juc/atomic/LogAdder.md","raw":"---\ntitle: LogAdder\ncategories:\n- java\ntag:\n- atomic\n---\n\n### 问题\n\n（1）java8 中为什么要新增 LongAdder？\n\n（2）LongAdder 的实现方式？\n\n（3）LongAdder 与 AtomicLong 的对比？\n\n### 简介\n\nLongAdder 是 java8 中新增的原子类，在多线程环境中，它比 AtomicLong 性能要高出不少，特别是写多的场景。\n\n它是怎么实现的呢？让我们一起来学习吧。\n\n### 原理\n\nLongAdder 的原理是，在最初无竞争时，只更新 base 的值，当有多线程竞争时通过分段的思想，让不同的线程更新不同的段，最后把这些段相加就得到了完整的 LongAdder 存储的值。\n\nLongAdder\n\n### 源码分析\n\nLongAdder 继承自 Striped64 抽象类，Striped64 中定义了 Cell 内部类和各重要属性。\n\n#### 主要内部类\n\n// Striped64 中的内部类，使用@sun.misc.Contended 注解，说明里面的值消除伪共享\n\n```\n@sun.misc.Contended static final class Cell {\n    // 存储元素的值，使用volatile修饰保证可见性\n    volatile long value;\n    Cell(long x) { value = x; }\n    // CAS更新value的值\n    final boolean cas(long cmp, long val) {\n        return UNSAFE.compareAndSwapLong(this, valueOffset, cmp, val);\n    }\n\n    // Unsafe实例\n    private static final sun.misc.Unsafe UNSAFE;\n    // value字段的偏移量\n    private static final long valueOffset;\n    static {\n        try {\n            UNSAFE = sun.misc.Unsafe.getUnsafe();\n            Class<?> ak = Cell.class;\n            valueOffset = UNSAFE.objectFieldOffset\n                (ak.getDeclaredField(\"value\"));\n        } catch (Exception e) {\n            throw new Error(e);\n        }\n    }\n}\n```\n\nCell 类使用[@sun.misc.Contended 注解](Java8的@sun.misc.Contended注解.md)，说明是要避免伪共享的。\n\n使用 Unsafe 的 CAS 更新 value 的值，其中 value 的值使用 volatile 修饰，保证可见性。\n\n关于 Unsafe 的介绍请查看【死磕 java 魔法类之 Unsafe 解析】。\n\n关于伪共享的介绍请查看【杂谈 什么是伪共享（false sharing）？】。\n[一篇对伪共享、缓存行填充和 CPU 缓存讲的很透彻的文章](https://blog.csdn.net/qq_27680317/article/details/78486220)\n\n主要属性\n\n```\n// 这三个属性都在Striped64中\n// cells数组，存储各个段的值\ntransient volatile Cell[] cells;\n// 最初无竞争时使用的，也算一个特殊的段\ntransient volatile long base;\n// 标记当前是否有线程在创建或扩容cells，或者在创建Cell\n// 通过CAS更新该值，相当于是一个锁\ntransient volatile int cellsBusy;\n```\n\n最初无竞争或有其它线程在创建 cells 数组时使用 base 更新值，有过竞争时使用 cells 更新值。\n最初无竞争是指一开始没有线程之间的竞争，但也有可能是多线程在操作，只是这些线程没有同时去更新 base 的值。\n有过竞争是指只要出现过竞争不管后面有没有竞争都使用 cells 更新值，规则是不同的线程 hash 到不同的 cell 上去更新，减少竞争。\n\n#### add(x)方法\n\nadd(x)方法是 LongAdder 的主要方法，使用它可以使 LongAdder 中存储的值增加 x，x 可为正可为负。\n\n```\npublic void add(long x) {\n    // as是Striped64中的cells属性\n    // b是Striped64中的base属性\n    // v是当前线程hash到的Cell中存储的值\n    // m是cells的长度减1，hash时作为掩码使用\n    // a是当前线程hash到的Cell\n    Cell[] as; long b, v; int m; Cell a;\n    // 条件1：cells不为空，说明出现过竞争，cells已经创建\n    // 条件2：cas操作base失败，说明其它线程先一步修改了base，正在出现竞争\n    if ((as = cells) != null || !casBase(b = base, b + x)) {\n        // true表示当前竞争还不激烈\n        // false表示竞争激烈，多个线程hash到同一个Cell，可能要扩容\n        boolean uncontended = true;\n        // 条件1：cells为空，说明正在出现竞争，上面是从条件2过来的\n        // 条件2：应该不会出现\n        // 条件3：当前线程所在的Cell为空，说明当前线程还没有更新过Cell，应初始化一个Cell\n        // 条件4：更新当前线程所在的Cell失败，说明现在竞争很激烈，多个线程hash到了同一个Cell，应扩容\n        if (as == null || (m = as.length - 1) < 0 ||\n            // getProbe()方法返回的是线程中的threadLocalRandomProbe字段\n            // 它是通过随机数生成的一个值，对于一个确定的线程这个值是固定的\n            // 除非刻意修改它\n            (a = as[getProbe() & m]) == null ||\n            !(uncontended = a.cas(v = a.value, v + x)))\n            // 调用Striped64中的方法处理\n            longAccumulate(x, null, uncontended);\n    }\n}\n```\n\n\\*（1）最初无竞争时只更新 base；\n\n\\*（2）直到更新 base 失败时，创建 cells 数组；\n\n\\*（3）当多个线程竞争同一个 Cell 比较激烈时，可能要扩容；\n\n#### longAccumulate()方法\n\n```\nfinal void longAccumulate(long x, LongBinaryOperator fn,\n                              boolean wasUncontended) {\n    // 存储线程的probe值\n    int h;\n    // 如果getProbe()方法返回0，说明随机数未初始化\n    if ((h = getProbe()) == 0) {\n        // 强制初始化\n        ThreadLocalRandom.current(); // force initialization\n        // 重新获取probe值\n        h = getProbe();\n        // 都未初始化，肯定还不存在竞争激烈\n        wasUncontended = true;\n    }\n    // 是否发生碰撞\n    boolean collide = false;                // True if last slot nonempty\n    for (;;) {\n        Cell[] as; Cell a; int n; long v;\n        // cells已经初始化过\n        if ((as = cells) != null && (n = as.length) > 0) {\n            // 当前线程所在的Cell未初始化\n            if ((a = as[(n - 1) & h]) == null) {\n                // 当前无其它线程在创建或扩容cells，也没有线程在创建Cell\n                if (cellsBusy == 0) {       // Try to attach new Cell\n                    // 新建一个Cell，值为当前需要增加的值\n                    Cell r = new Cell(x);   // Optimistically create\n                    // 再次检测cellsBusy，并尝试更新它为1\n                    // 相当于当前线程加锁\n                    if (cellsBusy == 0 && casCellsBusy()) {\n                        // 是否创建成功\n                        boolean created = false;\n                        try {               // Recheck under lock\n                            Cell[] rs; int m, j;\n                            // 重新获取cells，并找到当前线程hash到cells数组中的位置\n                            // 这里一定要重新获取cells，因为as并不在锁定范围内\n                            // 有可能已经扩容了，这里要重新获取\n                            if ((rs = cells) != null &&\n                                (m = rs.length) > 0 &&\n                                rs[j = (m - 1) & h] == null) {\n                                // 把上面新建的Cell放在cells的j位置处\n                                rs[j] = r;\n                                // 创建成功\n                                created = true;\n                            }\n                        } finally {\n                            // 相当于释放锁\n                            cellsBusy = 0;\n                        }\n                        // 创建成功了就返回\n                        // 值已经放在新建的Cell里面了\n                        if (created)\n                            break;\n                        continue;           // Slot is now non-empty\n                    }\n                }\n                // 标记当前未出现冲突\n                collide = false;\n            }\n            // 当前线程所在的Cell不为空，且更新失败了\n            // 这里简单地设为true，相当于简单地自旋一次\n            // 通过下面的语句修改线程的probe再重新尝试\n            else if (!wasUncontended)       // CAS already known to fail\n                wasUncontended = true;      // Continue after rehash\n            // 再次尝试CAS更新当前线程所在Cell的值，如果成功了就返回\n            else if (a.cas(v = a.value, ((fn == null) ? v + x :\n                                         fn.applyAsLong(v, x))))\n                break;\n            // 如果cells数组的长度达到了CPU核心数，或者cells扩容了\n            // 设置collide为false并通过下面的语句修改线程的probe再重新尝试\n            else if (n >= NCPU || cells != as)\n                collide = false;            // At max size or stale\n            // 上上个elseif都更新失败了，且上个条件不成立，说明出现冲突了\n            else if (!collide)\n                collide = true;\n            // 明确出现冲突了，尝试占有锁，并扩容\n            else if (cellsBusy == 0 && casCellsBusy()) {\n                try {\n                    // 检查是否有其它线程已经扩容过了\n                    if (cells == as) {      // Expand table unless stale\n                        // 新数组为原数组的两倍\n                        Cell[] rs = new Cell[n << 1];\n                        // 把旧数组元素拷贝到新数组中\n                        for (int i = 0; i < n; ++i)\n                            rs[i] = as[i];\n                        // 重新赋值cells为新数组\n                        cells = rs;\n                    }\n                } finally {\n                    // 释放锁\n                    cellsBusy = 0;\n                }\n                // 已解决冲突\n                collide = false;\n                // 使用扩容后的新数组重新尝试\n                continue;                   // Retry with expanded table\n            }\n            // 更新失败或者达到了CPU核心数，重新生成probe，并重试\n            h = advanceProbe(h);\n        }\n        // 未初始化过cells数组，尝试占有锁并初始化cells数组\n        else if (cellsBusy == 0 && cells == as && casCellsBusy()) {\n            // 是否初始化成功\n            boolean init = false;\n            try {                           // Initialize table\n                // 检测是否有其它线程初始化过\n                if (cells == as) {\n                    // 新建一个大小为2的Cell数组\n                    Cell[] rs = new Cell[2];\n                    // 找到当前线程hash到数组中的位置并创建其对应的Cell\n                    rs[h & 1] = new Cell(x);\n                    // 赋值给cells数组\n                    cells = rs;\n                    // 初始化成功\n                    init = true;\n                }\n            } finally {\n                // 释放锁\n                cellsBusy = 0;\n            }\n            // 初始化成功直接返回\n            // 因为增加的值已经同时创建到Cell中了\n            if (init)\n                break;\n        }\n        // 如果有其它线程在初始化cells数组中，就尝试更新base\n        // 如果成功了就返回\n        else if (casBase(v = base, ((fn == null) ? v + x :\n                                    fn.applyAsLong(v, x))))\n            break;                          // Fall back on using base\n    }\n}\n```\n\n\\*（1）如果 cells 数组未初始化，当前线程会尝试占有 cellsBusy 锁并创建 cells 数组；\n\n\\*（2）如果当前线程尝试创建 cells 数组时，发现有其它线程已经在创建了，就尝试更新 base，如果成功就返回；\n\n\\*（3）通过线程的 probe 值找到当前线程应该更新 cells 数组中的哪个 Cell；\n\n\\*（4）如果当前线程所在的 Cell 未初始化，就占有占有 cellsBusy 锁并在相应的位置创建一个 Cell；\n\n\\*（5）尝试 CAS 更新当前线程所在的 Cell，如果成功就返回，如果失败说明出现冲突；\n\n\\*（5）当前线程更新 Cell 失败后并不是立即扩容，而是尝试更新 probe 值后再重试一次；\n\n\\*（6）如果在重试的时候还是更新失败，就扩容；\n\n\\*（7）扩容时当前线程占有 cellsBusy 锁，并把数组容量扩大到两倍，再迁移原 cells 数组中元素到新数组中；\n\n\\*（8）cellsBusy 在创建 cells 数组、创建 Cell、扩容 cells 数组三个地方用到；\n\n#### sum()方法\n\nsum()方法是获取 LongAdder 中真正存储的值的大小，通过把 base 和所有段相加得到。\n\n```\npublic long sum() {\n    Cell[] as = cells; Cell a;\n    // sum初始等于base\n    long sum = base;\n    // 如果cells不为空\n    if (as != null) {\n        // 遍历所有的Cell\n        for (int i = 0; i < as.length; ++i) {\n            // 如果所在的Cell不为空，就把它的value累加到sum中\n            if ((a = as[i]) != null)\n                sum += a.value;\n        }\n    }\n    // 返回sum\n    return sum;\n}\n```\n\n可以看到 sum()方法是把 base 和所有段的值相加得到，那么，这里有一个问题，如果前面已经累加到 sum 上的 Cell 的 value 有修改，不是就没法计算到了么？\n\n答案确实如此，所以 LongAdder 可以说不是强一致性的，它是最终一致性的。\n\n#### LongAdder VS AtomicLong\n\n直接上代码：\n\n```\npublic class LongAdderVSAtomicLongTest {\n    public static void main(String[] args){\n        testAtomicLongVSLongAdder(1, 10000000);\n        testAtomicLongVSLongAdder(10, 10000000);\n        testAtomicLongVSLongAdder(20, 10000000);\n        testAtomicLongVSLongAdder(40, 10000000);\n        testAtomicLongVSLongAdder(80, 10000000);\n    }\n\n    static void testAtomicLongVSLongAdder(final int threadCount, final int times){\n        try {\n            System.out.println(\"threadCount：\" + threadCount + \", times：\" + times);\n            long start = System.currentTimeMillis();\n            testLongAdder(threadCount, times);\n            System.out.println(\"LongAdder elapse：\" + (System.currentTimeMillis() - start) + \"ms\");\n\n            long start2 = System.currentTimeMillis();\n            testAtomicLong(threadCount, times);\n            System.out.println(\"AtomicLong elapse：\" + (System.currentTimeMillis() - start2) + \"ms\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    static void testAtomicLong(final int threadCount, final int times) throws InterruptedException {\n        AtomicLong atomicLong = new AtomicLong();\n        List<Thread> list = new ArrayList<>();\n        for (int i=0;i<threadCount;i++){\n            list.add(new Thread(() -> {\n                for (int j = 0; j<times; j++){\n                    atomicLong.incrementAndGet();\n                }\n            }));\n        }\n\n        for (Thread thread : list){\n            thread.start();\n        }\n\n        for (Thread thread : list){\n            thread.join();\n        }\n    }\n\n    static void testLongAdder(final int threadCount, final int times) throws InterruptedException {\n        LongAdder longAdder = new LongAdder();\n        List<Thread> list = new ArrayList<>();\n        for (int i=0;i<threadCount;i++){\n            list.add(new Thread(() -> {\n                for (int j = 0; j<times; j++){\n                    longAdder.add(1);\n                }\n            }));\n        }\n\n        for (Thread thread : list){\n            thread.start();\n        }\n\n        for (Thread thread : list){\n            thread.join();\n        }\n    }\n}\n```\n\n运行结果如下：\n\n```\nthreadCount：1, times：10000000\nLongAdder elapse：158ms\nAtomicLong elapse：64ms\nthreadCount：10, times：10000000\nLongAdder elapse：206ms\nAtomicLong elapse：2449ms\nthreadCount：20, times：10000000\nLongAdder elapse：429ms\nAtomicLong elapse：5142ms\nthreadCount：40, times：10000000\nLongAdder elapse：840ms\nAtomicLong elapse：10506ms\nthreadCount：80, times：10000000\nLongAdder elapse：1369ms\nAtomicLong elapse：20482ms\n```\n\n可以看到当只有一个线程的时候，AtomicLong 反而性能更高，随着线程越来越多，AtomicLong 的性能急剧下降，而 LongAdder 的性能影响很小。\n\n### 总结\n\n\\*（1）LongAdder 通过 base 和 cells 数组来存储值；\n\n\\*（2）不同的线程会 hash 到不同的 cell 上去更新，减少了竞争；\n\n\\*（3）LongAdder 的性能非常高，最终会达到一种无竞争的状态；\n\n在 longAccumulate()方法中有个条件是 n >= NCPU 就不会走到扩容逻辑了，而 n 是 2 的倍数，那是不是代表 cells 数组最大只能达到大于等于 NCPU 的最小 2 次方？\n答案是明确的。因为同一个 CPU 核心同时只会运行一个线程，而更新失败了说明有两个不同的核心更新了同一个 Cell，\n这时会重新设置更新失败的那个线程的 probe 值，这样下一次它所在的 Cell 很大概率会发生改变，如果运行的时间足够长，\n最终会出现同一个核心的所有线程都会 hash 到同一个 Cell（大概率，但不一定全在一个 Cell 上）上去更新，\n所以，这里 cells 数组中长度并不需要太长，达到 CPU 核心数足够了。\n比如，笔者的电脑是 8 核的，所以这里 cells 的数组最大只会到 8，达到 8 就不会扩容了。\n","slug":"language/java/juc/atomic/LogAdder","published":1,"date":"2021-09-14T15:01:38.567Z","updated":"2021-09-14T15:01:38.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyjc004ju6uk58k9er5o","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>（1）java8 中为什么要新增 LongAdder？</p>\n<p>（2）LongAdder 的实现方式？</p>\n<p>（3）LongAdder 与 AtomicLong 的对比？</p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>LongAdder 是 java8 中新增的原子类，在多线程环境中，它比 AtomicLong 性能要高出不少，特别是写多的场景。</p>\n<p>它是怎么实现的呢？让我们一起来学习吧。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>LongAdder 的原理是，在最初无竞争时，只更新 base 的值，当有多线程竞争时通过分段的思想，让不同的线程更新不同的段，最后把这些段相加就得到了完整的 LongAdder 存储的值。</p>\n<p>LongAdder</p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><p>LongAdder 继承自 Striped64 抽象类，Striped64 中定义了 Cell 内部类和各重要属性。</p>\n<h4 id=\"主要内部类\"><a href=\"#主要内部类\" class=\"headerlink\" title=\"主要内部类\"></a>主要内部类</h4><p>// Striped64 中的内部类，使用@sun.misc.Contended 注解，说明里面的值消除伪共享</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@sun.misc.Contended static final class Cell &#123;</span><br><span class=\"line\">    // 存储元素的值，使用volatile修饰保证可见性</span><br><span class=\"line\">    volatile long value;</span><br><span class=\"line\">    Cell(long x) &#123; value = x; &#125;</span><br><span class=\"line\">    // CAS更新value的值</span><br><span class=\"line\">    final boolean cas(long cmp, long val) &#123;</span><br><span class=\"line\">        return UNSAFE.compareAndSwapLong(this, valueOffset, cmp, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Unsafe实例</span><br><span class=\"line\">    private static final sun.misc.Unsafe UNSAFE;</span><br><span class=\"line\">    // value字段的偏移量</span><br><span class=\"line\">    private static final long valueOffset;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class=\"line\">            Class&lt;?&gt; ak = Cell.class;</span><br><span class=\"line\">            valueOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (ak.getDeclaredField(&quot;value&quot;));</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            throw new Error(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Cell 类使用<a href=\"Java8%E7%9A%84@sun.misc.Contended%E6%B3%A8%E8%A7%A3.md\">@sun.misc.Contended 注解</a>，说明是要避免伪共享的。</p>\n<p>使用 Unsafe 的 CAS 更新 value 的值，其中 value 的值使用 volatile 修饰，保证可见性。</p>\n<p>关于 Unsafe 的介绍请查看【死磕 java 魔法类之 Unsafe 解析】。</p>\n<p>关于伪共享的介绍请查看【杂谈 什么是伪共享（false sharing）？】。<br><a href=\"https://blog.csdn.net/qq_27680317/article/details/78486220\">一篇对伪共享、缓存行填充和 CPU 缓存讲的很透彻的文章</a></p>\n<p>主要属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这三个属性都在Striped64中</span><br><span class=\"line\">// cells数组，存储各个段的值</span><br><span class=\"line\">transient volatile Cell[] cells;</span><br><span class=\"line\">// 最初无竞争时使用的，也算一个特殊的段</span><br><span class=\"line\">transient volatile long base;</span><br><span class=\"line\">// 标记当前是否有线程在创建或扩容cells，或者在创建Cell</span><br><span class=\"line\">// 通过CAS更新该值，相当于是一个锁</span><br><span class=\"line\">transient volatile int cellsBusy;</span><br></pre></td></tr></table></figure>\n\n<p>最初无竞争或有其它线程在创建 cells 数组时使用 base 更新值，有过竞争时使用 cells 更新值。<br>最初无竞争是指一开始没有线程之间的竞争，但也有可能是多线程在操作，只是这些线程没有同时去更新 base 的值。<br>有过竞争是指只要出现过竞争不管后面有没有竞争都使用 cells 更新值，规则是不同的线程 hash 到不同的 cell 上去更新，减少竞争。</p>\n<h4 id=\"add-x-方法\"><a href=\"#add-x-方法\" class=\"headerlink\" title=\"add(x)方法\"></a>add(x)方法</h4><p>add(x)方法是 LongAdder 的主要方法，使用它可以使 LongAdder 中存储的值增加 x，x 可为正可为负。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void add(long x) &#123;</span><br><span class=\"line\">    // as是Striped64中的cells属性</span><br><span class=\"line\">    // b是Striped64中的base属性</span><br><span class=\"line\">    // v是当前线程hash到的Cell中存储的值</span><br><span class=\"line\">    // m是cells的长度减1，hash时作为掩码使用</span><br><span class=\"line\">    // a是当前线程hash到的Cell</span><br><span class=\"line\">    Cell[] as; long b, v; int m; Cell a;</span><br><span class=\"line\">    // 条件1：cells不为空，说明出现过竞争，cells已经创建</span><br><span class=\"line\">    // 条件2：cas操作base失败，说明其它线程先一步修改了base，正在出现竞争</span><br><span class=\"line\">    if ((as = cells) != null || !casBase(b = base, b + x)) &#123;</span><br><span class=\"line\">        // true表示当前竞争还不激烈</span><br><span class=\"line\">        // false表示竞争激烈，多个线程hash到同一个Cell，可能要扩容</span><br><span class=\"line\">        boolean uncontended = true;</span><br><span class=\"line\">        // 条件1：cells为空，说明正在出现竞争，上面是从条件2过来的</span><br><span class=\"line\">        // 条件2：应该不会出现</span><br><span class=\"line\">        // 条件3：当前线程所在的Cell为空，说明当前线程还没有更新过Cell，应初始化一个Cell</span><br><span class=\"line\">        // 条件4：更新当前线程所在的Cell失败，说明现在竞争很激烈，多个线程hash到了同一个Cell，应扩容</span><br><span class=\"line\">        if (as == null || (m = as.length - 1) &lt; 0 ||</span><br><span class=\"line\">            // getProbe()方法返回的是线程中的threadLocalRandomProbe字段</span><br><span class=\"line\">            // 它是通过随机数生成的一个值，对于一个确定的线程这个值是固定的</span><br><span class=\"line\">            // 除非刻意修改它</span><br><span class=\"line\">            (a = as[getProbe() &amp; m]) == null ||</span><br><span class=\"line\">            !(uncontended = a.cas(v = a.value, v + x)))</span><br><span class=\"line\">            // 调用Striped64中的方法处理</span><br><span class=\"line\">            longAccumulate(x, null, uncontended);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>*（1）最初无竞争时只更新 base；</p>\n<p>*（2）直到更新 base 失败时，创建 cells 数组；</p>\n<p>*（3）当多个线程竞争同一个 Cell 比较激烈时，可能要扩容；</p>\n<h4 id=\"longAccumulate-方法\"><a href=\"#longAccumulate-方法\" class=\"headerlink\" title=\"longAccumulate()方法\"></a>longAccumulate()方法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final void longAccumulate(long x, LongBinaryOperator fn,</span><br><span class=\"line\">                              boolean wasUncontended) &#123;</span><br><span class=\"line\">    // 存储线程的probe值</span><br><span class=\"line\">    int h;</span><br><span class=\"line\">    // 如果getProbe()方法返回0，说明随机数未初始化</span><br><span class=\"line\">    if ((h = getProbe()) == 0) &#123;</span><br><span class=\"line\">        // 强制初始化</span><br><span class=\"line\">        ThreadLocalRandom.current(); // force initialization</span><br><span class=\"line\">        // 重新获取probe值</span><br><span class=\"line\">        h = getProbe();</span><br><span class=\"line\">        // 都未初始化，肯定还不存在竞争激烈</span><br><span class=\"line\">        wasUncontended = true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 是否发生碰撞</span><br><span class=\"line\">    boolean collide = false;                // True if last slot nonempty</span><br><span class=\"line\">    for (;;) &#123;</span><br><span class=\"line\">        Cell[] as; Cell a; int n; long v;</span><br><span class=\"line\">        // cells已经初始化过</span><br><span class=\"line\">        if ((as = cells) != null &amp;&amp; (n = as.length) &gt; 0) &#123;</span><br><span class=\"line\">            // 当前线程所在的Cell未初始化</span><br><span class=\"line\">            if ((a = as[(n - 1) &amp; h]) == null) &#123;</span><br><span class=\"line\">                // 当前无其它线程在创建或扩容cells，也没有线程在创建Cell</span><br><span class=\"line\">                if (cellsBusy == 0) &#123;       // Try to attach new Cell</span><br><span class=\"line\">                    // 新建一个Cell，值为当前需要增加的值</span><br><span class=\"line\">                    Cell r = new Cell(x);   // Optimistically create</span><br><span class=\"line\">                    // 再次检测cellsBusy，并尝试更新它为1</span><br><span class=\"line\">                    // 相当于当前线程加锁</span><br><span class=\"line\">                    if (cellsBusy == 0 &amp;&amp; casCellsBusy()) &#123;</span><br><span class=\"line\">                        // 是否创建成功</span><br><span class=\"line\">                        boolean created = false;</span><br><span class=\"line\">                        try &#123;               // Recheck under lock</span><br><span class=\"line\">                            Cell[] rs; int m, j;</span><br><span class=\"line\">                            // 重新获取cells，并找到当前线程hash到cells数组中的位置</span><br><span class=\"line\">                            // 这里一定要重新获取cells，因为as并不在锁定范围内</span><br><span class=\"line\">                            // 有可能已经扩容了，这里要重新获取</span><br><span class=\"line\">                            if ((rs = cells) != null &amp;&amp;</span><br><span class=\"line\">                                (m = rs.length) &gt; 0 &amp;&amp;</span><br><span class=\"line\">                                rs[j = (m - 1) &amp; h] == null) &#123;</span><br><span class=\"line\">                                // 把上面新建的Cell放在cells的j位置处</span><br><span class=\"line\">                                rs[j] = r;</span><br><span class=\"line\">                                // 创建成功</span><br><span class=\"line\">                                created = true;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; finally &#123;</span><br><span class=\"line\">                            // 相当于释放锁</span><br><span class=\"line\">                            cellsBusy = 0;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        // 创建成功了就返回</span><br><span class=\"line\">                        // 值已经放在新建的Cell里面了</span><br><span class=\"line\">                        if (created)</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        continue;           // Slot is now non-empty</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                // 标记当前未出现冲突</span><br><span class=\"line\">                collide = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 当前线程所在的Cell不为空，且更新失败了</span><br><span class=\"line\">            // 这里简单地设为true，相当于简单地自旋一次</span><br><span class=\"line\">            // 通过下面的语句修改线程的probe再重新尝试</span><br><span class=\"line\">            else if (!wasUncontended)       // CAS already known to fail</span><br><span class=\"line\">                wasUncontended = true;      // Continue after rehash</span><br><span class=\"line\">            // 再次尝试CAS更新当前线程所在Cell的值，如果成功了就返回</span><br><span class=\"line\">            else if (a.cas(v = a.value, ((fn == null) ? v + x :</span><br><span class=\"line\">                                         fn.applyAsLong(v, x))))</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            // 如果cells数组的长度达到了CPU核心数，或者cells扩容了</span><br><span class=\"line\">            // 设置collide为false并通过下面的语句修改线程的probe再重新尝试</span><br><span class=\"line\">            else if (n &gt;= NCPU || cells != as)</span><br><span class=\"line\">                collide = false;            // At max size or stale</span><br><span class=\"line\">            // 上上个elseif都更新失败了，且上个条件不成立，说明出现冲突了</span><br><span class=\"line\">            else if (!collide)</span><br><span class=\"line\">                collide = true;</span><br><span class=\"line\">            // 明确出现冲突了，尝试占有锁，并扩容</span><br><span class=\"line\">            else if (cellsBusy == 0 &amp;&amp; casCellsBusy()) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    // 检查是否有其它线程已经扩容过了</span><br><span class=\"line\">                    if (cells == as) &#123;      // Expand table unless stale</span><br><span class=\"line\">                        // 新数组为原数组的两倍</span><br><span class=\"line\">                        Cell[] rs = new Cell[n &lt;&lt; 1];</span><br><span class=\"line\">                        // 把旧数组元素拷贝到新数组中</span><br><span class=\"line\">                        for (int i = 0; i &lt; n; ++i)</span><br><span class=\"line\">                            rs[i] = as[i];</span><br><span class=\"line\">                        // 重新赋值cells为新数组</span><br><span class=\"line\">                        cells = rs;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; finally &#123;</span><br><span class=\"line\">                    // 释放锁</span><br><span class=\"line\">                    cellsBusy = 0;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                // 已解决冲突</span><br><span class=\"line\">                collide = false;</span><br><span class=\"line\">                // 使用扩容后的新数组重新尝试</span><br><span class=\"line\">                continue;                   // Retry with expanded table</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 更新失败或者达到了CPU核心数，重新生成probe，并重试</span><br><span class=\"line\">            h = advanceProbe(h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 未初始化过cells数组，尝试占有锁并初始化cells数组</span><br><span class=\"line\">        else if (cellsBusy == 0 &amp;&amp; cells == as &amp;&amp; casCellsBusy()) &#123;</span><br><span class=\"line\">            // 是否初始化成功</span><br><span class=\"line\">            boolean init = false;</span><br><span class=\"line\">            try &#123;                           // Initialize table</span><br><span class=\"line\">                // 检测是否有其它线程初始化过</span><br><span class=\"line\">                if (cells == as) &#123;</span><br><span class=\"line\">                    // 新建一个大小为2的Cell数组</span><br><span class=\"line\">                    Cell[] rs = new Cell[2];</span><br><span class=\"line\">                    // 找到当前线程hash到数组中的位置并创建其对应的Cell</span><br><span class=\"line\">                    rs[h &amp; 1] = new Cell(x);</span><br><span class=\"line\">                    // 赋值给cells数组</span><br><span class=\"line\">                    cells = rs;</span><br><span class=\"line\">                    // 初始化成功</span><br><span class=\"line\">                    init = true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                // 释放锁</span><br><span class=\"line\">                cellsBusy = 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 初始化成功直接返回</span><br><span class=\"line\">            // 因为增加的值已经同时创建到Cell中了</span><br><span class=\"line\">            if (init)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 如果有其它线程在初始化cells数组中，就尝试更新base</span><br><span class=\"line\">        // 如果成功了就返回</span><br><span class=\"line\">        else if (casBase(v = base, ((fn == null) ? v + x :</span><br><span class=\"line\">                                    fn.applyAsLong(v, x))))</span><br><span class=\"line\">            break;                          // Fall back on using base</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>*（1）如果 cells 数组未初始化，当前线程会尝试占有 cellsBusy 锁并创建 cells 数组；</p>\n<p>*（2）如果当前线程尝试创建 cells 数组时，发现有其它线程已经在创建了，就尝试更新 base，如果成功就返回；</p>\n<p>*（3）通过线程的 probe 值找到当前线程应该更新 cells 数组中的哪个 Cell；</p>\n<p>*（4）如果当前线程所在的 Cell 未初始化，就占有占有 cellsBusy 锁并在相应的位置创建一个 Cell；</p>\n<p>*（5）尝试 CAS 更新当前线程所在的 Cell，如果成功就返回，如果失败说明出现冲突；</p>\n<p>*（5）当前线程更新 Cell 失败后并不是立即扩容，而是尝试更新 probe 值后再重试一次；</p>\n<p>*（6）如果在重试的时候还是更新失败，就扩容；</p>\n<p>*（7）扩容时当前线程占有 cellsBusy 锁，并把数组容量扩大到两倍，再迁移原 cells 数组中元素到新数组中；</p>\n<p>*（8）cellsBusy 在创建 cells 数组、创建 Cell、扩容 cells 数组三个地方用到；</p>\n<h4 id=\"sum-方法\"><a href=\"#sum-方法\" class=\"headerlink\" title=\"sum()方法\"></a>sum()方法</h4><p>sum()方法是获取 LongAdder 中真正存储的值的大小，通过把 base 和所有段相加得到。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public long sum() &#123;</span><br><span class=\"line\">    Cell[] as = cells; Cell a;</span><br><span class=\"line\">    // sum初始等于base</span><br><span class=\"line\">    long sum = base;</span><br><span class=\"line\">    // 如果cells不为空</span><br><span class=\"line\">    if (as != null) &#123;</span><br><span class=\"line\">        // 遍历所有的Cell</span><br><span class=\"line\">        for (int i = 0; i &lt; as.length; ++i) &#123;</span><br><span class=\"line\">            // 如果所在的Cell不为空，就把它的value累加到sum中</span><br><span class=\"line\">            if ((a = as[i]) != null)</span><br><span class=\"line\">                sum += a.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 返回sum</span><br><span class=\"line\">    return sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 sum()方法是把 base 和所有段的值相加得到，那么，这里有一个问题，如果前面已经累加到 sum 上的 Cell 的 value 有修改，不是就没法计算到了么？</p>\n<p>答案确实如此，所以 LongAdder 可以说不是强一致性的，它是最终一致性的。</p>\n<h4 id=\"LongAdder-VS-AtomicLong\"><a href=\"#LongAdder-VS-AtomicLong\" class=\"headerlink\" title=\"LongAdder VS AtomicLong\"></a>LongAdder VS AtomicLong</h4><p>直接上代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LongAdderVSAtomicLongTest &#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        testAtomicLongVSLongAdder(1, 10000000);</span><br><span class=\"line\">        testAtomicLongVSLongAdder(10, 10000000);</span><br><span class=\"line\">        testAtomicLongVSLongAdder(20, 10000000);</span><br><span class=\"line\">        testAtomicLongVSLongAdder(40, 10000000);</span><br><span class=\"line\">        testAtomicLongVSLongAdder(80, 10000000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static void testAtomicLongVSLongAdder(final int threadCount, final int times)&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;threadCount：&quot; + threadCount + &quot;, times：&quot; + times);</span><br><span class=\"line\">            long start = System.currentTimeMillis();</span><br><span class=\"line\">            testLongAdder(threadCount, times);</span><br><span class=\"line\">            System.out.println(&quot;LongAdder elapse：&quot; + (System.currentTimeMillis() - start) + &quot;ms&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            long start2 = System.currentTimeMillis();</span><br><span class=\"line\">            testAtomicLong(threadCount, times);</span><br><span class=\"line\">            System.out.println(&quot;AtomicLong elapse：&quot; + (System.currentTimeMillis() - start2) + &quot;ms&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static void testAtomicLong(final int threadCount, final int times) throws InterruptedException &#123;</span><br><span class=\"line\">        AtomicLong atomicLong = new AtomicLong();</span><br><span class=\"line\">        List&lt;Thread&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i=0;i&lt;threadCount;i++)&#123;</span><br><span class=\"line\">            list.add(new Thread(() -&gt; &#123;</span><br><span class=\"line\">                for (int j = 0; j&lt;times; j++)&#123;</span><br><span class=\"line\">                    atomicLong.incrementAndGet();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (Thread thread : list)&#123;</span><br><span class=\"line\">            thread.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (Thread thread : list)&#123;</span><br><span class=\"line\">            thread.join();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static void testLongAdder(final int threadCount, final int times) throws InterruptedException &#123;</span><br><span class=\"line\">        LongAdder longAdder = new LongAdder();</span><br><span class=\"line\">        List&lt;Thread&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i=0;i&lt;threadCount;i++)&#123;</span><br><span class=\"line\">            list.add(new Thread(() -&gt; &#123;</span><br><span class=\"line\">                for (int j = 0; j&lt;times; j++)&#123;</span><br><span class=\"line\">                    longAdder.add(1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (Thread thread : list)&#123;</span><br><span class=\"line\">            thread.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (Thread thread : list)&#123;</span><br><span class=\"line\">            thread.join();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">threadCount：1, times：10000000</span><br><span class=\"line\">LongAdder elapse：158ms</span><br><span class=\"line\">AtomicLong elapse：64ms</span><br><span class=\"line\">threadCount：10, times：10000000</span><br><span class=\"line\">LongAdder elapse：206ms</span><br><span class=\"line\">AtomicLong elapse：2449ms</span><br><span class=\"line\">threadCount：20, times：10000000</span><br><span class=\"line\">LongAdder elapse：429ms</span><br><span class=\"line\">AtomicLong elapse：5142ms</span><br><span class=\"line\">threadCount：40, times：10000000</span><br><span class=\"line\">LongAdder elapse：840ms</span><br><span class=\"line\">AtomicLong elapse：10506ms</span><br><span class=\"line\">threadCount：80, times：10000000</span><br><span class=\"line\">LongAdder elapse：1369ms</span><br><span class=\"line\">AtomicLong elapse：20482ms</span><br></pre></td></tr></table></figure>\n\n<p>可以看到当只有一个线程的时候，AtomicLong 反而性能更高，随着线程越来越多，AtomicLong 的性能急剧下降，而 LongAdder 的性能影响很小。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>*（1）LongAdder 通过 base 和 cells 数组来存储值；</p>\n<p>*（2）不同的线程会 hash 到不同的 cell 上去更新，减少了竞争；</p>\n<p>*（3）LongAdder 的性能非常高，最终会达到一种无竞争的状态；</p>\n<p>在 longAccumulate()方法中有个条件是 n &gt;= NCPU 就不会走到扩容逻辑了，而 n 是 2 的倍数，那是不是代表 cells 数组最大只能达到大于等于 NCPU 的最小 2 次方？<br>答案是明确的。因为同一个 CPU 核心同时只会运行一个线程，而更新失败了说明有两个不同的核心更新了同一个 Cell，<br>这时会重新设置更新失败的那个线程的 probe 值，这样下一次它所在的 Cell 很大概率会发生改变，如果运行的时间足够长，<br>最终会出现同一个核心的所有线程都会 hash 到同一个 Cell（大概率，但不一定全在一个 Cell 上）上去更新，<br>所以，这里 cells 数组中长度并不需要太长，达到 CPU 核心数足够了。<br>比如，笔者的电脑是 8 核的，所以这里 cells 的数组最大只会到 8，达到 8 就不会扩容了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>（1）java8 中为什么要新增 LongAdder？</p>\n<p>（2）LongAdder 的实现方式？</p>\n<p>（3）LongAdder 与 AtomicLong 的对比？</p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>LongAdder 是 java8 中新增的原子类，在多线程环境中，它比 AtomicLong 性能要高出不少，特别是写多的场景。</p>\n<p>它是怎么实现的呢？让我们一起来学习吧。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>LongAdder 的原理是，在最初无竞争时，只更新 base 的值，当有多线程竞争时通过分段的思想，让不同的线程更新不同的段，最后把这些段相加就得到了完整的 LongAdder 存储的值。</p>\n<p>LongAdder</p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><p>LongAdder 继承自 Striped64 抽象类，Striped64 中定义了 Cell 内部类和各重要属性。</p>\n<h4 id=\"主要内部类\"><a href=\"#主要内部类\" class=\"headerlink\" title=\"主要内部类\"></a>主要内部类</h4><p>// Striped64 中的内部类，使用@sun.misc.Contended 注解，说明里面的值消除伪共享</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@sun.misc.Contended static final class Cell &#123;</span><br><span class=\"line\">    // 存储元素的值，使用volatile修饰保证可见性</span><br><span class=\"line\">    volatile long value;</span><br><span class=\"line\">    Cell(long x) &#123; value = x; &#125;</span><br><span class=\"line\">    // CAS更新value的值</span><br><span class=\"line\">    final boolean cas(long cmp, long val) &#123;</span><br><span class=\"line\">        return UNSAFE.compareAndSwapLong(this, valueOffset, cmp, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Unsafe实例</span><br><span class=\"line\">    private static final sun.misc.Unsafe UNSAFE;</span><br><span class=\"line\">    // value字段的偏移量</span><br><span class=\"line\">    private static final long valueOffset;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class=\"line\">            Class&lt;?&gt; ak = Cell.class;</span><br><span class=\"line\">            valueOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (ak.getDeclaredField(&quot;value&quot;));</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            throw new Error(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Cell 类使用<a href=\"Java8%E7%9A%84@sun.misc.Contended%E6%B3%A8%E8%A7%A3.md\">@sun.misc.Contended 注解</a>，说明是要避免伪共享的。</p>\n<p>使用 Unsafe 的 CAS 更新 value 的值，其中 value 的值使用 volatile 修饰，保证可见性。</p>\n<p>关于 Unsafe 的介绍请查看【死磕 java 魔法类之 Unsafe 解析】。</p>\n<p>关于伪共享的介绍请查看【杂谈 什么是伪共享（false sharing）？】。<br><a href=\"https://blog.csdn.net/qq_27680317/article/details/78486220\">一篇对伪共享、缓存行填充和 CPU 缓存讲的很透彻的文章</a></p>\n<p>主要属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这三个属性都在Striped64中</span><br><span class=\"line\">// cells数组，存储各个段的值</span><br><span class=\"line\">transient volatile Cell[] cells;</span><br><span class=\"line\">// 最初无竞争时使用的，也算一个特殊的段</span><br><span class=\"line\">transient volatile long base;</span><br><span class=\"line\">// 标记当前是否有线程在创建或扩容cells，或者在创建Cell</span><br><span class=\"line\">// 通过CAS更新该值，相当于是一个锁</span><br><span class=\"line\">transient volatile int cellsBusy;</span><br></pre></td></tr></table></figure>\n\n<p>最初无竞争或有其它线程在创建 cells 数组时使用 base 更新值，有过竞争时使用 cells 更新值。<br>最初无竞争是指一开始没有线程之间的竞争，但也有可能是多线程在操作，只是这些线程没有同时去更新 base 的值。<br>有过竞争是指只要出现过竞争不管后面有没有竞争都使用 cells 更新值，规则是不同的线程 hash 到不同的 cell 上去更新，减少竞争。</p>\n<h4 id=\"add-x-方法\"><a href=\"#add-x-方法\" class=\"headerlink\" title=\"add(x)方法\"></a>add(x)方法</h4><p>add(x)方法是 LongAdder 的主要方法，使用它可以使 LongAdder 中存储的值增加 x，x 可为正可为负。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void add(long x) &#123;</span><br><span class=\"line\">    // as是Striped64中的cells属性</span><br><span class=\"line\">    // b是Striped64中的base属性</span><br><span class=\"line\">    // v是当前线程hash到的Cell中存储的值</span><br><span class=\"line\">    // m是cells的长度减1，hash时作为掩码使用</span><br><span class=\"line\">    // a是当前线程hash到的Cell</span><br><span class=\"line\">    Cell[] as; long b, v; int m; Cell a;</span><br><span class=\"line\">    // 条件1：cells不为空，说明出现过竞争，cells已经创建</span><br><span class=\"line\">    // 条件2：cas操作base失败，说明其它线程先一步修改了base，正在出现竞争</span><br><span class=\"line\">    if ((as = cells) != null || !casBase(b = base, b + x)) &#123;</span><br><span class=\"line\">        // true表示当前竞争还不激烈</span><br><span class=\"line\">        // false表示竞争激烈，多个线程hash到同一个Cell，可能要扩容</span><br><span class=\"line\">        boolean uncontended = true;</span><br><span class=\"line\">        // 条件1：cells为空，说明正在出现竞争，上面是从条件2过来的</span><br><span class=\"line\">        // 条件2：应该不会出现</span><br><span class=\"line\">        // 条件3：当前线程所在的Cell为空，说明当前线程还没有更新过Cell，应初始化一个Cell</span><br><span class=\"line\">        // 条件4：更新当前线程所在的Cell失败，说明现在竞争很激烈，多个线程hash到了同一个Cell，应扩容</span><br><span class=\"line\">        if (as == null || (m = as.length - 1) &lt; 0 ||</span><br><span class=\"line\">            // getProbe()方法返回的是线程中的threadLocalRandomProbe字段</span><br><span class=\"line\">            // 它是通过随机数生成的一个值，对于一个确定的线程这个值是固定的</span><br><span class=\"line\">            // 除非刻意修改它</span><br><span class=\"line\">            (a = as[getProbe() &amp; m]) == null ||</span><br><span class=\"line\">            !(uncontended = a.cas(v = a.value, v + x)))</span><br><span class=\"line\">            // 调用Striped64中的方法处理</span><br><span class=\"line\">            longAccumulate(x, null, uncontended);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>*（1）最初无竞争时只更新 base；</p>\n<p>*（2）直到更新 base 失败时，创建 cells 数组；</p>\n<p>*（3）当多个线程竞争同一个 Cell 比较激烈时，可能要扩容；</p>\n<h4 id=\"longAccumulate-方法\"><a href=\"#longAccumulate-方法\" class=\"headerlink\" title=\"longAccumulate()方法\"></a>longAccumulate()方法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final void longAccumulate(long x, LongBinaryOperator fn,</span><br><span class=\"line\">                              boolean wasUncontended) &#123;</span><br><span class=\"line\">    // 存储线程的probe值</span><br><span class=\"line\">    int h;</span><br><span class=\"line\">    // 如果getProbe()方法返回0，说明随机数未初始化</span><br><span class=\"line\">    if ((h = getProbe()) == 0) &#123;</span><br><span class=\"line\">        // 强制初始化</span><br><span class=\"line\">        ThreadLocalRandom.current(); // force initialization</span><br><span class=\"line\">        // 重新获取probe值</span><br><span class=\"line\">        h = getProbe();</span><br><span class=\"line\">        // 都未初始化，肯定还不存在竞争激烈</span><br><span class=\"line\">        wasUncontended = true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 是否发生碰撞</span><br><span class=\"line\">    boolean collide = false;                // True if last slot nonempty</span><br><span class=\"line\">    for (;;) &#123;</span><br><span class=\"line\">        Cell[] as; Cell a; int n; long v;</span><br><span class=\"line\">        // cells已经初始化过</span><br><span class=\"line\">        if ((as = cells) != null &amp;&amp; (n = as.length) &gt; 0) &#123;</span><br><span class=\"line\">            // 当前线程所在的Cell未初始化</span><br><span class=\"line\">            if ((a = as[(n - 1) &amp; h]) == null) &#123;</span><br><span class=\"line\">                // 当前无其它线程在创建或扩容cells，也没有线程在创建Cell</span><br><span class=\"line\">                if (cellsBusy == 0) &#123;       // Try to attach new Cell</span><br><span class=\"line\">                    // 新建一个Cell，值为当前需要增加的值</span><br><span class=\"line\">                    Cell r = new Cell(x);   // Optimistically create</span><br><span class=\"line\">                    // 再次检测cellsBusy，并尝试更新它为1</span><br><span class=\"line\">                    // 相当于当前线程加锁</span><br><span class=\"line\">                    if (cellsBusy == 0 &amp;&amp; casCellsBusy()) &#123;</span><br><span class=\"line\">                        // 是否创建成功</span><br><span class=\"line\">                        boolean created = false;</span><br><span class=\"line\">                        try &#123;               // Recheck under lock</span><br><span class=\"line\">                            Cell[] rs; int m, j;</span><br><span class=\"line\">                            // 重新获取cells，并找到当前线程hash到cells数组中的位置</span><br><span class=\"line\">                            // 这里一定要重新获取cells，因为as并不在锁定范围内</span><br><span class=\"line\">                            // 有可能已经扩容了，这里要重新获取</span><br><span class=\"line\">                            if ((rs = cells) != null &amp;&amp;</span><br><span class=\"line\">                                (m = rs.length) &gt; 0 &amp;&amp;</span><br><span class=\"line\">                                rs[j = (m - 1) &amp; h] == null) &#123;</span><br><span class=\"line\">                                // 把上面新建的Cell放在cells的j位置处</span><br><span class=\"line\">                                rs[j] = r;</span><br><span class=\"line\">                                // 创建成功</span><br><span class=\"line\">                                created = true;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; finally &#123;</span><br><span class=\"line\">                            // 相当于释放锁</span><br><span class=\"line\">                            cellsBusy = 0;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        // 创建成功了就返回</span><br><span class=\"line\">                        // 值已经放在新建的Cell里面了</span><br><span class=\"line\">                        if (created)</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        continue;           // Slot is now non-empty</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                // 标记当前未出现冲突</span><br><span class=\"line\">                collide = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 当前线程所在的Cell不为空，且更新失败了</span><br><span class=\"line\">            // 这里简单地设为true，相当于简单地自旋一次</span><br><span class=\"line\">            // 通过下面的语句修改线程的probe再重新尝试</span><br><span class=\"line\">            else if (!wasUncontended)       // CAS already known to fail</span><br><span class=\"line\">                wasUncontended = true;      // Continue after rehash</span><br><span class=\"line\">            // 再次尝试CAS更新当前线程所在Cell的值，如果成功了就返回</span><br><span class=\"line\">            else if (a.cas(v = a.value, ((fn == null) ? v + x :</span><br><span class=\"line\">                                         fn.applyAsLong(v, x))))</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            // 如果cells数组的长度达到了CPU核心数，或者cells扩容了</span><br><span class=\"line\">            // 设置collide为false并通过下面的语句修改线程的probe再重新尝试</span><br><span class=\"line\">            else if (n &gt;= NCPU || cells != as)</span><br><span class=\"line\">                collide = false;            // At max size or stale</span><br><span class=\"line\">            // 上上个elseif都更新失败了，且上个条件不成立，说明出现冲突了</span><br><span class=\"line\">            else if (!collide)</span><br><span class=\"line\">                collide = true;</span><br><span class=\"line\">            // 明确出现冲突了，尝试占有锁，并扩容</span><br><span class=\"line\">            else if (cellsBusy == 0 &amp;&amp; casCellsBusy()) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    // 检查是否有其它线程已经扩容过了</span><br><span class=\"line\">                    if (cells == as) &#123;      // Expand table unless stale</span><br><span class=\"line\">                        // 新数组为原数组的两倍</span><br><span class=\"line\">                        Cell[] rs = new Cell[n &lt;&lt; 1];</span><br><span class=\"line\">                        // 把旧数组元素拷贝到新数组中</span><br><span class=\"line\">                        for (int i = 0; i &lt; n; ++i)</span><br><span class=\"line\">                            rs[i] = as[i];</span><br><span class=\"line\">                        // 重新赋值cells为新数组</span><br><span class=\"line\">                        cells = rs;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; finally &#123;</span><br><span class=\"line\">                    // 释放锁</span><br><span class=\"line\">                    cellsBusy = 0;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                // 已解决冲突</span><br><span class=\"line\">                collide = false;</span><br><span class=\"line\">                // 使用扩容后的新数组重新尝试</span><br><span class=\"line\">                continue;                   // Retry with expanded table</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 更新失败或者达到了CPU核心数，重新生成probe，并重试</span><br><span class=\"line\">            h = advanceProbe(h);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 未初始化过cells数组，尝试占有锁并初始化cells数组</span><br><span class=\"line\">        else if (cellsBusy == 0 &amp;&amp; cells == as &amp;&amp; casCellsBusy()) &#123;</span><br><span class=\"line\">            // 是否初始化成功</span><br><span class=\"line\">            boolean init = false;</span><br><span class=\"line\">            try &#123;                           // Initialize table</span><br><span class=\"line\">                // 检测是否有其它线程初始化过</span><br><span class=\"line\">                if (cells == as) &#123;</span><br><span class=\"line\">                    // 新建一个大小为2的Cell数组</span><br><span class=\"line\">                    Cell[] rs = new Cell[2];</span><br><span class=\"line\">                    // 找到当前线程hash到数组中的位置并创建其对应的Cell</span><br><span class=\"line\">                    rs[h &amp; 1] = new Cell(x);</span><br><span class=\"line\">                    // 赋值给cells数组</span><br><span class=\"line\">                    cells = rs;</span><br><span class=\"line\">                    // 初始化成功</span><br><span class=\"line\">                    init = true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                // 释放锁</span><br><span class=\"line\">                cellsBusy = 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 初始化成功直接返回</span><br><span class=\"line\">            // 因为增加的值已经同时创建到Cell中了</span><br><span class=\"line\">            if (init)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 如果有其它线程在初始化cells数组中，就尝试更新base</span><br><span class=\"line\">        // 如果成功了就返回</span><br><span class=\"line\">        else if (casBase(v = base, ((fn == null) ? v + x :</span><br><span class=\"line\">                                    fn.applyAsLong(v, x))))</span><br><span class=\"line\">            break;                          // Fall back on using base</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>*（1）如果 cells 数组未初始化，当前线程会尝试占有 cellsBusy 锁并创建 cells 数组；</p>\n<p>*（2）如果当前线程尝试创建 cells 数组时，发现有其它线程已经在创建了，就尝试更新 base，如果成功就返回；</p>\n<p>*（3）通过线程的 probe 值找到当前线程应该更新 cells 数组中的哪个 Cell；</p>\n<p>*（4）如果当前线程所在的 Cell 未初始化，就占有占有 cellsBusy 锁并在相应的位置创建一个 Cell；</p>\n<p>*（5）尝试 CAS 更新当前线程所在的 Cell，如果成功就返回，如果失败说明出现冲突；</p>\n<p>*（5）当前线程更新 Cell 失败后并不是立即扩容，而是尝试更新 probe 值后再重试一次；</p>\n<p>*（6）如果在重试的时候还是更新失败，就扩容；</p>\n<p>*（7）扩容时当前线程占有 cellsBusy 锁，并把数组容量扩大到两倍，再迁移原 cells 数组中元素到新数组中；</p>\n<p>*（8）cellsBusy 在创建 cells 数组、创建 Cell、扩容 cells 数组三个地方用到；</p>\n<h4 id=\"sum-方法\"><a href=\"#sum-方法\" class=\"headerlink\" title=\"sum()方法\"></a>sum()方法</h4><p>sum()方法是获取 LongAdder 中真正存储的值的大小，通过把 base 和所有段相加得到。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public long sum() &#123;</span><br><span class=\"line\">    Cell[] as = cells; Cell a;</span><br><span class=\"line\">    // sum初始等于base</span><br><span class=\"line\">    long sum = base;</span><br><span class=\"line\">    // 如果cells不为空</span><br><span class=\"line\">    if (as != null) &#123;</span><br><span class=\"line\">        // 遍历所有的Cell</span><br><span class=\"line\">        for (int i = 0; i &lt; as.length; ++i) &#123;</span><br><span class=\"line\">            // 如果所在的Cell不为空，就把它的value累加到sum中</span><br><span class=\"line\">            if ((a = as[i]) != null)</span><br><span class=\"line\">                sum += a.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 返回sum</span><br><span class=\"line\">    return sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 sum()方法是把 base 和所有段的值相加得到，那么，这里有一个问题，如果前面已经累加到 sum 上的 Cell 的 value 有修改，不是就没法计算到了么？</p>\n<p>答案确实如此，所以 LongAdder 可以说不是强一致性的，它是最终一致性的。</p>\n<h4 id=\"LongAdder-VS-AtomicLong\"><a href=\"#LongAdder-VS-AtomicLong\" class=\"headerlink\" title=\"LongAdder VS AtomicLong\"></a>LongAdder VS AtomicLong</h4><p>直接上代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LongAdderVSAtomicLongTest &#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        testAtomicLongVSLongAdder(1, 10000000);</span><br><span class=\"line\">        testAtomicLongVSLongAdder(10, 10000000);</span><br><span class=\"line\">        testAtomicLongVSLongAdder(20, 10000000);</span><br><span class=\"line\">        testAtomicLongVSLongAdder(40, 10000000);</span><br><span class=\"line\">        testAtomicLongVSLongAdder(80, 10000000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static void testAtomicLongVSLongAdder(final int threadCount, final int times)&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;threadCount：&quot; + threadCount + &quot;, times：&quot; + times);</span><br><span class=\"line\">            long start = System.currentTimeMillis();</span><br><span class=\"line\">            testLongAdder(threadCount, times);</span><br><span class=\"line\">            System.out.println(&quot;LongAdder elapse：&quot; + (System.currentTimeMillis() - start) + &quot;ms&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            long start2 = System.currentTimeMillis();</span><br><span class=\"line\">            testAtomicLong(threadCount, times);</span><br><span class=\"line\">            System.out.println(&quot;AtomicLong elapse：&quot; + (System.currentTimeMillis() - start2) + &quot;ms&quot;);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static void testAtomicLong(final int threadCount, final int times) throws InterruptedException &#123;</span><br><span class=\"line\">        AtomicLong atomicLong = new AtomicLong();</span><br><span class=\"line\">        List&lt;Thread&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i=0;i&lt;threadCount;i++)&#123;</span><br><span class=\"line\">            list.add(new Thread(() -&gt; &#123;</span><br><span class=\"line\">                for (int j = 0; j&lt;times; j++)&#123;</span><br><span class=\"line\">                    atomicLong.incrementAndGet();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (Thread thread : list)&#123;</span><br><span class=\"line\">            thread.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (Thread thread : list)&#123;</span><br><span class=\"line\">            thread.join();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static void testLongAdder(final int threadCount, final int times) throws InterruptedException &#123;</span><br><span class=\"line\">        LongAdder longAdder = new LongAdder();</span><br><span class=\"line\">        List&lt;Thread&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i=0;i&lt;threadCount;i++)&#123;</span><br><span class=\"line\">            list.add(new Thread(() -&gt; &#123;</span><br><span class=\"line\">                for (int j = 0; j&lt;times; j++)&#123;</span><br><span class=\"line\">                    longAdder.add(1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (Thread thread : list)&#123;</span><br><span class=\"line\">            thread.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (Thread thread : list)&#123;</span><br><span class=\"line\">            thread.join();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">threadCount：1, times：10000000</span><br><span class=\"line\">LongAdder elapse：158ms</span><br><span class=\"line\">AtomicLong elapse：64ms</span><br><span class=\"line\">threadCount：10, times：10000000</span><br><span class=\"line\">LongAdder elapse：206ms</span><br><span class=\"line\">AtomicLong elapse：2449ms</span><br><span class=\"line\">threadCount：20, times：10000000</span><br><span class=\"line\">LongAdder elapse：429ms</span><br><span class=\"line\">AtomicLong elapse：5142ms</span><br><span class=\"line\">threadCount：40, times：10000000</span><br><span class=\"line\">LongAdder elapse：840ms</span><br><span class=\"line\">AtomicLong elapse：10506ms</span><br><span class=\"line\">threadCount：80, times：10000000</span><br><span class=\"line\">LongAdder elapse：1369ms</span><br><span class=\"line\">AtomicLong elapse：20482ms</span><br></pre></td></tr></table></figure>\n\n<p>可以看到当只有一个线程的时候，AtomicLong 反而性能更高，随着线程越来越多，AtomicLong 的性能急剧下降，而 LongAdder 的性能影响很小。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>*（1）LongAdder 通过 base 和 cells 数组来存储值；</p>\n<p>*（2）不同的线程会 hash 到不同的 cell 上去更新，减少了竞争；</p>\n<p>*（3）LongAdder 的性能非常高，最终会达到一种无竞争的状态；</p>\n<p>在 longAccumulate()方法中有个条件是 n &gt;= NCPU 就不会走到扩容逻辑了，而 n 是 2 的倍数，那是不是代表 cells 数组最大只能达到大于等于 NCPU 的最小 2 次方？<br>答案是明确的。因为同一个 CPU 核心同时只会运行一个线程，而更新失败了说明有两个不同的核心更新了同一个 Cell，<br>这时会重新设置更新失败的那个线程的 probe 值，这样下一次它所在的 Cell 很大概率会发生改变，如果运行的时间足够长，<br>最终会出现同一个核心的所有线程都会 hash 到同一个 Cell（大概率，但不一定全在一个 Cell 上）上去更新，<br>所以，这里 cells 数组中长度并不需要太长，达到 CPU 核心数足够了。<br>比如，笔者的电脑是 8 核的，所以这里 cells 的数组最大只会到 8，达到 8 就不会扩容了。</p>\n"},{"title":"atomic","_content":"\n\n### 1.简介\n\n    早期的JDK版本中，如果要并发的对Integer、Long、Double之类的Java原始类型或引用类型进行操作，一般都需要通过锁来控制并发，\n    以防止数据不一致。JUC-Atomic原子类位于java.util.concurrent.atomic包下。该包提供了许多Java原始/引用类型的映射类。\n    如AtomicInteger、AtomicLong、AtomicBoolean，这些类可以通过一种“无锁算法”，线程安全的操作Integer、Long、Boolean等原始类型。\n\n    包中类分为五种：\n\n    基本类型：\n        AtomicBoolean：布尔型原子类\n        AtomicInteger：整型原子类\n        AtomicLong：长整型原子类\n\n    数组：\n        AtomicIntegerArray：整形数组原子类\n        AtomicLongArray：长整形数组原子类\n        AtomicReferenceArray：引用类型数组原子类\n\n    引用类型：\n        AtomicReference：引用类型原子类\n        AtomicStampedRerence：原子更新引用类型里的字段原子类\n        AtomicMarkableReference：原子更新带有标记位的引用类型\n\n    对象的属性：\n        AtomicIntegerFieldUpdater：原子更新整形字段的更新器\n        AtomicLongFieldUpdater：原子更新长整形字段的更新器\n        AtomicReferenceFieldUpdater：原子更新带有版本号的引用类型。\n            该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题\n        　　本文不会详细介绍这几种类型的api及使用，只是列出Atomic的实现原理，及比较重点的类\n\n    基本类型原子类：\n\n        AtomicBoolean：布尔型原子类\n        AtomicInteger：整型原子类\n        AtomicLong：长整型原子类\n        这几个类的共同特点是都提供单个变量的原子方式访问和更新功能。以AtomicLong为代表，进行介绍。\n\n### 2.实例解析\n\n- 例子：我们使用 AtomicLong 来演示之前的线程不安全的\n\n```java\n /**\n  * 并发测试代码\n  */\n @ThreadSafe\n public class AtomicExample2 {\n     //请求总数\n     public static int clientTotal = 5000;\n     //同时并发执行的线程数\n     public static int threadTotal = 200;\n     //变成了AtomicLong类型\n     public static AtomicLong count = new AtomicLong(0);\n     public static void main(String[] args) throws InterruptedException {\n         //创建线程池\n         ExecutorService executorService = Executors.newCachedThreadPool();\n         //定义信号量\n         final Semaphore semaphore = new Semaphore(threadTotal);\n         //定义计数器 闭锁\n         final CountDownLatch countDownLatch = new CountDownLatch(clientTotal);\n         for (int i = 0; i < clientTotal; i++) {\n             executorService.execute(() ->{\n                 try {\n                     semaphore.acquire();\n                     add();\n                     //释放\n                     semaphore.release();\n                 } catch (Exception e) {\n                     System.out.println(\"exception:\"+e.getMessage());\n                 }\n                 countDownLatch.countDown();\n             });\n         }\n         countDownLatch.await();\n         executorService.shutdown();\n         System.out.println(\"count:{}\"+count.get());\n     }\n     private static void add(){\n         count.incrementAndGet();//先做增加再获取当前值\n         //count.getAndIncrement();先获取当前值再做增加\n     }\n }\n```\n\n- 解析\n\n        当使用AtomicLong去执行自增操作时，得出的最终结果count就是5000。数次运行情况下结果一致。不会带来线程不安全的情况。\n        那我们来看看AtomicLong是如何保证线程安全的呢。\n\n        我们看看incrementAndGet方法，看看AtomicLong如何实现单个变量的原子方式更新。Unsafe是CAS的核心类，AtomicLong是基于CAS实现的。\n        此处就介绍AtomicLong，AtomicBoolean、AtomicInteger、AtomicReference与之相似，就不一一介绍\n\n```java\nprivate static final Unsafe unsafe = Unsafe.getUnsafe();\n\npublic final long incrementAndGet() {\n    return unsafe.getAndAddLong(this, valueOffset, 1L) + 1L;\n}\n```\n\nincrementAndGet 方法实际上是调用 Unsafe 类的方法来执行操作，我们进入 Unsafe 里看看具体的 getAndAddLong 是如何实现原子方式更新的。\n\n```java\npublic final long getAndAddLong(Object var1, long var2, long var4) {\n    long var6;\n    do {\n        var6 = this.getLongVolatile(var1, var2);\n    } while(!this.compareAndSwapLong(var1, var2, var6, var6 + var4));\n    return var6;\n}\n```\n\n     我们来解析一下这个方法，var1为当前调用这个方法的对象，var2是当前值，假如执行的2+1=3的操作，那么var4就是1。\n     var6是调用底层方法获得底层当前值。假设没有其他线程来处理count，那么var6就是var2。此处使用了一个do while循环。\n     compareAndSwapLong方法是native的，代表是java底层的方法。也是遵循CAS算法的api。compareAndSwap，比较并交换。\n     在getAndAddLong的while判断中，该方法实现的是：对于var1这个对象，如果当前值var2和底层值var6相同的话，就更新为后面的操作结果值。\n     当我们执行更新结果时，可能被其他线程修改，因此此处判断当前值与期望值相同时才允许更新。否则重新取出当前的底层值，和当前count的值再做比较。\n     保证当前值与底层值完全一致时才进行结果更新，以此保证线程安全。这也是Atomic使用CAS原理实现的机制。底层值是主内存中的值，当前值是源自于工作内存。\n     由于该方法的逻辑是采用自旋的方式不断更新目标值，直到更新成功，在并发量较低的环境下，线程冲突较少，自旋次数不会很多。\n     但是在高并发情况下，N个线程同时进行自旋操作，会出现大量失败并不断自旋的情况，此时的AtomicLong的自旋会成为瓶颈，\n     因此为了解决高并发环境下的AtomicLong的自旋瓶颈问题，引入了LongAdder。\n\n**LongAdder：**\n\nAtomicLong 中有个内部变量 value 保存着实际的 long 值，所有的操作都是针对该变量进行。也就是说，高并发环境下，value 变量其实是一个热点，也就是 N 个线程竞争一个热点。LongAdder 的基本思路就是分散热点，将 value 值分散到一个数组中，不同线程会命中到数组的不同槽中，各个线程只对自己槽中的那个值进行 CAS 操作，这样热点就被分散了，冲突的概率就小很多。如果要获取真正的 long 值，只要将各个槽中的变量值累加返回。\n\n低并发、一般的业务场景下 AtomicLong 是足够了。如果并发量很多，存在大量写多读少的情况，那 LongAdder 可能更合适。\n\n**AtomicBoolean：**\n\n针对该类我们主要研究 compareAndSet 函数\n\n```java\npublic final boolean compareAndSet(boolean expect, boolean update) {\n int e = expect ? 1 : 0;\n int u = update ? 1 : 0;\n return unsafe.compareAndSwapInt(this, valueOffset, e, u);\n}\n```\n\n该函数实现的功能是高并发情况下只有一个线程能访问这个属性值，常用于初始化一次的功能中。\n\n```java\nprivate static AtomicBoolean initialized = new AtomicBoolean(false);\n public void init()\n {\n    if( initialized.compareAndSet(false, true) )//如果为false，更新为true\n    {\n        // 初始化操作代码....\n    }\n }\n```\n\n各原子类api及使用demo，可以参考：https://github.com/Snailclimb/JavaGuide/blob/master/Java%E7%9B%B8%E5%85%B3/Multithread/Atomic.md\n\n主要是掌握CAS算法的设计思想，了解原子类如何保证原子操作。\n\n### 参考\n\nhttps://www.cnblogs.com/zhangbLearn/p/9922790.html\n","source":"_posts/language/java/juc/atomic/readme.md","raw":"---\ntitle: atomic\n\ncategories:\n- java\ntag:\n- atomic\n---\n\n\n### 1.简介\n\n    早期的JDK版本中，如果要并发的对Integer、Long、Double之类的Java原始类型或引用类型进行操作，一般都需要通过锁来控制并发，\n    以防止数据不一致。JUC-Atomic原子类位于java.util.concurrent.atomic包下。该包提供了许多Java原始/引用类型的映射类。\n    如AtomicInteger、AtomicLong、AtomicBoolean，这些类可以通过一种“无锁算法”，线程安全的操作Integer、Long、Boolean等原始类型。\n\n    包中类分为五种：\n\n    基本类型：\n        AtomicBoolean：布尔型原子类\n        AtomicInteger：整型原子类\n        AtomicLong：长整型原子类\n\n    数组：\n        AtomicIntegerArray：整形数组原子类\n        AtomicLongArray：长整形数组原子类\n        AtomicReferenceArray：引用类型数组原子类\n\n    引用类型：\n        AtomicReference：引用类型原子类\n        AtomicStampedRerence：原子更新引用类型里的字段原子类\n        AtomicMarkableReference：原子更新带有标记位的引用类型\n\n    对象的属性：\n        AtomicIntegerFieldUpdater：原子更新整形字段的更新器\n        AtomicLongFieldUpdater：原子更新长整形字段的更新器\n        AtomicReferenceFieldUpdater：原子更新带有版本号的引用类型。\n            该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题\n        　　本文不会详细介绍这几种类型的api及使用，只是列出Atomic的实现原理，及比较重点的类\n\n    基本类型原子类：\n\n        AtomicBoolean：布尔型原子类\n        AtomicInteger：整型原子类\n        AtomicLong：长整型原子类\n        这几个类的共同特点是都提供单个变量的原子方式访问和更新功能。以AtomicLong为代表，进行介绍。\n\n### 2.实例解析\n\n- 例子：我们使用 AtomicLong 来演示之前的线程不安全的\n\n```java\n /**\n  * 并发测试代码\n  */\n @ThreadSafe\n public class AtomicExample2 {\n     //请求总数\n     public static int clientTotal = 5000;\n     //同时并发执行的线程数\n     public static int threadTotal = 200;\n     //变成了AtomicLong类型\n     public static AtomicLong count = new AtomicLong(0);\n     public static void main(String[] args) throws InterruptedException {\n         //创建线程池\n         ExecutorService executorService = Executors.newCachedThreadPool();\n         //定义信号量\n         final Semaphore semaphore = new Semaphore(threadTotal);\n         //定义计数器 闭锁\n         final CountDownLatch countDownLatch = new CountDownLatch(clientTotal);\n         for (int i = 0; i < clientTotal; i++) {\n             executorService.execute(() ->{\n                 try {\n                     semaphore.acquire();\n                     add();\n                     //释放\n                     semaphore.release();\n                 } catch (Exception e) {\n                     System.out.println(\"exception:\"+e.getMessage());\n                 }\n                 countDownLatch.countDown();\n             });\n         }\n         countDownLatch.await();\n         executorService.shutdown();\n         System.out.println(\"count:{}\"+count.get());\n     }\n     private static void add(){\n         count.incrementAndGet();//先做增加再获取当前值\n         //count.getAndIncrement();先获取当前值再做增加\n     }\n }\n```\n\n- 解析\n\n        当使用AtomicLong去执行自增操作时，得出的最终结果count就是5000。数次运行情况下结果一致。不会带来线程不安全的情况。\n        那我们来看看AtomicLong是如何保证线程安全的呢。\n\n        我们看看incrementAndGet方法，看看AtomicLong如何实现单个变量的原子方式更新。Unsafe是CAS的核心类，AtomicLong是基于CAS实现的。\n        此处就介绍AtomicLong，AtomicBoolean、AtomicInteger、AtomicReference与之相似，就不一一介绍\n\n```java\nprivate static final Unsafe unsafe = Unsafe.getUnsafe();\n\npublic final long incrementAndGet() {\n    return unsafe.getAndAddLong(this, valueOffset, 1L) + 1L;\n}\n```\n\nincrementAndGet 方法实际上是调用 Unsafe 类的方法来执行操作，我们进入 Unsafe 里看看具体的 getAndAddLong 是如何实现原子方式更新的。\n\n```java\npublic final long getAndAddLong(Object var1, long var2, long var4) {\n    long var6;\n    do {\n        var6 = this.getLongVolatile(var1, var2);\n    } while(!this.compareAndSwapLong(var1, var2, var6, var6 + var4));\n    return var6;\n}\n```\n\n     我们来解析一下这个方法，var1为当前调用这个方法的对象，var2是当前值，假如执行的2+1=3的操作，那么var4就是1。\n     var6是调用底层方法获得底层当前值。假设没有其他线程来处理count，那么var6就是var2。此处使用了一个do while循环。\n     compareAndSwapLong方法是native的，代表是java底层的方法。也是遵循CAS算法的api。compareAndSwap，比较并交换。\n     在getAndAddLong的while判断中，该方法实现的是：对于var1这个对象，如果当前值var2和底层值var6相同的话，就更新为后面的操作结果值。\n     当我们执行更新结果时，可能被其他线程修改，因此此处判断当前值与期望值相同时才允许更新。否则重新取出当前的底层值，和当前count的值再做比较。\n     保证当前值与底层值完全一致时才进行结果更新，以此保证线程安全。这也是Atomic使用CAS原理实现的机制。底层值是主内存中的值，当前值是源自于工作内存。\n     由于该方法的逻辑是采用自旋的方式不断更新目标值，直到更新成功，在并发量较低的环境下，线程冲突较少，自旋次数不会很多。\n     但是在高并发情况下，N个线程同时进行自旋操作，会出现大量失败并不断自旋的情况，此时的AtomicLong的自旋会成为瓶颈，\n     因此为了解决高并发环境下的AtomicLong的自旋瓶颈问题，引入了LongAdder。\n\n**LongAdder：**\n\nAtomicLong 中有个内部变量 value 保存着实际的 long 值，所有的操作都是针对该变量进行。也就是说，高并发环境下，value 变量其实是一个热点，也就是 N 个线程竞争一个热点。LongAdder 的基本思路就是分散热点，将 value 值分散到一个数组中，不同线程会命中到数组的不同槽中，各个线程只对自己槽中的那个值进行 CAS 操作，这样热点就被分散了，冲突的概率就小很多。如果要获取真正的 long 值，只要将各个槽中的变量值累加返回。\n\n低并发、一般的业务场景下 AtomicLong 是足够了。如果并发量很多，存在大量写多读少的情况，那 LongAdder 可能更合适。\n\n**AtomicBoolean：**\n\n针对该类我们主要研究 compareAndSet 函数\n\n```java\npublic final boolean compareAndSet(boolean expect, boolean update) {\n int e = expect ? 1 : 0;\n int u = update ? 1 : 0;\n return unsafe.compareAndSwapInt(this, valueOffset, e, u);\n}\n```\n\n该函数实现的功能是高并发情况下只有一个线程能访问这个属性值，常用于初始化一次的功能中。\n\n```java\nprivate static AtomicBoolean initialized = new AtomicBoolean(false);\n public void init()\n {\n    if( initialized.compareAndSet(false, true) )//如果为false，更新为true\n    {\n        // 初始化操作代码....\n    }\n }\n```\n\n各原子类api及使用demo，可以参考：https://github.com/Snailclimb/JavaGuide/blob/master/Java%E7%9B%B8%E5%85%B3/Multithread/Atomic.md\n\n主要是掌握CAS算法的设计思想，了解原子类如何保证原子操作。\n\n### 参考\n\nhttps://www.cnblogs.com/zhangbLearn/p/9922790.html\n","slug":"language/java/juc/atomic/readme","published":1,"date":"2021-09-14T15:01:38.561Z","updated":"2021-09-14T15:01:38.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyjd004mu6uk4m318fvc","content":"<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><pre><code>早期的JDK版本中，如果要并发的对Integer、Long、Double之类的Java原始类型或引用类型进行操作，一般都需要通过锁来控制并发，\n以防止数据不一致。JUC-Atomic原子类位于java.util.concurrent.atomic包下。该包提供了许多Java原始/引用类型的映射类。\n如AtomicInteger、AtomicLong、AtomicBoolean，这些类可以通过一种“无锁算法”，线程安全的操作Integer、Long、Boolean等原始类型。\n\n包中类分为五种：\n\n基本类型：\n    AtomicBoolean：布尔型原子类\n    AtomicInteger：整型原子类\n    AtomicLong：长整型原子类\n\n数组：\n    AtomicIntegerArray：整形数组原子类\n    AtomicLongArray：长整形数组原子类\n    AtomicReferenceArray：引用类型数组原子类\n\n引用类型：\n    AtomicReference：引用类型原子类\n    AtomicStampedRerence：原子更新引用类型里的字段原子类\n    AtomicMarkableReference：原子更新带有标记位的引用类型\n\n对象的属性：\n    AtomicIntegerFieldUpdater：原子更新整形字段的更新器\n    AtomicLongFieldUpdater：原子更新长整形字段的更新器\n    AtomicReferenceFieldUpdater：原子更新带有版本号的引用类型。\n        该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题\n    　　本文不会详细介绍这几种类型的api及使用，只是列出Atomic的实现原理，及比较重点的类\n\n基本类型原子类：\n\n    AtomicBoolean：布尔型原子类\n    AtomicInteger：整型原子类\n    AtomicLong：长整型原子类\n    这几个类的共同特点是都提供单个变量的原子方式访问和更新功能。以AtomicLong为代表，进行介绍。\n</code></pre>\n<h3 id=\"2-实例解析\"><a href=\"#2-实例解析\" class=\"headerlink\" title=\"2.实例解析\"></a>2.实例解析</h3><ul>\n<li>例子：我们使用 AtomicLong 来演示之前的线程不安全的</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 并发测试代码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ThreadSafe</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicExample2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//请求总数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> clientTotal = <span class=\"number\">5000</span>;</span><br><span class=\"line\">    <span class=\"comment\">//同时并发执行的线程数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> threadTotal = <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"comment\">//变成了AtomicLong类型</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AtomicLong count = <span class=\"keyword\">new</span> AtomicLong(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建线程池</span></span><br><span class=\"line\">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">        <span class=\"comment\">//定义信号量</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(threadTotal);</span><br><span class=\"line\">        <span class=\"comment\">//定义计数器 闭锁</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(clientTotal);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class=\"line\">            executorService.execute(() -&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    semaphore.acquire();</span><br><span class=\"line\">                    add();</span><br><span class=\"line\">                    <span class=\"comment\">//释放</span></span><br><span class=\"line\">                    semaphore.release();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;exception:&quot;</span>+e.getMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                countDownLatch.countDown();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        countDownLatch.await();</span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;count:&#123;&#125;&quot;</span>+count.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        count.incrementAndGet();<span class=\"comment\">//先做增加再获取当前值</span></span><br><span class=\"line\">        <span class=\"comment\">//count.getAndIncrement();先获取当前值再做增加</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>解析</p>\n<pre><code>  当使用AtomicLong去执行自增操作时，得出的最终结果count就是5000。数次运行情况下结果一致。不会带来线程不安全的情况。\n  那我们来看看AtomicLong是如何保证线程安全的呢。\n\n  我们看看incrementAndGet方法，看看AtomicLong如何实现单个变量的原子方式更新。Unsafe是CAS的核心类，AtomicLong是基于CAS实现的。\n  此处就介绍AtomicLong，AtomicBoolean、AtomicInteger、AtomicReference与之相似，就不一一介绍\n</code></pre>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> <span class=\"title\">incrementAndGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.getAndAddLong(<span class=\"keyword\">this</span>, valueOffset, <span class=\"number\">1L</span>) + <span class=\"number\">1L</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>incrementAndGet 方法实际上是调用 Unsafe 类的方法来执行操作，我们进入 Unsafe 里看看具体的 getAndAddLong 是如何实现原子方式更新的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> <span class=\"title\">getAndAddLong</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">long</span> var4)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> var6;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        var6 = <span class=\"keyword\">this</span>.getLongVolatile(var1, var2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(!<span class=\"keyword\">this</span>.compareAndSwapLong(var1, var2, var6, var6 + var4));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> var6;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<pre><code> 我们来解析一下这个方法，var1为当前调用这个方法的对象，var2是当前值，假如执行的2+1=3的操作，那么var4就是1。\n var6是调用底层方法获得底层当前值。假设没有其他线程来处理count，那么var6就是var2。此处使用了一个do while循环。\n compareAndSwapLong方法是native的，代表是java底层的方法。也是遵循CAS算法的api。compareAndSwap，比较并交换。\n 在getAndAddLong的while判断中，该方法实现的是：对于var1这个对象，如果当前值var2和底层值var6相同的话，就更新为后面的操作结果值。\n 当我们执行更新结果时，可能被其他线程修改，因此此处判断当前值与期望值相同时才允许更新。否则重新取出当前的底层值，和当前count的值再做比较。\n 保证当前值与底层值完全一致时才进行结果更新，以此保证线程安全。这也是Atomic使用CAS原理实现的机制。底层值是主内存中的值，当前值是源自于工作内存。\n 由于该方法的逻辑是采用自旋的方式不断更新目标值，直到更新成功，在并发量较低的环境下，线程冲突较少，自旋次数不会很多。\n 但是在高并发情况下，N个线程同时进行自旋操作，会出现大量失败并不断自旋的情况，此时的AtomicLong的自旋会成为瓶颈，\n 因此为了解决高并发环境下的AtomicLong的自旋瓶颈问题，引入了LongAdder。\n</code></pre>\n<p><strong>LongAdder：</strong></p>\n<p>AtomicLong 中有个内部变量 value 保存着实际的 long 值，所有的操作都是针对该变量进行。也就是说，高并发环境下，value 变量其实是一个热点，也就是 N 个线程竞争一个热点。LongAdder 的基本思路就是分散热点，将 value 值分散到一个数组中，不同线程会命中到数组的不同槽中，各个线程只对自己槽中的那个值进行 CAS 操作，这样热点就被分散了，冲突的概率就小很多。如果要获取真正的 long 值，只要将各个槽中的变量值累加返回。</p>\n<p>低并发、一般的业务场景下 AtomicLong 是足够了。如果并发量很多，存在大量写多读少的情况，那 LongAdder 可能更合适。</p>\n<p><strong>AtomicBoolean：</strong></p>\n<p>针对该类我们主要研究 compareAndSet 函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(<span class=\"keyword\">boolean</span> expect, <span class=\"keyword\">boolean</span> update)</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> e = expect ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> u = update ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, valueOffset, e, u);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该函数实现的功能是高并发情况下只有一个线程能访问这个属性值，常用于初始化一次的功能中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicBoolean initialized = <span class=\"keyword\">new</span> AtomicBoolean(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( initialized.compareAndSet(<span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>) )<span class=\"comment\">//如果为false，更新为true</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化操作代码....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>各原子类api及使用demo，可以参考：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/master/Java%E7%9B%B8%E5%85%B3/Multithread/Atomic.md\">https://github.com/Snailclimb/JavaGuide/blob/master/Java%E7%9B%B8%E5%85%B3/Multithread/Atomic.md</a></p>\n<p>主要是掌握CAS算法的设计思想，了解原子类如何保证原子操作。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.cnblogs.com/zhangbLearn/p/9922790.html\">https://www.cnblogs.com/zhangbLearn/p/9922790.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><pre><code>早期的JDK版本中，如果要并发的对Integer、Long、Double之类的Java原始类型或引用类型进行操作，一般都需要通过锁来控制并发，\n以防止数据不一致。JUC-Atomic原子类位于java.util.concurrent.atomic包下。该包提供了许多Java原始/引用类型的映射类。\n如AtomicInteger、AtomicLong、AtomicBoolean，这些类可以通过一种“无锁算法”，线程安全的操作Integer、Long、Boolean等原始类型。\n\n包中类分为五种：\n\n基本类型：\n    AtomicBoolean：布尔型原子类\n    AtomicInteger：整型原子类\n    AtomicLong：长整型原子类\n\n数组：\n    AtomicIntegerArray：整形数组原子类\n    AtomicLongArray：长整形数组原子类\n    AtomicReferenceArray：引用类型数组原子类\n\n引用类型：\n    AtomicReference：引用类型原子类\n    AtomicStampedRerence：原子更新引用类型里的字段原子类\n    AtomicMarkableReference：原子更新带有标记位的引用类型\n\n对象的属性：\n    AtomicIntegerFieldUpdater：原子更新整形字段的更新器\n    AtomicLongFieldUpdater：原子更新长整形字段的更新器\n    AtomicReferenceFieldUpdater：原子更新带有版本号的引用类型。\n        该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题\n    　　本文不会详细介绍这几种类型的api及使用，只是列出Atomic的实现原理，及比较重点的类\n\n基本类型原子类：\n\n    AtomicBoolean：布尔型原子类\n    AtomicInteger：整型原子类\n    AtomicLong：长整型原子类\n    这几个类的共同特点是都提供单个变量的原子方式访问和更新功能。以AtomicLong为代表，进行介绍。\n</code></pre>\n<h3 id=\"2-实例解析\"><a href=\"#2-实例解析\" class=\"headerlink\" title=\"2.实例解析\"></a>2.实例解析</h3><ul>\n<li>例子：我们使用 AtomicLong 来演示之前的线程不安全的</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 并发测试代码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ThreadSafe</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicExample2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//请求总数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> clientTotal = <span class=\"number\">5000</span>;</span><br><span class=\"line\">    <span class=\"comment\">//同时并发执行的线程数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> threadTotal = <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"comment\">//变成了AtomicLong类型</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AtomicLong count = <span class=\"keyword\">new</span> AtomicLong(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建线程池</span></span><br><span class=\"line\">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\">        <span class=\"comment\">//定义信号量</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(threadTotal);</span><br><span class=\"line\">        <span class=\"comment\">//定义计数器 闭锁</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(clientTotal);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class=\"line\">            executorService.execute(() -&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    semaphore.acquire();</span><br><span class=\"line\">                    add();</span><br><span class=\"line\">                    <span class=\"comment\">//释放</span></span><br><span class=\"line\">                    semaphore.release();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;exception:&quot;</span>+e.getMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                countDownLatch.countDown();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        countDownLatch.await();</span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;count:&#123;&#125;&quot;</span>+count.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        count.incrementAndGet();<span class=\"comment\">//先做增加再获取当前值</span></span><br><span class=\"line\">        <span class=\"comment\">//count.getAndIncrement();先获取当前值再做增加</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>解析</p>\n<pre><code>  当使用AtomicLong去执行自增操作时，得出的最终结果count就是5000。数次运行情况下结果一致。不会带来线程不安全的情况。\n  那我们来看看AtomicLong是如何保证线程安全的呢。\n\n  我们看看incrementAndGet方法，看看AtomicLong如何实现单个变量的原子方式更新。Unsafe是CAS的核心类，AtomicLong是基于CAS实现的。\n  此处就介绍AtomicLong，AtomicBoolean、AtomicInteger、AtomicReference与之相似，就不一一介绍\n</code></pre>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> <span class=\"title\">incrementAndGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.getAndAddLong(<span class=\"keyword\">this</span>, valueOffset, <span class=\"number\">1L</span>) + <span class=\"number\">1L</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>incrementAndGet 方法实际上是调用 Unsafe 类的方法来执行操作，我们进入 Unsafe 里看看具体的 getAndAddLong 是如何实现原子方式更新的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> <span class=\"title\">getAndAddLong</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">long</span> var4)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> var6;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        var6 = <span class=\"keyword\">this</span>.getLongVolatile(var1, var2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(!<span class=\"keyword\">this</span>.compareAndSwapLong(var1, var2, var6, var6 + var4));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> var6;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<pre><code> 我们来解析一下这个方法，var1为当前调用这个方法的对象，var2是当前值，假如执行的2+1=3的操作，那么var4就是1。\n var6是调用底层方法获得底层当前值。假设没有其他线程来处理count，那么var6就是var2。此处使用了一个do while循环。\n compareAndSwapLong方法是native的，代表是java底层的方法。也是遵循CAS算法的api。compareAndSwap，比较并交换。\n 在getAndAddLong的while判断中，该方法实现的是：对于var1这个对象，如果当前值var2和底层值var6相同的话，就更新为后面的操作结果值。\n 当我们执行更新结果时，可能被其他线程修改，因此此处判断当前值与期望值相同时才允许更新。否则重新取出当前的底层值，和当前count的值再做比较。\n 保证当前值与底层值完全一致时才进行结果更新，以此保证线程安全。这也是Atomic使用CAS原理实现的机制。底层值是主内存中的值，当前值是源自于工作内存。\n 由于该方法的逻辑是采用自旋的方式不断更新目标值，直到更新成功，在并发量较低的环境下，线程冲突较少，自旋次数不会很多。\n 但是在高并发情况下，N个线程同时进行自旋操作，会出现大量失败并不断自旋的情况，此时的AtomicLong的自旋会成为瓶颈，\n 因此为了解决高并发环境下的AtomicLong的自旋瓶颈问题，引入了LongAdder。\n</code></pre>\n<p><strong>LongAdder：</strong></p>\n<p>AtomicLong 中有个内部变量 value 保存着实际的 long 值，所有的操作都是针对该变量进行。也就是说，高并发环境下，value 变量其实是一个热点，也就是 N 个线程竞争一个热点。LongAdder 的基本思路就是分散热点，将 value 值分散到一个数组中，不同线程会命中到数组的不同槽中，各个线程只对自己槽中的那个值进行 CAS 操作，这样热点就被分散了，冲突的概率就小很多。如果要获取真正的 long 值，只要将各个槽中的变量值累加返回。</p>\n<p>低并发、一般的业务场景下 AtomicLong 是足够了。如果并发量很多，存在大量写多读少的情况，那 LongAdder 可能更合适。</p>\n<p><strong>AtomicBoolean：</strong></p>\n<p>针对该类我们主要研究 compareAndSet 函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(<span class=\"keyword\">boolean</span> expect, <span class=\"keyword\">boolean</span> update)</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> e = expect ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> u = update ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, valueOffset, e, u);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该函数实现的功能是高并发情况下只有一个线程能访问这个属性值，常用于初始化一次的功能中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicBoolean initialized = <span class=\"keyword\">new</span> AtomicBoolean(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( initialized.compareAndSet(<span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>) )<span class=\"comment\">//如果为false，更新为true</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化操作代码....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>各原子类api及使用demo，可以参考：<a href=\"https://github.com/Snailclimb/JavaGuide/blob/master/Java%E7%9B%B8%E5%85%B3/Multithread/Atomic.md\">https://github.com/Snailclimb/JavaGuide/blob/master/Java%E7%9B%B8%E5%85%B3/Multithread/Atomic.md</a></p>\n<p>主要是掌握CAS算法的设计思想，了解原子类如何保证原子操作。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.cnblogs.com/zhangbLearn/p/9922790.html\">https://www.cnblogs.com/zhangbLearn/p/9922790.html</a></p>\n"},{"_content":"## 执行步骤\n\n### 1. ./build-clean.sh\n\n## dockerfile 解析\n\n```\nFROM java:8\n\nMAINTAINER wuhaotx<wuhaotx@feinno.com>\n\nRUN mv /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib\" >>/etc/apt/sources.list\n\nRUN cat /etc/apt/sources.list\n\n//更新源\nRUN apt-get update\n\n//安装vim\nRUN apt-get -y install vim\n\n//安装netstat等\nRUN apt-get -y install net-tools\n```\n","source":"_posts/devops/docker/docker-package/dockerfiles/armjava/readme.md","raw":"## 执行步骤\n\n### 1. ./build-clean.sh\n\n## dockerfile 解析\n\n```\nFROM java:8\n\nMAINTAINER wuhaotx<wuhaotx@feinno.com>\n\nRUN mv /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib\" >>/etc/apt/sources.list\n\nRUN cat /etc/apt/sources.list\n\n//更新源\nRUN apt-get update\n\n//安装vim\nRUN apt-get -y install vim\n\n//安装netstat等\nRUN apt-get -y install net-tools\n```\n","slug":"devops/docker/docker-package/dockerfiles/armjava/readme","published":1,"date":"2021-09-06T14:29:47.073Z","updated":"2021-09-06T14:29:47.073Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyje004qu6uk48ay5f4w","content":"<h2 id=\"执行步骤\"><a href=\"#执行步骤\" class=\"headerlink\" title=\"执行步骤\"></a>执行步骤</h2><h3 id=\"1-build-clean-sh\"><a href=\"#1-build-clean-sh\" class=\"headerlink\" title=\"1. ./build-clean.sh\"></a>1. ./build-clean.sh</h3><h2 id=\"dockerfile-解析\"><a href=\"#dockerfile-解析\" class=\"headerlink\" title=\"dockerfile 解析\"></a>dockerfile 解析</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java:8</span><br><span class=\"line\"></span><br><span class=\"line\">MAINTAINER wuhaotx&lt;wuhaotx@feinno.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">RUN cat /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">//更新源</span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">//安装vim</span><br><span class=\"line\">RUN apt-get -y install vim</span><br><span class=\"line\"></span><br><span class=\"line\">//安装netstat等</span><br><span class=\"line\">RUN apt-get -y install net-tools</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"执行步骤\"><a href=\"#执行步骤\" class=\"headerlink\" title=\"执行步骤\"></a>执行步骤</h2><h3 id=\"1-build-clean-sh\"><a href=\"#1-build-clean-sh\" class=\"headerlink\" title=\"1. ./build-clean.sh\"></a>1. ./build-clean.sh</h3><h2 id=\"dockerfile-解析\"><a href=\"#dockerfile-解析\" class=\"headerlink\" title=\"dockerfile 解析\"></a>dockerfile 解析</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java:8</span><br><span class=\"line\"></span><br><span class=\"line\">MAINTAINER wuhaotx&lt;wuhaotx@feinno.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">RUN cat /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">//更新源</span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">//安装vim</span><br><span class=\"line\">RUN apt-get -y install vim</span><br><span class=\"line\"></span><br><span class=\"line\">//安装netstat等</span><br><span class=\"line\">RUN apt-get -y install net-tools</span><br></pre></td></tr></table></figure>\n"},{"_content":"## FastDFS 集群 docker 构建\n\n### 1. docker 源\n\n    1.1.使用season/fastdfs作为FastDFS源!\n\n[season/fastdfs](https://hub.docker.com/r/season/fastdfs)\n\n    1.2.Run as shell启动client做相关测试和镜像文件查看\n        docker run -ti --name fdfs_sh --net=host season/fastdfs sh\n\n    1.3.源镜像中会执行entrypoint.sh脚本进行FastDFS初始化工作\n\n\n### dockerfile 解析\n\n```\n# FastDFS基础镜像\nFROM season/fastdfs\n\n# MAINTAINER\nMAINTAINER wuhaocn@126.com\nVOLUME [\"/tmp\"]\n\nRUN mv /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib\" >>/etc/apt/sources.list\n\nRUN mkdir -p /data/fastdfs/\n\nRUN mkdir -p /data/fastdfs/permfile\n\n//将自定义storage.conf拷贝到镜像中替换源镜像中/fdfs_conf/storage.conf\nCOPY conf/storage.conf /fdfs_conf/storage.conf\n\n//更新源\nRUN apt-get update\n\n//安装vim\nRUN apt-get -y install vim\n\n//安装netstat等\nRUN apt-get -y install net-tools\n```\n\n### 3.FastDFS 补充\n\n    3.1.通过storage.conf指定不同store_path\n    store_path0=/data/fastdfs\n    store_path1=/data/fastdfs/permfile\n\n    3.2.通过storage.conf设置tracker_server地址\n\n    3.3.fastdfs的storage server的状态查询\n        # FDFS_STORAGE_STATUS：INIT      :初始化，尚未得到同步已有数据的源服务器\n        # FDFS_STORAGE_STATUS：WAIT_SYNC :等待同步，已得到同步已有数据的源服务器\n        # FDFS_STORAGE_STATUS：SYNCING   :同步中\n        # FDFS_STORAGE_STATUS：DELETED   :已删除，该服务器从本组中摘除\n        # FDFS_STORAGE_STATUS：OFFLINE   :离线\n        # FDFS_STORAGE_STATUS：ONLINE    :在线，尚不能提供服务\n        # FDFS_STORAGE_STATUS：ACTIVE    :在线，可以提供服务\n        使用命令：[root@localhost bin]# fdfs_monitor /etc/fdfs/client.conf\n\n### 4.注意事项\n\n    4.1.生产环境FastDFS部署必须要进行数据挂载至硬盘\n    4.2.先部署tracker,再进行storage部署\n    4.3.检查状态\n    可以使用 fdfs_monitor 来查看一下storage的状态，看是否已经成功注册到了tracker\n    [......]#  fdfs_monitor /etc/fdfs/storage.conf\n    #也可以以下命令来监控服务器的状态：\n    [......]# fdfs_monitor /etc/fdfs/client.conf\n","source":"_posts/devops/docker/docker-package/dockerfiles/fastdfs/readme.md","raw":"## FastDFS 集群 docker 构建\n\n### 1. docker 源\n\n    1.1.使用season/fastdfs作为FastDFS源!\n\n[season/fastdfs](https://hub.docker.com/r/season/fastdfs)\n\n    1.2.Run as shell启动client做相关测试和镜像文件查看\n        docker run -ti --name fdfs_sh --net=host season/fastdfs sh\n\n    1.3.源镜像中会执行entrypoint.sh脚本进行FastDFS初始化工作\n\n\n### dockerfile 解析\n\n```\n# FastDFS基础镜像\nFROM season/fastdfs\n\n# MAINTAINER\nMAINTAINER wuhaocn@126.com\nVOLUME [\"/tmp\"]\n\nRUN mv /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib\" >>/etc/apt/sources.list\n\nRUN mkdir -p /data/fastdfs/\n\nRUN mkdir -p /data/fastdfs/permfile\n\n//将自定义storage.conf拷贝到镜像中替换源镜像中/fdfs_conf/storage.conf\nCOPY conf/storage.conf /fdfs_conf/storage.conf\n\n//更新源\nRUN apt-get update\n\n//安装vim\nRUN apt-get -y install vim\n\n//安装netstat等\nRUN apt-get -y install net-tools\n```\n\n### 3.FastDFS 补充\n\n    3.1.通过storage.conf指定不同store_path\n    store_path0=/data/fastdfs\n    store_path1=/data/fastdfs/permfile\n\n    3.2.通过storage.conf设置tracker_server地址\n\n    3.3.fastdfs的storage server的状态查询\n        # FDFS_STORAGE_STATUS：INIT      :初始化，尚未得到同步已有数据的源服务器\n        # FDFS_STORAGE_STATUS：WAIT_SYNC :等待同步，已得到同步已有数据的源服务器\n        # FDFS_STORAGE_STATUS：SYNCING   :同步中\n        # FDFS_STORAGE_STATUS：DELETED   :已删除，该服务器从本组中摘除\n        # FDFS_STORAGE_STATUS：OFFLINE   :离线\n        # FDFS_STORAGE_STATUS：ONLINE    :在线，尚不能提供服务\n        # FDFS_STORAGE_STATUS：ACTIVE    :在线，可以提供服务\n        使用命令：[root@localhost bin]# fdfs_monitor /etc/fdfs/client.conf\n\n### 4.注意事项\n\n    4.1.生产环境FastDFS部署必须要进行数据挂载至硬盘\n    4.2.先部署tracker,再进行storage部署\n    4.3.检查状态\n    可以使用 fdfs_monitor 来查看一下storage的状态，看是否已经成功注册到了tracker\n    [......]#  fdfs_monitor /etc/fdfs/storage.conf\n    #也可以以下命令来监控服务器的状态：\n    [......]# fdfs_monitor /etc/fdfs/client.conf\n","slug":"devops/docker/docker-package/dockerfiles/fastdfs/readme","published":1,"date":"2021-09-06T14:29:47.077Z","updated":"2021-09-06T14:29:47.077Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyje004tu6ukcbdygomu","content":"<h2 id=\"FastDFS-集群-docker-构建\"><a href=\"#FastDFS-集群-docker-构建\" class=\"headerlink\" title=\"FastDFS 集群 docker 构建\"></a>FastDFS 集群 docker 构建</h2><h3 id=\"1-docker-源\"><a href=\"#1-docker-源\" class=\"headerlink\" title=\"1. docker 源\"></a>1. docker 源</h3><pre><code>1.1.使用season/fastdfs作为FastDFS源!\n</code></pre>\n<p><a href=\"https://hub.docker.com/r/season/fastdfs\">season/fastdfs</a></p>\n<pre><code>1.2.Run as shell启动client做相关测试和镜像文件查看\n    docker run -ti --name fdfs_sh --net=host season/fastdfs sh\n\n1.3.源镜像中会执行entrypoint.sh脚本进行FastDFS初始化工作\n</code></pre>\n<h3 id=\"dockerfile-解析\"><a href=\"#dockerfile-解析\" class=\"headerlink\" title=\"dockerfile 解析\"></a>dockerfile 解析</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># FastDFS基础镜像</span><br><span class=\"line\">FROM season/fastdfs</span><br><span class=\"line\"></span><br><span class=\"line\"># MAINTAINER</span><br><span class=\"line\">MAINTAINER wuhaocn@126.com</span><br><span class=\"line\">VOLUME [&quot;/tmp&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir -p /data/fastdfs/</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir -p /data/fastdfs/permfile</span><br><span class=\"line\"></span><br><span class=\"line\">//将自定义storage.conf拷贝到镜像中替换源镜像中/fdfs_conf/storage.conf</span><br><span class=\"line\">COPY conf/storage.conf /fdfs_conf/storage.conf</span><br><span class=\"line\"></span><br><span class=\"line\">//更新源</span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">//安装vim</span><br><span class=\"line\">RUN apt-get -y install vim</span><br><span class=\"line\"></span><br><span class=\"line\">//安装netstat等</span><br><span class=\"line\">RUN apt-get -y install net-tools</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-FastDFS-补充\"><a href=\"#3-FastDFS-补充\" class=\"headerlink\" title=\"3.FastDFS 补充\"></a>3.FastDFS 补充</h3><pre><code>3.1.通过storage.conf指定不同store_path\nstore_path0=/data/fastdfs\nstore_path1=/data/fastdfs/permfile\n\n3.2.通过storage.conf设置tracker_server地址\n\n3.3.fastdfs的storage server的状态查询\n    # FDFS_STORAGE_STATUS：INIT      :初始化，尚未得到同步已有数据的源服务器\n    # FDFS_STORAGE_STATUS：WAIT_SYNC :等待同步，已得到同步已有数据的源服务器\n    # FDFS_STORAGE_STATUS：SYNCING   :同步中\n    # FDFS_STORAGE_STATUS：DELETED   :已删除，该服务器从本组中摘除\n    # FDFS_STORAGE_STATUS：OFFLINE   :离线\n    # FDFS_STORAGE_STATUS：ONLINE    :在线，尚不能提供服务\n    # FDFS_STORAGE_STATUS：ACTIVE    :在线，可以提供服务\n    使用命令：[root@localhost bin]# fdfs_monitor /etc/fdfs/client.conf\n</code></pre>\n<h3 id=\"4-注意事项\"><a href=\"#4-注意事项\" class=\"headerlink\" title=\"4.注意事项\"></a>4.注意事项</h3><pre><code>4.1.生产环境FastDFS部署必须要进行数据挂载至硬盘\n4.2.先部署tracker,再进行storage部署\n4.3.检查状态\n可以使用 fdfs_monitor 来查看一下storage的状态，看是否已经成功注册到了tracker\n[......]#  fdfs_monitor /etc/fdfs/storage.conf\n#也可以以下命令来监控服务器的状态：\n[......]# fdfs_monitor /etc/fdfs/client.conf\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"FastDFS-集群-docker-构建\"><a href=\"#FastDFS-集群-docker-构建\" class=\"headerlink\" title=\"FastDFS 集群 docker 构建\"></a>FastDFS 集群 docker 构建</h2><h3 id=\"1-docker-源\"><a href=\"#1-docker-源\" class=\"headerlink\" title=\"1. docker 源\"></a>1. docker 源</h3><pre><code>1.1.使用season/fastdfs作为FastDFS源!\n</code></pre>\n<p><a href=\"https://hub.docker.com/r/season/fastdfs\">season/fastdfs</a></p>\n<pre><code>1.2.Run as shell启动client做相关测试和镜像文件查看\n    docker run -ti --name fdfs_sh --net=host season/fastdfs sh\n\n1.3.源镜像中会执行entrypoint.sh脚本进行FastDFS初始化工作\n</code></pre>\n<h3 id=\"dockerfile-解析\"><a href=\"#dockerfile-解析\" class=\"headerlink\" title=\"dockerfile 解析\"></a>dockerfile 解析</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># FastDFS基础镜像</span><br><span class=\"line\">FROM season/fastdfs</span><br><span class=\"line\"></span><br><span class=\"line\"># MAINTAINER</span><br><span class=\"line\">MAINTAINER wuhaocn@126.com</span><br><span class=\"line\">VOLUME [&quot;/tmp&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir -p /data/fastdfs/</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir -p /data/fastdfs/permfile</span><br><span class=\"line\"></span><br><span class=\"line\">//将自定义storage.conf拷贝到镜像中替换源镜像中/fdfs_conf/storage.conf</span><br><span class=\"line\">COPY conf/storage.conf /fdfs_conf/storage.conf</span><br><span class=\"line\"></span><br><span class=\"line\">//更新源</span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">//安装vim</span><br><span class=\"line\">RUN apt-get -y install vim</span><br><span class=\"line\"></span><br><span class=\"line\">//安装netstat等</span><br><span class=\"line\">RUN apt-get -y install net-tools</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-FastDFS-补充\"><a href=\"#3-FastDFS-补充\" class=\"headerlink\" title=\"3.FastDFS 补充\"></a>3.FastDFS 补充</h3><pre><code>3.1.通过storage.conf指定不同store_path\nstore_path0=/data/fastdfs\nstore_path1=/data/fastdfs/permfile\n\n3.2.通过storage.conf设置tracker_server地址\n\n3.3.fastdfs的storage server的状态查询\n    # FDFS_STORAGE_STATUS：INIT      :初始化，尚未得到同步已有数据的源服务器\n    # FDFS_STORAGE_STATUS：WAIT_SYNC :等待同步，已得到同步已有数据的源服务器\n    # FDFS_STORAGE_STATUS：SYNCING   :同步中\n    # FDFS_STORAGE_STATUS：DELETED   :已删除，该服务器从本组中摘除\n    # FDFS_STORAGE_STATUS：OFFLINE   :离线\n    # FDFS_STORAGE_STATUS：ONLINE    :在线，尚不能提供服务\n    # FDFS_STORAGE_STATUS：ACTIVE    :在线，可以提供服务\n    使用命令：[root@localhost bin]# fdfs_monitor /etc/fdfs/client.conf\n</code></pre>\n<h3 id=\"4-注意事项\"><a href=\"#4-注意事项\" class=\"headerlink\" title=\"4.注意事项\"></a>4.注意事项</h3><pre><code>4.1.生产环境FastDFS部署必须要进行数据挂载至硬盘\n4.2.先部署tracker,再进行storage部署\n4.3.检查状态\n可以使用 fdfs_monitor 来查看一下storage的状态，看是否已经成功注册到了tracker\n[......]#  fdfs_monitor /etc/fdfs/storage.conf\n#也可以以下命令来监控服务器的状态：\n[......]# fdfs_monitor /etc/fdfs/client.conf\n</code></pre>\n"},{"_content":"## 执行步骤\n\n### 1. ./build-clean.sh\n\n## dockerfile 解析\n\n```\nFROM java:8\n\nMAINTAINER wuhaotx<wuhaotx@feinno.com>\n\nRUN mv /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib\" >>/etc/apt/sources.list\n\nRUN cat /etc/apt/sources.list\n\n//更新源\nRUN apt-get update\n\n//安装vim\nRUN apt-get -y install vim\n\n//安装netstat等\nRUN apt-get -y install net-tools\n```\n","source":"_posts/devops/docker/docker-package/dockerfiles/java/readme.md","raw":"## 执行步骤\n\n### 1. ./build-clean.sh\n\n## dockerfile 解析\n\n```\nFROM java:8\n\nMAINTAINER wuhaotx<wuhaotx@feinno.com>\n\nRUN mv /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n    echo \"deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib\" >>/etc/apt/sources.list\n\nRUN cat /etc/apt/sources.list\n\n//更新源\nRUN apt-get update\n\n//安装vim\nRUN apt-get -y install vim\n\n//安装netstat等\nRUN apt-get -y install net-tools\n```\n","slug":"devops/docker/docker-package/dockerfiles/java/readme","published":1,"date":"2021-09-06T14:29:47.079Z","updated":"2021-09-06T14:29:47.079Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyjf004wu6uk4vbda3z1","content":"<h2 id=\"执行步骤\"><a href=\"#执行步骤\" class=\"headerlink\" title=\"执行步骤\"></a>执行步骤</h2><h3 id=\"1-build-clean-sh\"><a href=\"#1-build-clean-sh\" class=\"headerlink\" title=\"1. ./build-clean.sh\"></a>1. ./build-clean.sh</h3><h2 id=\"dockerfile-解析\"><a href=\"#dockerfile-解析\" class=\"headerlink\" title=\"dockerfile 解析\"></a>dockerfile 解析</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java:8</span><br><span class=\"line\"></span><br><span class=\"line\">MAINTAINER wuhaotx&lt;wuhaotx@feinno.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">RUN cat /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">//更新源</span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">//安装vim</span><br><span class=\"line\">RUN apt-get -y install vim</span><br><span class=\"line\"></span><br><span class=\"line\">//安装netstat等</span><br><span class=\"line\">RUN apt-get -y install net-tools</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"执行步骤\"><a href=\"#执行步骤\" class=\"headerlink\" title=\"执行步骤\"></a>执行步骤</h2><h3 id=\"1-build-clean-sh\"><a href=\"#1-build-clean-sh\" class=\"headerlink\" title=\"1. ./build-clean.sh\"></a>1. ./build-clean.sh</h3><h2 id=\"dockerfile-解析\"><a href=\"#dockerfile-解析\" class=\"headerlink\" title=\"dockerfile 解析\"></a>dockerfile 解析</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java:8</span><br><span class=\"line\"></span><br><span class=\"line\">MAINTAINER wuhaotx&lt;wuhaotx@feinno.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">RUN cat /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">//更新源</span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">//安装vim</span><br><span class=\"line\">RUN apt-get -y install vim</span><br><span class=\"line\"></span><br><span class=\"line\">//安装netstat等</span><br><span class=\"line\">RUN apt-get -y install net-tools</span><br></pre></td></tr></table></figure>\n"},{"_content":"参照：\nhttps://github.com/openresty/docker-openresty/blob/1.9.15.1/centos/Dockerfile\n\n默认版本不支持 TCP，需要查看 git 源码\n\ncentos：为官方源码,二次打包\n\nnginx-fusion.conf\n","source":"_posts/devops/docker/docker-package/dockerfiles/nginx/readme.md","raw":"参照：\nhttps://github.com/openresty/docker-openresty/blob/1.9.15.1/centos/Dockerfile\n\n默认版本不支持 TCP，需要查看 git 源码\n\ncentos：为官方源码,二次打包\n\nnginx-fusion.conf\n","slug":"devops/docker/docker-package/dockerfiles/nginx/readme","published":1,"date":"2021-09-06T14:29:47.085Z","updated":"2021-09-06T14:29:47.085Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyjg004zu6ukbzn3f19z","content":"<p>参照：<br><a href=\"https://github.com/openresty/docker-openresty/blob/1.9.15.1/centos/Dockerfile\">https://github.com/openresty/docker-openresty/blob/1.9.15.1/centos/Dockerfile</a></p>\n<p>默认版本不支持 TCP，需要查看 git 源码</p>\n<p>centos：为官方源码,二次打包</p>\n<p>nginx-fusion.conf</p>\n","site":{"data":{}},"excerpt":"","more":"<p>参照：<br><a href=\"https://github.com/openresty/docker-openresty/blob/1.9.15.1/centos/Dockerfile\">https://github.com/openresty/docker-openresty/blob/1.9.15.1/centos/Dockerfile</a></p>\n<p>默认版本不支持 TCP，需要查看 git 源码</p>\n<p>centos：为官方源码,二次打包</p>\n<p>nginx-fusion.conf</p>\n"},{"_content":"## java app\n\njava im 应用\n","source":"_posts/devops/docker/docker-package/dockerfiles/ubuntu/im/readme.md","raw":"## java app\n\njava im 应用\n","slug":"devops/docker/docker-package/dockerfiles/ubuntu/im/readme","published":1,"date":"2021-09-06T14:29:47.092Z","updated":"2021-09-06T14:29:47.092Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyjg0051u6uk3r70erly","content":"<h2 id=\"java-app\"><a href=\"#java-app\" class=\"headerlink\" title=\"java app\"></a>java app</h2><p>java im 应用</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"java-app\"><a href=\"#java-app\" class=\"headerlink\" title=\"java app\"></a>java app</h2><p>java im 应用</p>\n"},{"_content":"## java app\n\njava web 应用\n","source":"_posts/devops/docker/docker-package/dockerfiles/ubuntu/web/readme.md","raw":"## java app\n\njava web 应用\n","slug":"devops/docker/docker-package/dockerfiles/ubuntu/web/readme","published":1,"date":"2021-09-06T14:29:47.093Z","updated":"2021-09-06T14:29:47.094Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cktk7qyjh0055u6uk393e5qjf","content":"<h2 id=\"java-app\"><a href=\"#java-app\" class=\"headerlink\" title=\"java app\"></a>java app</h2><p>java web 应用</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"java-app\"><a href=\"#java-app\" class=\"headerlink\" title=\"java app\"></a>java app</h2><p>java web 应用</p>\n"},{"title":"brew常用设置","_content":"\n## 1.brew更新or安装慢\n\n* 更新ustc.edu源并设置强制更新\n\n```\n\ncd $(brew --repo)\n \ngit remote set-url origin https://mirrors.ustc.edu.cn/brew.git\n \ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\n \ngit remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\n\nexport HOMEBREW_FORCE_BREWED_GIT=\"1\"\n\n```\n* 更新github源并设置强制更新\n\n```\n建议配置ssh快一些\ncd $(brew --repo)\ngit clone \ngit remote set-url origin git@github.com:Homebrew/brew.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin git@github.com:Homebrew/homebrew-core.git\nexport HOMEBREW_FORCE_BREWED_GIT=\"1\"\n```\n\n\n## 2.brew重启安装\n\n```\n1、卸载\n\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\"\n2、安装【卸载与安装差别只有最后的install和undeinstall】\n\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n3、更新\n\nbrew update\n \n\n遇到问题：\n\n1、raw.githubusercontent.com 链接不到或者访问太慢\n\n解决：绑定host\n\n199.232.28.133 raw.githubusercontent.com\n有host修改软件，直接在软件修改即可\n\n没有的按照如下方式修改追加\n\nsudo vim /etc/hosts\n在hosts文件最后追加如下，保存退出即可：\n\n199.232.28.133 raw.githubusercontent.com\n```\n\n## 3.常见命令\n\n```\n安装软件：brew install 软件名，例：brew install wget\n\n搜索软件：brew search 软件名，例：brew search wget\n\n卸载软件：brew uninstall 软件名，例：brew uninstall wget\n\n更新所有软件：brew update\n\n更新具体软件：brew upgrade 软件名 ，例：brew upgrade git\n\n显示已安装软件：brew list\n\n查看软件信息：brew info／home 软件名 ，例：brew info git ／ brew home git\n\n显示包依赖：brew reps\n\n显示安装的服务：brew services list\n\n安装服务启动、停止、重启：brew services start/stop/restart serverName\n\n```\n\n## 全部替换国内源\n\n```\n/bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"\n```","source":"_posts/tool/mac/brew常用设置.md","raw":"---\ntitle: brew常用设置\n\ncategories:\n- devops\n\ntag:\n- brew\n---\n\n## 1.brew更新or安装慢\n\n* 更新ustc.edu源并设置强制更新\n\n```\n\ncd $(brew --repo)\n \ngit remote set-url origin https://mirrors.ustc.edu.cn/brew.git\n \ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\n \ngit remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\n\nexport HOMEBREW_FORCE_BREWED_GIT=\"1\"\n\n```\n* 更新github源并设置强制更新\n\n```\n建议配置ssh快一些\ncd $(brew --repo)\ngit clone \ngit remote set-url origin git@github.com:Homebrew/brew.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin git@github.com:Homebrew/homebrew-core.git\nexport HOMEBREW_FORCE_BREWED_GIT=\"1\"\n```\n\n\n## 2.brew重启安装\n\n```\n1、卸载\n\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\"\n2、安装【卸载与安装差别只有最后的install和undeinstall】\n\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n3、更新\n\nbrew update\n \n\n遇到问题：\n\n1、raw.githubusercontent.com 链接不到或者访问太慢\n\n解决：绑定host\n\n199.232.28.133 raw.githubusercontent.com\n有host修改软件，直接在软件修改即可\n\n没有的按照如下方式修改追加\n\nsudo vim /etc/hosts\n在hosts文件最后追加如下，保存退出即可：\n\n199.232.28.133 raw.githubusercontent.com\n```\n\n## 3.常见命令\n\n```\n安装软件：brew install 软件名，例：brew install wget\n\n搜索软件：brew search 软件名，例：brew search wget\n\n卸载软件：brew uninstall 软件名，例：brew uninstall wget\n\n更新所有软件：brew update\n\n更新具体软件：brew upgrade 软件名 ，例：brew upgrade git\n\n显示已安装软件：brew list\n\n查看软件信息：brew info／home 软件名 ，例：brew info git ／ brew home git\n\n显示包依赖：brew reps\n\n显示安装的服务：brew services list\n\n安装服务启动、停止、重启：brew services start/stop/restart serverName\n\n```\n\n## 全部替换国内源\n\n```\n/bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"\n```","slug":"tool/mac/brew常用设置","published":1,"date":"2021-10-15T06:08:00.262Z","updated":"2021-10-15T06:30:00.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuw4nge30000p7gkc7u6giq7","content":"<h2 id=\"1-brew更新or安装慢\"><a href=\"#1-brew更新or安装慢\" class=\"headerlink\" title=\"1.brew更新or安装慢\"></a>1.brew更新or安装慢</h2><ul>\n<li>更新ustc.edu源并设置强制更新</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cd $(brew --repo)</span><br><span class=\"line\"> </span><br><span class=\"line\">git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class=\"line\"> </span><br><span class=\"line\">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class=\"line\"></span><br><span class=\"line\">export HOMEBREW_FORCE_BREWED_GIT=&quot;1&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>更新github源并设置强制更新</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">建议配置ssh快一些</span><br><span class=\"line\">cd $(brew --repo)</span><br><span class=\"line\">git clone </span><br><span class=\"line\">git remote set-url origin git@github.com:Homebrew/brew.git</span><br><span class=\"line\">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class=\"line\">git remote set-url origin git@github.com:Homebrew/homebrew-core.git</span><br><span class=\"line\">export HOMEBREW_FORCE_BREWED_GIT=&quot;1&quot;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-brew重启安装\"><a href=\"#2-brew重启安装\" class=\"headerlink\" title=\"2.brew重启安装\"></a>2.brew重启安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、卸载</span><br><span class=\"line\"></span><br><span class=\"line\">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</span><br><span class=\"line\">2、安装【卸载与安装差别只有最后的install和undeinstall】</span><br><span class=\"line\"></span><br><span class=\"line\">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br><span class=\"line\">3、更新</span><br><span class=\"line\"></span><br><span class=\"line\">brew update</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">遇到问题：</span><br><span class=\"line\"></span><br><span class=\"line\">1、raw.githubusercontent.com 链接不到或者访问太慢</span><br><span class=\"line\"></span><br><span class=\"line\">解决：绑定host</span><br><span class=\"line\"></span><br><span class=\"line\">199.232.28.133 raw.githubusercontent.com</span><br><span class=\"line\">有host修改软件，直接在软件修改即可</span><br><span class=\"line\"></span><br><span class=\"line\">没有的按照如下方式修改追加</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vim /etc/hosts</span><br><span class=\"line\">在hosts文件最后追加如下，保存退出即可：</span><br><span class=\"line\"></span><br><span class=\"line\">199.232.28.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-常见命令\"><a href=\"#3-常见命令\" class=\"headerlink\" title=\"3.常见命令\"></a>3.常见命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装软件：brew install 软件名，例：brew install wget</span><br><span class=\"line\"></span><br><span class=\"line\">搜索软件：brew search 软件名，例：brew search wget</span><br><span class=\"line\"></span><br><span class=\"line\">卸载软件：brew uninstall 软件名，例：brew uninstall wget</span><br><span class=\"line\"></span><br><span class=\"line\">更新所有软件：brew update</span><br><span class=\"line\"></span><br><span class=\"line\">更新具体软件：brew upgrade 软件名 ，例：brew upgrade git</span><br><span class=\"line\"></span><br><span class=\"line\">显示已安装软件：brew list</span><br><span class=\"line\"></span><br><span class=\"line\">查看软件信息：brew info／home 软件名 ，例：brew info git ／ brew home git</span><br><span class=\"line\"></span><br><span class=\"line\">显示包依赖：brew reps</span><br><span class=\"line\"></span><br><span class=\"line\">显示安装的服务：brew services list</span><br><span class=\"line\"></span><br><span class=\"line\">安装服务启动、停止、重启：brew services start/stop/restart serverName</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全部替换国内源\"><a href=\"#全部替换国内源\" class=\"headerlink\" title=\"全部替换国内源\"></a>全部替换国内源</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-brew更新or安装慢\"><a href=\"#1-brew更新or安装慢\" class=\"headerlink\" title=\"1.brew更新or安装慢\"></a>1.brew更新or安装慢</h2><ul>\n<li>更新ustc.edu源并设置强制更新</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cd $(brew --repo)</span><br><span class=\"line\"> </span><br><span class=\"line\">git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class=\"line\"> </span><br><span class=\"line\">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class=\"line\"></span><br><span class=\"line\">export HOMEBREW_FORCE_BREWED_GIT=&quot;1&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>更新github源并设置强制更新</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">建议配置ssh快一些</span><br><span class=\"line\">cd $(brew --repo)</span><br><span class=\"line\">git clone </span><br><span class=\"line\">git remote set-url origin git@github.com:Homebrew/brew.git</span><br><span class=\"line\">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class=\"line\">git remote set-url origin git@github.com:Homebrew/homebrew-core.git</span><br><span class=\"line\">export HOMEBREW_FORCE_BREWED_GIT=&quot;1&quot;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-brew重启安装\"><a href=\"#2-brew重启安装\" class=\"headerlink\" title=\"2.brew重启安装\"></a>2.brew重启安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、卸载</span><br><span class=\"line\"></span><br><span class=\"line\">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</span><br><span class=\"line\">2、安装【卸载与安装差别只有最后的install和undeinstall】</span><br><span class=\"line\"></span><br><span class=\"line\">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br><span class=\"line\">3、更新</span><br><span class=\"line\"></span><br><span class=\"line\">brew update</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">遇到问题：</span><br><span class=\"line\"></span><br><span class=\"line\">1、raw.githubusercontent.com 链接不到或者访问太慢</span><br><span class=\"line\"></span><br><span class=\"line\">解决：绑定host</span><br><span class=\"line\"></span><br><span class=\"line\">199.232.28.133 raw.githubusercontent.com</span><br><span class=\"line\">有host修改软件，直接在软件修改即可</span><br><span class=\"line\"></span><br><span class=\"line\">没有的按照如下方式修改追加</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vim /etc/hosts</span><br><span class=\"line\">在hosts文件最后追加如下，保存退出即可：</span><br><span class=\"line\"></span><br><span class=\"line\">199.232.28.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-常见命令\"><a href=\"#3-常见命令\" class=\"headerlink\" title=\"3.常见命令\"></a>3.常见命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装软件：brew install 软件名，例：brew install wget</span><br><span class=\"line\"></span><br><span class=\"line\">搜索软件：brew search 软件名，例：brew search wget</span><br><span class=\"line\"></span><br><span class=\"line\">卸载软件：brew uninstall 软件名，例：brew uninstall wget</span><br><span class=\"line\"></span><br><span class=\"line\">更新所有软件：brew update</span><br><span class=\"line\"></span><br><span class=\"line\">更新具体软件：brew upgrade 软件名 ，例：brew upgrade git</span><br><span class=\"line\"></span><br><span class=\"line\">显示已安装软件：brew list</span><br><span class=\"line\"></span><br><span class=\"line\">查看软件信息：brew info／home 软件名 ，例：brew info git ／ brew home git</span><br><span class=\"line\"></span><br><span class=\"line\">显示包依赖：brew reps</span><br><span class=\"line\"></span><br><span class=\"line\">显示安装的服务：brew services list</span><br><span class=\"line\"></span><br><span class=\"line\">安装服务启动、停止、重启：brew services start/stop/restart serverName</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全部替换国内源\"><a href=\"#全部替换国内源\" class=\"headerlink\" title=\"全部替换国内源\"></a>全部替换国内源</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>"},{"title":"docker常用命令","_content":"## 组合命令\n* 模糊删除镜像\n```\ndocker rmi --force `docker images | grep java | awk '{print $3}'`\n```\n\n* 删除停止容器\n\n```\ndocker rm `docker ps -a -q`\n```\n\n* 停止/启动容器\n\n```\ndocker start $(docker ps -a | awk '{ print $1}' | tail -n +2)\ndocker stop $(docker ps -a  | awk '{ print $1}' | tail -n +2)\n```\n\n* 提交容器\n\n```\n\ndocker commit 81a82e9b5ac2 wuhaocn/java-im:8\n\ndocker tag wuhaocn/java-im:8 wuhaocn/java-im:8\n\ndocker push wuhaocn/java-im:8\n\n```\n\n## 常用命令\n\n### 容器生命周期管理\n\n* run\n\n```\n运行容器\ndocker run -p 80:80 -v /data:/data -d nginx:latest \n```\n\n* start/stop/restart\n\n```\n\n启动/停止/重启容器\ndocker start myrunoob\n\n```\n\n* kill\n\n```\n\n杀死容器\ndocker kill -s KILL myrunoob\n\n```\n* rm\n\n```\n\n删除容器\ndocker rm -f myrunoob1 myrunoob2\n\n```\n\n* pause/unpause\n\n```\n暂停数据库容器myrunoob提供服务\ndocker pause myrunoob\n```\n\n* create\n\n```\n使用docker镜像nginx:latest创建一个容器,并将容器命名为myrunoob\ndocker create  --name myrunoob  nginx:latest \n```\n\n* exec\n\n```\n通过 exec 命令对指定的容器执行 bash:\ndocker exec -it 9df70f9a0714 /bin/bash\n```\n### 容器操作\n\n* ps\n\n```\n列出容器\nrunoob@runoob:~$ docker ps\nCONTAINER ID   IMAGE          COMMAND                ...  PORTS                    NAMES\n09b93464c2f7   nginx:latest   \"nginx -g 'daemon off\" ...  80/tcp, 443/tcp          myrunoob\n\n```\n* inspect\n\n```\n获取镜像mysql:5.6的元信息。\ndocker inspect mysql:5.6\n```\n\n* top\n```\n查看容器mymysql的进程信息。\ndocker top mymysql\n查看所有运行容器的进程信息。\nfor i in  `docker ps |grep Up|awk '{print $1}'`;do echo \\ &&docker top $i; done\n```\n\n* attach\n```\n容器mynginx将访问日志指到标准输出，连接到容器查看访问信息。\ndocker attach --sig-proxy=false mynginx\n```\n\n* events\n\n```\n显示docker 2016年7月1日后的所有事件。\ndocker events  --since=\"1467302400\"\n显示docker 镜像为mysql:5.6 2016年7月1日后的相关事件。\ndocker events -f \"image\"=\"mysql:5.6\" --since=\"1467302400\" \n```\n\n* logs\n\n```\n跟踪查看容器mynginx的日志输出。\ndocker logs -f mynginx\n查看容器mynginx从2016年7月1日后的最新10条日志。\ndocker logs --since=\"2016-07-01\" --tail=10 mynginx\n\n```\n* wait\n\n```\ndocker wait : 阻塞运行直到容器停止，然后打印出它的退出代码。\n\ndocker wait CONTAINER\n\n```\n\n* export\n\n```\n将id为a404c6c174a2的容器按日期保存为tar文件。\n\nrunoob@runoob:~$ docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2\nrunoob@runoob:~$ ls mysql-`date +%Y%m%d`.tar\nmysql-20160711.tar\n```\n\n* port\n\n```\n查看容器mynginx的端口映射情况。\n\ndocker port mymysql\n3306/tcp -> 0.0.0.0:3306\n\n```\n### 容器rootfs命令\n* commit\n```\n将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。\ndocker commit -a \"runoob.com\" -m \"my apache\" a404c6c174a2  mymysql:v1\n简化参考\ndocker commit faa474c052c6 java-sctp:8\n```\n\n* cp\n\n```\n将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。\n\ndocker cp /www/runoob 96f7f14e99ab:/www/\n```\n\n* diff\n\n```\n查看容器mymysql的文件结构更改。\n\nrunoob@runoob:~$ docker diff mymysql\nA /logs\nA /mysql_data\nC /run\nC /run/mysqld\nA /run/mysqld/mysqld.pid\nA /run/mysqld/mysqld.sock\nC /tmp\n\n```\n### 镜像仓库\n\n* login\n```\n登陆到Docker Hub\n\ndocker login -u 用户名 -p 密码\n```\n\n* pull\n```\n从Docker Hub下载java最新版镜像。\n\ndocker pull java\n```\n\n* push\n\n```\n上传本地镜像myapache:v1到镜像仓库中。\n\ndocker push myapache:v1\n```\n\n* search\n\n```\n从 Docker Hub 查找所有镜像名包含 java，并且收藏数大于 10 的镜像\n\ndocker search -f stars=10 java\n\n```\n\n### 本地镜像管理\n\n* images\n```\n查看本地镜像列表。\n\nrunoob@runoob:~$ docker images\nREPOSITORY              TAG                 IMAGE ID            CREATED             SIZE\nmymysql                 v1                  37af1236adef        5 minutes ago       329 MB\n```\n\n* rmi\n\n```\n强制删除本地镜像 runoob/ubuntu:v4。    \n\ndocker rmi -f runoob/ubuntu:v4\nUntagged: runoob/ubuntu:v4\n```\n\n* tag\n\n```\n将镜像ubuntu:15.10标记为 runoob/ubuntu:v3 镜像。\n\ndocker tag ubuntu:15.10 runoob/ubuntu:v3\n```\n\n* build\n\n```\n使用当前目录的 Dockerfile 创建镜像，标签为 runoob/ubuntu:v1。\n\ndocker build -t runoob/ubuntu:v1 . \n```\n\n* history\n\n```\n查看本地镜像runoob/ubuntu:v3的创建历史。\n\nroot@runoob:~# docker history runoob/ubuntu:v3\nIMAGE             CREATED           CREATED BY                                      SIZE      COMMENT\n4e3b13c8a266      3 months ago      /bin/sh -c #(nop) CMD [\"/bin/bash\"]             0 B                 \n<missing>         3 months ago      /bin/sh -c sed -i 's/^#\\s*\\(deb.*universe\\)$/   1.863 kB            \n<missing>         3 months ago      /bin/sh -c set -xe   && echo '#!/bin/sh' > /u   701 B               \n<missing>         3 months ago      /bin/sh -c #(nop) ADD file:43cb048516c6b80f22   136.3 MB\n```\n\n* save\n\n```\n将镜像 runoob/ubuntu:v3 生成 my_ubuntu_v3.tar 文档\n\nrunoob@runoob:~$ docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3\nrunoob@runoob:~$ ll my_ubuntu_v3.tar\n-rw------- 1 runoob runoob 142102016 Jul 11 01:37 my_ubuntu_v3.ta\n\n```\n\n* load\n\n```\n导入镜像：\n$ docker load < busybox.tar.gz\nLoaded image: busybox:latest\n```\n\n* import\n\n```\nA:export/import 是根据容器来导出镜像（因此没有镜像的历史记录）而 save/load 操作的对象是镜像\nB:export/import 镜像的历史记录再导后无法进行回滚操作，而save/load镜像有完整的历史记录可以回滚\ndocker import : 从归档文件中创建镜像。\ndocker import  my_ubuntu_v3.tar runoob/ubuntu:v4  \n```\n\n### 系统信息\n\n* info\n\n```\n$ docker info\nContainers: 12\nImages: 41\nStorage Driver: aufs\n Root Dir: /var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 66\n Dirperm1 Supported: false\nExecution Driver: native-0.2\nLogging Driver: json-file\nKernel Version: 3.13.0-32-generic\nOperating System: Ubuntu 14.04.1 LTS\nCPUs: 1\nTotal Memory: 1.954 GiB\nName: iZ23mtq8bs1Z\nID: M5N4:K6WN:PUNC:73ZN:AONJ:AUHL:KSYH:2JPI:CH3K:O4MK:6OCX:5OYW\n```\n\n* version\n\n```\n显示 Docker 版本信息。\n\n$ docker version\nClient:\n Version:      1.8.2\n API version:  1.20\n Go version:   go1.4.2\n Git commit:   0a8c2e3\n Built:        Thu Sep 10 19:19:00 UTC 2015\n OS/Arch:      linux/amd64\nServer:\n Version:      1.8.2\n API version:  1.20\n Go version:   go1.4.2\n Git commit:   0a8c2e3\n Built:        Thu Sep 10 19:19:00 UTC 2015\n OS/Arch:      linux/amd64\n```","source":"_posts/devops/docker/docker常用命令.md","raw":"---\ntitle: docker常用命令\n\ncategories:\n- devops\n\ntag:\n- docker\n---\n## 组合命令\n* 模糊删除镜像\n```\ndocker rmi --force `docker images | grep java | awk '{print $3}'`\n```\n\n* 删除停止容器\n\n```\ndocker rm `docker ps -a -q`\n```\n\n* 停止/启动容器\n\n```\ndocker start $(docker ps -a | awk '{ print $1}' | tail -n +2)\ndocker stop $(docker ps -a  | awk '{ print $1}' | tail -n +2)\n```\n\n* 提交容器\n\n```\n\ndocker commit 81a82e9b5ac2 wuhaocn/java-im:8\n\ndocker tag wuhaocn/java-im:8 wuhaocn/java-im:8\n\ndocker push wuhaocn/java-im:8\n\n```\n\n## 常用命令\n\n### 容器生命周期管理\n\n* run\n\n```\n运行容器\ndocker run -p 80:80 -v /data:/data -d nginx:latest \n```\n\n* start/stop/restart\n\n```\n\n启动/停止/重启容器\ndocker start myrunoob\n\n```\n\n* kill\n\n```\n\n杀死容器\ndocker kill -s KILL myrunoob\n\n```\n* rm\n\n```\n\n删除容器\ndocker rm -f myrunoob1 myrunoob2\n\n```\n\n* pause/unpause\n\n```\n暂停数据库容器myrunoob提供服务\ndocker pause myrunoob\n```\n\n* create\n\n```\n使用docker镜像nginx:latest创建一个容器,并将容器命名为myrunoob\ndocker create  --name myrunoob  nginx:latest \n```\n\n* exec\n\n```\n通过 exec 命令对指定的容器执行 bash:\ndocker exec -it 9df70f9a0714 /bin/bash\n```\n### 容器操作\n\n* ps\n\n```\n列出容器\nrunoob@runoob:~$ docker ps\nCONTAINER ID   IMAGE          COMMAND                ...  PORTS                    NAMES\n09b93464c2f7   nginx:latest   \"nginx -g 'daemon off\" ...  80/tcp, 443/tcp          myrunoob\n\n```\n* inspect\n\n```\n获取镜像mysql:5.6的元信息。\ndocker inspect mysql:5.6\n```\n\n* top\n```\n查看容器mymysql的进程信息。\ndocker top mymysql\n查看所有运行容器的进程信息。\nfor i in  `docker ps |grep Up|awk '{print $1}'`;do echo \\ &&docker top $i; done\n```\n\n* attach\n```\n容器mynginx将访问日志指到标准输出，连接到容器查看访问信息。\ndocker attach --sig-proxy=false mynginx\n```\n\n* events\n\n```\n显示docker 2016年7月1日后的所有事件。\ndocker events  --since=\"1467302400\"\n显示docker 镜像为mysql:5.6 2016年7月1日后的相关事件。\ndocker events -f \"image\"=\"mysql:5.6\" --since=\"1467302400\" \n```\n\n* logs\n\n```\n跟踪查看容器mynginx的日志输出。\ndocker logs -f mynginx\n查看容器mynginx从2016年7月1日后的最新10条日志。\ndocker logs --since=\"2016-07-01\" --tail=10 mynginx\n\n```\n* wait\n\n```\ndocker wait : 阻塞运行直到容器停止，然后打印出它的退出代码。\n\ndocker wait CONTAINER\n\n```\n\n* export\n\n```\n将id为a404c6c174a2的容器按日期保存为tar文件。\n\nrunoob@runoob:~$ docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2\nrunoob@runoob:~$ ls mysql-`date +%Y%m%d`.tar\nmysql-20160711.tar\n```\n\n* port\n\n```\n查看容器mynginx的端口映射情况。\n\ndocker port mymysql\n3306/tcp -> 0.0.0.0:3306\n\n```\n### 容器rootfs命令\n* commit\n```\n将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。\ndocker commit -a \"runoob.com\" -m \"my apache\" a404c6c174a2  mymysql:v1\n简化参考\ndocker commit faa474c052c6 java-sctp:8\n```\n\n* cp\n\n```\n将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。\n\ndocker cp /www/runoob 96f7f14e99ab:/www/\n```\n\n* diff\n\n```\n查看容器mymysql的文件结构更改。\n\nrunoob@runoob:~$ docker diff mymysql\nA /logs\nA /mysql_data\nC /run\nC /run/mysqld\nA /run/mysqld/mysqld.pid\nA /run/mysqld/mysqld.sock\nC /tmp\n\n```\n### 镜像仓库\n\n* login\n```\n登陆到Docker Hub\n\ndocker login -u 用户名 -p 密码\n```\n\n* pull\n```\n从Docker Hub下载java最新版镜像。\n\ndocker pull java\n```\n\n* push\n\n```\n上传本地镜像myapache:v1到镜像仓库中。\n\ndocker push myapache:v1\n```\n\n* search\n\n```\n从 Docker Hub 查找所有镜像名包含 java，并且收藏数大于 10 的镜像\n\ndocker search -f stars=10 java\n\n```\n\n### 本地镜像管理\n\n* images\n```\n查看本地镜像列表。\n\nrunoob@runoob:~$ docker images\nREPOSITORY              TAG                 IMAGE ID            CREATED             SIZE\nmymysql                 v1                  37af1236adef        5 minutes ago       329 MB\n```\n\n* rmi\n\n```\n强制删除本地镜像 runoob/ubuntu:v4。    \n\ndocker rmi -f runoob/ubuntu:v4\nUntagged: runoob/ubuntu:v4\n```\n\n* tag\n\n```\n将镜像ubuntu:15.10标记为 runoob/ubuntu:v3 镜像。\n\ndocker tag ubuntu:15.10 runoob/ubuntu:v3\n```\n\n* build\n\n```\n使用当前目录的 Dockerfile 创建镜像，标签为 runoob/ubuntu:v1。\n\ndocker build -t runoob/ubuntu:v1 . \n```\n\n* history\n\n```\n查看本地镜像runoob/ubuntu:v3的创建历史。\n\nroot@runoob:~# docker history runoob/ubuntu:v3\nIMAGE             CREATED           CREATED BY                                      SIZE      COMMENT\n4e3b13c8a266      3 months ago      /bin/sh -c #(nop) CMD [\"/bin/bash\"]             0 B                 \n<missing>         3 months ago      /bin/sh -c sed -i 's/^#\\s*\\(deb.*universe\\)$/   1.863 kB            \n<missing>         3 months ago      /bin/sh -c set -xe   && echo '#!/bin/sh' > /u   701 B               \n<missing>         3 months ago      /bin/sh -c #(nop) ADD file:43cb048516c6b80f22   136.3 MB\n```\n\n* save\n\n```\n将镜像 runoob/ubuntu:v3 生成 my_ubuntu_v3.tar 文档\n\nrunoob@runoob:~$ docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3\nrunoob@runoob:~$ ll my_ubuntu_v3.tar\n-rw------- 1 runoob runoob 142102016 Jul 11 01:37 my_ubuntu_v3.ta\n\n```\n\n* load\n\n```\n导入镜像：\n$ docker load < busybox.tar.gz\nLoaded image: busybox:latest\n```\n\n* import\n\n```\nA:export/import 是根据容器来导出镜像（因此没有镜像的历史记录）而 save/load 操作的对象是镜像\nB:export/import 镜像的历史记录再导后无法进行回滚操作，而save/load镜像有完整的历史记录可以回滚\ndocker import : 从归档文件中创建镜像。\ndocker import  my_ubuntu_v3.tar runoob/ubuntu:v4  \n```\n\n### 系统信息\n\n* info\n\n```\n$ docker info\nContainers: 12\nImages: 41\nStorage Driver: aufs\n Root Dir: /var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 66\n Dirperm1 Supported: false\nExecution Driver: native-0.2\nLogging Driver: json-file\nKernel Version: 3.13.0-32-generic\nOperating System: Ubuntu 14.04.1 LTS\nCPUs: 1\nTotal Memory: 1.954 GiB\nName: iZ23mtq8bs1Z\nID: M5N4:K6WN:PUNC:73ZN:AONJ:AUHL:KSYH:2JPI:CH3K:O4MK:6OCX:5OYW\n```\n\n* version\n\n```\n显示 Docker 版本信息。\n\n$ docker version\nClient:\n Version:      1.8.2\n API version:  1.20\n Go version:   go1.4.2\n Git commit:   0a8c2e3\n Built:        Thu Sep 10 19:19:00 UTC 2015\n OS/Arch:      linux/amd64\nServer:\n Version:      1.8.2\n API version:  1.20\n Go version:   go1.4.2\n Git commit:   0a8c2e3\n Built:        Thu Sep 10 19:19:00 UTC 2015\n OS/Arch:      linux/amd64\n```","slug":"devops/docker/docker常用命令","published":1,"date":"2021-10-14T02:20:08.920Z","updated":"2021-10-18T04:11:47.492Z","_id":"ckuw4ngeg0001p7gk43s32otd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"组合命令\"><a href=\"#组合命令\" class=\"headerlink\" title=\"组合命令\"></a>组合命令</h2><ul>\n<li><p>模糊删除镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi --force `docker images | grep java | awk &#x27;&#123;print $3&#125;&#x27;`</span><br></pre></td></tr></table></figure></li>\n<li><p>删除停止容器</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm `docker ps -a -q`</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>停止/启动容器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start $(docker ps -a | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)</span><br><span class=\"line\">docker stop $(docker ps -a  | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>提交容器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker commit 81a82e9b5ac2 wuhaocn/java-im:8</span><br><span class=\"line\"></span><br><span class=\"line\">docker tag wuhaocn/java-im:8 wuhaocn/java-im:8</span><br><span class=\"line\"></span><br><span class=\"line\">docker push wuhaocn/java-im:8</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"容器生命周期管理\"><a href=\"#容器生命周期管理\" class=\"headerlink\" title=\"容器生命周期管理\"></a>容器生命周期管理</h3><ul>\n<li>run</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行容器</span><br><span class=\"line\">docker run -p 80:80 -v /data:/data -d nginx:latest </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>start/stop/restart</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">启动/停止/重启容器</span><br><span class=\"line\">docker start myrunoob</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>kill</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">杀死容器</span><br><span class=\"line\">docker kill -s KILL myrunoob</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>rm</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">删除容器</span><br><span class=\"line\">docker rm -f myrunoob1 myrunoob2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pause/unpause</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">暂停数据库容器myrunoob提供服务</span><br><span class=\"line\">docker pause myrunoob</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>create</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用docker镜像nginx:latest创建一个容器,并将容器命名为myrunoob</span><br><span class=\"line\">docker create  --name myrunoob  nginx:latest </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>exec</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过 exec 命令对指定的容器执行 bash:</span><br><span class=\"line\">docker exec -it 9df70f9a0714 /bin/bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器操作\"><a href=\"#容器操作\" class=\"headerlink\" title=\"容器操作\"></a>容器操作</h3><ul>\n<li>ps</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">列出容器</span><br><span class=\"line\">runoob@runoob:~$ docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE          COMMAND                ...  PORTS                    NAMES</span><br><span class=\"line\">09b93464c2f7   nginx:latest   &quot;nginx -g &#x27;daemon off&quot; ...  80/tcp, 443/tcp          myrunoob</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>inspect</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取镜像mysql:5.6的元信息。</span><br><span class=\"line\">docker inspect mysql:5.6</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>top</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看容器mymysql的进程信息。</span><br><span class=\"line\">docker top mymysql</span><br><span class=\"line\">查看所有运行容器的进程信息。</span><br><span class=\"line\">for i in  `docker ps |grep Up|awk &#x27;&#123;print $1&#125;&#x27;`;do echo \\ &amp;&amp;docker top $i; done</span><br></pre></td></tr></table></figure></li>\n<li><p>attach</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">容器mynginx将访问日志指到标准输出，连接到容器查看访问信息。</span><br><span class=\"line\">docker attach --sig-proxy=false mynginx</span><br></pre></td></tr></table></figure></li>\n<li><p>events</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">显示docker 2016年7月1日后的所有事件。</span><br><span class=\"line\">docker events  --since=&quot;1467302400&quot;</span><br><span class=\"line\">显示docker 镜像为mysql:5.6 2016年7月1日后的相关事件。</span><br><span class=\"line\">docker events -f &quot;image&quot;=&quot;mysql:5.6&quot; --since=&quot;1467302400&quot; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>logs</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">跟踪查看容器mynginx的日志输出。</span><br><span class=\"line\">docker logs -f mynginx</span><br><span class=\"line\">查看容器mynginx从2016年7月1日后的最新10条日志。</span><br><span class=\"line\">docker logs --since=&quot;2016-07-01&quot; --tail=10 mynginx</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>wait</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker wait : 阻塞运行直到容器停止，然后打印出它的退出代码。</span><br><span class=\"line\"></span><br><span class=\"line\">docker wait CONTAINER</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>export</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将id为a404c6c174a2的容器按日期保存为tar文件。</span><br><span class=\"line\"></span><br><span class=\"line\">runoob@runoob:~$ docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2</span><br><span class=\"line\">runoob@runoob:~$ ls mysql-`date +%Y%m%d`.tar</span><br><span class=\"line\">mysql-20160711.tar</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>port</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看容器mynginx的端口映射情况。</span><br><span class=\"line\"></span><br><span class=\"line\">docker port mymysql</span><br><span class=\"line\">3306/tcp -&gt; 0.0.0.0:3306</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"容器rootfs命令\"><a href=\"#容器rootfs命令\" class=\"headerlink\" title=\"容器rootfs命令\"></a>容器rootfs命令</h3><ul>\n<li><p>commit</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。</span><br><span class=\"line\">docker commit -a &quot;runoob.com&quot; -m &quot;my apache&quot; a404c6c174a2  mymysql:v1</span><br><span class=\"line\">简化参考</span><br><span class=\"line\">docker commit faa474c052c6 java-sctp:8</span><br></pre></td></tr></table></figure></li>\n<li><p>cp</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。</span><br><span class=\"line\"></span><br><span class=\"line\">docker cp /www/runoob 96f7f14e99ab:/www/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>diff</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看容器mymysql的文件结构更改。</span><br><span class=\"line\"></span><br><span class=\"line\">runoob@runoob:~$ docker diff mymysql</span><br><span class=\"line\">A /logs</span><br><span class=\"line\">A /mysql_data</span><br><span class=\"line\">C /run</span><br><span class=\"line\">C /run/mysqld</span><br><span class=\"line\">A /run/mysqld/mysqld.pid</span><br><span class=\"line\">A /run/mysqld/mysqld.sock</span><br><span class=\"line\">C /tmp</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h3><ul>\n<li><p>login</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登陆到Docker Hub</span><br><span class=\"line\"></span><br><span class=\"line\">docker login -u 用户名 -p 密码</span><br></pre></td></tr></table></figure></li>\n<li><p>pull</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从Docker Hub下载java最新版镜像。</span><br><span class=\"line\"></span><br><span class=\"line\">docker pull java</span><br></pre></td></tr></table></figure></li>\n<li><p>push</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上传本地镜像myapache:v1到镜像仓库中。</span><br><span class=\"line\"></span><br><span class=\"line\">docker push myapache:v1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>search</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从 Docker Hub 查找所有镜像名包含 java，并且收藏数大于 10 的镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker search -f stars=10 java</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地镜像管理\"><a href=\"#本地镜像管理\" class=\"headerlink\" title=\"本地镜像管理\"></a>本地镜像管理</h3><ul>\n<li><p>images</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看本地镜像列表。</span><br><span class=\"line\"></span><br><span class=\"line\">runoob@runoob:~$ docker images</span><br><span class=\"line\">REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">mymysql                 v1                  37af1236adef        5 minutes ago       329 MB</span><br></pre></td></tr></table></figure></li>\n<li><p>rmi</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">强制删除本地镜像 runoob/ubuntu:v4。    </span><br><span class=\"line\"></span><br><span class=\"line\">docker rmi -f runoob/ubuntu:v4</span><br><span class=\"line\">Untagged: runoob/ubuntu:v4</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tag</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将镜像ubuntu:15.10标记为 runoob/ubuntu:v3 镜像。</span><br><span class=\"line\"></span><br><span class=\"line\">docker tag ubuntu:15.10 runoob/ubuntu:v3</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>build</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用当前目录的 Dockerfile 创建镜像，标签为 runoob/ubuntu:v1。</span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t runoob/ubuntu:v1 . </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>history</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看本地镜像runoob/ubuntu:v3的创建历史。</span><br><span class=\"line\"></span><br><span class=\"line\">root@runoob:~# docker history runoob/ubuntu:v3</span><br><span class=\"line\">IMAGE             CREATED           CREATED BY                                      SIZE      COMMENT</span><br><span class=\"line\">4e3b13c8a266      3 months ago      /bin/sh -c #(nop) CMD [&quot;/bin/bash&quot;]             0 B                 </span><br><span class=\"line\">&lt;missing&gt;         3 months ago      /bin/sh -c sed -i &#x27;s/^#\\s*\\(deb.*universe\\)$/   1.863 kB            </span><br><span class=\"line\">&lt;missing&gt;         3 months ago      /bin/sh -c set -xe   &amp;&amp; echo &#x27;#!/bin/sh&#x27; &gt; /u   701 B               </span><br><span class=\"line\">&lt;missing&gt;         3 months ago      /bin/sh -c #(nop) ADD file:43cb048516c6b80f22   136.3 MB</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>save</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将镜像 runoob/ubuntu:v3 生成 my_ubuntu_v3.tar 文档</span><br><span class=\"line\"></span><br><span class=\"line\">runoob@runoob:~$ docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3</span><br><span class=\"line\">runoob@runoob:~$ ll my_ubuntu_v3.tar</span><br><span class=\"line\">-rw------- 1 runoob runoob 142102016 Jul 11 01:37 my_ubuntu_v3.ta</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>load</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">导入镜像：</span><br><span class=\"line\">$ docker load &lt; busybox.tar.gz</span><br><span class=\"line\">Loaded image: busybox:latest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>import</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A:export/import 是根据容器来导出镜像（因此没有镜像的历史记录）而 save/load 操作的对象是镜像</span><br><span class=\"line\">B:export/import 镜像的历史记录再导后无法进行回滚操作，而save/load镜像有完整的历史记录可以回滚</span><br><span class=\"line\">docker import : 从归档文件中创建镜像。</span><br><span class=\"line\">docker import  my_ubuntu_v3.tar runoob/ubuntu:v4  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"系统信息\"><a href=\"#系统信息\" class=\"headerlink\" title=\"系统信息\"></a>系统信息</h3><ul>\n<li>info</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker info</span><br><span class=\"line\">Containers: 12</span><br><span class=\"line\">Images: 41</span><br><span class=\"line\">Storage Driver: aufs</span><br><span class=\"line\"> Root Dir: /var/lib/docker/aufs</span><br><span class=\"line\"> Backing Filesystem: extfs</span><br><span class=\"line\"> Dirs: 66</span><br><span class=\"line\"> Dirperm1 Supported: false</span><br><span class=\"line\">Execution Driver: native-0.2</span><br><span class=\"line\">Logging Driver: json-file</span><br><span class=\"line\">Kernel Version: 3.13.0-32-generic</span><br><span class=\"line\">Operating System: Ubuntu 14.04.1 LTS</span><br><span class=\"line\">CPUs: 1</span><br><span class=\"line\">Total Memory: 1.954 GiB</span><br><span class=\"line\">Name: iZ23mtq8bs1Z</span><br><span class=\"line\">ID: M5N4:K6WN:PUNC:73ZN:AONJ:AUHL:KSYH:2JPI:CH3K:O4MK:6OCX:5OYW</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>version</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">显示 Docker 版本信息。</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker version</span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Version:      1.8.2</span><br><span class=\"line\"> API version:  1.20</span><br><span class=\"line\"> Go version:   go1.4.2</span><br><span class=\"line\"> Git commit:   0a8c2e3</span><br><span class=\"line\"> Built:        Thu Sep 10 19:19:00 UTC 2015</span><br><span class=\"line\"> OS/Arch:      linux/amd64</span><br><span class=\"line\">Server:</span><br><span class=\"line\"> Version:      1.8.2</span><br><span class=\"line\"> API version:  1.20</span><br><span class=\"line\"> Go version:   go1.4.2</span><br><span class=\"line\"> Git commit:   0a8c2e3</span><br><span class=\"line\"> Built:        Thu Sep 10 19:19:00 UTC 2015</span><br><span class=\"line\"> OS/Arch:      linux/amd64</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"组合命令\"><a href=\"#组合命令\" class=\"headerlink\" title=\"组合命令\"></a>组合命令</h2><ul>\n<li><p>模糊删除镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi --force `docker images | grep java | awk &#x27;&#123;print $3&#125;&#x27;`</span><br></pre></td></tr></table></figure></li>\n<li><p>删除停止容器</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm `docker ps -a -q`</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>停止/启动容器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start $(docker ps -a | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)</span><br><span class=\"line\">docker stop $(docker ps -a  | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>提交容器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker commit 81a82e9b5ac2 wuhaocn/java-im:8</span><br><span class=\"line\"></span><br><span class=\"line\">docker tag wuhaocn/java-im:8 wuhaocn/java-im:8</span><br><span class=\"line\"></span><br><span class=\"line\">docker push wuhaocn/java-im:8</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"容器生命周期管理\"><a href=\"#容器生命周期管理\" class=\"headerlink\" title=\"容器生命周期管理\"></a>容器生命周期管理</h3><ul>\n<li>run</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行容器</span><br><span class=\"line\">docker run -p 80:80 -v /data:/data -d nginx:latest </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>start/stop/restart</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">启动/停止/重启容器</span><br><span class=\"line\">docker start myrunoob</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>kill</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">杀死容器</span><br><span class=\"line\">docker kill -s KILL myrunoob</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>rm</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">删除容器</span><br><span class=\"line\">docker rm -f myrunoob1 myrunoob2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pause/unpause</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">暂停数据库容器myrunoob提供服务</span><br><span class=\"line\">docker pause myrunoob</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>create</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用docker镜像nginx:latest创建一个容器,并将容器命名为myrunoob</span><br><span class=\"line\">docker create  --name myrunoob  nginx:latest </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>exec</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过 exec 命令对指定的容器执行 bash:</span><br><span class=\"line\">docker exec -it 9df70f9a0714 /bin/bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器操作\"><a href=\"#容器操作\" class=\"headerlink\" title=\"容器操作\"></a>容器操作</h3><ul>\n<li>ps</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">列出容器</span><br><span class=\"line\">runoob@runoob:~$ docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE          COMMAND                ...  PORTS                    NAMES</span><br><span class=\"line\">09b93464c2f7   nginx:latest   &quot;nginx -g &#x27;daemon off&quot; ...  80/tcp, 443/tcp          myrunoob</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>inspect</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取镜像mysql:5.6的元信息。</span><br><span class=\"line\">docker inspect mysql:5.6</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>top</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看容器mymysql的进程信息。</span><br><span class=\"line\">docker top mymysql</span><br><span class=\"line\">查看所有运行容器的进程信息。</span><br><span class=\"line\">for i in  `docker ps |grep Up|awk &#x27;&#123;print $1&#125;&#x27;`;do echo \\ &amp;&amp;docker top $i; done</span><br></pre></td></tr></table></figure></li>\n<li><p>attach</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">容器mynginx将访问日志指到标准输出，连接到容器查看访问信息。</span><br><span class=\"line\">docker attach --sig-proxy=false mynginx</span><br></pre></td></tr></table></figure></li>\n<li><p>events</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">显示docker 2016年7月1日后的所有事件。</span><br><span class=\"line\">docker events  --since=&quot;1467302400&quot;</span><br><span class=\"line\">显示docker 镜像为mysql:5.6 2016年7月1日后的相关事件。</span><br><span class=\"line\">docker events -f &quot;image&quot;=&quot;mysql:5.6&quot; --since=&quot;1467302400&quot; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>logs</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">跟踪查看容器mynginx的日志输出。</span><br><span class=\"line\">docker logs -f mynginx</span><br><span class=\"line\">查看容器mynginx从2016年7月1日后的最新10条日志。</span><br><span class=\"line\">docker logs --since=&quot;2016-07-01&quot; --tail=10 mynginx</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>wait</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker wait : 阻塞运行直到容器停止，然后打印出它的退出代码。</span><br><span class=\"line\"></span><br><span class=\"line\">docker wait CONTAINER</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>export</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将id为a404c6c174a2的容器按日期保存为tar文件。</span><br><span class=\"line\"></span><br><span class=\"line\">runoob@runoob:~$ docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2</span><br><span class=\"line\">runoob@runoob:~$ ls mysql-`date +%Y%m%d`.tar</span><br><span class=\"line\">mysql-20160711.tar</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>port</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看容器mynginx的端口映射情况。</span><br><span class=\"line\"></span><br><span class=\"line\">docker port mymysql</span><br><span class=\"line\">3306/tcp -&gt; 0.0.0.0:3306</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"容器rootfs命令\"><a href=\"#容器rootfs命令\" class=\"headerlink\" title=\"容器rootfs命令\"></a>容器rootfs命令</h3><ul>\n<li><p>commit</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。</span><br><span class=\"line\">docker commit -a &quot;runoob.com&quot; -m &quot;my apache&quot; a404c6c174a2  mymysql:v1</span><br><span class=\"line\">简化参考</span><br><span class=\"line\">docker commit faa474c052c6 java-sctp:8</span><br></pre></td></tr></table></figure></li>\n<li><p>cp</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。</span><br><span class=\"line\"></span><br><span class=\"line\">docker cp /www/runoob 96f7f14e99ab:/www/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>diff</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看容器mymysql的文件结构更改。</span><br><span class=\"line\"></span><br><span class=\"line\">runoob@runoob:~$ docker diff mymysql</span><br><span class=\"line\">A /logs</span><br><span class=\"line\">A /mysql_data</span><br><span class=\"line\">C /run</span><br><span class=\"line\">C /run/mysqld</span><br><span class=\"line\">A /run/mysqld/mysqld.pid</span><br><span class=\"line\">A /run/mysqld/mysqld.sock</span><br><span class=\"line\">C /tmp</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h3><ul>\n<li><p>login</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登陆到Docker Hub</span><br><span class=\"line\"></span><br><span class=\"line\">docker login -u 用户名 -p 密码</span><br></pre></td></tr></table></figure></li>\n<li><p>pull</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从Docker Hub下载java最新版镜像。</span><br><span class=\"line\"></span><br><span class=\"line\">docker pull java</span><br></pre></td></tr></table></figure></li>\n<li><p>push</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上传本地镜像myapache:v1到镜像仓库中。</span><br><span class=\"line\"></span><br><span class=\"line\">docker push myapache:v1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>search</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从 Docker Hub 查找所有镜像名包含 java，并且收藏数大于 10 的镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker search -f stars=10 java</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地镜像管理\"><a href=\"#本地镜像管理\" class=\"headerlink\" title=\"本地镜像管理\"></a>本地镜像管理</h3><ul>\n<li><p>images</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看本地镜像列表。</span><br><span class=\"line\"></span><br><span class=\"line\">runoob@runoob:~$ docker images</span><br><span class=\"line\">REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">mymysql                 v1                  37af1236adef        5 minutes ago       329 MB</span><br></pre></td></tr></table></figure></li>\n<li><p>rmi</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">强制删除本地镜像 runoob/ubuntu:v4。    </span><br><span class=\"line\"></span><br><span class=\"line\">docker rmi -f runoob/ubuntu:v4</span><br><span class=\"line\">Untagged: runoob/ubuntu:v4</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tag</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将镜像ubuntu:15.10标记为 runoob/ubuntu:v3 镜像。</span><br><span class=\"line\"></span><br><span class=\"line\">docker tag ubuntu:15.10 runoob/ubuntu:v3</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>build</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用当前目录的 Dockerfile 创建镜像，标签为 runoob/ubuntu:v1。</span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t runoob/ubuntu:v1 . </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>history</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看本地镜像runoob/ubuntu:v3的创建历史。</span><br><span class=\"line\"></span><br><span class=\"line\">root@runoob:~# docker history runoob/ubuntu:v3</span><br><span class=\"line\">IMAGE             CREATED           CREATED BY                                      SIZE      COMMENT</span><br><span class=\"line\">4e3b13c8a266      3 months ago      /bin/sh -c #(nop) CMD [&quot;/bin/bash&quot;]             0 B                 </span><br><span class=\"line\">&lt;missing&gt;         3 months ago      /bin/sh -c sed -i &#x27;s/^#\\s*\\(deb.*universe\\)$/   1.863 kB            </span><br><span class=\"line\">&lt;missing&gt;         3 months ago      /bin/sh -c set -xe   &amp;&amp; echo &#x27;#!/bin/sh&#x27; &gt; /u   701 B               </span><br><span class=\"line\">&lt;missing&gt;         3 months ago      /bin/sh -c #(nop) ADD file:43cb048516c6b80f22   136.3 MB</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>save</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将镜像 runoob/ubuntu:v3 生成 my_ubuntu_v3.tar 文档</span><br><span class=\"line\"></span><br><span class=\"line\">runoob@runoob:~$ docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3</span><br><span class=\"line\">runoob@runoob:~$ ll my_ubuntu_v3.tar</span><br><span class=\"line\">-rw------- 1 runoob runoob 142102016 Jul 11 01:37 my_ubuntu_v3.ta</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>load</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">导入镜像：</span><br><span class=\"line\">$ docker load &lt; busybox.tar.gz</span><br><span class=\"line\">Loaded image: busybox:latest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>import</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A:export/import 是根据容器来导出镜像（因此没有镜像的历史记录）而 save/load 操作的对象是镜像</span><br><span class=\"line\">B:export/import 镜像的历史记录再导后无法进行回滚操作，而save/load镜像有完整的历史记录可以回滚</span><br><span class=\"line\">docker import : 从归档文件中创建镜像。</span><br><span class=\"line\">docker import  my_ubuntu_v3.tar runoob/ubuntu:v4  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"系统信息\"><a href=\"#系统信息\" class=\"headerlink\" title=\"系统信息\"></a>系统信息</h3><ul>\n<li>info</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker info</span><br><span class=\"line\">Containers: 12</span><br><span class=\"line\">Images: 41</span><br><span class=\"line\">Storage Driver: aufs</span><br><span class=\"line\"> Root Dir: /var/lib/docker/aufs</span><br><span class=\"line\"> Backing Filesystem: extfs</span><br><span class=\"line\"> Dirs: 66</span><br><span class=\"line\"> Dirperm1 Supported: false</span><br><span class=\"line\">Execution Driver: native-0.2</span><br><span class=\"line\">Logging Driver: json-file</span><br><span class=\"line\">Kernel Version: 3.13.0-32-generic</span><br><span class=\"line\">Operating System: Ubuntu 14.04.1 LTS</span><br><span class=\"line\">CPUs: 1</span><br><span class=\"line\">Total Memory: 1.954 GiB</span><br><span class=\"line\">Name: iZ23mtq8bs1Z</span><br><span class=\"line\">ID: M5N4:K6WN:PUNC:73ZN:AONJ:AUHL:KSYH:2JPI:CH3K:O4MK:6OCX:5OYW</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>version</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">显示 Docker 版本信息。</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker version</span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Version:      1.8.2</span><br><span class=\"line\"> API version:  1.20</span><br><span class=\"line\"> Go version:   go1.4.2</span><br><span class=\"line\"> Git commit:   0a8c2e3</span><br><span class=\"line\"> Built:        Thu Sep 10 19:19:00 UTC 2015</span><br><span class=\"line\"> OS/Arch:      linux/amd64</span><br><span class=\"line\">Server:</span><br><span class=\"line\"> Version:      1.8.2</span><br><span class=\"line\"> API version:  1.20</span><br><span class=\"line\"> Go version:   go1.4.2</span><br><span class=\"line\"> Git commit:   0a8c2e3</span><br><span class=\"line\"> Built:        Thu Sep 10 19:19:00 UTC 2015</span><br><span class=\"line\"> OS/Arch:      linux/amd64</span><br></pre></td></tr></table></figure>"},{"title":"Linux定时任务用法与实例","_content":"\n## 1.简介\n**    在**[Linux系统](https://www.linuxprobe.com/)**的实际使用中，可能会经常碰到让系统在某个特定时间执行某些任务的情况，比如定时采集服务器的状态信息、负载状况；定时执行某些任务/**[脚本](https://www.linuxcool.com/)**来对远端进行数据采集等。这里将介绍下crontab的配置参数以及一些使用实例。**\n**​**\n\n![](https://cdn.nlark.com/yuque/0/2021/jpeg/804884/1630977884673-4e4b1724-9235-4016-ae29-267640a57ad5.jpeg#clientId=ubca59353-6701-4&from=paste&id=u78135138&margin=%5Bobject%20Object%5D&originHeight=251&originWidth=620&originalType=url&ratio=1&status=done&style=none&taskId=u78389e0f-56f1-4453-8018-3ad3f3a80e4)\n**crontab配置文件**\n[Linux](https://www.linuxprobe.com/)下的任务调度分为两类：系统任务调度和用户任务调度。Linux系统任务是由 cron (crond) 这个系统服务来控制的，这个系统服务是默认启动的。用户自己设置的计划任务则使用crontab [命令](https://www.linuxcool.com/)。\n## 2.常见配置\n### 2.1 配置详情\n```\ncat /etc/crontab\n```\n```\n# /etc/crontab: system-wide crontab\n# Unlike any other crontab you don't have to run the `crontab'\n# command to install the new version when you edit this file\n# and files in /etc/cron.d. These files also have username fields,\n# that none of the other crontabs do.\n\nSHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n\n# m h dom mon dow user\tcommand\n17 *\t* * *\troot    cd / && run-parts --report /etc/cron.hourly\n25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )\n47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )\n52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )\n```\n### 2.2 crontab格式\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1630977884651-539dcfb6-109b-400d-8296-b7dfccf87cd6.png#clientId=ubca59353-6701-4&from=paste&id=ufd7c16a7&margin=%5Bobject%20Object%5D&originHeight=446&originWidth=538&originalType=url&ratio=1&status=done&style=none&taskId=u86808066-51b9-4864-8e2b-697bfac61c0)\n  在以上各个字段中，还可以使用以下特殊字符：\n```\n\"*\"代表所有的取值范围内的数字，如月份字段为*，则表示1到12个月；\n\"/\"代表每一定时间间隔的意思，如分钟字段为*/10，表示每10分钟执行1次。\n\"-\"代表从某个区间范围，是闭区间。如“2-5”表示“2,3,4,5”，小时字段中0-23/2表示在0~23点范围内每2个小时执行一次。\n\",\"分散的数字（不一定连续），如1,2,3,4,7,9。\n注：由于各个地方每周第一天不一样，因此Sunday=0（第一天）或Sunday=7（最后1天）。\n```\n**crontab命令详解**\n### 2.3 配置文件\n​\n\n\n- 其一：/var/spool/cron/\n该目录下存放的是每个用户（包括root）的crontab任务，文件名以用户名命名\n- 其二：/etc/cron.d/\n这个目录用来存放任何要执行的crontab文件或脚本。\n## 3.服务状态\n​\n\n\n- 启动服务\n\nsudo service cron start      \n\n- 关闭服务\n\nsudo service cron stop      \n\n- 重启服务\n\n sudo service cron restart  \n\n- 重新载入配置\n\n sudo service cron reload \n\n- 查看服务状态\n\nsudo service cron status  \n\n\n## 4.常见命令\n\n- 重新指定crontab定时任务列表文件\n\ncrontab $filepath \n\n- 查看crontab定时任务\n\ncrontab -l \n\n- 编辑定时任务【删除-添加-修改】\n\ncrontab -e \n\n- **_添加定时任务【推荐】_**\nStep-One : 编辑任务脚本【分目录存放】【ex: backup.sh】\nStep-Two : 编辑定时文件【命名规则:backup.cron】\nStep-Three : crontab命令添加到系统crontab backup.cron\nStep-Four : 查看crontab列表 crontab -l\n\n---\n\n## 5.crontab时间举例\n### 规则\n```\n每一分钟执行一次command（因cron默认每1分钟扫描一次，因此全为*即可）\n*    *    *    *    *  command\n每小时的第3和第15分钟执行command\n3,15   *    *    *    *  command\n每天上午8-11点的第3和15分钟执行command：\n3,15  8-11  *  *  *  command\n每隔2天的上午8-11点的第3和15分钟执行command：\n3,15  8-11  */2  *   *  command\n每个星期一的上午8点到11点的第3和第15分钟执行command\n3,15  8-11   *   *  1 command\n每晚的21:30重启smb\n30  21   *   *  *  /etc/init.d/smb restart\n每月1、10、22日的4 : 45重启smb\n45  4  1,10,22  *  *  /etc/init.d/smb restart\n每周六、周日的1 : 10重启smb\n10  1  *  *  6,0  /etc/init.d/smb restart\n每天18 : 00至23 : 00之间每隔30分钟重启smb\n0,30  18-23  *  *  *  /etc/init.d/smb restart\n每一小时重启smb\n*  */1  *  *  *  /etc/init.d/smb restart\n晚上11点到早上7点之间，每隔一小时重启smb\n*  23-7/1  *   *   *  /etc/init.d/smb restart\n每月的4号与每周一到周三的11点重启smb\n0  11  4  *  mon-wed  /etc/init.d/smb restart\n每小时执行/etc/cron.hourly目录内的脚本\n0  1   *   *   *     root run-parts /etc/cron.hourly\n```\n**crontab配置实例**\n### 举例\n```\n# 每天早上6点 \n0 6 * * * echo \"Good morning.\" >> /tmp/test.txt //注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了。\n\n# 每两个小时 \n0 */2 * * * echo \"Have a break now.\" >> /tmp/test.txt  \n\n# 晚上11点到早上8点之间每两个小时和早上八点 \n0 23-7/2，8 * * * echo \"Have a good dream\" >> /tmp/test.txt\n\n# 每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 \n0 11 4 * 1-3 command line\n\n# 1月1日早上4点 \n0 4 1 1 * command line SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root //如果出现错误，或者有数据输出，数据作为邮件发给这个帐号 HOME=/ \n\n# 每小时（第一分钟）执行/etc/cron.hourly内的脚本\n01 * * * * root run-parts /etc/cron.hourly\n\n# 每天（凌晨4：02）执行/etc/cron.daily内的脚本\n02 4 * * * root run-parts /etc/cron.daily \n\n# 每星期（周日凌晨4：22）执行/etc/cron.weekly内的脚本\n22 4 * * 0 root run-parts /etc/cron.weekly \n\n# 每月（1号凌晨4：42）去执行/etc/cron.monthly内的脚本 \n42 4 1 * * root run-parts /etc/cron.monthly \n\n# 注意:  \"run-parts\"这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是文件夹名。 　 \n\n# 每天的下午4点、5点、6点的5 min、15 min、25 min、35 min、45 min、55 min时执行命令。 \n5，15，25，35，45，55 16，17，18 * * * command\n\n# 每周一，三，五的下午3：00系统进入维护状态，重新启动系统。\n00 15 * *1，3，5 shutdown -r +5\n\n# 每小时的10分，40分执行用户目录下的innd/bbslin这个指令： \n10，40 * * * * innd/bbslink \n\n# 每小时的1分执行用户目录下的bin/account这个指令： \n1 * * * * bin/account\n\n# 每天早晨三点二十分执行用户目录下如下所示的两个指令（每个指令以;分隔）： \n203 * * * （/bin/rm -f expire.ls logins.bad;bin/expire$#@62;expire.1st）　\n```\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/language/shell/Linux定时任务用法与实例.md","raw":"---\ntitle: Linux定时任务用法与实例\ncategories:\n- linux\n---\n\n## 1.简介\n**    在**[Linux系统](https://www.linuxprobe.com/)**的实际使用中，可能会经常碰到让系统在某个特定时间执行某些任务的情况，比如定时采集服务器的状态信息、负载状况；定时执行某些任务/**[脚本](https://www.linuxcool.com/)**来对远端进行数据采集等。这里将介绍下crontab的配置参数以及一些使用实例。**\n**​**\n\n![](https://cdn.nlark.com/yuque/0/2021/jpeg/804884/1630977884673-4e4b1724-9235-4016-ae29-267640a57ad5.jpeg#clientId=ubca59353-6701-4&from=paste&id=u78135138&margin=%5Bobject%20Object%5D&originHeight=251&originWidth=620&originalType=url&ratio=1&status=done&style=none&taskId=u78389e0f-56f1-4453-8018-3ad3f3a80e4)\n**crontab配置文件**\n[Linux](https://www.linuxprobe.com/)下的任务调度分为两类：系统任务调度和用户任务调度。Linux系统任务是由 cron (crond) 这个系统服务来控制的，这个系统服务是默认启动的。用户自己设置的计划任务则使用crontab [命令](https://www.linuxcool.com/)。\n## 2.常见配置\n### 2.1 配置详情\n```\ncat /etc/crontab\n```\n```\n# /etc/crontab: system-wide crontab\n# Unlike any other crontab you don't have to run the `crontab'\n# command to install the new version when you edit this file\n# and files in /etc/cron.d. These files also have username fields,\n# that none of the other crontabs do.\n\nSHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n\n# m h dom mon dow user\tcommand\n17 *\t* * *\troot    cd / && run-parts --report /etc/cron.hourly\n25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )\n47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )\n52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )\n```\n### 2.2 crontab格式\n![](https://cdn.nlark.com/yuque/0/2021/png/804884/1630977884651-539dcfb6-109b-400d-8296-b7dfccf87cd6.png#clientId=ubca59353-6701-4&from=paste&id=ufd7c16a7&margin=%5Bobject%20Object%5D&originHeight=446&originWidth=538&originalType=url&ratio=1&status=done&style=none&taskId=u86808066-51b9-4864-8e2b-697bfac61c0)\n  在以上各个字段中，还可以使用以下特殊字符：\n```\n\"*\"代表所有的取值范围内的数字，如月份字段为*，则表示1到12个月；\n\"/\"代表每一定时间间隔的意思，如分钟字段为*/10，表示每10分钟执行1次。\n\"-\"代表从某个区间范围，是闭区间。如“2-5”表示“2,3,4,5”，小时字段中0-23/2表示在0~23点范围内每2个小时执行一次。\n\",\"分散的数字（不一定连续），如1,2,3,4,7,9。\n注：由于各个地方每周第一天不一样，因此Sunday=0（第一天）或Sunday=7（最后1天）。\n```\n**crontab命令详解**\n### 2.3 配置文件\n​\n\n\n- 其一：/var/spool/cron/\n该目录下存放的是每个用户（包括root）的crontab任务，文件名以用户名命名\n- 其二：/etc/cron.d/\n这个目录用来存放任何要执行的crontab文件或脚本。\n## 3.服务状态\n​\n\n\n- 启动服务\n\nsudo service cron start      \n\n- 关闭服务\n\nsudo service cron stop      \n\n- 重启服务\n\n sudo service cron restart  \n\n- 重新载入配置\n\n sudo service cron reload \n\n- 查看服务状态\n\nsudo service cron status  \n\n\n## 4.常见命令\n\n- 重新指定crontab定时任务列表文件\n\ncrontab $filepath \n\n- 查看crontab定时任务\n\ncrontab -l \n\n- 编辑定时任务【删除-添加-修改】\n\ncrontab -e \n\n- **_添加定时任务【推荐】_**\nStep-One : 编辑任务脚本【分目录存放】【ex: backup.sh】\nStep-Two : 编辑定时文件【命名规则:backup.cron】\nStep-Three : crontab命令添加到系统crontab backup.cron\nStep-Four : 查看crontab列表 crontab -l\n\n---\n\n## 5.crontab时间举例\n### 规则\n```\n每一分钟执行一次command（因cron默认每1分钟扫描一次，因此全为*即可）\n*    *    *    *    *  command\n每小时的第3和第15分钟执行command\n3,15   *    *    *    *  command\n每天上午8-11点的第3和15分钟执行command：\n3,15  8-11  *  *  *  command\n每隔2天的上午8-11点的第3和15分钟执行command：\n3,15  8-11  */2  *   *  command\n每个星期一的上午8点到11点的第3和第15分钟执行command\n3,15  8-11   *   *  1 command\n每晚的21:30重启smb\n30  21   *   *  *  /etc/init.d/smb restart\n每月1、10、22日的4 : 45重启smb\n45  4  1,10,22  *  *  /etc/init.d/smb restart\n每周六、周日的1 : 10重启smb\n10  1  *  *  6,0  /etc/init.d/smb restart\n每天18 : 00至23 : 00之间每隔30分钟重启smb\n0,30  18-23  *  *  *  /etc/init.d/smb restart\n每一小时重启smb\n*  */1  *  *  *  /etc/init.d/smb restart\n晚上11点到早上7点之间，每隔一小时重启smb\n*  23-7/1  *   *   *  /etc/init.d/smb restart\n每月的4号与每周一到周三的11点重启smb\n0  11  4  *  mon-wed  /etc/init.d/smb restart\n每小时执行/etc/cron.hourly目录内的脚本\n0  1   *   *   *     root run-parts /etc/cron.hourly\n```\n**crontab配置实例**\n### 举例\n```\n# 每天早上6点 \n0 6 * * * echo \"Good morning.\" >> /tmp/test.txt //注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了。\n\n# 每两个小时 \n0 */2 * * * echo \"Have a break now.\" >> /tmp/test.txt  \n\n# 晚上11点到早上8点之间每两个小时和早上八点 \n0 23-7/2，8 * * * echo \"Have a good dream\" >> /tmp/test.txt\n\n# 每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 \n0 11 4 * 1-3 command line\n\n# 1月1日早上4点 \n0 4 1 1 * command line SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root //如果出现错误，或者有数据输出，数据作为邮件发给这个帐号 HOME=/ \n\n# 每小时（第一分钟）执行/etc/cron.hourly内的脚本\n01 * * * * root run-parts /etc/cron.hourly\n\n# 每天（凌晨4：02）执行/etc/cron.daily内的脚本\n02 4 * * * root run-parts /etc/cron.daily \n\n# 每星期（周日凌晨4：22）执行/etc/cron.weekly内的脚本\n22 4 * * 0 root run-parts /etc/cron.weekly \n\n# 每月（1号凌晨4：42）去执行/etc/cron.monthly内的脚本 \n42 4 1 * * root run-parts /etc/cron.monthly \n\n# 注意:  \"run-parts\"这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是文件夹名。 　 \n\n# 每天的下午4点、5点、6点的5 min、15 min、25 min、35 min、45 min、55 min时执行命令。 \n5，15，25，35，45，55 16，17，18 * * * command\n\n# 每周一，三，五的下午3：00系统进入维护状态，重新启动系统。\n00 15 * *1，3，5 shutdown -r +5\n\n# 每小时的10分，40分执行用户目录下的innd/bbslin这个指令： \n10，40 * * * * innd/bbslink \n\n# 每小时的1分执行用户目录下的bin/account这个指令： \n1 * * * * bin/account\n\n# 每天早晨三点二十分执行用户目录下如下所示的两个指令（每个指令以;分隔）： \n203 * * * （/bin/rm -f expire.ls logins.bad;bin/expire$#@62;expire.1st）　\n```\n\n\n\n\n\n\n\n\n\n\n","slug":"language/shell/Linux定时任务用法与实例","published":1,"date":"2021-10-18T03:19:43.244Z","updated":"2021-10-18T03:35:26.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuw4ngew0003p7gkeeq51wqg","content":"<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h2><p>**    在**<a href=\"https://www.linuxprobe.com/\">Linux系统</a><strong>的实际使用中，可能会经常碰到让系统在某个特定时间执行某些任务的情况，比如定时采集服务器的状态信息、负载状况；定时执行某些任务/</strong><a href=\"https://www.linuxcool.com/\">脚本</a><strong>来对远端进行数据采集等。这里将介绍下crontab的配置参数以及一些使用实例。</strong><br><strong>​</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/804884/1630977884673-4e4b1724-9235-4016-ae29-267640a57ad5.jpeg#clientId=ubca59353-6701-4&from=paste&id=u78135138&margin=%5Bobject%20Object%5D&originHeight=251&originWidth=620&originalType=url&ratio=1&status=done&style=none&taskId=u78389e0f-56f1-4453-8018-3ad3f3a80e4\"><br><strong>crontab配置文件</strong><br><a href=\"https://www.linuxprobe.com/\">Linux</a>下的任务调度分为两类：系统任务调度和用户任务调度。Linux系统任务是由 cron (crond) 这个系统服务来控制的，这个系统服务是默认启动的。用户自己设置的计划任务则使用crontab <a href=\"https://www.linuxcool.com/\">命令</a>。</p>\n<h2 id=\"2-常见配置\"><a href=\"#2-常见配置\" class=\"headerlink\" title=\"2.常见配置\"></a>2.常见配置</h2><h3 id=\"2-1-配置详情\"><a href=\"#2-1-配置详情\" class=\"headerlink\" title=\"2.1 配置详情\"></a>2.1 配置详情</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/crontab</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /etc/crontab: system-wide crontab</span><br><span class=\"line\"># Unlike any other crontab you don&#x27;t have to run the `crontab&#x27;</span><br><span class=\"line\"># command to install the new version when you edit this file</span><br><span class=\"line\"># and files in /etc/cron.d. These files also have username fields,</span><br><span class=\"line\"># that none of the other crontabs do.</span><br><span class=\"line\"></span><br><span class=\"line\">SHELL=/bin/sh</span><br><span class=\"line\">PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\"></span><br><span class=\"line\"># m h dom mon dow user\tcommand</span><br><span class=\"line\">17 *\t* * *\troot    cd / &amp;&amp; run-parts --report /etc/cron.hourly</span><br><span class=\"line\">25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )</span><br><span class=\"line\">47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )</span><br><span class=\"line\">52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-crontab格式\"><a href=\"#2-2-crontab格式\" class=\"headerlink\" title=\"2.2 crontab格式\"></a>2.2 crontab格式</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1630977884651-539dcfb6-109b-400d-8296-b7dfccf87cd6.png#clientId=ubca59353-6701-4&from=paste&id=ufd7c16a7&margin=%5Bobject%20Object%5D&originHeight=446&originWidth=538&originalType=url&ratio=1&status=done&style=none&taskId=u86808066-51b9-4864-8e2b-697bfac61c0\"><br>  在以上各个字段中，还可以使用以下特殊字符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;*&quot;代表所有的取值范围内的数字，如月份字段为*，则表示1到12个月；</span><br><span class=\"line\">&quot;/&quot;代表每一定时间间隔的意思，如分钟字段为*/10，表示每10分钟执行1次。</span><br><span class=\"line\">&quot;-&quot;代表从某个区间范围，是闭区间。如“2-5”表示“2,3,4,5”，小时字段中0-23/2表示在0~23点范围内每2个小时执行一次。</span><br><span class=\"line\">&quot;,&quot;分散的数字（不一定连续），如1,2,3,4,7,9。</span><br><span class=\"line\">注：由于各个地方每周第一天不一样，因此Sunday=0（第一天）或Sunday=7（最后1天）。</span><br></pre></td></tr></table></figure>\n<p><strong>crontab命令详解</strong></p>\n<h3 id=\"2-3-配置文件\"><a href=\"#2-3-配置文件\" class=\"headerlink\" title=\"2.3 配置文件\"></a>2.3 配置文件</h3><p>​</p>\n<ul>\n<li>其一：/var/spool/cron/<br>该目录下存放的是每个用户（包括root）的crontab任务，文件名以用户名命名</li>\n<li>其二：/etc/cron.d/<br>这个目录用来存放任何要执行的crontab文件或脚本。<h2 id=\"3-服务状态\"><a href=\"#3-服务状态\" class=\"headerlink\" title=\"3.服务状态\"></a>3.服务状态</h2>​</li>\n</ul>\n<ul>\n<li>启动服务</li>\n</ul>\n<p>sudo service cron start      </p>\n<ul>\n<li>关闭服务</li>\n</ul>\n<p>sudo service cron stop      </p>\n<ul>\n<li>重启服务</li>\n</ul>\n<p> sudo service cron restart  </p>\n<ul>\n<li>重新载入配置</li>\n</ul>\n<p> sudo service cron reload </p>\n<ul>\n<li>查看服务状态</li>\n</ul>\n<p>sudo service cron status  </p>\n<h2 id=\"4-常见命令\"><a href=\"#4-常见命令\" class=\"headerlink\" title=\"4.常见命令\"></a>4.常见命令</h2><ul>\n<li>重新指定crontab定时任务列表文件</li>\n</ul>\n<p>crontab $filepath </p>\n<ul>\n<li>查看crontab定时任务</li>\n</ul>\n<p>crontab -l </p>\n<ul>\n<li>编辑定时任务【删除-添加-修改】</li>\n</ul>\n<p>crontab -e </p>\n<ul>\n<li><strong><em>添加定时任务【推荐】</em></strong><br>Step-One : 编辑任务脚本【分目录存放】【ex: backup.sh】<br>Step-Two : 编辑定时文件【命名规则:backup.cron】<br>Step-Three : crontab命令添加到系统crontab backup.cron<br>Step-Four : 查看crontab列表 crontab -l</li>\n</ul>\n<hr>\n<h2 id=\"5-crontab时间举例\"><a href=\"#5-crontab时间举例\" class=\"headerlink\" title=\"5.crontab时间举例\"></a>5.crontab时间举例</h2><h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每一分钟执行一次command（因cron默认每1分钟扫描一次，因此全为*即可）</span><br><span class=\"line\">*    *    *    *    *  command</span><br><span class=\"line\">每小时的第3和第15分钟执行command</span><br><span class=\"line\">3,15   *    *    *    *  command</span><br><span class=\"line\">每天上午8-11点的第3和15分钟执行command：</span><br><span class=\"line\">3,15  8-11  *  *  *  command</span><br><span class=\"line\">每隔2天的上午8-11点的第3和15分钟执行command：</span><br><span class=\"line\">3,15  8-11  */2  *   *  command</span><br><span class=\"line\">每个星期一的上午8点到11点的第3和第15分钟执行command</span><br><span class=\"line\">3,15  8-11   *   *  1 command</span><br><span class=\"line\">每晚的21:30重启smb</span><br><span class=\"line\">30  21   *   *  *  /etc/init.d/smb restart</span><br><span class=\"line\">每月1、10、22日的4 : 45重启smb</span><br><span class=\"line\">45  4  1,10,22  *  *  /etc/init.d/smb restart</span><br><span class=\"line\">每周六、周日的1 : 10重启smb</span><br><span class=\"line\">10  1  *  *  6,0  /etc/init.d/smb restart</span><br><span class=\"line\">每天18 : 00至23 : 00之间每隔30分钟重启smb</span><br><span class=\"line\">0,30  18-23  *  *  *  /etc/init.d/smb restart</span><br><span class=\"line\">每一小时重启smb</span><br><span class=\"line\">*  */1  *  *  *  /etc/init.d/smb restart</span><br><span class=\"line\">晚上11点到早上7点之间，每隔一小时重启smb</span><br><span class=\"line\">*  23-7/1  *   *   *  /etc/init.d/smb restart</span><br><span class=\"line\">每月的4号与每周一到周三的11点重启smb</span><br><span class=\"line\">0  11  4  *  mon-wed  /etc/init.d/smb restart</span><br><span class=\"line\">每小时执行/etc/cron.hourly目录内的脚本</span><br><span class=\"line\">0  1   *   *   *     root run-parts /etc/cron.hourly</span><br></pre></td></tr></table></figure>\n<p><strong>crontab配置实例</strong></p>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 每天早上6点 </span><br><span class=\"line\">0 6 * * * echo &quot;Good morning.&quot; &gt;&gt; /tmp/test.txt //注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了。</span><br><span class=\"line\"></span><br><span class=\"line\"># 每两个小时 </span><br><span class=\"line\">0 */2 * * * echo &quot;Have a break now.&quot; &gt;&gt; /tmp/test.txt  </span><br><span class=\"line\"></span><br><span class=\"line\"># 晚上11点到早上8点之间每两个小时和早上八点 </span><br><span class=\"line\">0 23-7/2，8 * * * echo &quot;Have a good dream&quot; &gt;&gt; /tmp/test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 </span><br><span class=\"line\">0 11 4 * 1-3 command line</span><br><span class=\"line\"></span><br><span class=\"line\"># 1月1日早上4点 </span><br><span class=\"line\">0 4 1 1 * command line SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root //如果出现错误，或者有数据输出，数据作为邮件发给这个帐号 HOME=/ </span><br><span class=\"line\"></span><br><span class=\"line\"># 每小时（第一分钟）执行/etc/cron.hourly内的脚本</span><br><span class=\"line\">01 * * * * root run-parts /etc/cron.hourly</span><br><span class=\"line\"></span><br><span class=\"line\"># 每天（凌晨4：02）执行/etc/cron.daily内的脚本</span><br><span class=\"line\">02 4 * * * root run-parts /etc/cron.daily </span><br><span class=\"line\"></span><br><span class=\"line\"># 每星期（周日凌晨4：22）执行/etc/cron.weekly内的脚本</span><br><span class=\"line\">22 4 * * 0 root run-parts /etc/cron.weekly </span><br><span class=\"line\"></span><br><span class=\"line\"># 每月（1号凌晨4：42）去执行/etc/cron.monthly内的脚本 </span><br><span class=\"line\">42 4 1 * * root run-parts /etc/cron.monthly </span><br><span class=\"line\"></span><br><span class=\"line\"># 注意:  &quot;run-parts&quot;这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是文件夹名。 　 </span><br><span class=\"line\"></span><br><span class=\"line\"># 每天的下午4点、5点、6点的5 min、15 min、25 min、35 min、45 min、55 min时执行命令。 </span><br><span class=\"line\">5，15，25，35，45，55 16，17，18 * * * command</span><br><span class=\"line\"></span><br><span class=\"line\"># 每周一，三，五的下午3：00系统进入维护状态，重新启动系统。</span><br><span class=\"line\">00 15 * *1，3，5 shutdown -r +5</span><br><span class=\"line\"></span><br><span class=\"line\"># 每小时的10分，40分执行用户目录下的innd/bbslin这个指令： </span><br><span class=\"line\">10，40 * * * * innd/bbslink </span><br><span class=\"line\"></span><br><span class=\"line\"># 每小时的1分执行用户目录下的bin/account这个指令： </span><br><span class=\"line\">1 * * * * bin/account</span><br><span class=\"line\"></span><br><span class=\"line\"># 每天早晨三点二十分执行用户目录下如下所示的两个指令（每个指令以;分隔）： </span><br><span class=\"line\">203 * * * （/bin/rm -f expire.ls logins.bad;bin/expire$#@62;expire.1st）　</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h2><p>**    在**<a href=\"https://www.linuxprobe.com/\">Linux系统</a><strong>的实际使用中，可能会经常碰到让系统在某个特定时间执行某些任务的情况，比如定时采集服务器的状态信息、负载状况；定时执行某些任务/</strong><a href=\"https://www.linuxcool.com/\">脚本</a><strong>来对远端进行数据采集等。这里将介绍下crontab的配置参数以及一些使用实例。</strong><br><strong>​</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/804884/1630977884673-4e4b1724-9235-4016-ae29-267640a57ad5.jpeg#clientId=ubca59353-6701-4&from=paste&id=u78135138&margin=%5Bobject%20Object%5D&originHeight=251&originWidth=620&originalType=url&ratio=1&status=done&style=none&taskId=u78389e0f-56f1-4453-8018-3ad3f3a80e4\"><br><strong>crontab配置文件</strong><br><a href=\"https://www.linuxprobe.com/\">Linux</a>下的任务调度分为两类：系统任务调度和用户任务调度。Linux系统任务是由 cron (crond) 这个系统服务来控制的，这个系统服务是默认启动的。用户自己设置的计划任务则使用crontab <a href=\"https://www.linuxcool.com/\">命令</a>。</p>\n<h2 id=\"2-常见配置\"><a href=\"#2-常见配置\" class=\"headerlink\" title=\"2.常见配置\"></a>2.常见配置</h2><h3 id=\"2-1-配置详情\"><a href=\"#2-1-配置详情\" class=\"headerlink\" title=\"2.1 配置详情\"></a>2.1 配置详情</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/crontab</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /etc/crontab: system-wide crontab</span><br><span class=\"line\"># Unlike any other crontab you don&#x27;t have to run the `crontab&#x27;</span><br><span class=\"line\"># command to install the new version when you edit this file</span><br><span class=\"line\"># and files in /etc/cron.d. These files also have username fields,</span><br><span class=\"line\"># that none of the other crontabs do.</span><br><span class=\"line\"></span><br><span class=\"line\">SHELL=/bin/sh</span><br><span class=\"line\">PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\"></span><br><span class=\"line\"># m h dom mon dow user\tcommand</span><br><span class=\"line\">17 *\t* * *\troot    cd / &amp;&amp; run-parts --report /etc/cron.hourly</span><br><span class=\"line\">25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )</span><br><span class=\"line\">47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )</span><br><span class=\"line\">52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-crontab格式\"><a href=\"#2-2-crontab格式\" class=\"headerlink\" title=\"2.2 crontab格式\"></a>2.2 crontab格式</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/804884/1630977884651-539dcfb6-109b-400d-8296-b7dfccf87cd6.png#clientId=ubca59353-6701-4&from=paste&id=ufd7c16a7&margin=%5Bobject%20Object%5D&originHeight=446&originWidth=538&originalType=url&ratio=1&status=done&style=none&taskId=u86808066-51b9-4864-8e2b-697bfac61c0\"><br>  在以上各个字段中，还可以使用以下特殊字符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;*&quot;代表所有的取值范围内的数字，如月份字段为*，则表示1到12个月；</span><br><span class=\"line\">&quot;/&quot;代表每一定时间间隔的意思，如分钟字段为*/10，表示每10分钟执行1次。</span><br><span class=\"line\">&quot;-&quot;代表从某个区间范围，是闭区间。如“2-5”表示“2,3,4,5”，小时字段中0-23/2表示在0~23点范围内每2个小时执行一次。</span><br><span class=\"line\">&quot;,&quot;分散的数字（不一定连续），如1,2,3,4,7,9。</span><br><span class=\"line\">注：由于各个地方每周第一天不一样，因此Sunday=0（第一天）或Sunday=7（最后1天）。</span><br></pre></td></tr></table></figure>\n<p><strong>crontab命令详解</strong></p>\n<h3 id=\"2-3-配置文件\"><a href=\"#2-3-配置文件\" class=\"headerlink\" title=\"2.3 配置文件\"></a>2.3 配置文件</h3><p>​</p>\n<ul>\n<li>其一：/var/spool/cron/<br>该目录下存放的是每个用户（包括root）的crontab任务，文件名以用户名命名</li>\n<li>其二：/etc/cron.d/<br>这个目录用来存放任何要执行的crontab文件或脚本。<h2 id=\"3-服务状态\"><a href=\"#3-服务状态\" class=\"headerlink\" title=\"3.服务状态\"></a>3.服务状态</h2>​</li>\n</ul>\n<ul>\n<li>启动服务</li>\n</ul>\n<p>sudo service cron start      </p>\n<ul>\n<li>关闭服务</li>\n</ul>\n<p>sudo service cron stop      </p>\n<ul>\n<li>重启服务</li>\n</ul>\n<p> sudo service cron restart  </p>\n<ul>\n<li>重新载入配置</li>\n</ul>\n<p> sudo service cron reload </p>\n<ul>\n<li>查看服务状态</li>\n</ul>\n<p>sudo service cron status  </p>\n<h2 id=\"4-常见命令\"><a href=\"#4-常见命令\" class=\"headerlink\" title=\"4.常见命令\"></a>4.常见命令</h2><ul>\n<li>重新指定crontab定时任务列表文件</li>\n</ul>\n<p>crontab $filepath </p>\n<ul>\n<li>查看crontab定时任务</li>\n</ul>\n<p>crontab -l </p>\n<ul>\n<li>编辑定时任务【删除-添加-修改】</li>\n</ul>\n<p>crontab -e </p>\n<ul>\n<li><strong><em>添加定时任务【推荐】</em></strong><br>Step-One : 编辑任务脚本【分目录存放】【ex: backup.sh】<br>Step-Two : 编辑定时文件【命名规则:backup.cron】<br>Step-Three : crontab命令添加到系统crontab backup.cron<br>Step-Four : 查看crontab列表 crontab -l</li>\n</ul>\n<hr>\n<h2 id=\"5-crontab时间举例\"><a href=\"#5-crontab时间举例\" class=\"headerlink\" title=\"5.crontab时间举例\"></a>5.crontab时间举例</h2><h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每一分钟执行一次command（因cron默认每1分钟扫描一次，因此全为*即可）</span><br><span class=\"line\">*    *    *    *    *  command</span><br><span class=\"line\">每小时的第3和第15分钟执行command</span><br><span class=\"line\">3,15   *    *    *    *  command</span><br><span class=\"line\">每天上午8-11点的第3和15分钟执行command：</span><br><span class=\"line\">3,15  8-11  *  *  *  command</span><br><span class=\"line\">每隔2天的上午8-11点的第3和15分钟执行command：</span><br><span class=\"line\">3,15  8-11  */2  *   *  command</span><br><span class=\"line\">每个星期一的上午8点到11点的第3和第15分钟执行command</span><br><span class=\"line\">3,15  8-11   *   *  1 command</span><br><span class=\"line\">每晚的21:30重启smb</span><br><span class=\"line\">30  21   *   *  *  /etc/init.d/smb restart</span><br><span class=\"line\">每月1、10、22日的4 : 45重启smb</span><br><span class=\"line\">45  4  1,10,22  *  *  /etc/init.d/smb restart</span><br><span class=\"line\">每周六、周日的1 : 10重启smb</span><br><span class=\"line\">10  1  *  *  6,0  /etc/init.d/smb restart</span><br><span class=\"line\">每天18 : 00至23 : 00之间每隔30分钟重启smb</span><br><span class=\"line\">0,30  18-23  *  *  *  /etc/init.d/smb restart</span><br><span class=\"line\">每一小时重启smb</span><br><span class=\"line\">*  */1  *  *  *  /etc/init.d/smb restart</span><br><span class=\"line\">晚上11点到早上7点之间，每隔一小时重启smb</span><br><span class=\"line\">*  23-7/1  *   *   *  /etc/init.d/smb restart</span><br><span class=\"line\">每月的4号与每周一到周三的11点重启smb</span><br><span class=\"line\">0  11  4  *  mon-wed  /etc/init.d/smb restart</span><br><span class=\"line\">每小时执行/etc/cron.hourly目录内的脚本</span><br><span class=\"line\">0  1   *   *   *     root run-parts /etc/cron.hourly</span><br></pre></td></tr></table></figure>\n<p><strong>crontab配置实例</strong></p>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 每天早上6点 </span><br><span class=\"line\">0 6 * * * echo &quot;Good morning.&quot; &gt;&gt; /tmp/test.txt //注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了。</span><br><span class=\"line\"></span><br><span class=\"line\"># 每两个小时 </span><br><span class=\"line\">0 */2 * * * echo &quot;Have a break now.&quot; &gt;&gt; /tmp/test.txt  </span><br><span class=\"line\"></span><br><span class=\"line\"># 晚上11点到早上8点之间每两个小时和早上八点 </span><br><span class=\"line\">0 23-7/2，8 * * * echo &quot;Have a good dream&quot; &gt;&gt; /tmp/test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 </span><br><span class=\"line\">0 11 4 * 1-3 command line</span><br><span class=\"line\"></span><br><span class=\"line\"># 1月1日早上4点 </span><br><span class=\"line\">0 4 1 1 * command line SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root //如果出现错误，或者有数据输出，数据作为邮件发给这个帐号 HOME=/ </span><br><span class=\"line\"></span><br><span class=\"line\"># 每小时（第一分钟）执行/etc/cron.hourly内的脚本</span><br><span class=\"line\">01 * * * * root run-parts /etc/cron.hourly</span><br><span class=\"line\"></span><br><span class=\"line\"># 每天（凌晨4：02）执行/etc/cron.daily内的脚本</span><br><span class=\"line\">02 4 * * * root run-parts /etc/cron.daily </span><br><span class=\"line\"></span><br><span class=\"line\"># 每星期（周日凌晨4：22）执行/etc/cron.weekly内的脚本</span><br><span class=\"line\">22 4 * * 0 root run-parts /etc/cron.weekly </span><br><span class=\"line\"></span><br><span class=\"line\"># 每月（1号凌晨4：42）去执行/etc/cron.monthly内的脚本 </span><br><span class=\"line\">42 4 1 * * root run-parts /etc/cron.monthly </span><br><span class=\"line\"></span><br><span class=\"line\"># 注意:  &quot;run-parts&quot;这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是文件夹名。 　 </span><br><span class=\"line\"></span><br><span class=\"line\"># 每天的下午4点、5点、6点的5 min、15 min、25 min、35 min、45 min、55 min时执行命令。 </span><br><span class=\"line\">5，15，25，35，45，55 16，17，18 * * * command</span><br><span class=\"line\"></span><br><span class=\"line\"># 每周一，三，五的下午3：00系统进入维护状态，重新启动系统。</span><br><span class=\"line\">00 15 * *1，3，5 shutdown -r +5</span><br><span class=\"line\"></span><br><span class=\"line\"># 每小时的10分，40分执行用户目录下的innd/bbslin这个指令： </span><br><span class=\"line\">10，40 * * * * innd/bbslink </span><br><span class=\"line\"></span><br><span class=\"line\"># 每小时的1分执行用户目录下的bin/account这个指令： </span><br><span class=\"line\">1 * * * * bin/account</span><br><span class=\"line\"></span><br><span class=\"line\"># 每天早晨三点二十分执行用户目录下如下所示的两个指令（每个指令以;分隔）： </span><br><span class=\"line\">203 * * * （/bin/rm -f expire.ls logins.bad;bin/expire$#@62;expire.1st）　</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n"},{"title":"Linux日期获取","_content":"\n## 1.linux获取日期\n linux中通过date命令获取昨天或明天时间的方法.\n date命令可以获取当前的时间，通过man，可以看到date有很多参数可以用，很容易做到格式化\n```java\ndate +\"%F\"\n输出格式：2011-12-31 \n\ndate +\"%F %H:%M:%S\"\n输出格式：2011-12-31 16:29:50\n```\n这都是打印出系统的当前时间，如果要获取相对当前时间的某个时间，需要怎么做，通过 -d 参数就能实现。例如：\n​\n\n```java\ndate -d\"tomorrow\" +\"%F %H:%M:%S\"\n输出明天这个时候的时间\n\ndate -d\"yesterday\" +\"%F %H:%M:%S\"\n输出昨天这个时候的时间\n```\n如果说我想获取13天前的时间怎么办，-d参数还有更加灵活的用法，例如：\n```java\ndate -d\"-1 day ago\" +\"%F %H:%M:%S\"\n输出明天这个时候的时间\n\ndate -d\"1 day ago\" +\"%F %H:%M:%S\"\n输出昨天这个时候的时间\n\ndate -d\"1 week ago\" +\"%F %H:%M:%S\"\n输出7天前这个时候的时间，等价于\ndate -d\"7 day ago\" +\"%F %H:%M:%S\"\n```\n可以看到ago的强大了吧，第一个数字可以是负数，负数表示将来时间，正数表示前面已经过去的时间，第二个参数minute、hour、day、month、week。\n## 2.使用实例\n\n- 定时删除三天前类似\"2021_10_18_09\"文件\n\n  编写shell脚本\"clean_tcpdump.sh\"\n```java\n#!/bin/bash\ndumpfile3=`date -d\"3 day ago\" '+%Y_%m_%d'`*\necho $dumpfile3\ndumpfile3del=\"$dumpfile3*\" \nrm -rf $dumpfile3del\ndumpfile4=`date -d\"4 day ago\" '+%Y_%m_%d'`*\necho $dumpfile4\ndumpfile4del=\"$dumpfile4*\" \nrm -rf $dumpfile4del\ndumpfile5=`date -d\"5 day ago\" '+%Y_%m_%d'`*\necho $dumpfile5\ndumpfile5del=\"$dumpfile5*\" \nrm -rf $dumpfile5del\n```\n暴力一点部署特别优雅，其实可以用循环\n\n\n## 3.参考：\n[https://blog.csdn.net/qq_16885135/article/details/52063477](https://blog.csdn.net/qq_16885135/article/details/52063477)\n","source":"_posts/language/shell/Linux日期获取.md","raw":"---\ntitle: Linux日期获取\ncategories:\n- linux\n---\n\n## 1.linux获取日期\n linux中通过date命令获取昨天或明天时间的方法.\n date命令可以获取当前的时间，通过man，可以看到date有很多参数可以用，很容易做到格式化\n```java\ndate +\"%F\"\n输出格式：2011-12-31 \n\ndate +\"%F %H:%M:%S\"\n输出格式：2011-12-31 16:29:50\n```\n这都是打印出系统的当前时间，如果要获取相对当前时间的某个时间，需要怎么做，通过 -d 参数就能实现。例如：\n​\n\n```java\ndate -d\"tomorrow\" +\"%F %H:%M:%S\"\n输出明天这个时候的时间\n\ndate -d\"yesterday\" +\"%F %H:%M:%S\"\n输出昨天这个时候的时间\n```\n如果说我想获取13天前的时间怎么办，-d参数还有更加灵活的用法，例如：\n```java\ndate -d\"-1 day ago\" +\"%F %H:%M:%S\"\n输出明天这个时候的时间\n\ndate -d\"1 day ago\" +\"%F %H:%M:%S\"\n输出昨天这个时候的时间\n\ndate -d\"1 week ago\" +\"%F %H:%M:%S\"\n输出7天前这个时候的时间，等价于\ndate -d\"7 day ago\" +\"%F %H:%M:%S\"\n```\n可以看到ago的强大了吧，第一个数字可以是负数，负数表示将来时间，正数表示前面已经过去的时间，第二个参数minute、hour、day、month、week。\n## 2.使用实例\n\n- 定时删除三天前类似\"2021_10_18_09\"文件\n\n  编写shell脚本\"clean_tcpdump.sh\"\n```java\n#!/bin/bash\ndumpfile3=`date -d\"3 day ago\" '+%Y_%m_%d'`*\necho $dumpfile3\ndumpfile3del=\"$dumpfile3*\" \nrm -rf $dumpfile3del\ndumpfile4=`date -d\"4 day ago\" '+%Y_%m_%d'`*\necho $dumpfile4\ndumpfile4del=\"$dumpfile4*\" \nrm -rf $dumpfile4del\ndumpfile5=`date -d\"5 day ago\" '+%Y_%m_%d'`*\necho $dumpfile5\ndumpfile5del=\"$dumpfile5*\" \nrm -rf $dumpfile5del\n```\n暴力一点部署特别优雅，其实可以用循环\n\n\n## 3.参考：\n[https://blog.csdn.net/qq_16885135/article/details/52063477](https://blog.csdn.net/qq_16885135/article/details/52063477)\n","slug":"language/shell/Linux日期获取","published":1,"date":"2021-10-18T03:19:29.345Z","updated":"2021-10-18T03:35:26.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuw4ngey0005p7gkd31jh9me","content":"<h2 id=\"1-linux获取日期\"><a href=\"#1-linux获取日期\" class=\"headerlink\" title=\"1.linux获取日期\"></a>1.linux获取日期</h2><p> linux中通过date命令获取昨天或明天时间的方法.<br> date命令可以获取当前的时间，通过man，可以看到date有很多参数可以用，很容易做到格式化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date +<span class=\"string\">&quot;%F&quot;</span></span><br><span class=\"line\">输出格式：<span class=\"number\">2011</span>-<span class=\"number\">12</span>-<span class=\"number\">31</span> </span><br><span class=\"line\"></span><br><span class=\"line\">date +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span></span><br><span class=\"line\">输出格式：<span class=\"number\">2011</span>-<span class=\"number\">12</span>-<span class=\"number\">31</span> <span class=\"number\">16</span>:<span class=\"number\">29</span>:<span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n<p>这都是打印出系统的当前时间，如果要获取相对当前时间的某个时间，需要怎么做，通过 -d 参数就能实现。例如：<br>​</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date -d<span class=\"string\">&quot;tomorrow&quot;</span> +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span></span><br><span class=\"line\">输出明天这个时候的时间</span><br><span class=\"line\"></span><br><span class=\"line\">date -d<span class=\"string\">&quot;yesterday&quot;</span> +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span></span><br><span class=\"line\">输出昨天这个时候的时间</span><br></pre></td></tr></table></figure>\n<p>如果说我想获取13天前的时间怎么办，-d参数还有更加灵活的用法，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date -d<span class=\"string\">&quot;-1 day ago&quot;</span> +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span></span><br><span class=\"line\">输出明天这个时候的时间</span><br><span class=\"line\"></span><br><span class=\"line\">date -d<span class=\"string\">&quot;1 day ago&quot;</span> +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span></span><br><span class=\"line\">输出昨天这个时候的时间</span><br><span class=\"line\"></span><br><span class=\"line\">date -d<span class=\"string\">&quot;1 week ago&quot;</span> +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span></span><br><span class=\"line\">输出<span class=\"number\">7</span>天前这个时候的时间，等价于</span><br><span class=\"line\">date -d<span class=\"string\">&quot;7 day ago&quot;</span> +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到ago的强大了吧，第一个数字可以是负数，负数表示将来时间，正数表示前面已经过去的时间，第二个参数minute、hour、day、month、week。</p>\n<h2 id=\"2-使用实例\"><a href=\"#2-使用实例\" class=\"headerlink\" title=\"2.使用实例\"></a>2.使用实例</h2><ul>\n<li><p>定时删除三天前类似”2021_10_18_09”文件</p>\n<p>编写shell脚本”clean_tcpdump.sh”</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">dumpfile3=`date -d<span class=\"string\">&quot;3 day ago&quot;</span> <span class=\"string\">&#x27;+%Y_%m_%d&#x27;</span>`*</span><br><span class=\"line\">echo $dumpfile3</span><br><span class=\"line\">dumpfile3del=<span class=\"string\">&quot;$dumpfile3*&quot;</span> </span><br><span class=\"line\">rm -rf $dumpfile3del</span><br><span class=\"line\">dumpfile4=`date -d<span class=\"string\">&quot;4 day ago&quot;</span> <span class=\"string\">&#x27;+%Y_%m_%d&#x27;</span>`*</span><br><span class=\"line\">echo $dumpfile4</span><br><span class=\"line\">dumpfile4del=<span class=\"string\">&quot;$dumpfile4*&quot;</span> </span><br><span class=\"line\">rm -rf $dumpfile4del</span><br><span class=\"line\">dumpfile5=`date -d<span class=\"string\">&quot;5 day ago&quot;</span> <span class=\"string\">&#x27;+%Y_%m_%d&#x27;</span>`*</span><br><span class=\"line\">echo $dumpfile5</span><br><span class=\"line\">dumpfile5del=<span class=\"string\">&quot;$dumpfile5*&quot;</span> </span><br><span class=\"line\">rm -rf $dumpfile5del</span><br></pre></td></tr></table></figure>\n<p>暴力一点部署特别优雅，其实可以用循环</p>\n</li>\n</ul>\n<h2 id=\"3-参考：\"><a href=\"#3-参考：\" class=\"headerlink\" title=\"3.参考：\"></a>3.参考：</h2><p><a href=\"https://blog.csdn.net/qq_16885135/article/details/52063477\">https://blog.csdn.net/qq_16885135/article/details/52063477</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-linux获取日期\"><a href=\"#1-linux获取日期\" class=\"headerlink\" title=\"1.linux获取日期\"></a>1.linux获取日期</h2><p> linux中通过date命令获取昨天或明天时间的方法.<br> date命令可以获取当前的时间，通过man，可以看到date有很多参数可以用，很容易做到格式化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date +<span class=\"string\">&quot;%F&quot;</span></span><br><span class=\"line\">输出格式：<span class=\"number\">2011</span>-<span class=\"number\">12</span>-<span class=\"number\">31</span> </span><br><span class=\"line\"></span><br><span class=\"line\">date +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span></span><br><span class=\"line\">输出格式：<span class=\"number\">2011</span>-<span class=\"number\">12</span>-<span class=\"number\">31</span> <span class=\"number\">16</span>:<span class=\"number\">29</span>:<span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n<p>这都是打印出系统的当前时间，如果要获取相对当前时间的某个时间，需要怎么做，通过 -d 参数就能实现。例如：<br>​</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date -d<span class=\"string\">&quot;tomorrow&quot;</span> +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span></span><br><span class=\"line\">输出明天这个时候的时间</span><br><span class=\"line\"></span><br><span class=\"line\">date -d<span class=\"string\">&quot;yesterday&quot;</span> +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span></span><br><span class=\"line\">输出昨天这个时候的时间</span><br></pre></td></tr></table></figure>\n<p>如果说我想获取13天前的时间怎么办，-d参数还有更加灵活的用法，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date -d<span class=\"string\">&quot;-1 day ago&quot;</span> +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span></span><br><span class=\"line\">输出明天这个时候的时间</span><br><span class=\"line\"></span><br><span class=\"line\">date -d<span class=\"string\">&quot;1 day ago&quot;</span> +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span></span><br><span class=\"line\">输出昨天这个时候的时间</span><br><span class=\"line\"></span><br><span class=\"line\">date -d<span class=\"string\">&quot;1 week ago&quot;</span> +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span></span><br><span class=\"line\">输出<span class=\"number\">7</span>天前这个时候的时间，等价于</span><br><span class=\"line\">date -d<span class=\"string\">&quot;7 day ago&quot;</span> +<span class=\"string\">&quot;%F %H:%M:%S&quot;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到ago的强大了吧，第一个数字可以是负数，负数表示将来时间，正数表示前面已经过去的时间，第二个参数minute、hour、day、month、week。</p>\n<h2 id=\"2-使用实例\"><a href=\"#2-使用实例\" class=\"headerlink\" title=\"2.使用实例\"></a>2.使用实例</h2><ul>\n<li><p>定时删除三天前类似”2021_10_18_09”文件</p>\n<p>编写shell脚本”clean_tcpdump.sh”</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">dumpfile3=`date -d<span class=\"string\">&quot;3 day ago&quot;</span> <span class=\"string\">&#x27;+%Y_%m_%d&#x27;</span>`*</span><br><span class=\"line\">echo $dumpfile3</span><br><span class=\"line\">dumpfile3del=<span class=\"string\">&quot;$dumpfile3*&quot;</span> </span><br><span class=\"line\">rm -rf $dumpfile3del</span><br><span class=\"line\">dumpfile4=`date -d<span class=\"string\">&quot;4 day ago&quot;</span> <span class=\"string\">&#x27;+%Y_%m_%d&#x27;</span>`*</span><br><span class=\"line\">echo $dumpfile4</span><br><span class=\"line\">dumpfile4del=<span class=\"string\">&quot;$dumpfile4*&quot;</span> </span><br><span class=\"line\">rm -rf $dumpfile4del</span><br><span class=\"line\">dumpfile5=`date -d<span class=\"string\">&quot;5 day ago&quot;</span> <span class=\"string\">&#x27;+%Y_%m_%d&#x27;</span>`*</span><br><span class=\"line\">echo $dumpfile5</span><br><span class=\"line\">dumpfile5del=<span class=\"string\">&quot;$dumpfile5*&quot;</span> </span><br><span class=\"line\">rm -rf $dumpfile5del</span><br></pre></td></tr></table></figure>\n<p>暴力一点部署特别优雅，其实可以用循环</p>\n</li>\n</ul>\n<h2 id=\"3-参考：\"><a href=\"#3-参考：\" class=\"headerlink\" title=\"3.参考：\"></a>3.参考：</h2><p><a href=\"https://blog.csdn.net/qq_16885135/article/details/52063477\">https://blog.csdn.net/qq_16885135/article/details/52063477</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cktk7qyho0005u6uk7pj8eq7o","category_id":"cktk7qyhr0008u6uk94su7hep","_id":"cktk7qyhz000ju6uk0j4negps"},{"post_id":"cktk7qyhx000hu6uka8zh1hq2","category_id":"cktk7qyhw000fu6ukf9llhpss","_id":"cktk7qyi2000ou6uk1odk5k2i"},{"post_id":"cktk7qyhq0007u6uke5ud1doa","category_id":"cktk7qyhw000fu6ukf9llhpss","_id":"cktk7qyi4000su6ukawqt7p68"},{"post_id":"cktk7qyhy000iu6ukctbz1xs7","category_id":"cktk7qyhw000fu6ukf9llhpss","_id":"cktk7qyi5000vu6uk2ztp3jjo"},{"post_id":"cktk7qyi1000mu6uk5xu328vl","category_id":"cktk7qyhw000fu6ukf9llhpss","_id":"cktk7qyi6000zu6uk7uz5hsaz"},{"post_id":"cktk7qyhu000du6ukg8c08xun","category_id":"cktk7qyhw000fu6ukf9llhpss","_id":"cktk7qyi70012u6uk1bxig5vz"},{"post_id":"cktk7qyi2000nu6uk1k25783n","category_id":"cktk7qyhw000fu6ukf9llhpss","_id":"cktk7qyi80015u6uk666uh72h"},{"post_id":"cktk7qyi3000ru6uk4sja999z","category_id":"cktk7qyhw000fu6ukf9llhpss","_id":"cktk7qyi90019u6uk61wa6qhw"},{"post_id":"cktk7qyhv000eu6uk25vt1sub","category_id":"cktk7qyhw000fu6ukf9llhpss","_id":"cktk7qyia001du6uk72k367k1"},{"post_id":"cktk7qyi4000uu6ukhyhl008d","category_id":"cktk7qyhw000fu6ukf9llhpss","_id":"cktk7qyih001hu6ukhaw28tq4"},{"post_id":"cktk7qyi6000yu6uk94jg9nfh","category_id":"cktk7qyhw000fu6ukf9llhpss","_id":"cktk7qyii001ku6ukeskn4haq"},{"post_id":"cktk7qyi60011u6uk3in12cgk","category_id":"cktk7qyhw000fu6ukf9llhpss","_id":"cktk7qyij001ou6uk0096bld0"},{"post_id":"cktk7qyib001gu6uk2xc06uxn","category_id":"cktk7qyi9001au6uk30817eay","_id":"cktk7qyik001ru6ukarmi6jon"},{"post_id":"cktk7qyi70014u6uk7fzz8glx","category_id":"cktk7qyi9001au6uk30817eay","_id":"cktk7qyil001vu6uk7n1u6kaz"},{"post_id":"cktk7qyih001iu6ukbcza99lg","category_id":"cktk7qyi9001au6uk30817eay","_id":"cktk7qyil001xu6uk1rwcc2f3"},{"post_id":"cktk7qyii001nu6uk1nj07hc1","category_id":"cktk7qyi9001au6uk30817eay","_id":"cktk7qyim0022u6uk5xfngd7d"},{"post_id":"cktk7qyi80018u6ukb24m9bfp","category_id":"cktk7qyi9001au6uk30817eay","_id":"cktk7qyin0024u6ukgmj6bnmd"},{"post_id":"cktk7qyij001pu6uk4bsjho4m","category_id":"cktk7qyi9001au6uk30817eay","_id":"cktk7qyio0029u6uk8cmn83wc"},{"post_id":"cktk7qyia001cu6uk5g3tagz3","category_id":"cktk7qyi9001au6uk30817eay","_id":"cktk7qyio002bu6ukacwof54a"},{"post_id":"cktk7qyim0023u6uk1n718nti","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyip002gu6ukcluz7z0n"},{"post_id":"cktk7qyik001uu6uk3rgtf03z","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyis002iu6uk162b0sfd"},{"post_id":"cktk7qyin0027u6uk9xzvhfs3","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyit002mu6ukf6prgota"},{"post_id":"cktk7qyio002au6uk9bkhg7ot","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyiu002ou6ukd6omeb3y"},{"post_id":"cktk7qyil001wu6ukcrgw7gc3","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyiv002su6ukamhrb0q0"},{"post_id":"cktk7qyip002eu6ukbjxy4ktn","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyiw002vu6uk5nfg6t1q"},{"post_id":"cktk7qyiq002hu6uk6kim80i3","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyix002yu6uk0l58h744"},{"post_id":"cktk7qyim0021u6uk7twe7tsk","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyix0031u6ukg9e3aokk"},{"post_id":"cktk7qyit002lu6ukdl759jso","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyiy0034u6uk8j82gqsi"},{"post_id":"cktk7qyiw002xu6uk8a182ga0","category_id":"cktk7qyiv002tu6uk1fvvex5a","_id":"cktk7qyiz0038u6ukcfvg1fli"},{"post_id":"cktk7qyit002nu6ukeyie0wzz","category_id":"cktk7qyiv002tu6uk1fvvex5a","_id":"cktk7qyj0003cu6ukaewtaz40"},{"post_id":"cktk7qyix002zu6uk51sqhda6","category_id":"cktk7qyiv002tu6uk1fvvex5a","_id":"cktk7qyj1003fu6ukawek84pd"},{"post_id":"cktk7qyiy0033u6uk8l58flm3","category_id":"cktk7qyiv002tu6uk1fvvex5a","_id":"cktk7qyj2003iu6uk9dt763pb"},{"post_id":"cktk7qyiu002ru6uk5yo44fpj","category_id":"cktk7qyiv002tu6uk1fvvex5a","_id":"cktk7qyj3003ku6uk24qc0sma"},{"post_id":"cktk7qyiy0036u6uk5qzh4m9a","category_id":"cktk7qyiv002tu6uk1fvvex5a","_id":"cktk7qyj3003mu6uk9frn0g2n"},{"post_id":"cktk7qyj0003bu6uk9dms7991","category_id":"cktk7qyiv002tu6uk1fvvex5a","_id":"cktk7qyj4003qu6ukdf1o49p6"},{"post_id":"cktk7qyiv002uu6uk68dfa7by","category_id":"cktk7qyiz0037u6ukfspv79ds","_id":"cktk7qyj5003uu6uk14op2q3c"},{"post_id":"cktk7qyj0003eu6uk8feggnuu","category_id":"cktk7qyhr0008u6uk94su7hep","_id":"cktk7qyj6003xu6ukcciw74vk"},{"post_id":"cktk7qyj1003hu6uk5krvb02v","category_id":"cktk7qyhr0008u6uk94su7hep","_id":"cktk7qyj7003zu6uk9sri4rtk"},{"post_id":"cktk7qyj2003ju6uke087fnuf","category_id":"cktk7qyhr0008u6uk94su7hep","_id":"cktk7qyj80042u6ukfdjb7lw8"},{"post_id":"cktk7qyj4003pu6uk5mf64ewo","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyj90044u6uk7w9d17gv"},{"post_id":"cktk7qyj5003tu6ukgx4jh5ga","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyja0047u6ukf5uqdvov"},{"post_id":"cktk7qyj6003wu6uk010v8b6j","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyja004au6ukfgmrfvb1"},{"post_id":"cktk7qyj3003lu6uk8cwmgvx4","category_id":"cktk7qyj4003ru6ukc8ld1tla","_id":"cktk7qyjb004eu6ukcmejgjs5"},{"post_id":"cktk7qyj6003yu6uk00bp4wjg","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyjc004hu6ukh82of2ho"},{"post_id":"cktk7qyj80041u6uke4g5h53l","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyjc004ku6uk4ygia48u"},{"post_id":"cktk7qyj80043u6ukgrpd4vje","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyjd004nu6uk4rskd5vw"},{"post_id":"cktk7qyj90046u6uk2qfb0a8p","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyje004ru6uk48libmf8"},{"post_id":"cktk7qyjb004du6uk6wnj7ulx","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyjf004uu6uk906t0acr"},{"post_id":"cktk7qyjb004gu6ukanrqa2u8","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyjf004xu6ukccdw7ccg"},{"post_id":"cktk7qyjc004ju6uk58k9er5o","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyjg0050u6uk02vp1yw2"},{"post_id":"cktk7qyjd004mu6uk4m318fvc","category_id":"cktk7qyim001zu6uk5xerdc6o","_id":"cktk7qyjh0052u6ukaevi0jdm"},{"post_id":"ckuw4nge30000p7gkc7u6giq7","category_id":"cktk7qyi9001au6uk30817eay","_id":"ckuw4ngey0006p7gk9e1t6iwg"},{"post_id":"ckuw4ngeg0001p7gk43s32otd","category_id":"cktk7qyi9001au6uk30817eay","_id":"ckuw4ngez0007p7gk59kia7vx"},{"post_id":"ckuw4ngew0003p7gkeeq51wqg","category_id":"cktk7qyiv002tu6uk1fvvex5a","_id":"ckuw4ngez0009p7gkd4a3d6xn"},{"post_id":"ckuw4ngey0005p7gkd31jh9me","category_id":"cktk7qyiv002tu6uk1fvvex5a","_id":"ckuw4ngez000ap7gkhw9mbxnj"}],"PostTag":[{"post_id":"cktk7qyho0005u6uk7pj8eq7o","tag_id":"cktk7qyhs0009u6uk9svc5nk9","_id":"cktk7qyi4000tu6uk9tyh5dbf"},{"post_id":"cktk7qyho0005u6uk7pj8eq7o","tag_id":"cktk7qyhw000gu6uk5xmk53zp","_id":"cktk7qyi5000wu6uk5tiv4722"},{"post_id":"cktk7qyho0005u6uk7pj8eq7o","tag_id":"cktk7qyhz000lu6ukbc4ggml6","_id":"cktk7qyi60010u6uk2ta329zy"},{"post_id":"cktk7qyhq0007u6uke5ud1doa","tag_id":"cktk7qyi3000qu6uk7honamrv","_id":"cktk7qyi70013u6uk5l714qc5"},{"post_id":"cktk7qyi60011u6uk3in12cgk","tag_id":"cktk7qyi5000xu6ukbbr2efad","_id":"cktk7qyi80017u6ukfrcs101q"},{"post_id":"cktk7qyhu000du6ukg8c08xun","tag_id":"cktk7qyi5000xu6ukbbr2efad","_id":"cktk7qyi9001bu6uk6r5ndm4j"},{"post_id":"cktk7qyhv000eu6uk25vt1sub","tag_id":"cktk7qyi5000xu6ukbbr2efad","_id":"cktk7qyia001fu6uk9l8a42qt"},{"post_id":"cktk7qyhx000hu6uka8zh1hq2","tag_id":"cktk7qyi5000xu6ukbbr2efad","_id":"cktk7qyii001mu6uk8o8tegeg"},{"post_id":"cktk7qyhy000iu6ukctbz1xs7","tag_id":"cktk7qyi5000xu6ukbbr2efad","_id":"cktk7qyik001tu6ukf2xk7oon"},{"post_id":"cktk7qyi1000mu6uk5xu328vl","tag_id":"cktk7qyi5000xu6ukbbr2efad","_id":"cktk7qyim0020u6uk4kxfdwqo"},{"post_id":"cktk7qyi2000nu6uk1k25783n","tag_id":"cktk7qyi5000xu6ukbbr2efad","_id":"cktk7qyin0026u6uk96dc9cqt"},{"post_id":"cktk7qyi3000ru6uk4sja999z","tag_id":"cktk7qyi5000xu6ukbbr2efad","_id":"cktk7qyip002du6uk507qcpfs"},{"post_id":"cktk7qyi4000uu6ukhyhl008d","tag_id":"cktk7qyi5000xu6ukbbr2efad","_id":"cktk7qyit002ku6ukat144k2j"},{"post_id":"cktk7qyi6000yu6uk94jg9nfh","tag_id":"cktk7qyi5000xu6ukbbr2efad","_id":"cktk7qyiu002qu6ukd8beaygc"},{"post_id":"cktk7qyi70014u6uk7fzz8glx","tag_id":"cktk7qyiu002pu6uke3fmd6uc","_id":"cktk7qyiy0035u6uk41rlannv"},{"post_id":"cktk7qyi70014u6uk7fzz8glx","tag_id":"cktk7qyiw002wu6ukgw3c01zr","_id":"cktk7qyiz0039u6uk805ydhib"},{"post_id":"cktk7qyi80018u6ukb24m9bfp","tag_id":"cktk7qyix0032u6uka92z4thy","_id":"cktk7qyj0003du6uk9i4hdgce"},{"post_id":"cktk7qyia001cu6uk5g3tagz3","tag_id":"cktk7qyiu002pu6uke3fmd6uc","_id":"cktk7qyj4003ou6uk7mpcbupm"},{"post_id":"cktk7qyia001cu6uk5g3tagz3","tag_id":"cktk7qyj1003gu6ukfslt1zio","_id":"cktk7qyj5003su6uk7vqrb7e0"},{"post_id":"cktk7qyib001gu6uk2xc06uxn","tag_id":"cktk7qyiu002pu6uke3fmd6uc","_id":"cktk7qyja0048u6ukc27l8p44"},{"post_id":"cktk7qyib001gu6uk2xc06uxn","tag_id":"cktk7qyj5003vu6ukaesh0osg","_id":"cktk7qyjb004bu6uk6n285gm6"},{"post_id":"cktk7qyib001gu6uk2xc06uxn","tag_id":"cktk7qyj70040u6ukff0wcsfa","_id":"cktk7qyjb004fu6uk75yg6152"},{"post_id":"cktk7qyih001iu6ukbcza99lg","tag_id":"cktk7qyiu002pu6uke3fmd6uc","_id":"cktk7qyjd004lu6uk9tzx4982"},{"post_id":"cktk7qyih001iu6ukbcza99lg","tag_id":"cktk7qyjb004cu6uk55dr7oz4","_id":"cktk7qyjd004ou6uk3mhj4jvf"},{"post_id":"cktk7qyii001nu6uk1nj07hc1","tag_id":"cktk7qyiu002pu6uke3fmd6uc","_id":"cktk7qyje004su6ukhdzwe44q"},{"post_id":"cktk7qyij001pu6uk4bsjho4m","tag_id":"cktk7qyiu002pu6uke3fmd6uc","_id":"cktk7qyjg004yu6uk4sj6gnp3"},{"post_id":"cktk7qyik001uu6uk3rgtf03z","tag_id":"cktk7qyjf004vu6uk9il16rsc","_id":"cktk7qyjh0054u6uk3qjs8g4w"},{"post_id":"cktk7qyil001wu6ukcrgw7gc3","tag_id":"cktk7qyjf004vu6uk9il16rsc","_id":"cktk7qyji0057u6uk93ambg0i"},{"post_id":"cktk7qyim0021u6uk7twe7tsk","tag_id":"cktk7qyjf004vu6uk9il16rsc","_id":"cktk7qyji0059u6uk0mnf1kym"},{"post_id":"cktk7qyim0023u6uk1n718nti","tag_id":"cktk7qyjf004vu6uk9il16rsc","_id":"cktk7qyji005bu6uk52qn6fmu"},{"post_id":"cktk7qyin0027u6uk9xzvhfs3","tag_id":"cktk7qyjf004vu6uk9il16rsc","_id":"cktk7qyji005du6uk4thk7hh0"},{"post_id":"cktk7qyio002au6uk9bkhg7ot","tag_id":"cktk7qyjf004vu6uk9il16rsc","_id":"cktk7qyjj005fu6ukgv7c7tc9"},{"post_id":"cktk7qyip002eu6ukbjxy4ktn","tag_id":"cktk7qyjf004vu6uk9il16rsc","_id":"cktk7qyjj005hu6ukdqkjfyjw"},{"post_id":"cktk7qyiq002hu6uk6kim80i3","tag_id":"cktk7qyjf004vu6uk9il16rsc","_id":"cktk7qyjj005ju6ukh6p32w65"},{"post_id":"cktk7qyit002lu6ukdl759jso","tag_id":"cktk7qyjf004vu6uk9il16rsc","_id":"cktk7qyjk005lu6uk9z5mdg9p"},{"post_id":"cktk7qyj0003eu6uk8feggnuu","tag_id":"cktk7qyjj005ku6uk9qyzaz2v","_id":"cktk7qyjk005nu6ukgtp7gbn4"},{"post_id":"cktk7qyj0003eu6uk8feggnuu","tag_id":"cktk7qyhs0009u6uk9svc5nk9","_id":"cktk7qyjk005ou6uk2ah4a9fi"},{"post_id":"cktk7qyj1003hu6uk5krvb02v","tag_id":"cktk7qyjj005ku6uk9qyzaz2v","_id":"cktk7qyjl005qu6ukcil3gmwz"},{"post_id":"cktk7qyj1003hu6uk5krvb02v","tag_id":"cktk7qyhs0009u6uk9svc5nk9","_id":"cktk7qyjl005ru6ukhemt8p2i"},{"post_id":"cktk7qyj2003ju6uke087fnuf","tag_id":"cktk7qyhs0009u6uk9svc5nk9","_id":"cktk7qyjm005tu6uk55x3ciks"},{"post_id":"cktk7qyj2003ju6uke087fnuf","tag_id":"cktk7qyjk005pu6ukeiqeaga8","_id":"cktk7qyjm005uu6ukda0e3opb"},{"post_id":"cktk7qyj3003lu6uk8cwmgvx4","tag_id":"cktk7qyjl005su6ukesu084ck","_id":"cktk7qyjm005wu6ukdwgg7o6p"},{"post_id":"cktk7qyj4003pu6uk5mf64ewo","tag_id":"cktk7qyjm005vu6ukftfo9yro","_id":"cktk7qyjm005yu6uk3wb5bx2l"},{"post_id":"cktk7qyj5003tu6ukgx4jh5ga","tag_id":"cktk7qyjm005xu6uk6oam7yei","_id":"cktk7qyjn0061u6ukdyd74siz"},{"post_id":"cktk7qyj5003tu6ukgx4jh5ga","tag_id":"cktk7qyjm005zu6uk081o7rjt","_id":"cktk7qyjn0062u6uk3hvheamg"},{"post_id":"cktk7qyj6003wu6uk010v8b6j","tag_id":"cktk7qyjm0060u6ukbq3v58ev","_id":"cktk7qyjn0064u6uk9kxlhsfh"},{"post_id":"cktk7qyj80041u6uke4g5h53l","tag_id":"cktk7qyjm005zu6uk081o7rjt","_id":"cktk7qyjn0066u6uk9lns0f7c"},{"post_id":"cktk7qyj80043u6ukgrpd4vje","tag_id":"cktk7qyjm005zu6uk081o7rjt","_id":"cktk7qyjo0068u6ukchfj7i18"},{"post_id":"cktk7qyj90046u6uk2qfb0a8p","tag_id":"cktk7qyjm005zu6uk081o7rjt","_id":"cktk7qyjp006au6ukgnpnf4s2"},{"post_id":"cktk7qyjb004du6uk6wnj7ulx","tag_id":"cktk7qyjo0069u6uk2bgl30qq","_id":"cktk7qyjp006cu6uke95p0p67"},{"post_id":"cktk7qyjb004gu6ukanrqa2u8","tag_id":"cktk7qyjo0069u6uk2bgl30qq","_id":"cktk7qyjp006eu6ukfud5dmsp"},{"post_id":"cktk7qyjc004ju6uk58k9er5o","tag_id":"cktk7qyjo0069u6uk2bgl30qq","_id":"cktk7qyjp006gu6uk8llkc44b"},{"post_id":"cktk7qyjd004mu6uk4m318fvc","tag_id":"cktk7qyjo0069u6uk2bgl30qq","_id":"cktk7qyjq006hu6ukdca8efep"},{"post_id":"ckuw4ngeg0001p7gk43s32otd","tag_id":"cktk7qyiu002pu6uke3fmd6uc","_id":"ckuw4ngey0004p7gkajgc9dkd"},{"post_id":"ckuw4nge30000p7gkc7u6giq7","tag_id":"ckuw4ngej0002p7gkhcf57e8s","_id":"ckuw4ngez0008p7gkb16nbz4j"}],"Tag":[{"name":"5G","_id":"cktk7qyhs0009u6uk9svc5nk9"},{"name":"MEC","_id":"cktk7qyhw000gu6uk5xmk53zp"},{"name":"网络切片","_id":"cktk7qyhz000lu6ukbc4ggml6"},{"name":"ai","_id":"cktk7qyi3000qu6uk7honamrv"},{"name":"sort","_id":"cktk7qyi5000xu6ukbbr2efad"},{"name":"docker","_id":"cktk7qyiu002pu6uke3fmd6uc"},{"name":"ftp","_id":"cktk7qyiw002wu6ukgw3c01zr"},{"name":"jenkins","_id":"cktk7qyix0032u6uka92z4thy"},{"name":"nexus","_id":"cktk7qyj1003gu6ukfslt1zio"},{"name":"grafana","_id":"cktk7qyj5003vu6ukaesh0osg"},{"name":"prometheus","_id":"cktk7qyj70040u6ukff0wcsfa"},{"name":"java","_id":"cktk7qyjb004cu6uk55dr7oz4"},{"name":"JVM","_id":"cktk7qyjf004vu6uk9il16rsc"},{"name":"DPDK","_id":"cktk7qyjj005ku6uk9qyzaz2v"},{"name":"NGAP","_id":"cktk7qyjk005pu6ukeiqeaga8"},{"name":"cmpp","_id":"cktk7qyjl005su6ukesu084ck"},{"name":"design","_id":"cktk7qyjm005vu6ukftfo9yro"},{"name":"AOP","_id":"cktk7qyjm005xu6uk6oam7yei"},{"name":"字节码","_id":"cktk7qyjm005zu6uk081o7rjt"},{"name":"动态调试技术","_id":"cktk7qyjm0060u6ukbq3v58ev"},{"name":"atomic","_id":"cktk7qyjo0069u6uk2bgl30qq"},{"name":"brew","_id":"ckuw4ngej0002p7gkhcf57e8s"}]}}